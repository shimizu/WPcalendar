<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.1.1" created="2015-03-26 10:38" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>GUNMA GIS GEEK</title>
	<link>http://shimz.me/blog</link>
	<description>群馬県の片隅でオープンデータとデータビジュアライゼーションとGIS(地理情報システム)に戯れるエンジニアのブログ。</description>
	<pubDate>Thu, 26 Mar 2015 10:38:48 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://shimz.me/blog</wp:base_site_url>
	<wp:base_blog_url>http://shimz.me/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>blogadmin</wp:author_login><wp:author_email>xxshimizuxx@gmil.com</wp:author_email><wp:author_display_name><![CDATA[shimizu]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.1.1</generator>

	<item>
		<title>さらにpaper.jsを勉強中</title>
		<link>http://shimz.me/blog/paper-js/10</link>
		<pubDate>Fri, 02 Sep 2011 06:44:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[ちょっとだけ、チュートリアルっぽく、機能ごとのスニペット。
多少、理解できてきたかも。



・クリックイベントの取得
<script type="text/javascript" src="http://jsdo.it/blogparts/sD17/js?view=design"></script>

<a title="Paper.js クリックイベント" href="http://jsdo.it/_shimizu/sD17">Paper.js クリックイベント - jsdo.it - share JavaScript, HTML5 and CSS</a>

・ファイルのドラッグ＆ドロップ
<script type="text/javascript" src="http://jsdo.it/blogparts/6ypl/js?view=design"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="paper.js　File drag &amp; drop " href="http://jsdo.it/_shimizu/6ypl">paper.js　File drag &amp; drop - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
・シンボル
<script type="text/javascript" src="http://jsdo.it/blogparts/yEtd/js?view=design"></script>

<a title="Paper.js Symbol" href="http://jsdo.it/_shimizu/yEtd">Paper.js Symbol - jsdo.it - share JavaScript, HTML5 and CSS</a>

・シンボルのドラッグ＆ドロップ
<script type="text/javascript" src="http://jsdo.it/blogparts/62ja/js?view=design"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="paper.js drag &amp; drop " href="http://jsdo.it/_shimizu/62ja">paper.js drag &amp; drop - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
・HitResult
<script type="text/javascript" src="http://jsdo.it/blogparts/eucb/js?view=design"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="Paper.js HitResult" href="http://jsdo.it/_shimizu/eucb">Paper.js HitResult - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2011-09-02 15:44:00</wp:post_date>
		<wp:post_date_gmt>2011-09-02 06:44:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/09/paperjs.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%81%95%e3%82%89%e3%81%abpaper-js%e3%82%92%e5%8b%89%e5%bc%b7%e4%b8%ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426767029;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:15;}i:1;a:1:{s:2:"id";i:14;}i:2;a:1:{s:2:"id";i:628;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>引き続き、Paper.jsを勉強中</title>
		<link>http://shimz.me/blog/paper-js/12</link>
		<pubDate>Wed, 20 Jul 2011 11:53:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[多少、使い方が分かってきたので、楽しくなってきました。

もう少し勉強したら、チュートリアル的なものを書きたいな。



<script type="text/javascript" src="http://jsdo.it/blogparts/fLSG/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/fLSG" title=" Paper.js 渦巻き"> Paper.js 渦巻き - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

<script type="text/javascript" src="http://jsdo.it/blogparts/pCuM/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/pCuM" title="Paper.js モナリザ">Paper.js モナリザ - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2011-07-20 20:53:00</wp:post_date>
		<wp:post_date_gmt>2011-07-20 11:53:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-12</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/paperjs_20.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e5%bc%95%e3%81%8d%e7%b6%9a%e3%81%8d%e3%80%81paper-js%e3%82%92%e5%8b%89%e5%bc%b7%e4%b8%ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426054939;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:862;}i:1;a:1:{s:2:"id";i:500;}i:2;a:1:{s:2:"id";i:488;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>フォトウォールが簡単につくれるプラグイン</title>
		<link>http://shimz.me/blog/javascript/14</link>
		<pubDate>Wed, 13 Jul 2011 09:53:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bit.ly/poOnTo">The Wall - A Javascript plugin for Mootools</a>

面白そうなライブラリを見つけたので、テストしてみました。



<script type="text/javascript" src="http://jsdo.it/blogparts/7nrP/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/7nrP" title="wall.jsテスト">wall.jsテスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2011-07-13 18:53:00</wp:post_date>
		<wp:post_date_gmt>2011-07-13 09:53:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-14</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/blog-post.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%95%e3%82%a9%e3%83%88%e3%82%a6%e3%82%a9%e3%83%bc%e3%83%ab%e3%81%8c%e7%b0%a1%e5%8d%98%e3%81%ab%e3%81%a4%e3%81%8f%e3%82%8c%e3%82%8b%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426747919;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:15;}i:1;a:1:{s:2:"id";i:500;}i:2;a:1:{s:2:"id";i:488;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paper.js.勉強中</title>
		<link>http://shimz.me/blog/paper-js/15</link>
		<pubDate>Fri, 08 Jul 2011 05:43:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://paperjs.org/">paper.js</a><br /><br />とりあえず、チュートリアルの写経から初めてます。<br /><br /><a name="more"></a>



<br /><script type="text/javascript" src="http://jsdo.it/blogparts/2I5p/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/2I5p" title="Paper.jsテスト">Paper.jsテスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p><br /><script type="text/javascript" src="http://jsdo.it/blogparts/sD17/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/sD17" title="Paper.jsテスト２">Paper.jsテスト２ - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2011-07-08 14:43:00</wp:post_date>
		<wp:post_date_gmt>2011-07-08 05:43:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/paperjs.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[paper-js-%e5%8b%89%e5%bc%b7%e4%b8%ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426287164;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:14;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:527;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JQuery Moble で Google Map を使うとサイズ指定がちょっとメンドクサイ。</title>
		<link>http://shimz.me/blog/jquery/16</link>
		<pubDate>Thu, 07 Jul 2011 02:57:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[※追記
<a href="http://bit.ly/qKWmFC">jQuery MobileでGoogleMap APIを使ったサンプルがMITライセンスで公開されてた</a>
……もっと、早く知っていればこんな苦労は orz

<hr />

jQuery Moble のページ内でGoogle Mapを使おうとしたのですが、map_canvas をwidth:100%; height:100%"で指定すると上手く表示されませんでした。 orz

とりあえず、サイト読み込み(onload)時に初期化すると、上手く表示されないようなので、mapページが表示されたタイミングで、ウインドサイズを元にmap_canvasのサイズを指定して初期化したら上手くいきました。

ちょっと、メンドクサイ。

<!--more-->


<script type="text/javascript" src="http://jsdo.it/blogparts/fRDB/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/fRDB" title="JQuery Mobile + Gmap テスト">JQuery Mobile + Gmap テスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2011-07-07 11:57:00</wp:post_date>
		<wp:post_date_gmt>2011-07-07 02:57:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-16</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/jquery-moble-google-map.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[jquery-moble-%e3%81%a7-google-map-%e3%82%92%e4%bd%bf%e3%81%86%e3%81%a8%e3%82%b5%e3%82%a4%e3%82%ba%e6%8c%87%e5%ae%9a%e3%81%8c%e3%81%a1%e3%82%87%e3%81%a3%e3%81%a8%e3%83%a1%e3%83%b3%e3%83%89%e3%82%af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427379525;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4063;}i:1;a:1:{s:2:"id";i:2942;}i:2;a:1:{s:2:"id";i:3622;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ひきつづき、Rhino。</title>
		<link>http://shimz.me/blog/rhino/17</link>
		<pubDate>Wed, 08 Jun 2011 05:01:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[昨日のスクリーンキャプチャのスクリプトに、なるべく手を抜きつつGUIをつけてみました。

 
<pre class="lang:js decode:true " >importPackage(javax.swing);
importClass(java.io.File);
importClass(javax.imageio.ImageIO);
importClass(java.awt.Rectangle);
importClass(java.awt.Robot);

var frame = new JFrame(&quot;スクリーンキャプチャ取得&quot;);
frame.setSize(300,300);
frame.addWindowListener(function(e, methodName) {    print(&quot;Window methodName:&quot;+methodName);
    if (methodName == &quot;windowClosing&quot;) {        quit();    }});

var button = new JButton(&quot;クリックしてください&quot;);
button.addActionListener(function(e, methodName){    print(&quot;button method&quot;+e);    getScreenCapture();});
frame.add(button);

var chooser = new JFileChooser();
var filter = new  javax.swing.filechooser.FileNameExtensionFilter(&quot;JPEGファイル(*.jpg)&quot;, &quot;jpg&quot;, &quot;jpeg&quot;);
chooser.addChoosableFileFilter(filter);

frame.setVisible(true);

function getScreenCapture(){    
    var robot = new Robot();
    var img = robot.createScreenCapture(new Rectangle(java.awt.Toolkit.getDefaultToolkit().getScreenSize()));
    var result = chooser.showSaveDialog(frame);
    var filename = chooser.getSelectedFile();
    if(result == JFileChooser.APPROVE_OPTION){
        try{
            ImageIO.write(img, &quot;jpg&quot;, (new File(filename)));
        } catch(e) {}
    }}</pre> 


実行結果。
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-ZynQTs_iDJE/Te8Baa66QDI/AAAAAAAAAxI/sTaB7fk3A4A/s1600/sc1.jpg"><img src="http://1.bp.blogspot.com/-ZynQTs_iDJE/Te8Baa66QDI/AAAAAAAAAxI/sTaB7fk3A4A/s320/sc1.jpg" alt="" width="300" height="300" border="0" /></a></div>
<div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-gOY83hQ0k5Y/Te8BtHnImTI/AAAAAAAAAxQ/5TCD6UPqUHc/s1600/sc2.jpg"><img src="http://2.bp.blogspot.com/-gOY83hQ0k5Y/Te8BtHnImTI/AAAAAAAAAxQ/5TCD6UPqUHc/s320/sc2.jpg" alt="" width="320" height="246" border="0" /></a></div>
さくっと書けるので、ちょっとした小物アプリを作りたいときは便利ですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2011-06-08 14:01:00</wp:post_date>
		<wp:post_date_gmt>2011-06-08 05:01:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-17</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="rhino"><![CDATA[Rhino]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/06/rhino_08.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%81%b2%e3%81%8d%e3%81%a4%e3%81%a5%e3%81%8d%e3%80%81rhino%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427173984;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3521;}i:1;a:1:{s:2:"id";i:18;}i:2;a:1:{s:2:"id";i:3696;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rhinoを試してみました</title>
		<link>http://shimz.me/blog/rhino/18</link>
		<pubDate>Tue, 07 Jun 2011 13:19:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[ちょっとしたスクリプトを書くときに、できるだけいろんな環境で使い回しができると便利だなと思いRhinoを試してみました。
まぁ、GroovyとかJythonとかJRubyとかいろいろ他にもあるんですがRhinoを選んだのは単にJavaScriptが好きだからです。

<a href="https://developer.mozilla.org/ja/Rhino">Rhino公式</a>

<a name="more"></a>■各環境に開発環境をインストール
javaランタイムはインストール済みを前提

・windows
<a href="http://builder.japan.zdnet.com/java/sp_scripting-on-java-kickstart/20366909/">詳しい記事</a>があるのでそちらを参照

・Mac
MacPortから簡単にインストールできます。
 
<pre class="lang:sh decode:true " >$ port install rhino</pre> 

・Linux(CentOS)
yumで
 
<pre class="lang:sh decode:true " >$ yum install rhino</pre> 

これでRhinoが使えるようになったので、とりあえず下記サイトを参考にスクリーンショットを取るスクリプトを書いてみます。

<a href="http://www.ne.jp/asahi/hishidama/home/tech/java/image.html">Java画像メモ</a>
<pre class="lang:js decode:true " >importClass(java.io.File);
importClass(javax.imageio.ImageIO);
importClass(java.awt.Rectangle);
importClass(java.awt.Robot);


var robot = new Robot();
var img = robot.createScreenCapture(new Rectangle(java.awt.Toolkit.getDefaultToolkit().getScreenSize()));
ImageIO.write(img, &quot;jpg&quot;, (new File(&quot;test.jpg&quot;)));</pre> 


上記をtest.jsとして保存。
 
<pre class="lang:sh decode:true " >$ rhino test.js</pre> 


実行。カレントディレクトリにスクリーンショットが保存されます。

javaのライブラリを簡単に扱えて便利ですね。

java.awt.Robotクラスを使えば、マウスやキーボードの操作もできるので、自動化スクリプトを書くにも使えそうです。
swingを使って、ちょっとしたGUIアプリなんかも作れます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2011-06-07 22:19:00</wp:post_date>
		<wp:post_date_gmt>2011-06-07 13:19:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-18</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="rhino"><![CDATA[Rhino]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/06/rhino.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[rhino%e3%82%92%e8%a9%a6%e3%81%97%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427350072;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:723;}i:1;a:1:{s:2:"id";i:4025;}i:2;a:1:{s:2:"id";i:3726;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.ioでスクレイピング</title>
		<link>http://shimz.me/blog/node-js/19</link>
		<pubDate>Tue, 19 Apr 2011 14:51:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[参考
<a href="http://shimz.me/blog/?p=1948">node.jsでスクレイピング（cheerio版）</a>
↑こちらの方が簡単かも
<hr>
Scraping the web with Node.io
<a href="http://www.coderholic.com/scraping-the-web-with-node-io/">http://www.coderholic.com/scraping-the-web-with-node-io/</a>

上記、ブログ記事を読んで興味深かったのでnode.ioをちょっと使ってみました。公式のドキュメントは以下。

node.io
<a href="https://github.com/chriso/node.io/wiki">https://github.com/chriso/node.io/wiki</a>


インストールはnpmで。
 
<pre class="lang:sh decode:true " >$ npm install node.io</pre> 

とりあえず、試しに"はてブ"から「いま話題」キーワードリンクを取得してみる。
 
<pre class="lang:js decode:true " title="hatena.js">    var nodeio = require('node.io');
    exports.job = new nodeio.Job({
        input:false,
        run:function(){
            var self = this, url = &quot;http://b.hatena.ne.jp/hotentry&quot;;
            this.getHtml(url, function(err, $){
                if(err){
                    self.exit(err);
                }else{
                    $('.top_keyword a').each(function(a){
                        self.emit(a.text);
                    });               
                }
            })
        }
    })</pre> 


上記コードを、hatena.jsとして保存。実行してみる。
<pre class="lang:sh decode:true " >$ node.io hatena.js</pre> 

getHtmlの戻り値がdomエレメントなので、jQueryのセレクタに似た感じでデータを取り出せるのが便利。

うまく行ったので、もうすこしスクレイピングっぽいことを。
下記ページから、放射線量を取得してpostgresqlにインサートするスクリプトを書いてみる
node.js+postgresqlについては<a href="http://rm-rforz.blogspot.com/2011/04/nodejs-postgresql.html">こちら</a>

群馬県：原子力発電所事故に係る本県での放射線量等について
<a href="http://www.pref.gunma.jp/05/e0900020.html">http://www.pref.gunma.jp/05/e0900020.html</a>
以下テスト用テーブルの内容
・めんどくさいのでtest_db、gunma_tbは先に作ってる
・測定者、測定地点、測定日時、測定値を取得
・gunma_tbのカラムは　ID,GAUGER, SPOT, DATE, VALUE
・先のページが測定値を全角数字で書いてやがるので、カラムの型は、IDがシリアルなのを除いてすべてテキスト
 
<pre class="lang:js decode:true " >
    var GAUGER_CELL=5,SPOT_CELL=6,DATE_CELL=7,VALUE_CELL=8
    var nodeio = require('node.io');
    exports.job = new nodeio.Job({
        input:false,
        run:function(){
            var output = [];
            var self = this, url = &quot;http://www.pref.gunma.jp/05/e0900020.html&quot;;
            this.getHtml(url, function(err, $){
                if(err){
                    self.exit(err);
                }else{
                    output = [
                        $('td')[GAUGER_CELL].children[0].raw,
                        $('td')[SPOT_CELL].children[0].raw,
                        $('td')[DATE_CELL].children[0].raw,
                        $('td')[VALUE_CELL].children[0].raw
                    ]
                    var pg = require('pg'); 
                    var conString = &quot;tcp://＜アカウント＞:＜パスワード＞@localhost/test_db&quot;;
                    var client = new pg.Client(conString);
                    client.connect();
                    client.query(&quot;INSERT INTO gunma_tb(GAUGER, SPOT, DATE, VALUE) values($1, $2, $3, $4)&quot;, output,function(err,result){
                        client.end();
                    });                 
                }
            })
        }
    })</pre> 


node.ioはスクレイピング以外にも、標準入出力やファイルの読み書きなどが簡単に扱えるので、ちょっとしたコマンドラインアプリをnode.jsで書くのに便利そう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2011-04-19 23:51:00</wp:post_date>
		<wp:post_date_gmt>2011-04-19 14:51:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-19</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/04/nodeio.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-io%e3%81%a7%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427306178;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1948;}i:1;a:1:{s:2:"id";i:20;}i:2;a:1:{s:2:"id";i:2690;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js + postgresql</title>
		<link>http://shimz.me/blog/node-js/20</link>
		<pubDate>Tue, 19 Apr 2011 14:51:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[node.jsでDBにpostgresqlを使ってみる。

node-postgresなんて便利なライブラリがあるのでとても簡単。

node-postgres
<a href="https://github.com/brianc/node-postgres#readme">https://github.com/brianc/node-postgres#readme</a>

インストールはnpmで。
 
<pre class="lang:sh decode:true " >$ npm install pg</pre> 

ウチの環境では「pg_configが無いよ！」と怒られたので、yumでpostgresql-develを入れ、再度上記コマンドを実行したら問題なくインストールされました。

とりあえず公式ドキュメントにあったサンプルを実行
 
<pre class="lang:js decode:true " >var pg = require('pg');
//or native libpq bindings
//var pg = require('pg').native

var conString = 'tcp://＜アカウント＞:＜パスワード＞@localhost/postgres';


var client = new pg.Client(conString);
client.connect(function(err) {
  if(err) {
    return console.error('could not connect to postgres', err);
  }
  client.query('SELECT NOW() AS &quot;theTime&quot;', function(err, result) {
    if(err) {
      return console.error('error running query', err);
    }
    console.log(result.rows[0].theTime);
    //output: Tue Jan 15 2013 19:12:47 GMT-600 (CST)
    client.end();
  });
});</pre> 

特に問題なくすんなり実行できました。

SQLの直書きなんて嫌だぁ！って人はFastLegSというORMがあるのでそちらを使ってみてはいかがでしょう。

FastLegS
<a href="https://github.com/didit-tech/FastLegS#readme">https://github.com/didit-tech/FastLegS#readme</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2011-04-19 23:51:00</wp:post_date>
		<wp:post_date_gmt>2011-04-19 14:51:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-postgresql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/04/nodejs-postgresql.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427400716;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:19;}i:1;a:1:{s:2:"id";i:2601;}i:2;a:1:{s:2:"id";i:2690;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[InDesign]javascriptで「ページ番号の割り当て」を変更</title>
		<link>http://shimz.me/blog/javascript/21</link>
		<pubDate>Fri, 14 Jan 2011 16:48:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[忘れないようにメモ。

アクティブドキュメントの「ページ」→「ページ番号とセクションの設定」→「ページ番号割り当てを開始」項目をスクリプトで変更したくて、下記のように記述したのだけれど上手くいかず、困惑。
 
<pre class="lang:js decode:true " >app.activeDocument.sections[0].pageNumberStart = 1;</pre> 

で、調べてみた結果、どうやら「自動ページ番号」をfalseにしないと割り当ての値を変更できないらしいと知り、下記の方法を試したところ上手くいきました。
 
<pre class="lang:js decode:true " >app.activeDocument.sections[0].continueNumbering = false;
app.activeDocument.sections[0].pageNumberStart = 1;
</pre> 

気付くのにえらく時間がかかった orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2011-01-14 16:48:00</wp:post_date>
		<wp:post_date_gmt>2011-01-14 16:48:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-21</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="indesign"><![CDATA[InDesign]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/01/indesignjavascript.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[indesignjavascript%e3%81%a7%e3%80%8c%e3%83%9a%e3%83%bc%e3%82%b8%e7%95%aa%e5%8f%b7%e3%81%ae%e5%89%b2%e3%82%8a%e5%bd%93%e3%81%a6%e3%80%8d%e3%82%92%e5%a4%89%e6%9b%b4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395587;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3820;}i:1;a:1:{s:2:"id";i:16;}i:2;a:1:{s:2:"id";i:3864;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascriptのソートメッソド覚書</title>
		<link>http://shimz.me/blog/javascript/22</link>
		<pubDate>Thu, 16 Dec 2010 09:45:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>■基本</strong>

<strong>通常</strong>
<pre class="lang:js decode:true " >var hoge = [1,3,21,10,100,2,11];
hoge.sort();</pre> 

<strong>値を数値としてソート</strong>
<pre class="lang:js decode:true " >hoge.sort(function(a,b){return a - b});</pre> 

<strong>降順</strong>
 
<pre class="lang:js decode:true " >hoge.sort(function(a,b){return a &lt; b});

//reverse()と同じ。
hoge.reverse();
</pre> 

&nbsp;

&nbsp;

<strong>値を加工しながらソート</strong>
<pre class="lang:js decode:true " >var hogeImgs = [&quot;1.jpg&quot;,&quot;21.gif&quot;,&quot;3.jpg&quot;,&quot;154.png&quot;,&quot;1111.jpg&quot;,&quot;316.bmp&quot;,&quot;1113.gif&quot;];

//拡張子を除き数値としてソート
hogeImgs.sort(function(a,b){
  return a.split(&quot;.&quot;)[0] - b.split(&quot;.&quot;)[0]
});</pre> 

&nbsp;

<strong>■２次元配列のソート</strong>
<pre class="lang:js decode:true " >var hoge2d = [
[1, 3, 21, 10, 100, 2, 11],
[5,1,11,10,100,31,15],
[100,0,5,23,30,11],
[1,2,3]
]

//３列目の値を対象としてソート
hoge2d.sort(function(a,b){return a[3] - b[3]});
</pre> 

&nbsp;

<strong>■連想配列（ハッシュ）を含む配列のソート</strong>
<pre class="lang:js decode:true " >hogeHash = [
{group:1, name:&quot;hogeo&quot;, age:14},
{group:1, name:&quot;hogeko&quot;, age:21},
{group:1, name:&quot;hogenari&quot;, age:35},
{group:2, name:&quot;hogehisa&quot;, age:19},
{group:2, name:&quot;hogesige&quot;, age:23},
{group:2, name:&quot;hogemi&quot;, age:12},
{group:3, name:&quot;hogeteru&quot;, age:56},
{group:3, name:&quot;hogekusa&quot;, age:9},
{group:3, name:&quot;hogemura&quot;, age:27},
{group:3, name:&quot;hogeji&quot;, age:32},
]

//ageの値を元にソート
hogeHash.sort(function(a,b){return a['age'] - b['age']});
</pre> 

&nbsp;

<strong>■二重（ダブル）ソート</strong>

group毎にage順にソート

論理演算子で指定
<pre class="lang:js decode:true " >hogeHash.sort(function(a,b){
  return a['group'] - b['group'] || a['age'] - b['age']
});</pre> 

メソッドチェーンで
<pre class="lang:js decode:true " >hogeHash.sort(function(a,b){
  return a['age'] - b['age']
}).sort(function(c,d){
  return c['group'] - d['group']
});</pre> 

Javascriptのソートメッソドは奥が深い。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2010-12-16 09:45:00</wp:post_date>
		<wp:post_date_gmt>2010-12-16 09:45:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-22</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/javascript.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%ae%e3%82%bd%e3%83%bc%e3%83%88%e3%83%a1%e3%83%83%e3%82%bd%e3%83%89%e8%a6%9a%e6%9b%b8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427256667;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2451;}i:1;a:1:{s:2:"id";i:3015;}i:2;a:1:{s:2:"id";i:2840;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]Windowsに、node.jsをインストールする（Cygwin）</title>
		<link>http://shimz.me/blog/node-js/23</link>
		<pubDate>Fri, 10 Dec 2010 23:47:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[※追記
<a href="http://bit.ly/lLmWzj">Node.js、Microsoftの協力を得てWindowsへ正式移植 </a>
無理にインストールするより、上記を待った方がいいかも。

※追記２
<a href="http://www.publickey1.jp/blog/11/nodejswindowsnodeexe.html">Node.jsがバージョンアップ、初の公式Windows版「node.exe」登場</a>
バイナリが出ました。

<hr />

<a name="more"></a>結構、手間取ったのでメモ

参考） <a href="https://github.com/ry/node/wiki/Building-node.js-on-Cygwin-(Windows)">https://github.com/ry/node/wiki/Building-node.js-on-Cygwin-(Windows)</a>

<strong>■Cygwinをインストール</strong>

<a href="http://www.cygwin.com/">http://www.cygwin.com/</a>
参考） <a href="http://web.archive.org/web/20110111183048/http://www.db.is.kyushu-u.ac.jp:80/rinkou/cygwin/cygwin.html">http://www.db.is.kyushu-u.ac.jp/rinkou/cygwin/cygwin.html</a>

cygwin 導入パッケージでは以下を選択
 
<pre class="lang:sh highlight:0 decode:true " >・Web    → wget
・devel  → gcc-g++
・devel  → git
・devel  → make
・devel  → openssl
・libs   → openssl-devel
・devel  → pkg-config
・devel  → zlib-devel
・python → python</pre> 
<span class="Apple-style-span" style="font-family: 'MS PGothic'; white-space: normal;">環境変数「PATH」 に「C:cygwiusrbin;C:cygwinusrlocalbin」を追可</span>
<span class="Apple-style-span" style="font-size: x-small;">※これをちゃんと設定しておかないと、このあと「ash」上で ls すら実行できない</span>

<strong>■Cygwinを起動しnode.jsをインストール……できない？</strong>

一応、resolv.confを設定しておく
 
<pre class="lang:sh decode:true " >$ vim /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4</pre> 

node.jsダウンロード
<a href="http://nodejs.org/">http://nodejs.org/</a>
 
<pre class="lang:sh decode:true " >$ wget http://nodejs.org/dist/node-v0.3.1.tar.gz 
$ tar xvf /node-v0.3.1.tar.gz 
$ cd node-v0.3.1</pre> 

node.js インストール準備　ライブラリチェック
 
<pre class="lang:sh decode:true " >$ ./configure</pre> 

しかし、以下のようなエラーが出てconfigureが通らない。
 
<pre class="lang:sh decode:true " >5 [main] python 2244 C:cygwinbinpython.exe: *** fatal error - unable to remap \?C:cygwinlibpython2.6lib-dynloadtime.dll to same address as parent: 0x2D0000 != 0x3C0000&amp;lt;
11 [main] python 3392 fork: child 2244 - died waiting for dll loading, errno 11

wscript:165: error: could not configure a c compiler!</pre> 

こまったときは、Ｇｏｏｇｌｅ。

<strong>■ash上でnode.jsをインストールする</strong>

参考） <a href="http://avalanche123.com/post/855374337/nodejs-mongodb-tinyurl">http://avalanche123.com/post/855374337/nodejs-mongodb-tinyurl</a>

いったんCygwinを終了する。
以下のフォルダからash.exeを起動 
<pre class="lang:sh decode:true " >C:cygwin/bin/ash.exe</pre> 
ash上でrebaseallを実行
<pre class="lang:sh decode:true " >$ rebaseall</pre> 
自分の環境ではここでTempに書き込めないとエラーがでた
<pre class="lang:sh decode:true " >rebaseall: '/cygdrive/c/Users/hoge/AppData/Local/Temp' is not writable</pre> 
rebaseallをエディタで開きテンポラリの指定フォルダを変更して再度ash上でrebaseallを実行
<pre class="lang:sh highlight:0 decode:true " >#TmpDir=&quot;${TMP:-${TEMP:-/tmp}}&quot;
TmpDir=&quot;/tmp&quot;
</pre> 

メッセージがなにも出力されないので成功したのか失敗したのかわかりにくいが、コマンドが正しく実行されるとちょっと待たされたのちコンソールに操作が戻る。

そのままash上で　node-v0.3.1ディレクトリに移動し改めてconfigre実行
 
<pre class="lang:sh decode:true " >$ ./configure</pre> 

いろいろ見つからないライブラリもあるけれど、とりあえず
「'configure' finished successfully」
が表示されればビルドできるので、makeする。
 
<pre class="lang:sh decode:true " >$ make
$ make install</pre> 
<strong>■Cygwinを起動しmake test</strong>

ashを終了し、cygwinを起動、 node-v0.3.1 ディレクトリへ移動しテスト開始
 
<pre class="lang:sh decode:true " >$ make test　2&gt;&amp;1 | tee node-test.log</pre> 

node.jsサイトのサンプルをテストしてみる。
<pre class="lang:js decode:true " >//example.js
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hello Worldn');
}).listen(8124, &quot;127.0.0.1&quot;);
console.log('Server running at http://127.0.0.1:8124/');
</pre> 
 
<pre class="lang:sh decode:true " >$ node example.js</pre> 

ブラウザでhttp://127.0.0.1:8124/にアクセスし、「Hello World」と表示されれば完了

上記の方法は、多数の「not found」が出たままビルドしてしまっているのでうまく動かないAPIが結構あるかも。 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2010-12-11 08:47:00</wp:post_date>
		<wp:post_date_gmt>2010-12-10 23:47:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-23</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/windowsnodejscygwin.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-jswindows%e3%81%ab%e3%80%81node-js%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%99%e3%82%8b%ef%bc%88cygwin%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388652;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1167;}i:1;a:1:{s:2:"id";i:19;}i:2;a:1:{s:2:"id";i:1948;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]WebSocket フレームワーク「socket.io」をインストール</title>
		<link>http://shimz.me/blog/node-js/24</link>
		<pubDate>Wed, 08 Dec 2010 14:38:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://socket.io/">socket.io</a> インストール

<pre class="lang:sh decode:true " >$ npm install socket.io</pre> 


socketserver.js を作成
 
<pre class="lang:js decode:true " >var app = require('express').createServer();
var socket_server = app.get('/', function(req, res){
  res.send('hello socket.io');
});
socket_server.listen(8000);

var io = require('socket.io'); 
var socket = io.listen(socket_server);
socket.on('connection', function(client){
  client.on('message', function(data)
  {
    client.send(data);
    client.broadcast(data);
  })
  client.on('disconnect', function()
  {
    client.broadcast(client.sessionId + 'disconnected');
  })

});</pre> 

socketserver.js起動
<pre class="lang:sh decode:true " >$ node socketserver.js</pre> 

http://{ソケットサーバーアドレス}:8000/ にアクセスして「hello socket.io」と表示されればＯＫ

index.htmlを変更する
 
<pre class="lang:xhtml decode:true " >
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;ja&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;script src=&quot;http://{socket server}:8000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;
    socket = new io.Socket('{socket server}:8000',{port:8000});
    socket.connect();
    socket.send('hi!');
    socket.on('message', function(data){
      alert(data);
    });
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  socket test
&lt;/body&gt;
&lt;/html&gt;
</pre> 

「hi!」とアラートが出ればＯＫ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2010-12-08 23:38:00</wp:post_date>
		<wp:post_date_gmt>2010-12-08 14:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-24</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/web-socket-socketio.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-jswebsocket-%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%83%af%e3%83%bc%e3%82%af%e3%80%8csocket-io%e3%80%8d%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387221;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1167;}i:1;a:1:{s:2:"id";i:2643;}i:2;a:1:{s:2:"id";i:2601;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>エディタをKomodo Editに変えた10の理由</title>
		<link>http://shimz.me/blog/editor/74</link>
		<pubDate>Thu, 24 Nov 2011 11:16:46 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2011/11/201111241903.jpg" alt="201111241903.jpg" width="480" height="360" />

&nbsp;


いままで、windowsでは「notepad++」を、macでは「Coda」「CotEditor」をメインに使っていたのですが、気まぐれにインストールした「Komodo Edit」がかなり便利だったので、１週間ほど利用してみて感じた便利ポイントを記載してみます。

<a title="Komodo Edit6" href="http://www.activestate.com/komodo-edit"><img class="alignnone size-full wp-image-96" title="komodo-edit-6-new" src="http://shimz.me/blog/wp-content/uploads/2011/11/komodo-edit-6-new.png" alt="" width="480" height="136" /></a>



<strong>１．マルチプラットフォームwindows, mac, linux に対応</strong>

OSが変わっても同じエディタが使えるのは便利です。

&nbsp;

<strong>２．ファンクションブロックなどを折りたためます</strong>

地味ですが11インチのノートPCなどでコーディングする際には、個人的に必須。

&nbsp;

<strong>３．サーバー上のファイルを直接編集できます</strong>

ものぐさなのでやはり必須。

&nbsp;

<strong>４．コード補完機能が便利</strong>

PHP, Python,  Ruby, Javascript、他、jQueryやExtjsなどの補完が可能 です。

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/acca5c4655f96185a8cb2a1c0eea438f.jpg" alt="" title="スクリーンショット 2012-12-05 22.59.51" width="309" height="160" class="alignnone size-full wp-image-1957" />



&nbsp;

<strong>５．構文チェックが便利</strong>

書いたそばからエラーチェックをしてくれます。

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/index.js-_Downloads_test-Project-MyProject-1.jpg" alt="index.js-_Downloads_test-Project-MyProject-1.jpg" width="240" height="74" class="alignnone size-full wp-image-87" />
&nbsp;

<strong>６．対応している言語が豊富</strong>

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/1779f15cea81f4ba761c054e336b391d.jpg" alt="" title="スクリーンショット 2012-12-05 23.02.21" width="210" height="625" class="alignnone size-full wp-image-1956" />
&nbsp;

<strong>７．スニペット機能が便利</strong>

例えば以下ののようなスニペットを保存しておくと


<img src="http://shimz.me/blog/wp-content/uploads/2011/11/sni.jpg" alt="sni" width="247" height="204" class="alignnone size-full wp-image-1735" />

スニペットを貼付けた際に[[%tabstop]]と記述した場所にフォーカスが当たり、TABキーでフォーカスを移動することができます。これが地味に便利！

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/ed5179487ba04d835212a5efb3c014cf.jpg" alt="" title="スクリーンショット 2012-12-05 23.03.19" width="248" height="145" class="alignnone size-full wp-image-1958" />

&nbsp;

<strong>８．vi風のキーバインドが利用できます</strong>

viは良い。Emacs風のキーバインドも可。

&nbsp;

<strong>９．アドオンが豊富</strong>

便利なアドオンが多数。

<a href="http://community.activestate.com/addons">http://community.activestate.com/addons</a>

zen-codingのアドオンなどもあります。

<a href="http://community.activestate.com/xpi/zen-coding">http://community.activestate.com/xpi/zen-coding</a>

&nbsp;

<strong>１０．Javascriptやpythonでマクロが書けます</strong>

例えば以下は、カラーピッカーで選択した色のカラーコードを差し込むマクロ。

<a href="http://community.activestate.com/forum-topic/color-picker-macro-useful-css">http://community.activestate.com/forum-topic/color-picker-macro-useful-css</a>

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/aa.jpg" alt="" title="aa" width="220" height="229" class="alignnone size-full wp-image-1734" />

&nbsp;

以上、個人的に便利だと思った機能を羅列してみました。

他にも便利な機能が多数そなわっているのですが、まだまだ使いこなせていません。

みんなも、Komodo Edit 使うといいよ、色々と捗るぞ。


<a title="Komodo Edit6" href="http://www.activestate.com/komodo-edit">Komodo Edit</a>

&nbsp;

【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>
<a href="http://shimz.me/blog/editor/2724">Komodo Edit 8.0にしてみた。</a>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2011-11-24 20:16:46</wp:post_date>
		<wp:post_date_gmt>2011-11-24 11:16:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391453;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:3485;}i:2;a:1:{s:2:"id";i:2519;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>230</wp:comment_id>
			<wp:comment_author><![CDATA[【Mac向け】完全無料で使える！便利で快適なおすすめテキストエディタまとめ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://creive.me/archives/1495/</wp:comment_author_url>
			<wp:comment_author_IP>120.136.14.4</wp:comment_author_IP>
			<wp:comment_date>2013-11-02 22:47:15</wp:comment_date>
			<wp:comment_date_gmt>2013-11-02 13:47:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Komodo Edit is a Free Open Source Editor for Perl, Python, Tcl, PHP, Ruby &amp; Javascript  Windows/Mac/Linuxで使え、対応言語も豊富なエディタ。  様々な機能を追加できるアドオンもあるので、自分好みにカスタマイズしやすいです。   エディタをKomodo Editに変えた10の理由 | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383400035.1004359722137451171875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>346</wp:comment_id>
			<wp:comment_author><![CDATA[オープンソースのテキストエディタKomodo Edit 8.5.4-14424のダウンロード | フリーソフト/無料ソフト startnews24]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://startnews24.com/?p=26191</wp:comment_author_url>
			<wp:comment_author_IP>54.238.236.79</wp:comment_author_IP>
			<wp:comment_date>2014-08-22 13:32:45</wp:comment_date>
			<wp:comment_date_gmt>2014-08-22 04:32:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] shimz [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408923233.5580599308013916015625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408681965.765428066253662109375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Komodo Editをとりあえず使ってみるための基本的な設定</title>
		<link>http://shimz.me/blog/editor/148</link>
		<pubDate>Thu, 15 Dec 2011 01:44:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/?p=74">エディタをKomodo Editに変えた10の理由</a>

上記記事で紹介したKomodo Editを、とりあえず使ってみるために必要な、基本的な設定などを記載してみました。



「メニュー」→「Edit」→「Preferences」から、様々な設定を行うことができます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000011.jpg"><img class="alignnone size-medium wp-image-149" title="WS000001" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000011-300x250.jpg" alt="" width="300" height="250" /></a>

&nbsp;

&nbsp;

<strong>１．日本語テキストに関する設定</strong>

まずは、日本語がちゃんと書けないと困るのでその設定を。

フォントの設定は「Fonts and Colors」で。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000005.jpg"><img class="alignnone size-medium wp-image-150" title="WS000005" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000005-300x300.jpg" alt="" width="300" height="300" /></a>

Komodo Editには"ＭＳ　ゴシック"などの日本語名のフォントを指定すると正しく反映されないという問題があります。とりあえずWindows なら「System」を選らんでおけば問題ないですが、日本語名のフォントを設定したい場合は、下記サイトが参考になると思います。

<a href="http://azemichi2000.blogspot.com/2009/01/komodo-edit.html">Komodo Editで日本語フォントを使いたい</a>

エンコーディングの設定は「Internationalization」で。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000004.jpg"><img class="alignnone size-medium wp-image-151" title="WS000004" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000004-300x300.jpg" alt="" width="300" height="300" /></a>

言語タイプ毎にデフォルトエンコーディングの設定が行えます。
Windows の場合は「Use Encoding Defined in Environment: cp932」にチェックを入れておきましょう。
*デフォルトのエンコーディングをUTF8にしたい場合は、逆チェックを外して「Custom encoding:」の項目でUTF-8を選んでください。
&nbsp;

<strong>２．FTPの設定</strong>

<strong></strong>FTPクライアント機能の設定は「Servers」で行えます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000002.jpg"><img class="alignnone size-medium wp-image-152" title="WS000002" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000002-300x300.jpg" alt="" width="300" height="300" /></a>

設定したFTPサーバーにアクセスしたいときは、「Places」パネルの設定アイコンをクリックし、「Open Remote Directory」を選択します。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000001.jpg"><img class="alignnone size-medium wp-image-153" title="WS000000" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000001-300x250.jpg" alt="" width="300" height="250" /></a>

&nbsp;

&nbsp;

<strong>３．編集ファイルのプレビュー</strong>

編集中のファイルは「地球儀(?)アイコン」をクリックすることでプレビューを見ることができます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000011.jpg"><img class="alignnone size-medium wp-image-154" title="WS000011" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000011-300x250.jpg" alt="" width="300" height="250" /></a>

&nbsp;

プレビューアイコンをクリックしたときに開くブラウザは「Web &amp; Browser」で設定できます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000010.jpg"><img class="alignnone size-medium wp-image-170" title="WS000010" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000010-300x300.jpg" alt="" width="300" height="300" /></a>

リモートでファイルを直接編集しているときに便利な機能ですが、ファイルを開く毎に下記のようなダイアログでファイルとURLのマッピングを聞かれ、メンドウです。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000008.jpg"><img class="alignnone size-medium wp-image-168" title="WS000008" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000008-300x156.jpg" alt="" width="300" height="156" /></a>
特に、ファイルごとに対応するURLを入力しなくちゃいけないが非常に煩わしいので「Preferences」の「Mapped URIs」にて、URIマッピングの設定を行っておくと、いちいちURLを入力する煩わしさを解消できます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000003.jpg"><img class="alignnone size-medium wp-image-172" title="WS000003" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000003-300x288.jpg" alt="" width="300" height="288" /></a>

&nbsp;

とりあえず以上。

【追加】
ちょっとしたことなんですが、Komodo Editは起動時にスタートページを開きます。
スタートページが必要ない方は、設定画面で「Show Komodo Start Page on startup」のチェックを外しておくといいかもしれません。
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000007.jpg"><img class="alignnone size-medium wp-image-156" title="WS000007" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000007-300x300.jpg" alt="" width="300" height="300" /></a>


【関連記事】
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2011-12-15 10:44:03</wp:post_date>
		<wp:post_date_gmt>2011-12-15 01:44:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-148</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[komodo-edit%e3%82%92%e4%bd%bf%e3%81%86%e3%81%9f%e3%82%81%e3%81%ae%e5%9f%ba%e6%9c%ac%e7%9a%84%e3%81%aa%e8%a8%ad%e5%ae%9a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378041;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3382;}i:1;a:1:{s:2:"id";i:2661;}i:2;a:1:{s:2:"id";i:74;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>330</wp:comment_id>
			<wp:comment_author><![CDATA[リモートのファイルをローカルで扱う方法]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://seed.site50.net/391.html</wp:comment_author_url>
			<wp:comment_author_IP>31.170.160.82</wp:comment_author_IP>
			<wp:comment_date>2014-05-31 12:03:34</wp:comment_date>
			<wp:comment_date_gmt>2014-05-31 03:03:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 参考: Komodo Editをとりあえず使ってみるための基本的な設定 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401505414.8593990802764892578125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401537835.1119310855865478515625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>めんどうな作業がわずか1コマンドに！ 新人○○が 知らないと（略） awkを使ったHTML生成</title>
		<link>http://shimz.me/blog/beginner/180</link>
		<pubDate>Fri, 16 Dec 2011 05:12:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://webrocketsmagazine.com/entry/20111209/html-code-generation-using-excel.html">めんどうな作業がわずか数秒に！新人デザイナーが 知らないと一生後悔するExcelを使ったHTML生成</a>
<a href="http://blog.livedoor.jp/dankogai/archives/51758110.html">javascript - めんどうな作業がわずか1クリックに!新人プログラマーが知らないと一生後悔するブラウザーを使ったHTML生成</a>

乗っかってみました。

コマンドプロンプトを使ったことがある人が対象です。



<strong>■CSVファイルをテキスト（タブ区切り）形式で「名前を付けて保存」する。</strong>

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000002.jpg"><img class="alignnone size-medium wp-image-182" title="WS000000" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000002-300x176.jpg" alt="" width="300" height="176" /></a>

csvのままでも問題ないんですが、タブ区切りの方が処理が簡単なので。

&nbsp;

<strong>■ mawk32をダウンロード</strong>

<a href="http://www.vector.co.jp/soft/dl/win95/util/se080308.html">mawk MBCS (32bit版)</a>

&nbsp;

<strong>■ mawk32.exe と text.txt(名前を付けて保存したファイル) を同じフォルダに置いて、コマンドプロンプトから以下のコマンドを実行</strong>
<pre> mawk32 '{print "&lt;dt&gt;"$1"&lt;/dt&gt;&lt;span&gt;"$2"&lt;/span&gt;&lt;span&gt;"$3"&lt;/span&gt;"}' test.txt &gt; test.html</pre>
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000051.jpg"><img class="alignnone size-medium wp-image-196" title="WS000005" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000051-300x122.jpg" alt="" width="300" height="122" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000021.jpg"><img class="alignnone size-medium wp-image-184" title="WS000002" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000021-300x66.jpg" alt="" width="300" height="66" /></a>

実行すると、text.htmlというファイルが出力されます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000006.jpg"><img class="alignnone size-medium wp-image-197" title="WS000006" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000006-300x122.jpg" alt="" width="300" height="122" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000041.jpg"><img class="alignnone size-medium wp-image-186" title="WS000004" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000041-300x153.jpg" alt="" width="300" height="153" /></a>

以上。

&nbsp;

&nbsp;

&nbsp;

とりあえずawkを使うときに覚えておかないとならないルールは４つ。

１．　mawk32 '{print }'  &lt;&lt;ファイル名&gt;&gt;   で全ての内容を表示

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000071.jpg"><img class="alignnone size-medium wp-image-203" title="WS000007" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000071-300x66.jpg" alt="" width="300" height="66" /></a>

２．　$1 , $2 という変数で、データ各行の一桁目、二桁目を出力。

例えば、１桁目と３桁目だけを出力したいときは以下
<pre>mawk32 '{print $1$3}' test.txt</pre>
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000009.jpg"><img class="alignnone size-medium wp-image-206" title="WS000009" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000009-300x66.jpg" alt="" width="300" height="66" /></a>

３．　桁と桁の間になにか入れたいときはダブルクォーテーションで囲む
<pre>mawk32 '{print $1"の緯度は「"$3"」です"}'  test.txt</pre>
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000101.jpg"><img class="alignnone size-medium wp-image-207" title="WS000010" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000101-300x66.jpg" alt="" width="300" height="66" /></a>
※ちなみに、コマンドプロンプトで日本語を入力するには「Altキー」と「半角／全角キー」を同時押ししてください。

４．　ファイルに出力したいときは、コマンドの最後に 「 &gt; 　&lt;&lt;出力するファイル名&gt;&gt;　」を付ける
<pre>mawk32 '{print $1"の緯度は「"$3"」です"}'  test.txt &gt; hoge.txt</pre>
ねっ、簡単でしょ？　この４つだけ覚えておけば、csv→htmlに変換以外にもいろんなことに使えます。

&nbsp;

&nbsp;

<strong>■mawkを使う利点</strong>

・多分、正規表現やExcelのマクロを覚えるより楽。
・持ち運べる

mawk32.exe単体で動くので、USBストレージにでも入れておけば、自分のＰＣ以外で作業しなくてはならないときでも使えます。

awk についてもっと詳しいことを知りたい方は、以下のサイトが参考になります。
<h1><a href="http://itref.fc2web.com/unix/awk.html">awk sed 入門</a></h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2011-12-16 14:12:47</wp:post_date>
		<wp:post_date_gmt>2011-12-16 05:12:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-180</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%81%e3%82%93%e3%81%a9%e3%81%86%e3%81%aa%e4%bd%9c%e6%a5%ad%e3%81%8c%e3%82%8f%e3%81%9a%e3%81%8b1%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%81%ab%ef%bc%81-%e6%96%b0%e4%ba%ba%e2%97%8b%e2%97%8b%e3%81%8c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427214694;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2711;}i:1;a:1:{s:2:"id";i:972;}i:2;a:1:{s:2:"id";i:3202;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>javascriptで自動着色やってみた。</title>
		<link>http://shimz.me/blog/javascript/238</link>
		<pubDate>Thu, 09 Feb 2012 12:30:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://alfalfalfa.com/archives/5159386.html">「MangaMeeya（マンガミーヤ）」 “自動着色”機能すげぇｗｗｗｗｗｗｗｗｗ</a>を読んでいて、canvasで同じようなことが出来ないかな？　と思いやってみました。
一からつくる知識もスキルもないので<a href="http://www.pixastic.com/">pixastic</a>というライブラリを使い、autocolorというプラグインを作成しました。

<a href="http://shimz.me/labo/autocolor/">DEMO</a>



<iframe src="http://shimz.me/labo/autocolor/" frameborder="0" width="570" height="1800"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2012-02-09 21:30:27</wp:post_date>
		<wp:post_date_gmt>2012-02-09 12:30:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-238</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript-%e3%81%a7%e8%87%aa%e5%8b%95%e7%9d%80%e8%89%b2%e3%82%84%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369522;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2534;}i:1;a:1:{s:2:"id";i:1315;}i:2;a:1:{s:2:"id";i:3066;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>それでもアフィリエイトで儲けたい</title>
		<link>http://shimz.me/blog/javascript/275</link>
		<pubDate>Tue, 14 Feb 2012 11:18:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://gigazine.net/news/20120128-i-dislike-amazon-affiliate/" title="Amazonのアソシエイト用リンクを通常のリンクに置換するFirefox用アドオン「I Dislike Amazon Affiliate!」">Amazonのアソシエイト用リンクを通常のリンクに置換するFirefox用アドオン「I Dislike Amazon Affiliate!」</a>

いつか自分もAmazonのアフィリエイトでがっぽがっぽ儲けたいので、上記のプラグインに対する対抗策を考えてみました。



１．短縮URLを利用する。
上記のアドオンは<a href="https://bitly.com/" title="bitly">bitly</a>のような短縮URLには対応していないっぽいので、アフィリンクを短縮URLに変えてしまうのが簡単そうです。


２．Javascriptで抵抗

<a href="http://shimz.me/labo/unIDAA/" title="DEMO">DEMO</a>
 
<pre class="lang:js decode:true " >if(window.addEventListener) window.addEventListener(&quot;load&quot;, function(){
	var user_id = &quot;&amp;tag=あなたのアマゾンアソシエイトID&quot;;
	var links =  document.getElementsByTagName( 'a' );
	for(var i=0, l=links.length;i &lt; l; i++){
		if(links[i].href.indexOf(&quot;amazon.co.jp&quot;)!=-1) if(links[i].href.indexOf(user_id)==-1){
			//「I Dislike Amazon Affiliate!」をインストールしているブラウザに対する処理
			//下記ではalertを出していますが。他にも色々？できます。
			alert(&quot;I Dislike Amazon Affiliate! installed&quot;);
			links[i].href = links[i].href + user_id;			
		}
	}
	
},false);</pre> 


ページ表示後にamazonのリンクをチェックして個別識別用のタグがなくなっていたら付け足すという至極単純なことをやってます。
（詳しくはDEMOのソースを見てください）
なので、アマゾンのリンクを"弄る"ようなプラグインが他にもあると、それも引っかかります。
alretだしてますが、代わりにdocument.lcation.hrefでどっかに飛ばしちゃったりしてもいいかもしれません。


余談ですが、ググってみたらAdblockを検出するTIPSなどもあるみたいですね。まぁこの辺は、いたちごっこですが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2012-02-14 20:18:54</wp:post_date>
		<wp:post_date_gmt>2012-02-14 11:18:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-275</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%81%9d%e3%82%8c%e3%81%a7%e3%82%82%e3%82%a2%e3%83%95%e3%82%a3%e3%83%aa%e3%82%a8%e3%82%a4%e3%83%88%e3%81%a7%e5%84%b2%e3%81%91%e3%81%9f%e3%81%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426669046;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:19;}i:1;a:1:{s:2:"id";i:2977;}i:2;a:1:{s:2:"id";i:2601;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPressにショートコードを追加する。</title>
		<link>http://shimz.me/blog/php/329</link>
		<pubDate>Thu, 23 Feb 2012 15:41:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pasonatech.co.jp/event/index.jsp?mode=2&amp;d=on&amp;no=3312">Webデザイナーのための、PHPプログラミングWordPressで学ぶCMSカスタマイズ入門　～WordPressサイト運用編～</a>


上記のセミナーに参加してきたのですが、思いのほか簡単にWordPressのプラグインが作れるらしい事を知ったので、とりあえず復習もかねてショートコードを追加するプラグインを作ってみました。



<pre><code>［googlemap］高崎駅［/googlemap］</code></pre>
投稿画面で、上記の様なショートコードを入力すると、GoogleMapに変換されて出力されます。
（ショートコードのエスケープのしかたが分からなかったので括弧が全角になっていますが、実際には半角で入力してください）


ソースコードは以下です。zipに固めてプラグイン画面からアップロードすれば使えます。

googlemap.php
 
<pre class="lang:php decode:true " >&lt;?php
/*
Plugin Name: googlemapc_ode
Plugin URI: http://shimz.me/
Description: &quot;入力システム用プラグイン：googlemap_code&quot;
Author: Shimizu Masayuki
Version: 0.1
Author URI: http://shimz.me/
*/

/**
 * ショートコードの設定
 */
function googlemap_code($atts, $content = null) {
    extract( shortcode_atts( array(
        'width' =&gt; '100%',
        'height' =&gt; '300px',
    ), $atts ) );

   $content  = &lt;&lt;&lt; EOF
&lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; width=&quot;{$width}&quot; height=&quot;{$height}&quot; src=&quot;http://maps.google.co.jp/maps?q={$content}&amp;z=15&amp;output=embed&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://maps.google.co.jp/maps?q={$content}&amp;z=15&quot; target=&quot;_blank&quot; &gt;大きな地図で見る&lt;/a&gt;&lt;/p&gt;
EOF;

    return $content;
}

/**
 * ショートコードに登録
 */
add_shortcode('googlemap','googlemap_code');

?&gt;</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2012-02-24 00:41:40</wp:post_date>
		<wp:post_date_gmt>2012-02-23 15:41:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-329</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[wordpress%e3%81%ab%e3%82%b7%e3%83%a7%e3%83%bc%e3%83%88%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92%e8%bf%bd%e5%8a%a0%e3%81%99%e3%82%8b%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426549545;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3275;}i:1;a:1:{s:2:"id";i:3567;}i:2;a:1:{s:2:"id";i:2860;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascriptにもテストを。</title>
		<link>http://shimz.me/blog/javascript/488</link>
		<pubDate>Tue, 13 Mar 2012 01:01:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=488</guid>
		<description></description>
		<content:encoded><![CDATA[購入。
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4048707868&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


独りでやっているとどうしてもテストなどがおろそかになりがちなので、その辺戒めるために勉強中。



<script type="text/javascript" src="http://jsdo.it/blogparts/udCY/js"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/udCY" title="テスト関数">テスト関数 - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

副産物として、いままでいまいち使いどころを理解できずにいた「カリー化」の便利さを少しだけ実感できるようになりました。
<script type="text/javascript" src="http://jsdo.it/blogparts/skcq/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/skcq" title="カリー化　その２">カリー化　その２ - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date>2012-03-13 10:01:40</wp:post_date>
		<wp:post_date_gmt>2012-03-13 01:01:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-488</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%ab%e3%82%82%e3%83%86%e3%82%b9%e3%83%88%e3%82%92%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426711681;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:500;}i:1;a:1:{s:2:"id";i:16;}i:2;a:1:{s:2:"id";i:12;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>テスト勉強中</title>
		<link>http://shimz.me/blog/javascript/500</link>
		<pubDate>Wed, 14 Mar 2012 11:28:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=500</guid>
		<description></description>
		<content:encoded><![CDATA[引き続き「テスト駆動JavaScript」を読みつつ勉強



<script type="text/javascript" src="http://jsdo.it/blogparts/rwXD/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/rwXD" title="YUIを使ったテスト">YUIを使ったテスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

しばらくは勉強もかねてテスト関数を自作しようかと思っているのですが、ちゃんとテストを行いたいときは、やっぱり既存のテストフレームワークを使った方が良いですね。


<script type="text/javascript" src="http://jsdo.it/blogparts/4aWi/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/4aWi" title="Arry.pushで渡した配列同士の比較">Arry.pushで渡した配列同士の比較 - jsdo.it - share JavaScript, HTML5 and CSS</a></p>


現在の詰まりどころ。pushで渡した配列は、値渡しになるのでassertEqualsでテストを行った場合、「failed」を返すんじゃないかと思うのですが、本にはpathすると書いてあるんですよね。もしかしたらassertEqualsの実装を間違えているかもしれないので、あとでYUI testなどちゃんとしたテストフレームワークを使ってテストしてみようと思います。

【追記】
どうやら、assertEqualsの実装を間違えていたようです。
Equalsは、配列やオブジェクトの内容を比較するのが正しい動作のようですね。


参考
<a href="http://q-eng.com/diary/3191">same, equal, commonの違い</a>
<blockquote>sameは　 「⇒同じ人、場所、物などが「一つの特定のもの」であり別のものではない」
equalは、「⇒何か別のものであるが、「サイズ、数、量、値が same」 である」
</blockquote>

equalは値の比較、sameは参照先が同じかどうかの比較、ととらえていいみたいですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>500</wp:post_id>
		<wp:post_date>2012-03-14 20:28:13</wp:post_date>
		<wp:post_date_gmt>2012-03-14 11:28:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-500</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%86%e3%82%b9%e3%83%88%e5%8b%89%e5%bc%b7%e4%b8%ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427294856;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:527;}i:1;a:1:{s:2:"id";i:2856;}i:2;a:1:{s:2:"id";i:862;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>配列とarguments</title>
		<link>http://shimz.me/blog/javascript/527</link>
		<pubDate>Sat, 17 Mar 2012 11:52:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=527</guid>
		<description></description>
		<content:encoded><![CDATA[引き続き「テスト駆動JavaScript」本を読んで勉強しているのですが、ちょっと混乱した箇所があったのでメモ。


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4048707868&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<!--more-->

「第11章 Observerパターン」の「11.4.2 引数を渡す」の項目で以下のコードがテストを合格すると記述されていたのですが……

テストコード（リスト 11-24 notifyObservers に渡された引数が観測者に渡されることを確かめる）
<pre class="lang:js decode:true " >&quot;test should pass through arguments&quot;:function(){
    var observable = new tddjs.util.Observable();
    var actual;
    
    observable.addObserver(function(){
		actual = arguments; 
    });
 
    observable.notifyObservers(&quot;String&quot;, 1, 32);

    assertEquals([&quot;String&quot;, 1, 32], actual);   
}</pre> 


実装 (リスト 11-25 applyを使ってnotifyObservers に渡された引数を渡す)
<pre class="lang:js decode:true " >function notifyObservers(){
	for(var i=0, l=this.observers.length; i&lt; l; i++){
		this.observers[i].apply(this, arguments);
	}    
}</pre> 


これだと、使用するテストフレームワークによっては合格しません。
例えばYUIのテストフレームワークでは失敗します。(<a href="#1">※1</a>)


argumentsは配列(Array)に似たオブジェクトですが、配列では無いので上記のテストが合格してしまうのは微妙な感じです。
もし、このテストを合格させるのであれば、argumentsを配列に変換する必要があるんじゃないかと思います。

addObserveでactualに引数を配列に変換しておさめる
<pre class="lang:js decode:true " >&quot;test should pass through arguments&quot;:function(){
    var observable = new tddjs.util.Observable();
    var actual=[];
    
    observable.addObserver(function(){
            actual = Array.prototype.slice.call(arguments);
    });
    

    observable.notifyObservers(&quot;String&quot;, 1, 32);

    assertEquals([&quot;String&quot;, 1, 32], actual); 
    
}</pre> 


<a name="1"></a>
備考

YUIのAssert.areEqualでは配列を比較すると「参照元が同じかどうか」をみているので失敗します。
<script type="text/javascript" src="http://jsdo.it/blogparts/zCUN/js"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/zCUN" title="YUIのAssert.areEqual">YUIのAssert.areEqual - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

<pre class="lang:js decode:true " >Assert.areEqual([&quot;String&quot;, 1, 32], [&quot;String&quot;, 1, 32]); //FAILになる</pre> 

上記が失敗するのは、それはそれで微妙な感じ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date>2012-03-17 20:52:01</wp:post_date>
		<wp:post_date_gmt>2012-03-17 11:52:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-527</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e9%85%8d%e5%88%97%e3%81%a8arguments]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427013277;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3501;}i:1;a:1:{s:2:"id";i:3783;}i:2;a:1:{s:2:"id";i:3087;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptの比較演算子の挙動</title>
		<link>http://shimz.me/blog/javascript/628</link>
		<pubDate>Mon, 19 Mar 2012 13:48:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=628</guid>
		<description></description>
		<content:encoded><![CDATA[改めて調べてみた所、面白い動きをするようなので、個人的なまとめ。


以下は、chrome の javaScriptコンソールでの確認

== は型を無視
 
<pre class="lang:js decode:true " >1 == &quot;1&quot;
&gt;true
1 === &quot;1&quot; 
&gt;false
1 != &quot;1&quot;
&gt;false
1 !== &quot;1&quot;
&gt; true</pre> 


配列の比較は参照元の比較
 
<pre class="lang:js decode:true " >var a = [1, 1]
var b = [1, 1]
a == b
&gt;false
a === b
&gt;false

b = a

a == b
&gt;true
a === b
&gt;true</pre> 


配列リレラルを直接==で比較すると必ずfalse(参照元の比較になるため)
<pre class="lang:js decode:true " >[1, 1] == [1, 1]
&gt;false</pre> 

大なり(<)小なり(>)などで比較すると内容の比較になる
<pre class="lang:js decode:true " >[1,1] &gt;= [1, 1]
&gt;true
[1,1] &lt; [1, 2]
&gt;true
[1,1] &gt; [1, 2]
false</pre> 


配列内にオブジェクトが含まれていても比較できるっぽい。
<pre class="lang:js decode:true " >[{},1] &lt;= [{},2]
&gt;true
[{},3] &lt;= [{},2]
&gt;false
[1,function(){}] &lt;= [2,function(){}]
&gt;true
[1,function(){}] &gt;= [2,function(){}]
&gt;false</pre> 


オブジェクトリテラルは直接比較できない
<pre class="lang:js decode:true " >{a:1} == {a:1}
&gt;SyntaxError</pre> 

変数に入れた場合は比較可能(参照元比較）
<pre class="lang:js decode:true " >var a = {a:1}
var b = {a:1}
a == b
&gt;false</pre> 


配列の比較が参照元比較になるため、YUI testなどでは以下のテストは失敗する。
<pre class="lang:js decode:true " >Assert.areEqual([&quot;String&quot;, 1, 32], [&quot;String&quot;, 1, 32]); //FAILになる</pre> 

<script type="text/javascript" src="http://jsdo.it/blogparts/zCUN/js"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/zCUN" title="YUIのAssert.areEqual">YUIのAssert.areEqual - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

関数やメソッドの戻り値が、配列やオブジェクトの場合areEqualのテストでハマりやすいので注意。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date>2012-03-19 22:48:49</wp:post_date>
		<wp:post_date_gmt>2012-03-19 13:48:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-628</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%ae%e6%af%94%e8%bc%83%e6%bc%94%e7%ae%97%e5%ad%90%e3%81%ae%e6%8c%99%e5%8b%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426639943;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:527;}i:1;a:1:{s:2:"id";i:3015;}i:2;a:1:{s:2:"id";i:2183;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>新人プログラマーが理想と現実のギャップに打ちのめされる前に読んでおくと良いかもしれない参考書２冊</title>
		<link>http://shimz.me/blog/beginner/643</link>
		<pubDate>Wed, 04 Apr 2012 12:42:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=643</guid>
		<description></description>
		<content:encoded><![CDATA[難しすぎず、大きすぎず、厚すぎない参考書２冊。

<blockquote>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/427420264X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51uXZ7hNbeL._SL160_.jpg" alt="なぜプログラミングができないのか―イメージとパターンで学ぶJavaプログラミング" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/427420264X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">なぜプログラミングができないのか―イメージとパターンで学ぶJavaプログラミング</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.04.10</div></div><div class="amazlet-detail">羽山 博 <br />オーム社 <br />売り上げランキング: 651,044<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/427420264X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
私たちは何かができるようになってしまうと、どうやらそれまでの苦労をすっかり忘れてしまうらしい。苦労のあとは奇麗さっぱり拭い去られ、美しく均整のとれた完成品だけが残る。私たちは美しさを誇らしく思い、これから同じ道をたどってこようとする人たちを導くために自分が身に付けたことを伝えようとする。得意げに、鼻高々に、すばらしい「体系」をふりかざして。だが、見よ。途方に暮れている彼らを。彼らに必要なのは結果ではなく、過程なのに──。</blockquote>


プログラミングの入門書を読み終え文法は覚えたのに、いざ自分で一からプログラムを書こうとすると途方にくれてしまうという人向けの参考書です。
入門書の次に進めなくて詰まるってことが多いんですよね。
全てが用意されていた入門書と違い、一人で一から作るためには自分で問題を設定しそれを解くための処理をコードに落とし込んで行かなくてはならないわけですが、それがプログラミングを始めたばかりの頃は難しかったりします。
この本は、「やりたい事」を抽象化してコードに落とし込んでいく「考え方」について丁寧に解説されているので、入門書を読み終えた後に読んでおくと少しだけ先に進みやすくなるかもしれません。
サンプルコードはJavaで書かれてますが、そこらへんはあんまり気にしなくていいかと。考え方自体はどんな言語でも通用する内容だと思います。

Amazonの「この本の中身を閲覧する」で本書の内容をちょこっと読めるので、是非参考に。
&nbsp;
&nbsp;
&nbsp;


<blockquote>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774136689/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51rhvohnLPL._SL160_.jpg" alt="ひなた先生が教えるデバッグが256倍速くなるテクニック (Software Design Books)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774136689/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">ひなた先生が教えるデバッグが256倍速くなるテクニック (Software Design Books)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.04.10</div></div><div class="amazlet-detail">やねうらお <br />技術評論社 <br />売り上げランキング: 112,662<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774136689/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

「そういうコピペが保守性の悪いプログラムを生み出すんですよね？」
「もちろんそうだ。ただし、すべてのプログラムに保守が必要だとは限らない。一度きりで構わないかもしれない。書き捨てで良いかもしれない。保守するのはプログラムを書いた本人ではないかも知れない。さまざまな理由により、すべてのプログラムが保守性に優れたものであるべきとは言えないし、そうもなっていない。ケニチ君よ。ケニチ君は、それらのプログラムに立ち向かう術を知らなければならない。」</blockquote>


現実に立ち向かうために読んでおくといいと思いますｗ
冗談(?)はともかく、意外と「バグの原因を絞り込んで特定してく技術」について書かれた参考書って少ないし、やたらと難しかったりするなかでこの本はわりと理解しやすいかなと。ただ、バグを特定するために元のソースに手を加えるってのは賛否両論あると思うのでそこらへんは慎重に。
とりあえず、「デバッグにも色々な技術があるんだな」ってことを知るだけでもためになると思います。
サンプルはVisual Studio(C/C++)で書かれてますが、こちらも考え方自体はどんな言語でも通用するんじゃないかな？　と。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date>2012-04-04 21:42:35</wp:post_date>
		<wp:post_date_gmt>2012-04-04 12:42:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-643</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e6%96%b0%e4%ba%ba%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9e%e3%83%bc%e3%81%8c%e7%90%86%e6%83%b3%e3%81%a8%e7%8f%be%e5%ae%9f%e3%81%ae%e3%82%ae%e3%83%a3%e3%83%83%e3%83%97%e3%81%ab%e6%89%93%e3%81%a1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3285]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427392536;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:1764;}i:2;a:1:{s:2:"id";i:3378;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhoneとopenFrameworksで遊ぶ。</title>
		<link>http://shimz.me/blog/openframeworks/715</link>
		<pubDate>Mon, 23 Apr 2012 11:17:36 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=715</guid>
		<description></description>
		<content:encoded><![CDATA[openFrameworks楽し〜♩



openFrameworksについては以下を。

<a href="http://gihyo.jp/design/column/newyear/2011/openframeworks-prospect">openFrameworksから拡がるメディアアートの世界</a>

C++のライブラリですが、iOS版を使えばカメラから取り込んだ画像にエフェクトを掛けるようなアプリを簡単に作る事ができます。

<a href="http://shimz.me/blog/wp-content/uploads/2012/04/Screen_Shot0.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/Screen_Shot0-300x200.jpg" alt="" title="Screen_Shot0" width="300" height="200" class="alignnone size-medium wp-image-716" /></a>

まぁ、私の環境(Max OS Lion + Xcode 4.3.2 + openFrameworks 7.0)では、exampleをビルドすると大量のwarningを吐いたり、ちゃんと動作しないexampleがあったりと多少手こずりましたが。
(warningについては、ビルドは通るし実機に転送して実行しても問題なく動くので放置してますｗ)
しかし、Objective-Cで同じモノを作るのを考えれば圧倒的に楽！　(というか、Objective-Cに関してはまったく知識がないので、コードが読めない orz)

まぁ、実用的なアプリを作るのにはあまり向いていないでしょうけど。

iPhoneアプリ作成の勉強を初めてみたものの、Objective-Cの書式に慣れず入門辺で心折れそうになっていたので、しばらくはopenFrameworksで遊んでみようかと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>715</wp:post_id>
		<wp:post_date>2012-04-23 20:17:36</wp:post_date>
		<wp:post_date_gmt>2012-04-23 11:17:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-715</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openframeworks"><![CDATA[openFrameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[iphone%e3%81%a8openframeworks%e3%81%a7%e9%81%8a%e3%81%b6%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425749507;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4025;}i:1;a:1:{s:2:"id";i:2969;}i:2;a:1:{s:2:"id";i:3684;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ドットインストールとjsdo.itでプログラミングを学ぼう！</title>
		<link>http://shimz.me/blog/javascript/723</link>
		<pubDate>Tue, 24 Apr 2012 01:15:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=723</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://jsdo.it/_shimizu/jge7/fullscreen"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/jsdoit_install.jpg" alt="" title="jsdoit_install"  class="alignnone size-medium wp-image-725" /></a>

.installで学んで、jsdoitで書く！



プログラミング学習サイト「<a href="http://dotinstall.com/">ドットインストール</a>」にハマっています！

<iframe width="560" height="315" src="http://www.youtube.com/embed/NrrEov1aN-k" frameborder="0" allowfullscreen></iframe>



やはり動画というのはテキストだけの解説よりはるかに解りやすいですね。なにより、１回の動画が約３分ぐらいで区切られているので、テンポ良くサクサク進められます。ちなみに、いままでプログラミングをまったく行ったことが無いという方には、「HTML講座」→「CSS講座」→「JavaScript講座」と進めていくのがオススメです。

「プログラミングを始めよう！」と思った際の一番のハードルは"最初の１行を書き始める"ことなので、開発環境をそろえるのに時間がかかるようだと、それだけでモチベーションが萎んでしまうことが多々あったりします。
（ダウンロードにものすご～く時間の掛かる統合開発環境とか orz ）

HTML + CSS + JavaScript はブラウザとエディタ(メモ帳でも可)さえインストールされていれば、すぐ開発を始められるので最初のハードルがかなり低いですし、さらに「<a href="http://jsdo.it/">jsdo.it</a>」のようなサービスを使えば、ブラウザだけでもＯＫ。作ったものを他の人に公開するのも簡単なうえ、解らないことがあったら「question」タグを付けて投稿すれば、誰かが実際にコードを書いて教えてくれるかもしれません。

<iframe width="560" height="315" src="http://www.youtube.com/embed/zJ7dQux83pM" frameborder="0" allowfullscreen></iframe>


タブを上下に表示できるブラウザをお使いなら、この２サイトを表示してドットインストールの動画を見ながらjsdoitで実際にコードを書いて実行なんてことが簡単にできて、いっそう捗ります。

上下に開く機能が無くても、iframeで２サイトを開くhtmlを作っておいてchromeのフルスクリーン機能(F11キー)などを使うと、他のことに惑わされず講座に集中できて、とても良い感じですよ。

上下フレーム
<a href="http://jsdo.it/_shimizu/jge7/fullscreen">http://jsdo.it/_shimizu/jge7/fullscreen</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>723</wp:post_id>
		<wp:post_date>2012-04-24 10:15:07</wp:post_date>
		<wp:post_date_gmt>2012-04-24 01:15:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-723</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[725]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%89%e3%83%83%e3%83%88%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%a8jsdo-it%e3%81%a7%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%82%92%e5%ad%a6%e3%81%bc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427128058;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2772;}i:1;a:1:{s:2:"id";i:1764;}i:2;a:1:{s:2:"id";i:2860;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[プログラミング参考サイト | android manifest configChanges]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://web.archive.org/web/20131129140717/http://www.andr0o0id.com:80/?p=5439</wp:comment_author_url>
			<wp:comment_author_IP>210.157.22.26</wp:comment_author_IP>
			<wp:comment_date>2013-10-29 07:09:05</wp:comment_date>
			<wp:comment_date_gmt>2013-10-28 22:09:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ドットインストールとjsdo.itでプログラミングを学ぼう！ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383032228.754724979400634765625;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1382998145.3125660419464111328125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>257</wp:comment_id>
			<wp:comment_author><![CDATA[プログラミング参考サイトまとめ | android manifest configChanges]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.andr0o0id.com/?p=5618</wp:comment_author_url>
			<wp:comment_author_IP>210.157.22.26</wp:comment_author_IP>
			<wp:comment_date>2013-12-20 17:58:21</wp:comment_date>
			<wp:comment_date_gmt>2013-12-20 08:58:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ドットインストールとjsdo.itでプログラミングを学ぼう！ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387529901.59731006622314453125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387757011.3936359882354736328125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>ofxUIで文字(ofxUILabel)が表示されない。</title>
		<link>http://shimz.me/blog/openframeworks/737</link>
		<pubDate>Fri, 27 Apr 2012 02:11:30 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=737</guid>
		<description></description>
		<content:encoded><![CDATA[めちゃくちゃカッコイイopenFrameworksのGUIアドオンをつかってみました。

<!--more-->
<iframe src="http://player.vimeo.com/video/36385123" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
カッコイイ！

ダウンロードは以下から。
<a href="https://github.com/rezaali/ofxUI">https://github.com/rezaali/ofxUI</a>
使い方はREADMEの「TUTORIAL」に書いてある通りなのですが、一部修正しないと文字が表示されませんでした。


１．githubからダウンロードして解凍→フォルダ名をofxUIに変更→ addonsフォルダに入れる
２．openFrameworksのemptyExampleをコピー
３．XcodeでemptyExampleプロジェクトを開く
４．addons/ofxUI/src フォルダをプロジェクトのaddonsフォルダに追加
５．addon/ofxXmlSettings フォルダをプロジェクトのaddonsフォルダに追加

ここまでで準備完了。

とりあえずサンプルを動かしてみます。
ofxUI/example-ofxUITutorial　フォルダのbin/data/guiからguiフォルダ をプロジェクトのdataフォルダに追加。
以下の内容をコピペ(ハイライトされている部分が追加したコードです。元のコードは消さずにそのままで）
　
<br>
<br>
　
<b>ofxUI/example-ofxUITutorial/src/testApp.h → emptyExample/src/testApp.h</b>[cpp highlight="1,5,7"]   

#include &quot;ofxUI.h&quot;

class testApp : public ofxiPhoneApp {


    ofxUICanvas *gui; 
    //void exit(); //二重に指定してしまうことになるので削除するかコメントアウト 
    void guiEvent(ofxUIEventArgs &amp;e); 

}

[/cpp]   
　
<br>
<br>
　
<b>ofxUI/example-ofxUITutorial/src/testApp.cpp → emptyExample/src/testApp.mm</b>[cpp highlight="3-8,13,14,17-29"]
void testApp::setup(){

    gui = new ofxUICanvas(0,0,320,320);
    gui-&gt;addWidgetDown(new ofxUILabel(&quot;OFXUI TUTORIAL&quot;, OFX_UI_FONT_LARGE)); 
    gui-&gt;addWidgetDown(new ofxUISlider(304,16,0.0,255.0,100.0,&quot;BACKGROUND VALUE&quot;)); 
    gui-&gt;addWidgetDown(new ofxUIToggle(32, 32, false, &quot;FULLSCREEN&quot;));
    ofAddListener(gui-&gt;newGUIEvent, this, &amp;testApp::guiEvent); 
    gui-&gt;loadSettings(&quot;GUI/guiSettings.xml&quot;); 
}	

//--------------------------------------------------------------
void testApp::exit(){
    gui-&gt;saveSettings(&quot;GUI/guiSettings.xml&quot;); 
    delete gui; 
}	
//--------------------------------------------------------------
void testApp::guiEvent(ofxUIEventArgs &amp;e)
{
    if(e.widget-&gt;getName() == &quot;BACKGROUND VALUE&quot;)
    {
        ofxUISlider *slider = (ofxUISlider *) e.widget;    
        ofBackground(slider-&gt;getScaledValue());
    }
    else if(e.widget-&gt;getName() == &quot;FULLSCREEN&quot;)
    {
        ofxUIToggle *toggle = (ofxUIToggle *) e.widget;
        ofSetFullscreen(toggle-&gt;getValue());   
    }
}	
[/cpp]
　
<br>
<br>
　
これで一応ビルドは通るしスライダーなどは表示されるのですが文字（ofxUILabel）が表示されません。 orz
[code]
Error : font not allocated iphone
[/code]
というアラートが出まくっているので、フォントが読み込めていません。

そこで、まずdata/GUIのなかにあるフォントファイル「NewMedia Fett.ttf」を、プロジェクトのdataフォルダの直下にコピーします。

setup()関数に以下の一文を追加
[cpp highlight="4"]
void testApp::setup(){

    gui = new ofxUICanvas(0,0,320,320);
    gui-&gt;setupFont(&quot;NewMedia Fett.ttf&quot;); //追加
    gui-&gt;addWidgetDown(new ofxUILabel(&quot;OFXUI TUTORIAL&quot;, OFX_UI_FONT_LARGE)); 
    gui-&gt;addWidgetDown(new ofxUISlider(304,16,0.0,255.0,100.0,&quot;BACKGROUND VALUE&quot;)); 
    gui-&gt;addWidgetDown(new ofxUIToggle(32, 32, false, &quot;FULLSCREEN&quot;));
    ofAddListener(gui-&gt;newGUIEvent, this, &amp;testApp::guiEvent); 
    gui-&gt;loadSettings(&quot;GUI/guiSettings.xml&quot;); 
}	
[/cpp]

これで、ちゃんとラベルが表示されるようになります。

ちなみに、
[cpp]
 gui-&gt;setupFont(&quot;GUI/NewMedia Fett.ttf&quot;);
[/cpp]
上記の方法では、フォントファイルが読み込めませんでした。
dataフォルダ直下でないとダメみたいです。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>737</wp:post_id>
		<wp:post_date>2012-04-27 11:11:30</wp:post_date>
		<wp:post_date_gmt>2012-04-27 02:11:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ofxui%e3%81%a7%e6%96%87%e5%ad%97ofxuilabel%e3%81%8c%e8%a1%a8%e7%a4%ba%e3%81%95%e3%82%8c%e3%81%aa%e3%81%84%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openframeworks"><![CDATA[openFrameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[746]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427206606;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1133;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:2755;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GW中にopenFrameworksを学ぶためのまとめ。</title>
		<link>http://shimz.me/blog/openframeworks/770</link>
		<pubDate>Sat, 28 Apr 2012 13:09:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=770</guid>
		<description></description>
		<content:encoded><![CDATA[自分学習用につくったリンク集。

<!--more-->

<div id="136f910e7d316e6b2911ea18f"></div><div class="naverMatomeBPFoot01" data-na="NA:bottom"><a href="http://matome.naver.jp/odai/2133544611838053501" target="_blank" data-na="NL:undertitle">openFrameworks 参考サイトまとめ</a> <a href="http://matome.naver.jp" target="_blank" data-na="NL:matome">[NAVER まとめ]</a></div><script type="text/javascript" charset="UTF-8" src="http://matome.naver.jp/pasteScript?id=2133544611838053501&p=136f910e7d316e6b2911ea18f&color=01"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>770</wp:post_id>
		<wp:post_date>2012-04-28 22:09:33</wp:post_date>
		<wp:post_date_gmt>2012-04-28 13:09:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gw%e4%b8%ad%e3%81%abopenframeworks%e3%82%92%e5%ad%a6%e3%81%b6%e3%81%9f%e3%82%81%e3%81%ae%e3%81%be%e3%81%a8%e3%82%81%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openframeworks"><![CDATA[openFrameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427251727;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:737;}i:1;a:1:{s:2:"id";i:3810;}i:2;a:1:{s:2:"id";i:3356;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>悪質なURLかどうかをチェックできる「ScanURL.net」</title>
		<link>http://shimz.me/blog/web/783</link>
		<pubDate>Tue, 15 May 2012 06:30:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=783</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://scanurl.net"><img src="http://shimz.me/blog/wp-content/uploads/2012/05/WS000002.jpg" alt="" title="WS000002"  class="alignnone size-medium wp-image-784" /></a>

<a href="http://scanurl.net">ScanURL.net</a>



使い方はURLを入力して、「Check This URL」を押すだけです。

<img src="http://shimz.me/blog/wp-content/uploads/2012/05/WS000003-262x300.jpg" alt="" title="WS000003" width="262" height="300" class="alignnone size-medium wp-image-786" />

「Google Safe Browsing」と「PhishTank」に悪質なURLとして登録されていないかチェックされます。

そのほか、「McAfee 」や「Norton 」などのURLチェックサイトへのリンクが生成されるので、ワンクリックで内容を確認できます。

自サイトが、悪質なURLとして登録されてしまっていないか確認するのにも便利です。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>783</wp:post_id>
		<wp:post_date>2012-05-15 15:30:20</wp:post_date>
		<wp:post_date_gmt>2012-05-15 06:30:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-783</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[784]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e6%82%aa%e8%b3%aa%e3%81%aaurl%e3%81%8b%e3%81%a9%e3%81%86%e3%81%8b%e3%82%92%e3%83%81%e3%82%a7%e3%83%83%e3%82%af%e3%81%a7%e3%81%8d%e3%82%8b%e3%80%8cscanurl-net%e3%80%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427341214;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3371;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:148;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>何のエラーも発生してないのに、LANにつながらない(windows)</title>
		<link>http://shimz.me/blog/troubleshooting/846</link>
		<pubDate>Sat, 19 May 2012 02:25:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[久々に、わけわからんトラブルに見舞われたので、トラブルシュートメモ。



【現象】
インターネットどころかゲートウェイまでにも届かない。
pingが返ってくるのはループバックアドレスと自身のIPアドレスのみ。
前日までは問題なく繋がっていて、とくにネットワーク設定の変更等はしていない。

１．接続のインジケーター
なんのエラーも出ていない。正常に繋がっている場合と変わらず、一見すると何の問題もないように見える。

２．ケーブル
一応、LANケーブルも変えてみた。
同ネットワーク内で繋がっている端末のLANケーブルに差し替えてみたがつながらず。

３．ファイアーウォール、アンチウィルスソフト等停止
とりあえず、すべて止めてみた。解決せず。

４．デバイスマネージャ
こちらも特にエラーは表示されず。
一応、ネットワークアダプタを削除→再起動して再認識させてみたけど変わらず。

５．ネットワークの診断・修復
やってみたものの、そもそも何のエラーも出ていないので……解決せず

６．セーフモード（ネットワーク）
特に変わらず、つながらない。


【対応】
LANアダプター（USB)を使ってネットワークに接続してみたところ、問題なく繋がったのでネットワークアダプターの故障っぽい。
デバイスマネージャーや接続のインジケーターでエラーが発生していない理由は不明。


とりあえず、手がかりななさ過ぎて困った orz
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date>2012-05-19 11:25:09</wp:post_date>
		<wp:post_date_gmt>2012-05-19 02:25:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%95%e3%81%ae%e3%82%a8%e3%83%a9%e3%83%bc%e3%82%82%e7%99%ba%e7%94%9f%e3%81%97%e3%81%a6%e3%81%aa%e3%81%84%e3%81%ae%e3%81%ab%e3%80%81lan%e3%81%ab%e3%81%a4%e3%81%aa%e3%81%8c%e3%82%89%e3%81%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427136872;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3000;}i:1;a:1:{s:2:"id";i:2573;}i:2;a:1:{s:2:"id";i:1764;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーション「d3.js」</title>
		<link>http://shimz.me/blog/d3-js/862</link>
		<pubDate>Fri, 01 Jun 2012 17:45:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=862</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://d3js.org/">
<img src="http://shimz.me/blog/wp-content/uploads/2012/06/d3-e1352947701212.jpg" alt="" title="d3" width="1352" height="645" class="alignnone size-full wp-image-890" /></a>

最近、「データビジュアライゼーション」に興味を持ち始め d3.js というjavascriptのデータビジュアライゼーションライブラリの使い方を学び始めました。海外では、結構有名なライブラリらいしいのですが、日本では利用者が少ないようなので、勉強がてら紹介をしてみたいと思います。

d3.js
<a href="http://d3js.org/">http://d3js.org/</a>

「データビジュアライゼーション」については以下を。
<a href="http://www.aoky.net/articles/david_mccandless/the_beauty_of_data_visualization.htm">データビジュアライゼーションの美</a>


&nbsp;

<strong>■データ駆動ドキュメント</strong>
d3.jsは、データを基にDOM(ドキュメントオブジェクトモデル）を操作するためのライブラリです。
データとDOMのエレメントを結びつけ、データの変化をドキュメントへと反映させることができます。
d3.jsは、配列を渡すだけでグラフィカルな結果を出力してくれるようなフレームワークではありません。
その代わりに、柔軟なカスタマイズが可能で、webの標準の機能（css3 や HTML5、SVGなど）を最大限に利用した<a href="http://ja.wikipedia.org/wiki/%E3%83%AB%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%89%E3%83%BB%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB">ルック・アンド・フィール</a>を作成することができます。
オーバーヘッドが非常に小さく、d3.jsで作成されたデータビジュアライゼーションは、非常に高速に動作します。
公式サイトにある<a href="https://github.com/mbostock/d3/wiki/Gallery">サンプル</a>には非常に複雑なグラフや図、アニメーションなどがありますが、その殆どがiPhone(4s)で閲覧した場合でも、充分なスピードで描画されます。

&nbsp;
&nbsp;
&nbsp;

<strong>■d3.jsのインストール</strong>
d3.jsを使用するのは非常に簡単で、ドキュメントの冒頭で下記のスクリプトファイルを読み込むだけです。

 
<pre class="lang:xhtml decode:true " >&lt;script type="text/javascript" src="http://d3js.org/d3.v2.js"&gt;&lt;/script&gt;
</pre> 


&nbsp;
&nbsp;
&nbsp;
 
 
 <strong>■DOM操作</strong>
d3.jsはjQueryに似たセレクション機能をもち、セレクタを使用してDOMの操作を行うことができます。 下記の例は、ドキュメント上の全てのpタグにスタイルを適用していますが、jQueryを使った事のある方には理解しやすいと思います。
 
<pre class="lang:js decode:true " >d3.selectAll("p").style("color", "white");
</pre> 
&nbsp;

必要に応じて個々のノードを選択して操作することもできます。
 
<pre class="lang:js decode:true " >d3.select("body").style("background-color", "black");
</pre> 


&nbsp;
&nbsp;
&nbsp;
 
 
 <strong>■動的なプロパティの変更</strong>
d3.jsは、要素の操作を行う際に単に定数を設定できるだけでなく、コールバック関数を使用して動的にプロパティを変更することができます。 以下は、ドキュメント上の全てのpタグを選択し、それぞれにランダムな色を設定します。
 
<pre class="lang:js decode:true " >d3.selectAll("p").style("color", function() {
  return "hsl(" + Math.random() * 360 + ",100%,50%)";
});
</pre> 
&nbsp;


コールバック関数の引数では、選択した要素のインデックス数を受けとり反復処理をおこなうことができます。 以下のコードは、奇数番のpタグと偶数番のpタグ、それぞれを分けて色を設定しています。
 
<pre class="lang:js decode:true " >d3.selectAll("p").style("color", function(d, i) {
  return i % 2 ? "#fff" : "#eee";
});
</pre> 

<script type="text/javascript" src="http://jsdo.it/blogparts/zLCR/js"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="サンプル" href="http://jsdo.it/_shimizu/zLCR">サンプル - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

&nbsp;
&nbsp;
&nbsp;

<strong>■データを基に要素を操作する</strong>
d3.jsのもっとも大きな特徴である、データを中心とした要素の操作です。
下記の例では、選択したドキュメント上のpタグに対して、上から順にデータ（配列の要素）の数だけpタグにスタイル変更を行っています。
また、コールバック関数の中では引数としてデータの値を受け取り、それをfont-sizeの値として適用しています。

 
<pre class="lang:js decode:true " >d3.selectAll("p")
    .data([4, 8, 15, 16, 23, 42])
    .style("font-size", function(d) { return d + "px"; });
</pre> 

<script type="text/javascript" src="http://jsdo.it/blogparts/k4gN/js"></script>
<a title="サンプル" href="http://jsdo.it/_shimizu/k4gN">サンプル - jsdo.it - share JavaScript, HTML5 and CSS</a>

&nbsp;
&nbsp;
&nbsp;
 
 
 <strong>■データを基に要素を追加</strong>
データ（配列）を基に、ドキュメントに新たな要素(pタグ)を追加しています。
 
<pre class="lang:js decode:true " >d3.select("body").selectAll("p")
    .data([4, 8, 15, 16, 23, 42])
  .enter().append("p")
    .text(function(d) { return "I’m number " + d + "!"; });
</pre> 

<script type="text/javascript" src="http://jsdo.it/blogparts/yDJK/js"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="サンプル" href="http://jsdo.it/_shimizu/yDJK">サンプル - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
d3.jsではこのようにデータを基にしたドキュメントの要素への操作を簡単に行うことができます。

&nbsp;
&nbsp;
&nbsp;

<strong>■デバッグのしやすさ</strong>
canvasタグを利用するグラフィックライブラリと異なり、d3.jsで作成するグラフは、HTML、CSS、SVGで構築されます。
そのため、ブラウザの開発ツール（webインスペクタ等）で容易にその内容を確認することができます。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/b6e4d614f0b145f7a7ecaba4c5dd5750.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/b6e4d614f0b145f7a7ecaba4c5dd5750-1024x488.jpg" alt="" title="スクリーンショット 2012-06-02 1.30" width="620" height="295" class="alignnone size-large wp-image-873" /></a>

「意図した通りにグラフが出力されない」などのバグも、原因を探るのが非常に簡単です。
下記のリンク先で、web開発者ツールを起動し実際に確認してみてください。
<a href="http://jsrun.it/_shimizu/9Nrc">棒グラフ</a>


■参考
チュートリアル
<a href="https://github.com/mbostock/d3/wiki/Tutorials">https://github.com/mbostock/d3/wiki/Tutorials</a>

APIリファレンス
<a href="https://github.com/mbostock/d3/wiki/API-Reference">https://github.com/mbostock/d3/wiki/API-Reference</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51BarZiCJnL._SL160_.jpg" alt="インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.04.17</div></div><div class="amazlet-detail">Scott Murray <br />オライリージャパン <br />売り上げランキング: 18,150<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


jsdo.itで、他にいくつかサンプルを作ってます。
<a href="http://jsdo.it/tag/d3.js">Tag: d3.js</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>862</wp:post_id>
		<wp:post_date>2012-06-02 02:45:37</wp:post_date>
		<wp:post_date_gmt>2012-06-01 17:45:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-862</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427313499;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3587;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[JavaScript関連の情報をまとめてみた | Yusuke&#039;s Hack Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://wp.yusukew62.com/wordpress/?p=280</wp:comment_author_url>
			<wp:comment_author_IP>49.212.151.199</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 20:24:02</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 11:24:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ■D3.jsについて http://shimz.me/blog/?p=862 http://bl.ocks.org/950642#graph.json [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370949842.6114890575408935546875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370950454.9739959239959716796875;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>IE9でページがレンダリング（表示）されない</title>
		<link>http://shimz.me/blog/troubleshooting/913</link>
		<pubDate>Wed, 06 Jun 2012 01:04:15 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=913</guid>
		<description></description>
		<content:encoded><![CDATA[アップグレード後、立て続けに質問があったので。
IE ver9 でネットワーク接続は問題ないのに、ページが真っ白で表示されないケース。
ノートＰＣで起きやすい。

【対応】
インターネットオプション→詳細設定→「[GPU レンダリングでなく、ソフトウェア レンダリングを使用する」にチェック

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>913</wp:post_id>
		<wp:post_date>2012-06-06 10:04:15</wp:post_date>
		<wp:post_date_gmt>2012-06-06 01:04:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ie9%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e3%81%8c%e3%83%ac%e3%83%b3%e3%83%80%e3%83%aa%e3%83%b3%e3%82%b0%ef%bc%88%e8%a1%a8%e7%a4%ba%ef%bc%89%e3%81%95%e3%82%8c%e3%81%aa%e3%81%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427298510;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:3629;}i:2;a:1:{s:2:"id";i:16;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>コードの書き方を質問できるＱ＆Ａコミュニティー「Code Review beta」</title>
		<link>http://shimz.me/blog/web/919</link>
		<pubDate>Thu, 07 Jun 2012 00:13:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=919</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codereview.stackexchange.com/">Code Review beta</a>

<a href="http://codereview.stackexchange.com/"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000004-1024x724.jpg" alt="" title="WS000004" width="620" height="438" class="alignnone size-large wp-image-920" /></a>

<a href="http://stackexchange.com/">StackExchange</a>を利用して作成されているＱ＆Ａコミュニティの一つ。
StackOverflowでは具体的な質問に対して回答を求めることが多いけど、こちらは「とりあえず書いてみたんだけど、この書き方であってる？」とか「もっと効率のいい書き方ない？」とか「このコードをデザインパターンで書き直すにはどうしたらいい？」みたいな、コーディングに関する質問を投げることが推奨されている。
参加者はまだ少ないみたいだけど、改善されたコードのBefore-Afterが見れるので勉強になる。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>919</wp:post_id>
		<wp:post_date>2012-06-07 09:13:24</wp:post_date>
		<wp:post_date_gmt>2012-06-07 00:13:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b3%e3%83%bc%e3%83%89%e3%81%ae%e6%9b%b8%e3%81%8d%e6%96%b9%e3%82%92%e8%b3%aa%e5%95%8f%e3%81%a7%e3%81%8d%e3%82%8b%ef%bd%91%ef%bc%86%ef%bd%81%e3%82%b3%e3%83%9f%e3%83%a5%e3%83%8b%e3%83%86%e3%82%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[920]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427341160;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2860;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:1899;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPress に Facebookの公式プラグインいれてみた。</title>
		<link>http://shimz.me/blog/other/939</link>
		<pubDate>Fri, 15 Jun 2012 06:12:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=939</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wordpress.org/extend/plugins/facebook/"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000003.jpg" alt="" title="WS000003" width="620" height="610" class="alignnone size-full wp-image-942" /></a>


インストールの方法は以下
<a href="http://developers.facebook.com/wordpress/">http://developers.facebook.com/wordpress/</a>


とりえあず、テストを兼ねて投稿してみる。

【追記】
WordPressで記事を書くと、「最近のアクティビティ」として通知されるのは、便利かも。あと、Blogのアクセス解析にFacebook「インサイト」が使えるようになるので、これはありがたい。
プラグインをただインストールするだけではだめで、ブログを<a href="https://developers.facebook.com/apps/">Facebook Developers</a>でFacebookアプリとして登録しないといけないので、そこはちょっとだけ敷居が高いかも。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>939</wp:post_id>
		<wp:post_date>2012-06-15 15:12:38</wp:post_date>
		<wp:post_date_gmt>2012-06-15 06:12:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress-%e3%81%ab-facebook%e3%81%ae%e5%85%ac%e5%bc%8f%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%81%84%e3%82%8c%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[467342046626529]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[942]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425854535;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2331;}i:1;a:1:{s:2:"id";i:2194;}i:2;a:1:{s:2:"id";i:3567;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 力学モデル</title>
		<link>http://shimz.me/blog/d3-js/948</link>
		<pubDate>Tue, 19 Jun 2012 06:12:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=948</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://mbostock.github.com/d3/ex/force.html"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000005.jpg" alt="" title="WS000005" width="945" height="489" class="alignnone size-full wp-image-949" /></a>
よく見かけるわりに、正式な名称を知らなかったのですが、上記のような図を「力学モデル (グラフ描画アルゴリズム)」などと言うらしいです。


d3.jsでは、上記のような複雑なグラフを描画するためにレイアウトオブジェクトとよばれるテンプレート機能が提供されています。力学モデルを描画するためには、Force Layoutを使用します。

<a href="https://github.com/mbostock/d3/wiki/Force-Layout">Force Layout リファレンス</a>


<script type="text/javascript" src="http://jsdo.it/blogparts/9nUr/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/9nUr" title="d3.js ネットワーク（Force Layout）">d3.js ネットワーク（Force Layout） - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8" /&gt;
&lt;title&gt;d3.js Force Layout&lt;/title&gt;
&lt;style&gt;
.link { stroke: #ccc; }
.nodetext { pointer-events: none; font: 10px sans-serif; }
&lt;/style&gt;
&lt;script src="http://d3js.org/d3.v2.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;input id="addNodeE" type="button" value="Eノード追加"&gt;&lt;/input&gt;
&lt;input id="delNodeB" type="button" value="Bノード削除"&gt;&lt;/input&gt;
&lt;input id="addLinkDC" type="button" value="DCリンク追加"&gt;&lt;/input&gt;
&lt;input id="delLinkAC" type="button" value="ACリンク削除"&gt;&lt;/input&gt;



&lt;script type="text/javascript" src="index.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 


 
<pre class="lang:js decode:true " >var w = 450,
    h = 420

var nodes = [],    //ノードを収める配列
    links = [];    //ノード間のリンク情報を収める配列

//グラフを描画するステージ（svgタグ）を追加
var stage = d3.select("body").append("svg:svg").attr("width", w).attr("height", h);

//グラフの初期設定
var force = self.force = d3.layout.force()
	.nodes(nodes)
	.links(links)
	.gravity(.05) //重力
	.distance(100) //ノード間の距離
	.charge(-100) //各ノードの引き合うor反発しあう力
	.size([w, h]); //図のサイズ

//グラフにアニメーションイベントを設置
force.on("tick", function() {
    var node = stage.selectAll("g.node").data(nodes, function(d) { return d.id;} );
        node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    var link = stage.selectAll("line.link").data(links, function(d) { return d.source.id + ',' + d.target.id});
	link.attr("x1", function(d) { return d.source.x; })
	    .attr("y1", function(d) { return d.source.y; })
	    .attr("x2", function(d) { return d.target.x; })
	    .attr("y2", function(d) { return d.target.y; });
});


//inputタグにイベントを設置
d3.select("#addNodeE").on("click", function(){
   addNodeE(); 
    d3.select(this).attr("disabled", "disabled");
});
d3.select("#delNodeB").on("click", function(){
   delNodeB(); 
    d3.select(this).attr("disabled", "disabled");
});
d3.select("#addLinkDC").on("click", function(){
   addLinkDC(); 
    d3.select(this).attr("disabled", "disabled");
});
d3.select("#delLinkAC").on("click", function(){
   delLinkAC(); 
    d3.select(this).attr("disabled", "disabled");
});


//アップデート（再描画）
function update() {
    var link = stage.selectAll("line.link")
	.data(links, function(l) { return l.source.id + '-' + l.target.id; }); //linksデータを要素にバインド
    
    link.enter().append("svg:line")
	.attr("class", "link")
	.attr("x1", function(d) { return d.source.x; })
	.attr("y1", function(d) { return d.source.y; })
	.attr("x2", function(d) { return d.target.x; })
	.attr("y2", function(d) { return d.target.y; });

    link.exit().remove(); //要らなくなった要素を削除

    var node = stage.selectAll("g.node")
	.data(nodes, function(d) { return d.dpid;});  //nodesデータを要素にバインド

    var nodeEnter = node.enter().append("svg:g")
	.attr("class", "node")
	.call(force.drag); //ノードをドラッグできるように設定
    
    nodeEnter.append("svg:image")
	.attr("class", "circle")
	.attr("xlink:href", "http://jsrun.it/assets/i/3/V/Z/i3VZI.png") //ノード用画像の設定
	.attr("x", "-16px")
	.attr("y", "-16px")
	.attr("width", "32px")
	.attr("height", "32px");

    nodeEnter.append("svg:text")
	.attr("class", "nodetext")
	.attr("dx", 18)
	.attr("dy", ".35em")
	.text(function(d) { return d.id });

    node.exit().remove(); //要らなくなった要素を削除

    force.start(); //forceグラグの描画を開始

}


//ノード、リンクの初期値
function forceInit() {
	var nA = {id: 'a'};
	var nB = {id: 'b'};
	var nC = {id: 'c'};
  	var nD = {id: 'd'};
	nodes.push(nA);
	nodes.push(nB);
	nodes.push(nC);
	nodes.push(nD);

	var lAB = {source: nA, target: nB};
	var lAC = {source: nA, target: nC};
	var lBC = {source: nB, target: nC};
	var lAD = {source: nA, target: nD};
	links.push(lAB );
	links.push(lAC);
	links.push(lBC);
	links.push(lAD);

	update();
}

/*
 * .filterメソッドは、配列に対して反復処理を行い、その結果を新しい配列として返す
*/

//Ｅノード追加
function addNodeE(){
    var nodeE = {id: "e"};
    nodes.push(nodeE);
    var nA = nodes.filter(function(n) { return n.id === 'a'; })[0];
    var linkAE = {source: nA , target: nodeE};
    links.push(linkAE);
    update();
}

//Ｂノード削除
function delNodeB() {
	nodes = nodes.filter(function(n) { return n.id !== 'b'; });
	links = links.filter(function(l) { return (l.source.id !== 'b' &amp;&amp; l.target.id !== 'b'); });
	update();
}

//ＤＣ間にリンク追加
function addLinkDC() {
	var nD = nodes.filter(function(n) { return n.id === 'd'; })[0];
	var nC = nodes.filter(function(n) { return n.id === 'c'; })[0];
	var lDC = {source: nD, target: nC};
	links.push(lDC);
	update();
}

//ＡＣ間のリンク削除
function delLinkAC() {
    links = links.filter(function(l) { return (l.source.id === 'a' &amp;&amp; l.target.id === 'c') ? null : l; });
    update();
}

forceInit();
update();
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>948</wp:post_id>
		<wp:post_date>2012-06-19 15:12:13</wp:post_date>
		<wp:post_date_gmt>2012-06-19 06:12:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-948</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[469777856382948]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[949]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js-%e3%81%a7%e5%8a%9b%e5%ad%a6%e3%83%a2%e3%83%87%e3%83%ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427389811;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3803;}i:1;a:1:{s:2:"id";i:2701;}i:2;a:1:{s:2:"id";i:1133;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wakandaを使って１分でWebアドレス帳を作る</title>
		<link>http://shimz.me/blog/javascript/972</link>
		<pubDate>Wed, 20 Jun 2012 06:54:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=972</guid>
		<description></description>
		<content:encoded><![CDATA[<img style="display: none;" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000001.jpg" alt="" />
<a href="http://www.wakanda.jp/">Wakanda</a> ワカンダ ッテ ナンダ？

<iframe src="http://www.youtube.com/embed/yq5fGBwtLlU" frameborder="0" width="100%" height="340"></iframe>
<blockquote>WakandaはビジネスWebアプリケーションを構築するためのプラットフォームです。
WakandaにはWebサーバー・データベース・ランゲージ実行エンジンがすべてWakanda Serverワンパッケージに含まれているため、インストールから開発、配布、運用をとても容易に行うことができます。
さらにWakandaには開発ツールであるWakanda Studioも付属します。この開発ツールではグラフィックエディターを使ってモデルの定義やビューの作成 (HTMLエディター)、さらにコントローラーの記述 (JavaScriptエディターおよびデバッガー) を行うことができます。</blockquote>


詳しい話は、上記の動画や<a href="http://www.wakanda.jp">公式サイト</a>を参照していただくとして、とりあえず面白そうなのでざっと触ってみました。
&nbsp;
&nbsp;


<strong>■ インストールとＩＤＥの起動</strong>

<a href="http://www.wakanda.org/downloads">ココ</a>から「All-in-one」を選択してダウンロードします。
<a href="http://shimz.me/blog/wp-content/uploads/2012/06/install1.jpg">
<img class="alignnone size-full wp-image-973" title="install1" src="http://shimz.me/blog/wp-content/uploads/2012/06/install1.jpg" alt="" width="267" height="99" /></a>
ダウンロードしたファイルを解凍すると、なかに「Wakanda Server」と「Wakanda Studio」が入ってます。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/start1.jpg"><img class="alignnone size-full wp-image-974" title="start1" src="http://shimz.me/blog/wp-content/uploads/2012/06/start1.jpg" alt="" width="97" height="100" /></a>
「Wakanda Studio」フォルダの中の「Wakanda Stuio.exe」をクリックしてIDEを起動します。

&nbsp;
&nbsp;


<strong>■ 新規プロジェクトの作成</strong>

メニューバーの「File」→「New」→「Project」から、新規プロジェクトを作成します。

プロジェクトのテンプレートは「Blank」で、プロジェクト名は適当に「test」とつけて保存します。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/start3.jpg"><img class="alignnone size-large wp-image-976" title="start3" src="http://shimz.me/blog/wp-content/uploads/2012/06/start3-1024x677.jpg" alt="" width="620" height="409" /></a>

&nbsp;
&nbsp;


<strong>■ データストアークラスの作成</strong>

左サイドに、ツリー形式でファイルが表示されるので、「test.waModel」をクリックします。

<a style="color: #ff4b33; line-height: 24px;" href="http://shimz.me/blog/wp-content/uploads/2012/06/model01.jpg"><img class="alignnone size-full wp-image-986" title="model0" src="http://shimz.me/blog/wp-content/uploads/2012/06/model01.jpg" alt="" width="240" height="240" /></a>

ワークスペースに"データストアークラス デザイナー"が表示されるので<img class="size-full wp-image-979 alignnone" title="model2" src="http://shimz.me/blog/wp-content/uploads/2012/06/model2.jpg" alt="" width="33" height="33" />（New Class ボタン）をクリックして新規データストアー クラスを追加します。クラス名はそのまま変更せず使います。

<img class="alignnone size-large wp-image-983" title="model2-5" src="http://shimz.me/blog/wp-content/uploads/2012/06/model2-5-1024x568.jpg" alt="" width="620" height="343" />

追加されたデータストアーに必要な属性を追加していきます。

属性を追加するには「+」ボタンをクリックします。

<img class="alignnone size-full wp-image-984" title="model3" src="http://shimz.me/blog/wp-content/uploads/2012/06/model3.jpg" alt="" width="203" height="128" />

今回は、アドレス帳なので、name(名前)、address(住所)、tel(電話番号)の３つを追加します。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/model4.jpg"><img class="alignnone size-full wp-image-985" title="model4" src="http://shimz.me/blog/wp-content/uploads/2012/06/model4.jpg" alt="" width="236" height="189" /></a>

作業が終わったら<a href="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg"><img title="WS000009" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg" alt="" width="33" height="33" /></a>（saveボタン）をクリックして保存します。

&nbsp;
&nbsp;


<strong>■ ＵＩの作成</strong>

左サイドのファイル一覧から「index.html」をクリックします。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/index0.jpg"><img class="alignnone size-full wp-image-987" title="index0" src="http://shimz.me/blog/wp-content/uploads/2012/06/index0.jpg" alt="" width="240" height="240" /></a>

ワークスペースにGUI デザイナーが表示されるので、

まず、「Gird」をGUIデザイナーにドラッグ＆ドロップします。

その後、Gird上に、先ほど作った「DataClass1」をドラッグ＆ドロップします。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/index4.jpg"><img class="alignnone size-large wp-image-988" title="index4" src="http://shimz.me/blog/wp-content/uploads/2012/06/index4-1024x569.jpg" alt="" width="620" height="344" /></a>

作業が終わったら<a href="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg"><img class="alignnone size-full wp-image-990" title="WS000009" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg" alt="" width="33" height="33" /></a>（saveボタン）をクリックして保存します。

&nbsp;
&nbsp;


<strong>■ 実行</strong>

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/WS000016.jpg"><img class="alignnone size-full wp-image-989" title="WS000016" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000016.jpg" alt="" width="69" height="57" /></a>（実行ボタン）をクリックすると、ブラウザが起動します。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/run.jpg"><img class="alignnone size-large wp-image-991" title="run" src="http://shimz.me/blog/wp-content/uploads/2012/06/run-1024x717.jpg" alt="" width="620" height="434" /></a>

以上で完成です。
「+」ボタンでデータを追加、「－」ボタンでデータの削除が行えます。


&nbsp;
&nbsp;


必要なものが１インストールで揃って、ペタペタ貼り付けるだけで動くというのは楽ですね。
もっと詳しいことが知りたい方は公式の<a href="http://doc.wakanda.org/home2.ja.html">マニュアル</a>などをご覧ください。


&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date>2012-06-20 15:54:48</wp:post_date>
		<wp:post_date_gmt>2012-06-20 06:54:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-972</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1010]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[470434506317283]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[wakanda%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%ef%bc%91%e5%88%86%e3%81%a7web%e3%82%a2%e3%83%89%e3%83%ac%e3%82%b9%e5%b8%b3%e3%82%92%e4%bd%9c%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427293528;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4025;}i:1;a:1:{s:2:"id";i:1561;}i:2;a:1:{s:2:"id";i:2952;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日本レコード協会が音楽ファンに望むネット上での正しい音楽の使い方</title>
		<link>http://shimz.me/blog/copyright/1031</link>
		<pubDate>Wed, 27 Jun 2012 11:52:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1031</guid>
		<description></description>
		<content:encoded><![CDATA[時代が変わり、環境が変われば、音楽の楽しみ方も変わっていくのだと思いますが……

<a href="http://www.riaj.or.jp/copyright/music/qa_internet.html">音楽CDの利用についてQ＆A集[インターネット編]　／　日本レコード協会</a>
<blockquote>Ｑ．インターネットラジオを開設して、自分の好きなCDの音楽を流すことはできますか？
Ａ．できません

Ｑ．自分のホームページにおすすめCDのジャケットをスキャンして載せてもいいですか？
Ａ．できません

Ｑ．自分のホームページに好きな曲の歌詞を、スキャンではなく自分で打ち変えて掲載したいのです。
それと、自分で採譜した楽譜も載せたいのですが、可能ですか？
Ａ．できません

Ｑ．私のアマチュアバンドで好きなアーティストの曲をカバーして録音をしました。
かっこよくできたので自分のサイトにアップロードしようと思いますが、可能ですか？
Ａ．できません</blockquote>

 　

厳しいなぁ。「権利者に確認をとればＯＫ」と言われても、確認をとらない限りカバー曲を演奏した動画でさえアップロードしちゃいけないってのは厳しぎませんか？

商業音楽をカバーした「歌ってみた」や「演奏してみた」動画をダウンロードしても、違法ダウンロードになるんでしょうか？
著作権者から許可を得ているかどうかなんで知りようもないんですが。

著作権法自体が時代に合わなくなってきている気がします。

でも最近の動きをみていると、日本レコード協会はとにかくファンに受動的に音楽を消費してもらいたいみたいですね。

<!--more-->


自分はYoutubeで、日本のJ-POPなどが海外の人にどう受け取られているのか？をコメント欄などを読みながら調べるのが好きなのですが、そういうことをやっているとたびたび疑問を抱かざるおえない日本の音楽業界の対応を目にすることがあります。

なかでも、「これは、ないんじゃないか」と思った対応をあげると、

１．「踊ってみた」「歌ってみた」「演奏してみた」系動画のaudioだけ権利者削除する。
Perfumeなんかは、特徴的なダンスが結構海外の人にも好評で、沢山の「踊ってみた」動画がYoutubeにアップされていたのですが、一時期大量にそれらの動画のaudio（音）だけ権利者削除されていました。
無音のダンス動画……シュールです。
踊っているのは、良くも悪くもファンなわけで、削除するのが正しい行いだとしても、印象が悪すぎると思います。
（ちなみに、最近、削除していたaudioを復活させているみたいです）

２．公式チャンネルを作ったとたんに、他のユーザーが上げていたPVを削除
わからなくは無いんです。
先に、PVを勝手にあげてしまっているユーザーがいてそれが人気を集めてしまっていたりすると、同じPVを公式が後からアップしてもなかなかアクセスが集まらなかったりするので。
ただ、動画につけられたコメントとかはある種財産だと思うんですよね。活発にコメントが書き込まれている動画をばっさりと削除して、「公式でアップしたから、次からこっちで見てね」ってのはもったいないと思います。
おまけに、日本の音楽事務所の公式チャンネルは、コメント欄閉じている場合が多いし、なんかあまりコミュニケーションが生まれる感じがしないんですよね。


上記のような対応は、「音楽をただ聴くだけじゃなく"音楽を楽しみたい"ファンほどネットの上では楽しめない」という状況を作り出していると思うのですが、ほんとにそれで売り上げが上がるんでしょうか。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1031</wp:post_id>
		<wp:post_date>2012-06-27 20:52:00</wp:post_date>
		<wp:post_date_gmt>2012-06-27 11:52:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%97%a5%e6%9c%ac%e3%83%ac%e3%82%b3%e3%83%bc%e3%83%89%e5%8d%94%e4%bc%9a%e3%81%8c%e9%9f%b3%e6%a5%bd%e3%83%95%e3%82%a1%e3%83%b3%e3%81%ab%e6%9c%9b%e3%82%80%e3%83%8d%e3%83%83%e3%83%88%e4%b8%8a%e3%81%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[475057869188280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/475057869188280" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390276;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3127;}i:1;a:1:{s:2:"id";i:3780;}i:2;a:1:{s:2:"id";i:3853;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>InDesignのスクリプティング　メモ</title>
		<link>http://shimz.me/blog/indesign/1094</link>
		<pubDate>Fri, 06 Jul 2012 03:21:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1094</guid>
		<description></description>
		<content:encoded><![CDATA[ネタが無いので、昔のブログから掘り出してきた記事。


ＤＢから出力されたCSVデータを読み込んで、データ結合(自動組版)、ツメ付け、ノンブル振り、PDF書き出しなど。(参考：<a href="http://study-room.info/id/">InDesignの勉強部屋</a>)

<strong>Javascript内で「データ結合」機能を実行</strong>
<pre class="lang:js decode:true " >var doc = app.activeDocument;
var Filename = File.openDialog(&quot;ソースファイルを選択&quot;);
var dmg = doc.dataMergeProperties;
dmg.selectDataSource(Filename);
dmg.mergeRecords();
</pre> 
 

<strong>ツメの貼り付け</strong>
<pre class="lang:js decode:true " >doc = app.activeDocument;
var Filename = File.openDialog(&quot;ツメ画像を選択してください&quot;);
if(Filename){
	for(i=0;i &lt; app.activeDocument.pages.length;i++){
		imgFrame = doc.pages[i].textFrames.add();
		if(i % 2 == 0){
			imgFrame. visibleBounds = [&quot;-3mm&quot;, &quot;-3mm&quot;, &quot;300mm&quot;, &quot;10mm&quot;]; 
		}else{
			imgFrame. visibleBounds = [&quot;-3mm&quot;, &quot;200mm&quot;, &quot;300mm&quot;, &quot;213mm&quot;]; 
		}
		imgFrame.contentType = ContentType.graphicType;
		imgFrame.place(Filename);
	}
}</pre> 
 

<strong>ノンブルを振る</strong>
<pre class="lang:js decode:true " >var doc = app.activeDocument;
var start_nombre = prompt(&quot;ノンブルの開始番号を入力&quot;,&quot;&quot;);
if(start_nombre != null){ 
	if(start_nombre ==&quot;&quot;) start_nombre = &quot;1&quot;;
	for(i=0;i &lt; app.activeDocument.pages.length;i++){
		nombreFrame = doc.pages[i].textFrames.add();
		nombreFrame . visibleBounds = [&quot;285mm&quot;, &quot;95mm&quot;, &quot;290mm&quot;, &quot;115mm&quot;];
		nombre = parseInt(start_nombre) + i;
		nombreFrame.contents = String(nombre);
		nombreFrame.paragraphs[0].justification = Justification.centerAlign;
	}
}
</pre> 
 

<strong>PDF書き出し</strong>
<pre class="lang:js decode:true " >PDFpre = &quot;PDFX1&quot;　//PDF書き出しプリセットの指定
var filename = File.saveDialog(&quot;保存先フォルダを選択してください&quot;,&quot;.pdf&quot;);
if (filename)
{
	if(PDFpre){
		app.activeDocument.exportFile(ExportFormat.pdfType, filename, false,PDFpre);
	}else{
		app.activeDocument.exportFile(ExportFormat.pdfType, filename, false);
	}
}</pre>

<strong>オーバーフロー修正</strong>
 
<pre class="lang:js decode:true " >var docObj = app.activeDocument;
for (var i=0; i&lt;docObj.pages.length; i++) //ページループ
{
	var tfObj = docObj.pages[i].textFrames; //ページ内テキストフレーム
	for (var j=0; j&lt;tfObj.length; j++){
		while(tfObj[j].overflows == true){
			try{
				--tfObj[j].parentStory.horizontalScale ;
			}catch(e){
				alert(e);
				$.writeln(tfObj[j].texts[0]);
				exit();
			}
		}	
	}	
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1094</wp:post_id>
		<wp:post_date>2012-07-06 12:21:47</wp:post_date>
		<wp:post_date_gmt>2012-07-06 03:21:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1094</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="indesign"><![CDATA[InDesign]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/480184465342287" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}i:1;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/480185375342196" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[480185375342196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[indesign%e3%81%ae%e3%82%b9%e3%82%af%e3%83%aa%e3%83%97%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e3%80%80%e3%83%a1%e3%83%a2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426795448;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3743;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:3137;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プログラミングする気力が無いときに観たくなる動画</title>
		<link>http://shimz.me/blog/programming/1097</link>
		<pubDate>Tue, 03 Jul 2012 13:57:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1097</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2012/07/tired.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/07/tired.jpg" alt="" title="tired" width="470" height="325" class="alignnone size-full wp-image-1099" /></a>

夏でもないのに夏バテぎみで、コードを書く気力が湧きません orz
しかたがないので、やる気を取り戻せる動画をニコ動で眺めてきました。


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm8391299"></script><noscript><a href="http://www.nicovideo.jp/watch/sm8391299">【ニコニコ動画】【プログラミング】オセロを1時間で作ってみた【実況解説】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm8517855"></script><noscript><a href="http://www.nicovideo.jp/watch/sm8517855">【ニコニコ動画】【プログラミング】テトリスを1時間強で作ってみた【実況解説】</a></noscript>

楽しそうなプログラミング動画を観ると、ちょっとだけ、やる気が回復する気がしますね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1097</wp:post_id>
		<wp:post_date>2012-07-03 22:57:44</wp:post_date>
		<wp:post_date_gmt>2012-07-03 13:57:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1097</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1099]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[478841598809907]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/478841598809907" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%99%e3%82%8b%e6%b0%97%e5%8a%9b%e3%81%8c%e7%84%a1%e3%81%84%e3%81%a8%e3%81%8d%e3%81%ab%e8%a6%b3%e3%81%9f%e3%81%8f%e3%81%aa%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427290943;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:723;}i:1;a:1:{s:2:"id";i:2295;}i:2;a:1:{s:2:"id";i:2772;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bootstrap popover 表示位置切り替え</title>
		<link>http://shimz.me/blog/javascript/1114</link>
		<pubDate>Fri, 13 Jul 2012 05:10:36 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1114</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://twitter.github.com/bootstrap/javascript.html#popovers">popover</a>

<a href="http://shimz.me/blog/wp-content/uploads/2012/07/WS000013.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/07/WS000013.jpg" alt="" title="WS000013" width="588" height="192" class="alignnone size-full wp-image-1115" /></a>

Bottstrapのpopoverの表示位置を動的に変更する。
<script type="text/javascript" src="http://jsdo.it/blogparts/yvPI/js"></script>

表示位置を変更しているのは以下の部分。
 
<pre class="lang:js decode:true " >$(&quot;.preview&quot;).each(function(){$(this).data().popover.options.placement = &quot;bottom&quot;}) ;
</pre> 
placementの値を変更することで、表示位置を変えられます。
上記のサンプルでは、マウスの位置を見てポップオーバーの表示位置を変更しています。


ついでに。
popover内へのiframeの埋め込み
<script type="text/javascript" src="http://jsdo.it/blogparts/glCz/js"></script>

便利]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1114</wp:post_id>
		<wp:post_date>2012-07-13 14:10:36</wp:post_date>
		<wp:post_date_gmt>2012-07-13 05:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1114</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[483352245025509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/483352245025509" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[bootstrap-popover-%e8%a1%a8%e7%a4%ba%e4%bd%8d%e7%bd%ae%e5%88%87%e3%82%8a%e6%9b%bf%e3%81%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427340504;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3226;}i:1;a:1:{s:2:"id";i:3147;}i:2;a:1:{s:2:"id";i:2851;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 ワードクラウド　「d3-cloud」プラグイン</title>
		<link>http://shimz.me/blog/d3-js/1133</link>
		<pubDate>Wed, 18 Jul 2012 11:23:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1133</guid>
		<description></description>
		<content:encoded><![CDATA[【追記】
バージョン上がって動かなくなったみたいなので、以下をどうぞ。
<a href="http://shimz.me/blog/d3-js/2711">【D3.js】「全ツイート履歴」からWord cloudを作ってみた。</a>


<hr>
<a href="https://github.com/jasondavies/d3-cloud"><img src="http://shimz.me/blog/wp-content/uploads/2012/07/687474703a2f2f7777772e6a61736f6e6461766965732e636f6d2f776f7264636c6f75642f616d617a696e672e706e67.png" alt="" title="687474703a2f2f7777772e6a61736f6e6461766965732e636f6d2f776f7264636c6f75642f616d617a696e672e706e67" width="960" height="600" class="alignnone size-full wp-image-1134" /></a>

「タグクラウド」という呼び名の方が一般的なのかもしれません。

「d3-clud」はワードクラウドを生成する、d3.jsのプラグインです。

<a href="http://www.jasondavies.com/wordcloud/">デモ</a>

<a href="https://github.com/jasondavies/d3-cloud">ダウンロード</a>

使い方は、ダウンロードした中に含まれているsimple.htmlのソースを見るのが早いと思います。

<a href="http://shimz.me/libs/d3/plugin/cloud/examples/simple.html">simple.html</a>

上記のサンプルでは、画面を更新するたび単語が重ならないように自動的に調整されて表示されます。

 
<pre class="lang:js decode:true " > //ワードクラウドの初期設定
  d3.layout.cloud().size([300, 300])
      .words([
        "Hello", "world", "normally", "you", "want", "more", "words",
        "than", "this"].map(function(d) {
        return {text: d, size: 10 + Math.random() * 90}; 
      })) //表示する単語を納めた配列を、wordsオブジェクトに変換
      .rotate(function() { return ~~(Math.random() * 2) * 90; })　//表示する文字の角度を指定。ここでは、ランダムで　0℃　or 90℃
      .fontSize(function(d) { return d.size; })
      .on("end", draw)
      .start();

  //ワード描画
  function draw(words) {
    d3.select("body").append("svg")
        .attr("width", 300)
        .attr("height", 300)
      .append("g")
        .attr("transform", "translate(150,150)")
      .selectAll("text")
        .data(words) //wordsオブジェクトが渡される
      .enter().append("text")
        .style("font-size", function(d) { return d.size + "px"; })
        .attr("text-anchor", "middle")
        .attr("transform", function(d) {
          return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; //ここで、実際の文字の角度を指定している
        })
        .text(function(d) { return d.text; });
  }</pre> 

手軽で見栄えもよくて、とても便利なプラグインなのですがSVGで出力されるため、SVGに対応しいないブラウザでは出力されたワードクラウドが表示されません。

なので、今のところ使いどころは限られてくるかも。


備考
textタグにwriting-mode="tb"（縦書き）を指定するとうまく配置されませんね。

<script type="text/javascript" src="http://jsdo.it/blogparts/AaOX/js?width=465&height=496&view=screenshot"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date>2012-07-18 20:23:43</wp:post_date>
		<wp:post_date_gmt>2012-07-18 11:23:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1133</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[485588721468528]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/485588721468528" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js-%e3%83%af%e3%83%bc%e3%83%89%e3%82%af%e3%83%a9%e3%82%a6%e3%83%89%e3%80%80%e3%80%8cd3-cloud%e3%80%8d%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427304224;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3399;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:2462;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SQL] 数字を含む文字列を比較するには？</title>
		<link>http://shimz.me/blog/sql/1142</link>
		<pubDate>Fri, 20 Jul 2012 04:15:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1142</guid>
		<description></description>
		<content:encoded><![CDATA[完全に個人的なメモ

「1R」とか「2DK」とか「3LDK」といった文字データの入ったカラムをターゲットに、"４部屋以上"、"４部屋以下"といった条件でデータを抽出したい。

メンドウなことに、このカラムには「事務所」とか「店舗」とか数値の含まれないデータも入っている。

テーブル名は「hoge_tb」カラム名は「room」

とりあえず、思いついたのが以下
 
<pre class="lang:pgsql decode:true " title="4部屋以上抽出">SELECT * FROM hoge_tb WHERE  to_number(('0' || room), '99')&gt;=4 
</pre> 

 
<pre class="lang:pgsql decode:true " title="4部屋以下抽出">SELECT * FROM hoge_tb WHERE   to_number(('0' || room), '99')&lt;=4 AND to_number(('0' || room), '99')&lt;&gt;0 
</pre> 

う～ん、あまり綺麗くない。
もっと、いい方法がないかな。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date>2012-07-20 13:15:52</wp:post_date>
		<wp:post_date_gmt>2012-07-20 04:15:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1142</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[486345051392895]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/486345051392895" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[sql-%e6%95%b0%e5%ad%97%e3%82%92%e5%90%ab%e3%82%80%e6%96%87%e5%ad%97%e5%88%97%e3%82%92%e6%af%94%e8%bc%83%e3%81%99%e3%82%8b%e3%81%ab%e3%81%af%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426698929;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2564;}i:1;a:1:{s:2:"id";i:3804;}i:2;a:1:{s:2:"id";i:2556;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js + restify + mongoDBでお手軽 JSON Web API 作成</title>
		<link>http://shimz.me/blog/node-js/1167</link>
		<pubDate>Sat, 21 Jul 2012 10:33:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1167</guid>
		<description></description>
		<content:encoded><![CDATA[ <a href="http://search.npmjs.org/">npm registry</a> を探っていたら「restify」という便利そうなフレームワークを見つけたので使っててみました。

<a href="http://mcavage.github.com/node-restify/">restify</a>
　

restifyは、REST Webサービスの構築に特化したフレームワークです。
<a href="http://expressjs.com/">Express</a>からテンプレート機能とかを省いて、便利な機能を付け足した感じです。

<strong>restifyのインストール</strong>
 
<pre class="lang:sh decode:true " >$ npm install restify</pre> 

&nbsp;

とりあえず、公式サイトにあるサンプルコードを動かしてみます。
 
<pre class="lang:js decode:true " title="sample.js" >var restify = require('restify');

function respond(req, res, next) {
  res.send('hello ' + req.params.name);
}

var server = restify.createServer();
server.get('/hello/:name', respond);
server.head('/hello/:name', respond);

server.listen(8080, function() {
  console.log('%s listening at %s', server.name, server.url);
});</pre> 

&nbsp;

<strong>実行</strong>
 
<pre class="lang:sh decode:true " title="実行" >$ node sample.js</pre> 

<code>http://＜ホスト名＞:8080/hello/＜任意の名前＞</code>
ブラウザで上記のURLにアクセスすると

<code>hello ＜任意の名前＞</code>
とレスポンスが帰ってきます。
URLのルーティング処理が簡潔にかけて便利ですね。

&nbsp;
&nbsp;

<strong>■ ゲストブックの作成</strong>

「restify」をググっていたら、restifyを使ってゲストブックを作成するチュートリアルを見つけたので、それを参考に簡単なゲストブックを作ってみます。

参考
<a href="http://backbonetutorials.com/nodejs-restify-mongodb-mongoose/">Simple example - Node.js, Restify, MongoDb and Mongoose</a>

データベースにはMongoDBを使うのでインストール。
インストール方法は以下を。
<a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-redhat-centos-or-fedora-linux/">MongoDBのインストール</a>

node.jsからmongodbへアクセスするためのモジュールをインストール。
 
<pre class="lang:sh decode:true " >$ npm install mongodb
$ npm install mongoose</pre> 

&nbsp;

<strong>・ゲストブックに使うWeb APIサーバーを記述</strong>
<pre class="lang:js decode:true " title="webapi.js" >var restify = require('restify');
var server = restify.createServer();
server.use(restify.bodyParser());

var mongoose = require('mongoose');
var db = mongoose.connect('mongodb://localhost/webapi');
var Schema = mongoose.Schema;

var messageSchema = new Schema({
	name: String,
	comment:String,
	date: Date
});

mongoose.model('message', messageSchema);
var Message = mongoose.model('message');

function getMessage(req, res, next){
	res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
	res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);
	Message.find().sort('date',-1).execFind(function(arr, data){
		res.send(data);
	});
}

function postMessage(req, res, next){
	res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
	res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);
	var message = new Message();
	message.name = req.params.name;
	message.comment = req.params.comment;
	message.date = new Date();

	message.save(function(arr, data){
		res.send(data);
	});
}

server.get('/message', getMessage);
server.post('/message', postMessage);

server.listen(8080, function() {
	console.log('%s listening at %s', server.name, server.url);
});</pre> 



8080:/message にPOSTリクエストでname,commentを送信するとmongoDBに保存します。
8080：/message　にGETリクエストを送信すると、保存されているすべてのデータをJSONで返します。

とりあえずテストしてみます。

&nbsp;
<strong>・サーバー起動</strong>
<pre class="lang:sh decode:true " >$ node webapi.js</pre> 


&nbsp;
<strong>・書き込みテスト</strong>
POSTリクエストを送信して、メッセージを書き込みます。成功すると書き込んだ内容がjsonで帰ってきます。失敗するとエラーメッセージがjsonで帰ってきます。
<pre class="lang:sh decode:true " >curl -d &quot;name=test&amp;comment=Hello World!&quot; http://＜ホスト名＞:8080/message/
</pre> 


&nbsp;
<strong>・読み込みテスト</strong>
GETリクエストを送信して、書き込んだ内容がちゃんと帰ってくるか確認します。
 
<pre class="lang:sh decode:true " >curl -is http://localhost:8080/message/</pre> 


&nbsp;
<strong>・mongoシェルで確認</strong>
ちゃんと書き込まれているか、一応mondo側でも確認。
<pre class="lang:sh decode:true " >$ monogo
&gt; show dbs
local   (empty)
test    0.203125GB
webapi  0.203125GB
&gt; use webapi
switched to db webapi
&gt; show collections
messages
&gt;db.messages.find()
{ &quot;date&quot; : ISODate(&quot;2012-07-21T03:49:31.807Z&quot;), &quot;comment&quot; : &quot;hello World!&quot;, &quot;name&quot; : &quot;test&quot;, &quot;_id&quot; : ObjectId(&quot;500a26cbfd23dcb93c000029&quot;) }</pre> 

&nbsp;
ひとまず、これでゲストブック用のWeb APIができました。


&nbsp;
&nbsp;


<strong>・ゲストブックページを作成</strong>
jQueryとjQuery.Modelプラグインを使って作成します。
<pre class="lang:xhtml decode:true " title="guestbook.html" >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;Gest Book&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://v3.javascriptmvc.com/jquery/dist/jquery.model.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
window.onload = function(){

	$.Model('Message',{
	  findAll: 'GET http://＜ホスト名＞:8080/message/',
	  create:  'POST http://＜ホスト名＞:8080/message/',
	},{});
	
	var write = function(msg){
		return	$('&lt;p&gt;').model(msg)
					.html(&quot;&lt;b&gt;&quot;+msg.name+&quot;&lt;/b&gt; &quot;+msg.comment)
					.prependTo('#message_list');
	}
	
	Message.findAll([],function(msgs){
		$.each(msgs, function(i,msg){
				write(msg);
		});
	})

	Message.bind('created', function( ev, msg) {
		write(msg);
	})
		
	$(&quot;#send&quot;).click(function(){
		var message = new Message({
			name: $(&quot;#name&quot;).val(),
			comment:$(&quot;#comment&quot;).val()
		});
		message.save();
	});
}
&lt;/script&gt;


&lt;/head&gt;
&lt;body&gt;
nama:
&lt;input type=&quot;text&quot; id=&quot;name&quot;&gt;&lt;/input&gt;
comment:
&lt;input type=&quot;text&quot; id=&quot;comment&quot;&gt;&lt;/input&gt;
&lt;input type=&quot;button&quot; id=&quot;send&quot; value=&quot;送信&quot;&gt;&lt;/input&gt;
&lt;hr&gt;
&lt;div id=&quot;message_list&quot;&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</pre> 
 



&nbsp;
&nbsp;


<strong>・ブラウザで確認</strong>
guestbook.htmlにアクセスして、ちゃんと書き込みができればできあがりです。
↓こんな感じ
&nbsp;
<a href="http://shimz.me/blog/wp-content/uploads/2012/07/WS000014.jpg"><img class="alignnone size-full wp-image-1179" title="WS000014" src="http://shimz.me/blog/wp-content/uploads/2012/07/WS000014.jpg" alt="" width="511" height="142" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1167</wp:post_id>
		<wp:post_date>2012-07-21 19:33:34</wp:post_date>
		<wp:post_date_gmt>2012-07-21 10:33:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1167</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[486868768007190]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/486868768007190" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js-restify-mongodb%e3%81%a7%e3%81%8a%e6%89%8b%e8%bb%bd-josn-web-api-%e4%bd%9c%e6%88%90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427393219;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:19;}i:1;a:1:{s:2:"id";i:1784;}i:2;a:1:{s:2:"id";i:2701;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【PHP】 YouTubeのURLを解析してiframeを作成する</title>
		<link>http://shimz.me/blog/php/1253</link>
		<pubDate>Mon, 23 Jul 2012 02:23:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1253</guid>
		<description></description>
		<content:encoded><![CDATA[YouTube動画のURLを渡すとiframeタグにして返してくれる関数
<a href="http://blogfreakz.com/tutorial/parse-youtube-urls-with-php/">PARSE YOUTUBE URLS WITH PHP</a>

<a href="http://shimz.me/tmp/php/youtube.php">デモ</a>

 
<pre class="lang:php decode:true " >function parseYoutubeURL($link, $width=640, $height=360){
	$final = ' &lt;iframe width=&quot;'.$width.'&quot; height=&quot;'.$height.'&quot; src=&quot;http://www.youtube.com/embed/{code}&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;';
	
	//se o link for o embed (altera o width e height)
	
	if(stristr($link, &quot;iframe&quot;)){
		$link = preg_replace(&quot;/width=(\&quot;)[0-9]+(\&quot;)/&quot;, 'width=&quot;'.$width.'&quot;', $link);
		$link = preg_replace(&quot;/height=(\&quot;)[0-9]+(\&quot;)/&quot;, 'height=&quot;'.$height.'&quot;', $link);
		return $link;
	}

	$parsed = parse_url($link);
	//link URL
	if(stristr($parsed['path'], 'watch') !== false){
		parse_str($parsed['query'], $args);
		$code = $args['v'];
	}//link do embbed
	elseif(stristr($parsed['path'], 'embed') !== false){
		$code = str_replace(&quot;/embed/&quot;, &quot;&quot;, $parsed['path']);
	}//short link	
	elseif($parsed['host'] == 'youtu.be'){
		$code = str_replace(&quot;/&quot;, &quot;&quot;, $parsed['path']);
	}
	
	
	if($code){
		$final = str_replace(&quot;{code}&quot;, $code, $final);
		return $final;
	}else{
		return null;
	}
}</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date>2012-07-23 11:23:32</wp:post_date>
		<wp:post_date_gmt>2012-07-23 02:23:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1253</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[487578947936172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/487578947936172" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90php%e3%80%91-youtube%e3%81%aeurl%e3%82%92%e8%a7%a3%e6%9e%90%e3%81%97%e3%81%a6iframe%e3%82%92%e4%bd%9c%e6%88%90%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427405417;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:329;}i:1;a:1:{s:2:"id";i:3161;}i:2;a:1:{s:2:"id";i:3742;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FullCalendar のカスタマイズ</title>
		<link>http://shimz.me/blog/jquery/1265</link>
		<pubDate>Fri, 03 Aug 2012 11:20:21 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1265</guid>
		<description></description>
		<content:encoded><![CDATA[カレンダーを作成するのに便利なjQueryのプラグイン「FullCalendar」を使用する際に行ったカスタマイズのメモ書きです。
<a href="http://arshaw.com/fullcalendar/">FullCalendar </a>
<a href="http://arshaw.com/fullcalendar/"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000000-1024x736.jpg" alt="" title="WS000000" width="1024" height="736" class="alignnone size-large wp-image-1292" /></a>



DEMO
<a href="http://shimz.me/example/fullcalenar/01/before.html">before</a> 
<a href="http://shimz.me/example/fullcalenar/01/">after</a>


使用したのは、fullcalendarのver 1.5.3です。


<strong>ラベルの変更</strong>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000001.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000001-150x104.jpg" alt="" title="WS000001" width="150" height="104" class="alignnone size-thumbnail wp-image-1293" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000002-150x100.jpg" alt="" title="WS000002" width="150" height="100" class="alignnone size-thumbnail wp-image-1294" /></a>

 
 
 
 
<pre class="start-line:64 lang:default decode:true " title="fullcalendar before" >
	monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],
	monthNamesShort: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
	dayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	dayNamesShort: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],

</pre> 
<pre class="start-line:64 lang:default decode:true " title="fullcalendar.js after" >	monthNames: ['１月','２月','３月','４月','５月','６月','７月','８月','９月','１０月','１１月','１２月'],
	monthNamesShort: ['１月','２月','３月','４月','５月','６月','７月','８月','９月','１０月','１１月','１２月'],
	dayNames: ['日曜日','月曜日','火曜日','水曜日','木曜日','金曜日','土曜日'],
	dayNamesShort: ['日','月','火','水','木','金','土'],
</pre> 

&nbsp;

<strong>時刻の表記を変更（Month-view）</strong>

<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000004.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000004.jpg" alt="" title="WS000004" width="128" height="108" class="alignnone size-full wp-image-1295" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000003.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000003.jpg" alt="" title="WS000003" width="129" height="108" class="alignnone size-full wp-image-1296" /></a>
<br>

 
<pre class="start-line:57 lang:js decode:true " title="fullcalendar.js before" >	timeFormat: { // for event elements
		'': 'h(:mm)t' // default
	},
</pre> 
<pre class="start-line:57 lang:js decode:true " title="fullcalendar.js after" >	timeFormat: { // for event elements
		'': 'H:mm' // default
	},
</pre> 


&nbsp;

<strong>時刻の表記を変更（Week-view, Day-view）</strong>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000006.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000006-61x150.jpg" alt="" title="WS000006" width="61" height="150" class="alignnone size-thumbnail wp-image-1298" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000005.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000005-63x150.jpg" alt="" title="WS000005" width="63" height="150" class="alignnone size-thumbnail wp-image-1297" /></a>

 <pre class="start-line:2809 lang:js decode:true " title="fullcalendar.js before" >	axisFormat: 'h(:mm)tt',
	timeFormat: {
		agenda: 'h:mm{ - h:mm}'
	},
</pre>
<pre class="start-line:2809 lang:js decode:true " title="fullcalendar.js after" >	axisFormat: 'H:mm',
	timeFormat: {
		agenda: 'H:mm{ - H:mm}'
	},
</pre>

timeFormatで指定できる書式は、1554行目辺りに記述があるのでそこを参照

<pre class="start-line:1554 lang:js decode:true " title="fullcalendar.js" >var dateFormatters = {
	s	: function(d)	{ return d.getSeconds() },
	ss	: function(d)	{ return zeroPad(d.getSeconds()) },
	m	: function(d)	{ return d.getMinutes() },
	mm	: function(d)	{ return zeroPad(d.getMinutes()) },
	h	: function(d)	{ return d.getHours() % 12 || 12 },
	hh	: function(d)	{ return zeroPad(d.getHours() % 12 || 12) },
	H	: function(d)	{ return d.getHours() },
	HH	: function(d)	{ return zeroPad(d.getHours()) },
	d	: function(d)	{ return d.getDate() },
	dd	: function(d)	{ return zeroPad(d.getDate()) },
	ddd	: function(d,o)	{ return o.dayNamesShort[d.getDay()] },
	dddd: function(d,o)	{ return o.dayNames[d.getDay()] },
	M	: function(d)	{ return d.getMonth() + 1 },
	MM	: function(d)	{ return zeroPad(d.getMonth() + 1) },
	MMM	: function(d,o)	{ return o.monthNamesShort[d.getMonth()] },
	MMMM: function(d,o)	{ return o.monthNames[d.getMonth()] },
	yy	: function(d)	{ return (d.getFullYear()+'').substring(2) },
	yyyy: function(d)	{ return d.getFullYear() },
	t	: function(d)	{ return d.getHours() &lt; 12 ? 'a' : 'p' },
	tt	: function(d)	{ return d.getHours() &lt; 12 ? 'am' : 'pm' },
	T	: function(d)	{ return d.getHours() &lt; 12 ? 'A' : 'P' },
	TT	: function(d)	{ return d.getHours() &lt; 12 ? 'AM' : 'PM' }, 	u	: function(d)	{ return formatDate(d, &quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot;) }, 	S	: function(d)	{ 		var date = d.getDate(); 		if (date &gt; 10 &amp;&amp; date &lt; 20) {
			return 'th';
		}
		return ['st', 'nd', 'rd'][date%10-1] || 'th';
	}
};
</pre>

&nbsp;

&nbsp;

<strong>ダブルクリックを取得できるようにする</strong>
<pre class="start-line:4530 lang:js decode:true " title="fullcalendar.js before" >
	// attaches eventClick, eventMouseover, eventMouseout
	function eventElementHandlers(event, eventElement) {
		eventElement
			.click(function(ev) {
				if (!eventElement.hasClass('ui-draggable-dragging') &amp;&amp;
					!eventElement.hasClass('ui-resizable-resizing')) {
						return trigger('eventClick', this, event, ev);
					}
			})
			.hover(
				function(ev) {
					trigger('eventMouseover', this, event, ev);
				},
				function(ev) {
					trigger('eventMouseout', this, event, ev);
				}
			);
		// TODO: don't fire eventMouseover/eventMouseout *while* dragging is occuring (on subject element)
		// TODO: same for resizing
	}
</pre>

&nbsp;

<pre class="start-line:4350 lang:js decode:true mark:10-14" title="fullcalendar.js after" >	// attaches eventClick, eventMouseover, eventMouseout
	function eventElementHandlers(event, eventElement) {
		eventElement
			.click(function(ev) {
				if (!eventElement.hasClass('ui-draggable-dragging') &amp;&amp;
					!eventElement.hasClass('ui-resizable-resizing')) {
						return trigger('eventClick', this, event, ev);
					}
			})
			.dblclick(
				function(ev) {
					return trigger('eventDblClick', this, event, ev);
				}
			)
			.hover(
				function(ev) {
					trigger('eventMouseover', this, event, ev);
				},
				function(ev) {
					trigger('eventMouseout', this, event, ev);
				}
			);
		// TODO: don't fire eventMouseover/eventMouseout *while* dragging is occuring (on subject element)
		// TODO: same for resizing
	}
</pre>

使い方

<pre class="lang:js decode:true " title="index.html eventDblClick" >
$('#calendar').fullCalendar({
    eventDblClick: function(calEvent, jsEvent, view) {

        alert('Event: ' + calEvent.title);
        alert('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);
        alert('View: ' + view.name);

        // change the border color just for fun
        $(this).css('border-color', 'red');

    }
});
</pre>
カレンダーのイベントをダブルクリックした際に処理を実行させることができる。

&nbsp;

&nbsp;

<strong>イベントをJSONで読み込む</strong>
全イベントデータを一気に読み込むのであれば、eventsにイベントデータの(json形式)のファイル名を指定すればいいだけ。
（詳しくは、demosの中のjson.htmlを参照)

<pre class="lang:js decode:true mark:3" title="json.html before" >
		$('#calendar').fullCalendar({
			editable: true,
			events: &quot;json-events.php&quot;,
			eventDrop: function(event, delta) {
				alert(event.title + ' was moved ' + delta + ' days\n' +
					'(should probably update your database)');
			},
			loading: function(bool) {
				if (bool) $('#loading').show();
				else $('#loading').hide();
			}

		});
</pre>

でも、上記の方法ではイベントデータが１年分／２年分と増えていくと重くなる。
なのでviewの切り替わり時に必要なイベントデータだけ取得するようにする。

<pre class="lang:js decode:true mark:3-17" title="json.html after" >$('#calendar').fullCalendar({
	editable: true,
	viewDisplay: function(view) {
		$.ajax({
			url: &quot;json-events.php&quot;,
			dataType: 'json',
			type:&quot;post&quot;,
			data: {
				&quot;start&quot;: view.start.toString(),
				&quot;end&quot;: view.end.toString(),
			},
			success: function(EventSource) {
				$('#calendar').fullCalendar('removeEvents');
				$('#calendar').fullCalendar('addEventSource', EventSource);
			}
		});
	},
	eventDrop: function(event, delta) {
		alert(event.title + ' was moved ' + delta + ' days\n' +
			'(should probably update your database)');
	},
	loading: function(bool) {
		if (bool) $('#loading').show();
		else $('#loading').hide();
	}

});
</pre>


json-events.phpでは、受け取ったstart,endの値をつかって必要なデータだけをjsonで出力するようにしておく。

<a href="http://shimz.me/blog/category/fullcalendar">その他のFllCalendarの記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1265</wp:post_id>
		<wp:post_date>2012-08-03 20:20:21</wp:post_date>
		<wp:post_date_gmt>2012-08-03 11:20:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1265</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1292]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[492447617449305]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/492447617449305" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fullcalendar-%e3%81%ae%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%9e%e3%82%a4%e3%82%ba]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370897;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2475;}i:1;a:1:{s:2:"id";i:1460;}i:2;a:1:{s:2:"id";i:1983;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>画像の無断転載対策をできるだけがんばってみた。</title>
		<link>http://shimz.me/blog/javascript/1315</link>
		<pubDate>Thu, 09 Aug 2012 04:29:18 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1315</guid>
		<description></description>
		<content:encoded><![CDATA[【参考】
<a href="http://shimz.me/blog/?p=1538">著作権法について誤解していたこと</a>
<hr>




<a href="http://togetter.com/t/%E7%84%A1%E6%96%AD%E8%BB%A2%E8%BC%89">togetterで最近話題に</a>なっていたので。JavaScriptでどこまで無断転載対策が行えるか実験してみました。
(無断転載対策というか、画像のダウンロード対策ですが)

デモ。
<script type="text/javascript" src="http://jsdo.it/blogparts/beSt/js?width=465&height=496&view=play"></script>



やったこと。

保護したいimgをcanvasに転写して「ImageData object」に変換。
そのデータをjsonファイルとして保存しページ表示時に読み込んで「dummy」イメージの「ImageData object」と差し替えています。
これでキャッシュにはdummyイメージの画像しか残らないし、Developer Tools の「Resources」で見てもdummy画像のデータしか見えません。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000007.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000007-1024x319.jpg" alt="" title="WS000007" width="1024" height="319" class="alignnone size-large wp-image-1320" /></a>
表示されるのはimgではなくcanvasなので、右クリック「名前を付けて画像を保存」もできません。

・shift & Ctrl & Alt　キー禁止
気休め程度のスクリーンキャプチャソフト対策
一応window.clipboardDatが利用できるブラウザではPrtScnキーの対策も
（ホント気休め）



<strong>問題点</strong>

画像データをjsonに変換しているので、画像サイズが大きいと読み込みに半端なく時間がかかる。

ぶっちゃけ、メンドウ。

結局、完全に防ぐことはできない orz







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1315</wp:post_id>
		<wp:post_date>2012-08-09 13:29:18</wp:post_date>
		<wp:post_date_gmt>2012-08-09 04:29:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1315</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[494767727217294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/494767727217294" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%94%bb%e5%83%8f%e3%81%ae%e7%84%a1%e6%96%ad%e8%bb%a2%e8%bc%89%e5%af%be%e7%ad%96%e3%82%92%e3%81%a7%e3%81%8d%e3%82%8b%e3%81%a0%e3%81%91%e3%81%8c%e3%82%93%e3%81%b0%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390278;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2534;}i:1;a:1:{s:2:"id";i:3058;}i:2;a:1:{s:2:"id";i:3528;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptで最短経路探索</title>
		<link>http://shimz.me/blog/javascript/1339</link>
		<pubDate>Sun, 12 Aug 2012 05:08:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1339</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2012/08/120812-0001.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/120812-0001.png" alt="" title="120812-0001" width="360" height="377" class="alignnone size-full wp-image-1340" /></a>



経路探索アルゴリズムを勉強中。

解説できるほど、まだ理解が及んでいないのでソースだけ載せています。

最短経路探索（テキスト）
<script type="text/javascript" src="http://jsdo.it/blogparts/zXIe/js?width=465&height=496&view=play"></script>

最短経路探索（enchant.js)
<script type="text/javascript" src="http://jsdo.it/blogparts/zdPG/js?width=465&height=496&view=play"></script>

参考

<a href="http://ja.wikipedia.org/wiki/%E3%83%80%E3%82%A4%E3%82%AF%E3%82%B9%E3%83%88%E3%83%A9%E6%B3%95">ダイクストラ法</a>
<a href="http://ja.wikipedia.org/wiki/A*">A*</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1339</wp:post_id>
		<wp:post_date>2012-08-12 14:08:01</wp:post_date>
		<wp:post_date_gmt>2012-08-12 05:08:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%a7%e6%9c%80%e7%9f%ad%e7%b5%8c%e8%b7%af%e6%8e%a2%e7%b4%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="enchant-js"><![CDATA[enchant.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1340]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[495929367101130]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/495929367101130" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427259667;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1343;}i:1;a:1:{s:2:"id";i:3645;}i:2;a:1:{s:2:"id";i:3587;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RPGを作るのに便利なアルゴリズムを提供する「rot.js」</title>
		<link>http://shimz.me/blog/javascript/1343</link>
		<pubDate>Thu, 16 Aug 2012 02:08:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1343</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ondras.github.com/rot.js/hp/"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000018.jpg" alt="" title="WS000018" width="1261" height="796" class="alignnone size-full wp-image-1358" /></a>

<a href="http://ondras.github.com/rot.js/hp/">rot.js: ROguelike Toolkit in JavaScript</a>

「rot.js」はローグライクゲームを作成するのに便利なライブラリです。
"ローグライクゲーム"とは、ダンジョンが自動作成されるタイプのRPG(トルネコの不思議なダンジョン、風来のシレン等）のことですが、rot.jsによって提供される機能は、通常のRPGやシュミレーションゲームなどを作るのにも便利そうです。



■　マップ自動作成
さまざまなタイプのマップを自動で作成することができます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000010.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000010.jpg" alt="" title="WS000010" width="197" height="153" class="alignnone size-full wp-image-1344" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000011.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000011.jpg" alt="" title="WS000011" width="198" height="152" class="alignnone size-full wp-image-1345" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000015.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000015.jpg" alt="" title="WS000015" width="201" height="153" class="alignnone size-full wp-image-1347" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000013.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000013-300x120.jpg" alt="" title="WS000013" width="300" height="120" class="alignnone size-medium wp-image-1346" /></a>

HEXタイプのマップも作成できます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000014.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000014-300x259.jpg" alt="" title="WS000014" width="300" height="259" class="alignnone size-medium wp-image-1350" /></a>

■　最短距離探索
２点間で、障害物をよけながら最短の経路を検出します。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000017.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000017.jpg" alt="" title="WS000017" width="753" height="483" class="alignnone size-full wp-image-1354" /></a>


■　FOV
プレイキャラクターの現在位置から見えるエリア(視界)を検出します。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000016.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000016.jpg" alt="" title="WS000016" width="482" height="363" class="alignnone size-full wp-image-1356" /></a>

その他、ターンを管理する機能などがあります。

サンプル
rot.js + enchant.js
<script type="text/javascript" src="http://jsdo.it/blogparts/wuzh/js?width=465&height=496&view=play"></script>
クリックするとマップが生成されます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1343</wp:post_id>
		<wp:post_date>2012-08-16 11:08:28</wp:post_date>
		<wp:post_date_gmt>2012-08-16 02:08:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rpg%e3%82%92%e4%bd%9c%e3%82%8b%e3%81%ae%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%aa%e3%82%a2%e3%83%ab%e3%82%b4%e3%83%aa%e3%82%ba%e3%83%a0%e3%82%92%e6%8f%90%e4%be%9b%e3%81%99%e3%82%8b%e3%80%8crot-js%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="enchant-js"><![CDATA[enchant.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[497472390280161]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1358]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/497472390280161" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427398191;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4122;}i:1;a:1:{s:2:"id";i:2928;}i:2;a:1:{s:2:"id";i:3698;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>コーラに含まれる発がん性物質「4-MI」</title>
		<link>http://shimz.me/blog/other/1368</link>
		<pubDate>Thu, 23 Aug 2012 11:49:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1368</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.mynewsjapan.com/reports/1681">キリンメッツコーラは発がん物質入り　「発ガンコーラ」はトクホにふさわしくない</a>

上記記事を読んで「メッツ飲んじゃったよ！」と、なんかすごい心配になっている人をTLで見かけましたが、そんなに心配はしなくてもよさそうです。


発がん性物質といっても色々あって、国際がん研究機関 (IARC) による発がん性リスクでは以下のようなグループ分けがなされています。
<ul>
	<li>グループ1：作因（Agent)は、ヒトに対して発癌性である（ヒトでの十分な証拠）</li>
	<li>グループ2A：作因は、ヒトに対して恐らく（probably）発癌性である（ヒトでの限られた証拠，実験動物での十分な証拠）</li>
	<li>グループ2B：作因は、ヒトに対して発癌性であるかも（possibly）知れない（ヒトでの限られた証拠，実験動物での十分より少ない証拠）</li>
	<li>グループ3：作因は、ヒトに対する発癌性については分類できない（ヒトでの不適切な証拠，実験動物での限られた証拠）</li>
	<li>グループ4：作因は、ヒトに対して恐らく（probably）発癌性でない（ヒトと実験動物での発癌性の欠如を示唆する証拠）</li>
	<li>個々の物質・事例については『<a href="http://ja.wikipedia.org/wiki/IARC%E7%99%BA%E3%81%8C%E3%82%93%E6%80%A7%E3%83%AA%E3%82%B9%E3%82%AF%E4%B8%80%E8%A6%A7">IARC発がん性リスク一覧</a>』を参照のこと。</li>
</ul>
キリンメッツコーラに含まれている"4-MI"は、元記事によるとグループ2B「作因は、ヒトに対して発癌性であるかも（possibly）知れない」というグループに含まれる発がん性物質ですね。

同じグループ2Bに所属するものとしては、以下のものがあります。
<ul>
	<li>コーヒー（膀胱癌になる可能性があるらしい）</li>
	<li>蕨（ワラビ）</li>
	<li>アジア式野菜の漬物</li>
</ul>
メッシコーラに含まれる「4-MI」の発がん性リスクはコーヒーや漬物なんかと同じぐらいということです。
<a href="http://headlines.yahoo.co.jp/hl?a=20120822-00000073-it_nlab-inet">「特保コーラ」に発がん性？ → 1日16リットル以上飲まなければ問題なし</a>

元記事では「カリフォルニア州では基準値以上で警告表示義務付けが必要なのに日本では……」と嘆いていられるようですが、カリフォルニアは極端に健康志向なところがあるので……あそこの基準はあんまりあてにしない方がいいです。
警告表示義務付けについては下記記事のような批判も多いですし。

<a href="http://www.foodsafetynews.com/2012/03/cola-carcinogen-debate-bubbles-over/">Cola Carcinogen Debate Bubbles Over</a>

「4-MI」の発がん性への懸念は、ラット（ねずみ）を使った研究でしか関連性がみとめられていないのですが『ねずみに使った量を人間に適応するなら、コーラを一日で1000缶以上飲まないとならない』とアメリカ食品医薬品局(FDA)のスポークスマンである Doug Karaさんが批判しています。

毒物学者のJames Coughlin博士は、 4-MIによってもたらされるリスクは政府予想よりさらに低くて、「がんの原因となる線量に相当するものを達成するためには、女性なら毎日37000缶（12オンス）、男性なら毎日95000缶を飲まなければならないでしょう」と言っています。

トクホ商品として相応しいかはわかりませんが、ちょっと神経質すぎるかな？　と思います。

■ 余談
ちなみに、一番発癌性リスクが高い（発癌性と認められる）「グループ1」の中には、以下のようなものが要因としてあげられています。
<ul>
	<li>太陽光曝露(紫外線）</li>
	<li>タバコ</li>
	<li>アルコール飲料</li>
</ul>
メッシコーラに含まれる発がん性物質を気にするより、夏場の紫外線対策なんかをしっかりやってお酒やたばこを控えめにする方がよっぽど健康に良いです。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B007TFJAMS/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41PAl2CfS7L._SL160_.jpg" alt="キリン メッツ コーラ 480ml×24本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B007TFJAMS/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">キリン メッツ コーラ 480ml×24本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.01.06</div></div><div class="amazlet-detail">キリンビバレッジ (2012-04-24)<br />売り上げランキング: 51<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B007TFJAMS/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1368</wp:post_id>
		<wp:post_date>2012-08-23 20:49:10</wp:post_date>
		<wp:post_date_gmt>2012-08-23 11:49:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1368</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[500585006635566]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/500585006635566" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%b3%e3%83%bc%e3%83%a9%e3%81%a0%e3%81%91%e3%81%98%e3%82%83%e3%81%aa%e3%81%84%ef%bc%81%e3%80%80%e8%ba%ab%e8%bf%91%e3%81%aa%e7%99%ba%e3%81%8c%e3%82%93%e6%80%a7%e7%89%a9%e8%b3%aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3302]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427210995;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1516;}i:1;a:1:{s:2:"id";i:3684;}i:2;a:1:{s:2:"id";i:3711;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[DataTables] sAjaxSourceで読み込んだデータの値を加工したい。</title>
		<link>http://shimz.me/blog/jquery/1408</link>
		<pubDate>Thu, 30 Aug 2012 09:29:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1408</guid>
		<description></description>
		<content:encoded><![CDATA[テーブルにソート機能や、フィルタリング機能を付けたいときに、とても便利なjQueryプラグイン「<a href="http://datatables.net/index">DataTables</a>」に関するメモ。

sAjaxSourceで読み込んだデータを加工してテーブルに表示する方法。
例：テーブルの１桁(１カラム）目の値をリンクにする
 
<pre class="lang:js mark:7-12 decode:true " >$('#example').dataTable( {
	&quot;bProcessing&quot;: true,
	&quot;bServerSide&quot;: true,
	&quot;sDom&quot;: &quot;&lt;'row'&lt;'span2'l&gt;&lt;'span10'f&gt;r&gt;t&lt;'row'&lt;'span6'i&gt;&lt;'span6'p&gt;&gt;&quot;,
	&quot;sPaginationType&quot;: &quot;full_numbers&quot;,
	&quot;sAjaxSource&quot;:&quot;http://shimz.me/api/fakedata/datatables.php&quot;,
	&quot;fnServerData&quot;: function ( sSource, aoData, fnCallback ) {
		$.getJSON( sSource, aoData, function (json) {
			$(json.aaData).each(function(){ this[0] = '&lt;a href=&quot;#&quot;&gt;'+this[0]+'&lt;/a&gt;'}); //1桁(１カラム）目の要素をリンクに
			fnCallback(json);
		} );
	},
	&quot;oSearch&quot;:{ &quot;sSearch&quot;: &quot;&quot;, &quot;bRegex&quot;: false, &quot;bSmart&quot;: true },
}); 
</pre> 


fnServerDataオプションを指定することで、読み込んだjsonデータをテーブルに表示する前にリンクタグを付加するなどの加工を行うことができる。
<a href="http://shimz.me/example/datatables/01/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1408</wp:post_id>
		<wp:post_date>2012-08-30 18:29:49</wp:post_date>
		<wp:post_date_gmt>2012-08-30 09:29:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1408</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datatables"><![CDATA[DataTables]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[503781139649286]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/503781139649286" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[jquery%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3-datatables-sajaxsource%e3%81%a7%e8%aa%ad%e3%81%bf%e8%be%bc%e3%82%93%e3%81%a0%e3%83%87%e3%83%bc%e3%82%bf%e3%81%ae%e5%80%a4%e3%82%92%e5%8a%a0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3455]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427382135;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3753;}i:1;a:1:{s:2:"id";i:2701;}i:2;a:1:{s:2:"id";i:2631;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[DataTables] テキストボックスを敷き詰めたテーブルで、フォーカスのあたっているセルの位置を取得したい。</title>
		<link>http://shimz.me/blog/jquery/1424</link>
		<pubDate>Fri, 31 Aug 2012 12:14:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1424</guid>
		<description></description>
		<content:encoded><![CDATA[昨日に引き続き、テーブルにソート機能や、フィルタリング機能を付けたいときに、とても便利なプラグイン「<a href="http://datatables.net/index">DataTables</a>」に関するメモ。

&lt;td&gt;に&lt;input type="text"&gt;を敷き詰めるってことをやったりすると、フォーカスのあたっているセルがテーブルの何行目/何桁目にあるのか、その位置を知りたいって時があります。

DataTablesには位置を取得するためのメソッド(fnGetPosition)が提供されているので、簡単にセルの位置を取得することができます。
例えば、フォーカスが当たっているセルが何行目にあるかを取得したい場合は以下。
<pre class="lang:js decode:true " >myTable =   $('#example').dataTable( {
			//初期設定
        } );
        

//フォーカスのあたっている行(td)を取得
var currentTR = $('td &gt; input:focus', myTable).parent().parent();
 
//親TRの位置を取得
console.log(myTable.fnGetPosition(currentTR.get(0)));
</pre> 

行数だけでなく、セルの桁数まで求めたいときはparent()を一個削ればOK
<pre class="lang:js decode:true " >var currentTD = $('td &gt; input:focus', myTable).parent();
console.log(myTable.fnGetPosition(currentTD.get(0)));
</pre> 

<a href="http://shimz.me/example/datatables/03/">example</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1424</wp:post_id>
		<wp:post_date>2012-08-31 21:14:55</wp:post_date>
		<wp:post_date_gmt>2012-08-31 12:14:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1424</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datatables"><![CDATA[DataTables]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[504269479600452]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/504269479600452" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[jquery%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3-datatables-%e3%83%86%e3%82%ad%e3%82%b9%e3%83%88%e3%83%9c%e3%83%83%e3%82%af%e3%82%b9%e3%82%92%e6%95%b7%e3%81%8d%e8%a9%b0%e3%82%81%e3%81%9f%e3%83%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3456]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370164;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3406;}i:1;a:1:{s:2:"id";i:3195;}i:2;a:1:{s:2:"id";i:3662;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>フロントエンドのテストを自動化する「Fake」が便利。</title>
		<link>http://shimz.me/blog/javascript/1443</link>
		<pubDate>Fri, 14 Sep 2012 03:38:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1443</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/09/fluidium_logo_icon.png" alt="" title="fluidium_logo_icon" width="325" height="149" class="alignnone size-full wp-image-1451" style="display:none" />
<a href="http://fakeapp.com/">Fake</a>

<iframe src="http://player.vimeo.com/video/14697494" width="500" height="313" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/14697494">Fake - Mac OS X Web Automation</a> from <a href="http://vimeo.com/user4200540">Fake</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

Fakeは、内蔵したブラウザ(webkit)に対して、マウス・キーボードの操作やフォームへの値の入力などの一連の動作を設定し、自動化することができます。
具体的には、Action(リンクをクリックする、入力フォームへ値を入力するなど)と呼ばれるパネルるを並べてWorkflowを作れば、あとはワンクリックでWorkflowを実行することができます。作ったWorkflowは、別のWorkflow内で呼び出して使うなど、再利用も可能です。
<iframe src="http://player.vimeo.com/video/13102404" width="500" height="313" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/13102404">Fake Workflows in Action</a> from <a href="http://vimeo.com/user4200540">Fake</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

if Action　パネルを使うと条件を指定してWorkflow内で動作を分岐させたりすることもできます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/repeat_with.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/repeat_with.png" alt="" title="repeat_with" width="256" height="313" class="alignnone size-full wp-image-1444" /></a>

<strong>■ Fakeの便利なところ</strong>
あまり、他のブラウジング自動化ソフトを使ったことがないので「それ他のアプリでもできるよ！」って事があるかもしれませんが、とりあえず自分が思うFakeの便利なところを挙げてみます。

１．JavaScriptが使える
if action の条件などにJavaScriptを使用することができます。これによって、「ちゃんと必要なHTML要素がdocumentに追加されているか？」などの条件を指定してworkfrowを分岐させることができます。（ちなみに if action で使用できる条件にはJavaScript以外にpage title(正規表現可)やHTTP statuscode などを使う使うことができます）
その他、書き込んだjavascriptを実行する Do Javascript というactionがあったり、Repeatでは取得したHTML要素の数だけActionを繰り返し実行したりなど、FakeのActionとJavaScriptと組み合わせることで、さまざまな操作を自動化することができます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/mega.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/mega.png" alt="" title="mega" width="279" height="257" class="alignnone size-full wp-image-1446" /></a>

２．UserScriptやUserStyleが使える
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/userscripts.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/userscripts.png" alt="" title="userscripts" width="264" height="124" class="alignnone size-full wp-image-1445" /></a>
<a href="http://www.m-bsys.com/code/userscript-memo">UserScript</a>の中で、jQueryなど好きなライブラリを読み込めば、Actionと組み合わせてworkfrow内で利用できるので便利です。

３．Web Inspector が使える
Fakeに内蔵されているブラウザにはWeb Inspectorが搭載されているので、ブレークポイントを設定しながらとか、変数をwatchしながらWorkfrowを実行するなんてこともできます。


■ Fakeで出来ないこと
・見た目（レイアウトの崩れ）などのテスト
・webkit以外のブラウザでの動作テスト(userAgentの偽装なんかはできます）
・サイトに埋め込まれたFlashの操作

■ インストール
App Storeからインストールできます（有料）
<a href="http://itunes.apple.com/jp/app/fake/id402356565?mt=12"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/201101281939285e5-150x150.jpg" alt="" title="201101281939285e5" width="150" height="150" class="alignnone size-thumbnail wp-image-1448" /></a>

<a href="http://fakeapp.com/">公式サイト</a>ではFree Trial版がダウンロードできますが、一部機能制限がある(UserScriptが使えない）のと、作ったWorkflowを保存することができません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1443</wp:post_id>
		<wp:post_date>2012-09-14 12:38:34</wp:post_date>
		<wp:post_date_gmt>2012-09-14 03:38:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1443</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1451]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[510544905639576]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/510544905639576" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427238348;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2670;}i:1;a:1:{s:2:"id";i:148;}i:2;a:1:{s:2:"id";i:2556;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%95%e3%83%ad%e3%83%b3%e3%83%88%e3%82%a8%e3%83%b3%e3%83%89%e3%81%ae%e3%83%86%e3%82%b9%e3%83%88%e3%82%92%e8%87%aa%e5%8b%95%e5%8c%96%e3%81%99%e3%82%8b%e3%80%8cfake%e3%80%8d%e3%81%8c%e4%be%bf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar] イベント（予定）の修正と削除</title>
		<link>http://shimz.me/blog/jquery/1460</link>
		<pubDate>Mon, 24 Sep 2012 07:44:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1460</guid>
		<description></description>
		<content:encoded><![CDATA[なんだかんだで仕事が忙しいので…手抜き更新。

FullCalendarで登録した予定（下記画像を参照）を、修正・削除する方法が公式のDemoに無かった気がするのでTipsとして載せておきます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/WS000020.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/WS000020.jpg" alt="" title="WS000020" width="161" height="109" class="alignnone size-full wp-image-1461" /></a>

 
<pre class="lang:js decode:true " >
var calendar = $('#calendar').fullCalendar({
	eventDblClick:function(event, jsEvent){
			var title = prompt('予定を入力してください:', event.title);
			if(title &amp;&amp; title!=&quot;&quot;){
				event.title = title;
				calendar.fullCalendar('updateEvent', event); //イベント（予定）の修正
			}else{
				calendar.fullCalendar(&quot;removeEvents&quot;, event.id); //イベント（予定）の削除				
			}
	}
});
</pre> 

これだけ。簡単ですね。
尚、上記ではイベント（予定）のダブルクリックイベントのコールバックとして設定しています。
ダブルクリックの取得は独自に追加したものなので、下記記事の「ダブルクリックを取得できるようにする」を参照してください。

<a href="http://shimz.me/blog/?p=1265">FullCalendar のカスタマイズ</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1460</wp:post_id>
		<wp:post_date>2012-09-24 16:44:02</wp:post_date>
		<wp:post_date_gmt>2012-09-24 07:44:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1460</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1461]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[514954425198624]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/514954425198624" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fullcalendar-%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%ef%bc%88%e4%ba%88%e5%ae%9a%ef%bc%89%e3%81%ae%e4%bf%ae%e6%ad%a3%e3%81%a8%e5%89%8a%e9%99%a4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427376302;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1466;}i:1;a:1:{s:2:"id";i:2475;}i:2;a:1:{s:2:"id";i:1983;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar] 祝日イベントのリンクを削除</title>
		<link>http://shimz.me/blog/jquery/1466</link>
		<pubDate>Tue, 25 Sep 2012 07:40:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1466</guid>
		<description></description>
		<content:encoded><![CDATA[「日本の祝日」をGoogleから取り込んだ場合、祝日のイベントに自動的にGoogleカレンダーへのリンクが張られてしまいます。

参照
<a href="http://d.hatena.ne.jp/okinaka/20110416/1302942541">FullCalendar で日本の祝日を表示する</a>


<a href="http://shimz.me/blog/wp-content/uploads/2012/09/WS000006.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/WS000006.jpg" alt="" title="WS000006" width="154" height="143" class="alignnone size-full wp-image-1467" /></a>

↑表示した祝日イベントをクリックすると、Googleカレンダーに飛んでしまう。

これは、ちょっとウザいので祝日イベントに張られたリンクを削除します。

■リンクの削除
 
<pre class="lang:js decode:true " >var calendar = $('#calendar').fullCalendar({
	events: {
		url: 'http://www.google.com/calendar/feeds/ja.japanese%23holiday%40group.v.calendar.google.com/public/full/',
		color: 'red',
		success:function(events){
			$(events).each(function(){
					this.url = null;
			});		
		},
	}
});</pre> 

events内で、$.ajaxのsuccess時のコールバックを指定できるので、その中で読み込んだ祝日イベントのurlプロパティをnullで上書きします。
これで、リンクが削除されます。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1466</wp:post_id>
		<wp:post_date>2012-09-25 16:40:03</wp:post_date>
		<wp:post_date_gmt>2012-09-25 07:40:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1466</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1467]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[515382798489120]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/515382798489120" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fullcalendar-%e7%a5%9d%e6%97%a5%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e3%81%ae%e3%80%81%e3%83%aa%e3%83%b3%e3%82%af%e3%82%92%e5%89%8a%e9%99%a4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427329870;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1460;}i:1;a:1:{s:2:"id";i:2475;}i:2;a:1:{s:2:"id";i:3340;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&#039;input type=file&#039;から&#039;canvas&#039;への転写（画像の引き伸ばし対処）</title>
		<link>http://shimz.me/blog/javascript/1483</link>
		<pubDate>Wed, 26 Sep 2012 11:26:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1483</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/09/WS000007.jpg" alt="" title="WS000007" width="758" height="731" class="alignnone size-full wp-image-1484" />

'input type=file'から'canvas'に転写する際、画像のサイズがcanvasのサイズより大きいとcanvasのサイズでトリミングされて表示されてしまいます。
なので、画像のサイズに合わせてcanvasのサイズを変更したいのですが、何故か画像を読み込んでから動的にcanvasのサイズを変更するとトリミングされた画像が引き伸ばされて表示されてしまいます。

canvasのサイズを変更するタイミングをいろいろ試してみましたが、うまくいかなかったので、結局'img'オブジェクトの読込後に画像サイズに合わせたcanvasを生成することで対応しました。

↓サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/5KO3/js?width=465&height=496&view=play"></script>
 
<pre class="lang:js decode:true " >$(&quot;#uploadFile&quot;).change(function() {

	var file = this.files[0];
	if (!file.type.match(/^image\/(png|jpeg|gif)$/)) return;

	var image = new Image();
	var reader = new FileReader();

	reader.onload = function(evt) {
		image.onload = function() {
            
			//canvas1のサイズを画像サイズに合わせて変更（引き伸ばされる）
			$(&quot;#canvas1&quot;).width(image.width);
			$(&quot;#canvas1&quot;).height(image.height);
            var canvas1 = $(&quot;#canvas1&quot;);
			var ctx1 = canvas1[0].getContext(&quot;2d&quot;);		
			ctx1.drawImage(image, 0, 0); //canvas1に画像を転写
			
			
			//canvas2を画像サイズに合わせて追加（引き伸ばされない）
			var obj = $(&quot;&lt;canvas/&gt;&quot;).attr(&quot;id&quot;,&quot;canvas2&quot;).attr(&quot;width&quot;, image.width).attr(&quot;height&quot;, image.height);
			$(&quot;#new_canvas&quot;).append(obj);
			var canvas2 = $(&quot;#canvas2&quot;);
			var ctx2 = canvas2[0].getContext(&quot;2d&quot;);        
			ctx2.drawImage(image, 0, 0); //canvas2に画像を転写
		}


		image.src = evt.target.result;
	}
	reader.readAsDataURL(file);
});</pre> 


画像をdrawImageする前にcanvasのリサイズを行っても、画像が拡大（引き伸ばし）されて表示されてしまうのは何故なんでしょう？


■追記
 
<pre class="lang:js decode:true " >	$(&quot;#canvas1&quot;).width(image.width);
	$(&quot;#canvas1&quot;).height(image.height);
</pre> 

↓変更
 
<pre class="lang:js decode:true " >	$(&quot;#canvas1&quot;).attr(&quot;width&quot;,image.width);   //←これだったらおｋだった。　orz
	$(&quot;#canvas1&quot;).attr(&quot;height&quot;,image.height);
</pre> 

jQueryのwidth(height)メソッドではなく、attrでwidth(height)属性を変更すれば、うまくいきました orz

width(height)メソッドでは駄目な理由は不明。

（cssでの変更と属性値での変更で動作が変わるのかな？）


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1483</wp:post_id>
		<wp:post_date>2012-09-26 20:26:01</wp:post_date>
		<wp:post_date_gmt>2012-09-26 11:26:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1483</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1484]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[515872078440192]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/515872078440192" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[input-typefile%e3%81%8b%e3%82%89canvas%e3%81%b8%e3%81%ae%e8%bb%a2%e5%86%99%ef%bc%88%e7%94%bb%e5%83%8f%e3%81%8c%e5%bc%95%e3%81%8d%e4%bc%b8%e3%81%b0%e3%81%95%e3%82%8c%e3%82%8b%e7%8f%be%e8%b1%a1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378752;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2892;}i:1;a:1:{s:2:"id";i:2755;}i:2;a:1:{s:2:"id";i:3696;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jQueryを使ってテーブルのセルをクリックしたときに編集できるようにする（Edit in Place）</title>
		<link>http://shimz.me/blog/jquery/1505</link>
		<pubDate>Wed, 17 Oct 2012 13:43:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1505</guid>
		<description></description>
		<content:encoded><![CDATA[画面遷移を行わずに、その場でDOM要素を編集できる機能を「inplace editor」とか言うらしいです。
プラグインを使う方が簡単なのですが、作りたいものに合わせてカスタマイズするのが思うようにいかなかったので、自分で書いてみました。

<pre class="lang:xhtml decode:true " >&lt;table id=&quot;edit-table&quot;&gt;
    &lt;tr&gt;
    &lt;th&gt;要素１&lt;/th&gt;
    &lt;th&gt;要素２&lt;/th&gt;
    &lt;th&gt;要素３&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;&lt;td&gt;hoge&lt;/td&gt;&lt;td&gt;hoge&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;&lt;td&gt;hello&lt;/td&gt;&lt;td&gt;world&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</pre> 
 
<pre class="lang:js decode:true " >
(function(documet){
    
    $(document).ready(function(){
    	 $(&quot;#edit-table &gt; tbody &gt; tr &gt; td&quot;).click(edit_toggle());
    });


    function edit_toggle(){
        var edit_flag=false;
        return function(){
            if(edit_flag) return;
            var $input = $(&quot;&lt;input&gt;&quot;).attr(&quot;type&quot;,&quot;text&quot;).val($(this).text());
            $(this).html($input); 
            
            $(&quot;input&quot;, this).focus().blur(function(){
                save(this);
                $(this).after($(this).val()).unbind().remove();
                edit_flag = false;
            });
            edit_flag = true;
        }
    }    
    
    function save(elm){
        alert(&quot;「&quot;+$(elm).val()+&quot;」を保存しました&quot;); //保存する処理をここに書く
    }
})(document);</pre> 


pタグやhタグなど、table以外の要素にも編集機能を付けられます。

サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/k6LX/js?width=465&height=496&view=play"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1505</wp:post_id>
		<wp:post_date>2012-10-17 22:43:42</wp:post_date>
		<wp:post_date_gmt>2012-10-17 13:43:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1505</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1513]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[525555210805212]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/525555210805212" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[jquery%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%83%86%e3%83%bc%e3%83%96%e3%83%ab%e3%81%ae%e3%82%bb%e3%83%ab%e3%82%92%e3%82%af%e3%83%aa%e3%83%83%e3%82%af%e3%81%97%e3%81%9f%e3%81%a8%e3%81%8d%e3%81%ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369787;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3501;}i:1;a:1:{s:2:"id";i:2614;}i:2;a:1:{s:2:"id";i:3753;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>理解していない記者が書く記事の怖さ</title>
		<link>http://shimz.me/blog/other/1516</link>
		<pubDate>Fri, 19 Oct 2012 05:29:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1516</guid>
		<description></description>
		<content:encoded><![CDATA[世間を賑わせているウィルスの解析結果について、日本ネットワークセキュリティ協会（JNSA）が17日に行った、報道関係者向けの緊急説明会に関するimpressの記事。


<blockquote>西本氏は捜査当局に対して、デジタル上のプロファイリングをすることで犯人を絞り込んでいく方法があるのではないかと提案する。

　今回の事件では、実際にIEsys.exeという犯人手製のプログラムがある。例えば、プログラムのくせや、それぞれの会社流のコーディング方法、文言の使い方、あるいは掲示板上での行動などから犯人像を絞り込める可能性があると説明。こうした手法に対してはIT業界も貢献できると訴えた。

　なお、西本氏は推測・憶測の域を出ないとしながらも、IEsys.exeの作成者について、プログラマーとしてこなれており、細かいプログラムを開発する経験を重ねてきた人物とみている。プログラムにテキストエディターが組み込まれていた点に着目。かつてプログラマーが“練習問題”としてテキストエディターをよく開発していたような年代だとみて、年齢は40歳以上ではないかという。西本氏によれば、今の若い世代のプログラマーは、コンポーネントを組み合わせることで簡単にプログラムを開発できる環境にあるため、一からプログラムを作るようなイメージではないという。

<a href="http://internet.watch.impress.co.jp/docs/news/20121018_566933.html">“遠隔操作ウイルス”事件、専門家らは実行ファイルの扱いでギャップ痛感？</a></blockquote>


<br>

時事通信の記事では以下のようになる。



<blockquote>解析した情報セキュリティー会社「ラック」（東京都千代田区）の西本逸郎専務理事によると、ウイルスは「ＶｉｓｕａｌＳｔｕｄｉｏ２０１０」というソフト開発ツールを使って作成されていた。数万円から数十万円以上する専門的なソフトで、素人が購入することは考えにくいという。

<a href="http://www.jiji.com/jc/zc?k=201210/2012101800773">プロの開発者が作成か＝高価な専門ツール使用－証拠隠滅の痕跡も、ＰＣ遠隔操作</a></blockquote>
<br>
両方とも情報セキュリティー会社「ラック」の西本氏の見解を元にして書かれた記事ではあるのだけれど、後者は記者が西本氏から聞いた話の中から自分がかろうじて理解できた所だけ、かいつまんで記事にしたように思える。

しかし、残念なことにTwitterでは後者の記事の方がより多くツイートされ、結果、セキュリティー会社への批判が多数行われてる。

<a href="http://togetter.com/li/392225?page=1">ラックが時事報道で風評被害ｗ（デマ拡散中）</a>

怖い話だなぁ。

【追記】
コメント出てた。

https://twitter.com/dry2/status/259286127285002240
https://twitter.com/dry2/status/259287261215088640
https://twitter.com/dry2/status/259286549995339776
https://twitter.com/dry2/status/259287455612674048
https://twitter.com/dry2/status/259287971348496384

<a href="http://togetter.com/li/392732">時事通信の記事に関するラック西本逸郎氏のコメント</a>

……苦労が偲ばれる]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1516</wp:post_id>
		<wp:post_date>2012-10-19 14:29:09</wp:post_date>
		<wp:post_date_gmt>2012-10-19 05:29:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%90%86%e8%a7%a3%e3%81%97%e3%81%a6%e3%81%84%e3%81%aa%e3%81%84%e8%a8%98%e8%80%85%e3%81%8c%e6%9b%b8%e3%81%8f%e8%a8%98%e4%ba%8b%e3%81%ae%e6%80%96%e3%81%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[526347520725981]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/526347520725981" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d35138b65a817e57e85cd9bcad863527</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>検体はVisual Studio 2012で開発。有償版で開発か無償版かは検体からは判別不可。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286127285002240" data-datetime="2012-10-19T13:33:24+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8d1147ca976757875f21495640bd3ae0</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、誰がそんなもの買うの？世の中には、ソフト開発をするという真っ当な仕事があって、Windowsで動くソフトを作るにはこういう開発環境を使用することも多いのですよ。申し訳ないけど、プログラムを開発するということは、ウイルスを開発するということとは全く違うのです。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287261215088640" data-datetime="2012-10-19T13:37:55+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a7037f3d5c710447f515def25ef9707e</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>振り出しに戻る。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287971348496384" data-datetime="2012-10-19T13:40:44+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_847b0ecd883af801bddb52929d0f03b8</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>その有償版のソフトを買う人ってどんな人なんでしょうか？</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287455612674048" data-datetime="2012-10-19T13:38:41+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_730b0f064a5009158c642ef3bc215b46</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、有償版って幾らぐらいするの？数千円~数万円。場合によっては１０万位するものもある。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286549995339776" data-datetime="2012-10-19T13:35:05+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_06123404dc7019942b7878c1b5432d23</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>検体はVisual Studio 2012で開発。有償版で開発か無償版かは検体からは判別不可。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286127285002240" data-datetime="2012-10-19T13:33:24+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c47c89f2071e1c80a72f6d0e63ace29d</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、誰がそんなもの買うの？世の中には、ソフト開発をするという真っ当な仕事があって、Windowsで動くソフトを作るにはこういう開発環境を使用することも多いのですよ。申し訳ないけど、プログラムを開発するということは、ウイルスを開発するということとは全く違うのです。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287261215088640" data-datetime="2012-10-19T13:37:55+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_34991bc496b27f92db726d8fde2aaf66</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、有償版って幾らぐらいするの？数千円~数万円。場合によっては１０万位するものもある。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286549995339776" data-datetime="2012-10-19T13:35:05+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_58ab3e8b53ad3241007be480c8b88fbd</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>その有償版のソフトを買う人ってどんな人なんでしょうか？</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287455612674048" data-datetime="2012-10-19T13:38:41+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_42f7dd849d03da0ac3a6990ab16d7a2e</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>振り出しに戻る。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287971348496384" data-datetime="2012-10-19T13:40:44+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c0e609f7e01fd4306bec916945adafc0</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>検体はVisual Studio 2012で開発。有償版で開発か無償版かは検体からは判別不可。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/status/259286127285002240">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_391d67516f3c9c22c87e9d49ab15f848</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>検体はVisual Studio 2012で開発。有償版で開発か無償版かは検体からは判別不可。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/statuses/259286127285002240">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_46f65caa5a6846272a4d9b566f949591</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>で、誰がそんなもの買うの？世の中には、ソフト開発をするという真っ当な仕事があって、Windowsで動くソフトを作るにはこういう開発環境を使用することも多いのですよ。申し訳ないけど、プログラムを開発するということは、ウイルスを開発するということとは全く違うのです。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/statuses/259287261215088640">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8792a8e33f9cdf51979f2081c1121fbe</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>で、有償版って幾らぐらいするの？数千円~数万円。場合によっては１０万位するものもある。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/statuses/259286549995339776">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7e57f7e83e0082df353148492d81353f</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>その有償版のソフトを買う人ってどんな人なんでしょうか？</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/statuses/259287455612674048">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_108478de0af1971fed49292308309dbd</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>振り出しに戻る。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/statuses/259287971348496384">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_c0e609f7e01fd4306bec916945adafc0</wp:meta_key>
			<wp:meta_value><![CDATA[1418918966]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_998592986c30a9a91e4d1d42705b2572</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>で、誰がそんなもの買うの？世の中には、ソフト開発をするという真っ当な仕事があって、Windowsで動くソフトを作るにはこういう開発環境を使用することも多いのですよ。申し訳ないけど、プログラムを開発するということは、ウイルスを開発するということとは全く違うのです。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/status/259287261215088640">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_c86b02c7b178b25652c813e4d6b092f5</wp:meta_key>
			<wp:meta_value><![CDATA[1418918967]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2eff436d0f74adff882a578f35fa29d5</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>その有償版のソフトを買う人ってどんな人なんでしょうか？</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/status/259287455612674048">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_2eff436d0f74adff882a578f35fa29d5</wp:meta_key>
			<wp:meta_value><![CDATA[1418918968]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_59b4ca5ab18e26073dcd98ec9086de70</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>振り出しに戻る。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/status/259287971348496384">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_998592986c30a9a91e4d1d42705b2572</wp:meta_key>
			<wp:meta_value><![CDATA[1418918967]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c86b02c7b178b25652c813e4d6b092f5</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>で、有償版って幾らぐらいするの？数千円~数万円。場合によっては１０万位するものもある。</p>&mdash; 西本逸郎NISHIMOTO Itsuro (@dry2) <a href="https://twitter.com/dry2/status/259286549995339776">October 19, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_59b4ca5ab18e26073dcd98ec9086de70</wp:meta_key>
			<wp:meta_value><![CDATA[1418918969]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426625246;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3591;}i:1;a:1:{s:2:"id";i:3035;}i:2;a:1:{s:2:"id";i:3167;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>タブレット端末にキーボードを付けて使う意味</title>
		<link>http://shimz.me/blog/programming/1542</link>
		<pubDate>Wed, 24 Oct 2012 12:52:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1542</guid>
		<description></description>
		<content:encoded><![CDATA[【参考】
<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>
<a href="http://shimz.me/blog/?p=1812">Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</a>
<hr>
<a href="http://www.amazon.co.jp/gp/product/B008DM3UXQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B008DM3UXQ&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B008DM3UXQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=B008DM3UXQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

iPadと外付けキーボードを付けて持ち歩いています。

で、これを言うと「外付けキーボードと一緒に持ち歩くなら、ノートPCでいいんじゃない？」と良く言われるんですが、タブレット＋外付けキーボードにはノートPCに無い利点が有ります。

一言で言うと「キーボードが簡単に買い替えられる」

壊れたら家電量販店ですぐ代わりのキーボードを購入できる。

自分の使い方が悪いのかもしれませんが、ノートPCを使っていて一番故障が多いのがキーボードだったりします。

特定のキーが押せなくなったり、効かなくなったり……

メインで使っているMacBook Airも既に「英数」キーが効かなくなり、しかたがないので「かな」キーをトグルにして入力モードの変更を行っていたりします。

でも、最近「スペース」キーや「▼」キーの効きが怪しくなってきてます orz

修理にだすにも、なかなか時間がとれなくて困ったりするんですよね。

かといってノートPCで外付けのキーボードを使うと場所とるし。

ぶっちゃけ、キーボードの無いMacBookをAppleが出してくれないかな？　なんて思ったりするんですがｗ

まぁ、見込みうすなので、iPad + 外付けのキーボードが今の所マストな選択になってます。



今後、タブレットタイプのwindows8端末が出てくる事に、密かに期待してます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1542</wp:post_id>
		<wp:post_date>2012-10-24 21:52:47</wp:post_date>
		<wp:post_date_gmt>2012-10-24 12:52:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%bf%e3%83%96%e3%83%ac%e3%83%83%e3%83%88%e7%ab%af%e6%9c%ab%e3%81%ab%e5%a4%96%e4%bb%98%e3%81%91%e3%82%ad%e3%83%bc%e3%83%9c%e3%83%bc%e3%83%89%e3%82%92%e4%bb%98%e3%81%91%e3%81%a6%e4%bd%bf%e3%81%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[528783883815678]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/528783883815678" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1609]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372240;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1561;}i:1;a:1:{s:2:"id";i:3062;}i:2;a:1:{s:2:"id";i:3883;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadでプログラミング＆デバッグ（Web系）</title>
		<link>http://shimz.me/blog/editor/1561</link>
		<pubDate>Mon, 05 Nov 2012 06:19:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1561</guid>
		<description></description>
		<content:encoded><![CDATA[メインで使用していたMacBook Air のキーボードがご臨終なされたので、すっかりHulu Viewerと化していたiPadを本格的にプログラミングに使用してみることにしました。
ある程度使える感じになってきたのでメモ。

（ただし、ぶっちゃけ無理やりです）


<h2>■アクセサリ</h2>
<b>キーボード</b>
<a href="http://www.amazon.co.jp/gp/product/B008DM3UXQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B008DM3UXQ&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B008DM3UXQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=B008DM3UXQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
やはりオンスクリーンキーボードでコーディングを行うのは大変なので外付けキーボードがあると良いですね。私は「ロジクール ウルトラスリム キーボードカバー」を使用しています。
親指入力でコーディングすることに抵抗がないのであれば、外付けキーボードが無くてもオンスクリーンキーボードを分割して使用すると捗るかもしれません。


<a href="http://arigato-ipod.com/2012/07/ipad-split-keyboard.html">iPadのソフトウェアキーボードを分割して、手に持ったままでも文字入力をしやすくする</a>



<h2>■サーバー</h2>
iPadではローカルに仮想環境を作って作業するといったことができません。
コーディングはすべてサーバー上で直接ファイルを編集するといったことになります。
そこでサーバーを用意する必要があるのですが、個人的に「さくらクラウド」をお勧めします。
理由は単純で、クラウドの管理管理がiPadに対応しているからです。
本番環境のサーバーをコピー（アーカイブ化）してテスト環境を作るなどができるのでローカルにサーバー環境を構築できないiPadでもわりと便利に使えます。
まぁ、お金かかりますけど。まさに、富豪的プログラミング。

<b>さくらクラウド</b>
<a href="http://cloud.sakura.ad.jp/">http://cloud.sakura.ad.jp/</a>

<br>



<h2>■コーディング</h2>
<img src="http://shimz.me/blog/wp-content/uploads/2012/10/dc-smaller-e1351651350969.png" alt="" title="dc-smaller" width="135" height="135" class="alignnone size-full wp-image-1567" />
<iframe width="420" height="315" src="http://www.youtube.com/embed/IhX4c7lCcuE" frameborder="0" allowfullscreen></iframe>

<b><a href="https://itunes.apple.com/jp/app/diet-coda/id500906297?mt=8&at=10lMp5">Diet Coda</a></b>

Macで人気のWEB開発環境CODAのiPad版です。
このアプリ１つで、エディタ・FTP・コンソール、と必要な機能全てをまかなえるすぐれもの。
iPadには他にも<a href="https://itunes.apple.com/us/app/id383577124?mt=8&at=10lMp5">Textasitc</a>など優れたエディタがたくさんあるので、自分に合ったエディタを探してみるのもおすすめです。

Textasticには、ローカルに保存したファイルを内部ブラウザでプレビューする機能があるので、HTML+CSS+JavaScriptでのプログラミングであれば、ネットに繋がっていない状況でもコーディングが可能です。
参考
<a href="http://pochixpochi.blogspot.jp/2012/03/new-ipadenchantjs.html">NEW IPADでENCHANT.JS快適プログラミング！</a>

<h2>■デバッグ</h2>
iPadでコーディングをする際に一番問題になるのがデバッグです。特にフロントエンドのデバッグは困難です。
WebInspector等の開発ツールを使わずにJavascriptを書くのは苦行に等しいのですが、なんとか工夫してデバッグしやすい環境を作ってみます。


<b>window.onerrorの補足</b>
 
<pre class="lang:xhtml decode:true " >&lt;script&gt;
window.onerror = function(errorMsg, url, lineNumber){alert(url+&quot; [&quot;+lineNumber+&quot;]  &quot;+errorMsg);}
&lt;/script&gt;</pre> 

ブラウザの開発ツールを使用できないモバイル環境において<a href="http://martinkool.com/post/13629963755/firebug-on-ipad-and-iphone">Firebug Lite</a>はもっとも頼りになるデバッグツールなのですが、残念なことに検出されないエラーなどがあります。見落としをなくすため、window.onerrorにアラートを仕込んでエラーを補足します。
<a href="http://shimz.me/example/debug/index.html">デモ</a>

<b>ブックマークレット</b>
ブラウザの開発ツールを利用できないので、それを補うブックマークレットをMobile Safariに登録しておきましょう。
ブックマークレットの登録の方法は<a href="http://www.appbank.net/2011/08/06/iphone-news/284648.php">こちら</a>を。
<br>
<a href="http://stevesouders.com/mobileperf/mobileperfbkm.php">Mobile Pref</a>
Firebug Lite を含むデバッグツールの詰め合わせ。
<textarea style="width:100%;height:100px">javascript:(function(){var%20jselem=document.createElement('SCRIPT');jselem.type='text/javascript';jselem.src='http://stevesouders.com/mobileperf/mobileperfbkm.js';document.getElementsByTagName('body')[0].appendChild(jselem);})();</textarea>

<a href="http://www.sprymedia.co.uk/article/Visual+Event+2">visual event</a>
DOM要素に設置されたJavascriptイベントを可視化。このブックマークレットはiPad以外でも非常に便利です。
<textarea style="width:100%;height:100px">javascript:(function()%20{var%20url%20=%20'http://www.sprymedia.co.uk/VisualEvent/VisualEvent_Loader.js';if(%20typeof%20VisualEvent!='undefined'%20)%20{if%20(%20VisualEvent.instance%20!==%20null%20)%20{VisualEvent.close();}else%20{new%20VisualEvent();}}else%20{var%20n=document.createElement('script');n.setAttribute('language','JavaScript');n.setAttribute('src',url+'?rand='+new%20Date().getTime());document.body.appendChild(n);}})();</textarea>

<a href="http://www.westciv.com/xray/">XRAY</a>
タップ（クリック）したDOM要素の情報を表示
<textarea style="width:100%;height:100px">javascript:function%20loadScript(scriptURL)%20{%20var%20scriptElem%20=%20document.createElement('SCRIPT');%20scriptElem.setAttribute('language',%20'JavaScript');%20scriptElem.setAttribute('src',%20scriptURL);%20document.body.appendChild(scriptElem);}loadScript('http://westciv.com/xray/thexray.js');</textarea>

ブックマークレット等を利用することで、一番の難関であったデバッグも多少なんとかなりそうです。
iPadでレッツ、プログラミング！


【関連】
<a href="http://shimz.me/blog/editor/1812">Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</a>
<a href="http://shimz.me/blog/iphoneipad/2730">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1561</wp:post_id>
		<wp:post_date>2012-11-05 15:19:28</wp:post_date>
		<wp:post_date_gmt>2012-11-05 06:19:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1561</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1561' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1561, http://shimz.me/blog/?p=1561.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1635]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[ipad%e3%81%a7%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%ef%bc%86%e3%83%87%e3%83%90%e3%83%83%e3%82%b0%ef%bc%88web%e7%b3%bb%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427377441;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1542;}i:1;a:1:{s:2:"id";i:3883;}i:2;a:1:{s:2:"id";i:1443;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Googleスプレッドシートに入力したデータを可視化する</title>
		<link>http://shimz.me/blog/d3-js/1599</link>
		<pubDate>Fri, 02 Nov 2012 01:57:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1599</guid>
		<description></description>
		<content:encoded><![CDATA[Google Visualization APIには、Googleスプレッドシートを簡易DBとして外部から呼び出して使うことのできる機能が備わってます。

<a href="https://developers.google.com/chart/interactive/docs/reference?hl=ja">Google Visualization API Reference</a>

参考
<a href="http://webos-goodies.jp/archives/51311993.html">Google Visualization API 詳細、および Gadgets-in-Docs の作り方</a>

このAPIを使えば、GoogleスプレッドシートのデータをD3.jsで可視化するのも非常に簡単に行えます。

サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/zemk/js"></script>



以下はスプレッドシートからデータを読み出している部分
 
<pre class="lang:js decode:true " >
google.load("visualization", "1");
google.setOnLoadCallback(init);

function init() {
	var query = new google.visualization.Query("https://docs.google.com/spreadsheet/ccc?key=0ArOQLX5U1kUqdFYxUzcwTDB0UUVnZHBKRnRzbUc3aGc");
	query.setQuery("select *  where B &amp;gt; 3000000  "); //SQLに似た構文でフィルタをかけることができる。
	query.send(handleQueryResponse);
}

function handleQueryResponse(response) {
	// データ取得
	var data = response.getDataTable();
	
	//DataTableオブジェクトを二次元に変換
	var DataArray = new Array(data.getNumberOfRows());
	for (var row = 0; row &amp;lt; data.getNumberOfRows(); row++) {
		 DataArray[row] = new Array(data.getNumberOfColumns());
		for (var col = 0, n = data.getNumberOfColumns(); col &amp;lt; n; col++) {
			if(col &amp;gt; 0){
				DataArray[row][col] = Math.floor(data.getFormattedValue(row, col) / 10000); //万人単位に変換
			}else{
				DataArray[row][col] = data.getFormattedValue(row, col);
			}
		}    
	}
	
	//変換した配列をD3.jsに渡す
	rendering(DataArray);
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1599</wp:post_id>
		<wp:post_date>2012-11-02 10:57:49</wp:post_date>
		<wp:post_date_gmt>2012-11-02 01:57:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1599</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1599' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1599, http://shimz.me/blog/?p=1599.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1605]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google%e3%82%b9%e3%83%97%e3%83%ac%e3%83%83%e3%83%89%e3%82%b7%e3%83%bc%e3%83%88%e3%81%ab%e5%85%a5%e5%8a%9b%e3%81%97%e3%81%9f%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92d3-js%e3%81%a7%e5%8f%af%e8%a6%96%e5%8c%96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427397614;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2151;}i:1;a:1:{s:2:"id";i:3753;}i:2;a:1:{s:2:"id";i:3445;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>著作権法について誤解していたこと</title>
		<link>http://shimz.me/blog/copyright/1538</link>
		<pubDate>Thu, 08 Nov 2012 02:31:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1538</guid>
		<description></description>
		<content:encoded><![CDATA[最近、「<a href="http://tyosaku.hanrei.jp/">著作権判例データベース</a>」で過去の判例を読み漁っているので、個人的に気づいたことをメモ。

専門家とかではないので、あんまりあてにしないでください。
（判例、すごく読み辛いので。読み間違えてるかもしれないし）

<h2>著作権法の解釈には幅がある</h2>
著作権法自体、インターネットとかなかった時代に作られた古い法律なので、人によってホント解釈の幅が大きい。っていうか、そろそろ限界なんじゃないかなこの法律。

<h2>ネット上の著作権に関する情報はあくまで見解</h2>
よくある「○○をしたら違法」とか「○○はＯＫ」などと著作権に関する記事があるけれど、これらはあくまでその記事を書いた人の著作権法に対する解釈でしかない。
情報を発信しているのがのが弁護士であろうがJASRACであろうが、それは単なるその人（組織）の見解でしかないので、実際の裁判で記事にかかれたような判決がでるとは限らない。
(まぁ、これは著作権法に限った話ではないけれど）


<h2>グレーゾーンなんてない</h2>
当たり前だけれども裁判になれば黒か白か、確かな結果がでるわけなので、グレーゾーンなんてものはない。
それは単に「まだ、訴えられていない」状態でしかない。
逆に訴えられてなければ、どんなに危うくても白（今のところは）。


<h2>わりとひっくり返る</h2>
著作権法の裁判では、一審で有罪と判断されたものが二審で無罪になったり、その逆があったりってことが結構あるみたい。それだけ、裁判官によって著作権法の解釈が違うってことなんだろう。

<h2>著名人や大企業の作品の方が有利っぽい</h2>
「パクった、パクられた」みたいな話だとオリジナル作品の知名度なんかも考慮されるらしいので、基本、著名人や大企業の側に有利に働く傾向があるみたい。


<h2>トレスについて</h2>
ネットではよくあがる話題ではあるんだけれど、いくつか面白い判例があったのでメモ

<a href="http://tyosaku.hanrei.jp/precedent/View.do?type=cr&id=5863">平成 17年 (ワ) 26020号 損害賠償請求事件 </a>
「豆腐のパッケージに勝手に絵を使われた」と原告が訴えたのだけれど、その絵は江戸時代の浮世絵を模写したものだったというケース。結論から言うと敗訴。
模写作品の創作性に関する裁判所の見解が興味深い

<blockquote>『模写作品と原画との間に差異が認められたとしても、その差異が模写制作者による新たな創作的表現とは認められず、なお原画と模写作品との間に表現上の実質的同一性が存在し、<b>原画から感得される創作的表現のみが模写作品から覚知されるにすぎない場合</b>には、模写作品は、原画の複製物にすぎず、著作物性を有しないというべきである。
（中略）
<b>著作権法は、著作者による思想又は感情の創作的表現を保護することを目的としている</b>のであるから、模写作品において、なお原画における創作的表現のみが再現されているにすぎない場合には、当該模写作品については、原画とは別個の著作物としてこれを著作権法上保護すべき理由はない。』</blockquote>


こっちは模写作品の創作性が認められたケース。
<a href="http://etc.hanrei.jp/precedent/View.do?type=etc&id=9254">平成 21年 (ワ) 31755号 損害賠償請求事件 </a>
<blockquote>被告の主張
『本件入れ墨は、本件仏像写真の単なる機械的な模写又は単なる模倣にすぎず、著作物性を認めることはできない。本件下絵は 、写真の上にトレーシングペーパーを重ね、上から鉛筆又はシャープペンシルで描線をトレースして作成したものにすぎない。写真が存在するのにわざわざ手書きで描写する彫物師はいない。 必要な不手間をかけ、依頼者に負担をかけることになるからである。このようなトレースは極めて機械的なものであり、こには下絵作成者の創作性は存在しない。』
<br />
原告の主張
『原告は、本件仏像写真を参考にしたものの、仏像の向きを変え、かつ、表情を被告Ｙの希望に沿って優しいものとした点において、下絵における創作性がある。』
<br />
裁判所の判断
『原告は、本件入れ墨の制作に当たり、①下絵の作成に際して構図の取り方や仏像の表情等に創意工夫を凝らしたこと、②入れ墨を施すに際しては、輪郭線の筋彫りや描線の墨入れ、ぼかしの墨入れ等に際しても様々の道具を使用し、技法を凝らしたこと、<b>これにより本件入れ墨と本件仏像写真との間には表現上の相違があり、そこには原告の思想、感情が創作的に表現されていると評価することができる</b>ことは上記説示のとおりであり、本件入れ墨が本件仏像写真の単なる機械的な模写又は単なる模倣にすぎないということはできず、被告らの上記主張は採用することができない。』</blockquote>

ちなみにこの後、被告側が判決を不服として控訴している。
内容的には同じ。

<a href="http://tyosaku.hanrei.jp/precedent/View.do?type=cr&id=9490">平成 23年 (ネ) 10052号 損害賠償請求控訴事件 </a>
<blockquote>被告の主張
『十一面観音立像の写真の上にトレーシングペーパーを重ねて、上から鉛筆で描線をトレースして、下絵を作成した。このような製作過程を考慮すると、本件入れ墨は、創作的な表現とはいえず、著作物性はない。』
<br />
裁判所の判断
『<b>被告らは、製作過程等を指摘し、本件仏像写真の仏像と本件入れ墨の間には、図柄全体の輪郭が共通することから、本件入れ墨は著作物性がない旨を主張する。</b>しかし、前記のとおり、本件入れ墨は、<b>墨の濃淡等によって、表情の特徴や立体感を表すための工夫がされている点等を総合すると、思想、感情の創作的な表現がされていると評価することができる。</b>したがって、この点の被告らの主張は採用できない。』</blockquote>

トレス絡みで有名な「八坂神社祇園祭ポスター事件」でも争点は、模写作品の創作性だった。
<a href="http://tyosaku.hanrei.jp/precedent/View.do?type=cr&id=7598">平成 19年 (ワ) 1126号 損害賠償請求事件</a> 

<blockquote>『著作権法は、同法2条1項1号の規定するとおり、思想又は感情の創作的な表現を保護するものであるから、既存の著作物に依拠して創作された著作物が、思想、感情若しくはアイデア、事実若しくは事件など表現それ自体でない部分又は<b>表現上の創作性がない部分において、既存の著作物と同一性を有するにすぎない場合には、翻案には当たらない</b>と解するのが相当である
（中略）
本件水彩画に接する者は、その創作的表現から<b>本件写真の表現上の本質的な特徴を直接感得することができると認められる</b>から、本件水彩画は、本件写真を翻案したものというべきである。』</blockquote>

この事件については下記のブログで詳しく解説されている。
参考）<a href="http://hougakunikki.air-nifty.com/hougakunikki/2011/12/post-54f6.html">料理マンガにおける写真トレースと著作権法</a>


ネットでよくある「トレス疑惑検証」や「トレパク検証」は、"トレスという行為を行ったかどうか"という製作方法の検証でしかないので、実際の裁判ではあまり意味がない。むしろ検証すべきは、模写作品に創作性が有るか無いかという点。（あるいは、元の作品の創作性的表現をどれだけ再現しているか）

模写作品に創作性が認められる場合は、著作権よりも「表現の自由」が優先されるっぽい。


あとよく「トレスと模写を一緒にすんな」という話があるけれど描き手の心情としてはそうなんだろうけど、著作権侵害の裁判ではその二つにあまり違いは無い。重要なのはやっぱり作品の創作性。

<h2>総括</h2>
とりあえず……読みづらい。ものによっては、どっからが被告の主張で、どこまでが原告の主張で、どこからが裁判所の判断なのかがすご～くわかり辛かったりするので、もうちょっと分かりやすく書いてほしい。
濁点多すぎなきもするし、あと変な空白が文章にまじっているのはなんなんだろう？

著作権法については過渡期なんだろうなって感じ。「違法ダウンロードの刑事罰化」がすんなり通ったことを考えると、「著作権法の非親告罪化」とかもあり得るのかも。アメリカでもSOPA（オンライン海賊行為防止法案）を通そうとがんばっている人たちもいるみたいだし。

全体的には厳罰化に向かっているようなので、過去の判例はあてにならなくなってくるかも。

あと、ネット絡みの著作権侵害については判例が少なすぎるので、みんなもっとちゃんと訴えた方がいいと思った。


&nbsp;
&nbsp;
<strong>その他「著作権」関連の記事</strong>
<a href="http://shimz.me/blog/?p=1315">画像の無断転載対策をできるだけがんばってみた。</a>
<a href="http://shimz.me/blog/?p=1031">日本レコード協会が音楽ファンに望むネット上での正しい音楽の使い方</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1538</wp:post_id>
		<wp:post_date>2012-11-08 11:31:10</wp:post_date>
		<wp:post_date_gmt>2012-11-08 02:31:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1538</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1538' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1538, http://shimz.me/blog/?p=1538.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e8%91%97%e4%bd%9c%e6%a8%a9%e6%b3%95%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%e8%aa%a4%e8%a7%a3%e3%81%97%e3%81%a6%e3%81%84%e3%81%9f%e3%81%93%e3%81%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427402681;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2747;}i:1;a:1:{s:2:"id";i:1031;}i:2;a:1:{s:2:"id";i:3836;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.js 教材まとめ</title>
		<link>http://shimz.me/blog/d3-js/1740</link>
		<pubDate>Thu, 15 Nov 2012 02:57:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1740</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsについては以下を。
<a href="http://shimz.me/blog/?p=862">データビジュアライゼーション「d3.js」</a>

<a href="http://enjalot.com/"><strong>Tributary</strong></a>
D3.jsをブラウザ上で記述して実行できる開発環境です。
（jsdo.itみたいなもの）
GitHubのアカウントがあれば、作成したコードをgithub:gistに保存できます。
コード内のカラーコードや数値をクリックした際に、カラーパレットやスライドバーで値を修正できる機能が面白いです。（実用性は……？）
<a href="http://enjalot.com/"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000012-1024x603.jpg" alt="" title="WS000012" width="1024" height="603" class="alignnone size-large wp-image-1743" /></a>

手軽にD3.jsを試すことができるのと、コードの共有ができるので他のユーザーが投稿したコードを弄るところから始めるといいと思います。


<a href="http://phrogz.net/d3-playground"><strong>D3.js Playground</strong></a>
こちらもブラウザ上でD3.jsのコードを実行できるサービスです。
右上のプルダウンメニューからサンプルを選ぶとコードが読み込まれるので、それを色々編集して遊べます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/11/screenshot.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/screenshot-300x242.png" alt="" title="screenshot" width="300" height="242" class="alignnone size-medium wp-image-1749" /></a>




D3.jsのグラフレイアウトについては以下の記事に詳しく掲載されています。
<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_20.htm"><strong>svg要素の基本的な使い方まとめ</strong></a>

その他、見つけたものは「NAVERまとめ」の方でまとめてます。
<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>

「NAVERまとめ」って、ブログにまとめを貼り付ける機能が無くなったんですね、知らんかった。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1740</wp:post_id>
		<wp:post_date>2012-11-15 11:57:34</wp:post_date>
		<wp:post_date_gmt>2012-11-15 02:57:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-%e6%95%99%e6%9d%90%e3%81%be%e3%81%a8%e3%82%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1743]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[539025996124800]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427131360;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2958;}i:1;a:1:{s:2:"id";i:862;}i:2;a:1:{s:2:"id";i:2299;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【express】ejsを指定しているのに「500 ERROR: CANNOT FIND MODULE &#039;JADE&#039;」言われる</title>
		<link>http://shimz.me/blog/node-js/1754</link>
		<pubDate>Thu, 15 Nov 2012 07:26:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1754</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>現象</h2>
 
<pre class="lang:sh decode:true " >$ express -t ejs test</pre> 

上記のようにテンプレートにejsを指定してスケルトンを作成したけれど、実際app.jsを起動してブラウザでアクセスすると「500 ERROR: CANNOT FIND MODULE 'JADE'」（JADEのモジュールがないよ！）と言われる。

<img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000014-300x207.jpg" alt="" title="WS000014" width="300" height="207" class="alignnone size-medium wp-image-1757" />

package.jsonを確認するとjadeモジュールをインストールしようとしている。

ejsどこいった？

<h2>解決</h2>
オプション「-t」とテンプレート名の間に空白が入っちゃいけないらしい。
 
<pre class="lang:sh decode:true " >$ express -tejs test</pre> 

↑これだと、ちゃんとejsがテンプレートとして指定される。
package.jsonの中でもちゃんとejsモジュールが記述されている。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1754</wp:post_id>
		<wp:post_date>2012-11-15 16:26:51</wp:post_date>
		<wp:post_date_gmt>2012-11-15 07:26:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1754</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[539091512784915]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90express%e3%80%91ejs%e3%82%92%e6%8c%87%e5%ae%9a%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e3%81%ae%e3%81%ab%e3%80%8c500-error-cannot-find-module-jade%e3%80%8d%e8%a8%80%e3%82%8f%e3%82%8c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426695052;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:2942;}i:2;a:1:{s:2:"id";i:3820;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello worldまでたどりつけない人のためのプログラム独学入門</title>
		<link>http://shimz.me/blog/beginner/1764</link>
		<pubDate>Fri, 16 Nov 2012 14:21:14 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1764</guid>
		<description></description>
		<content:encoded><![CDATA[プログラミング入門の記事では、「Hello World!」を出力するところから始まることが多いのですが、まったくの初心者だと、そこにたどり着く前に越えないといけない壁や注意しないとならない事が、沢山あるので記事にしてみました。

<h2>インストールが簡単な言語を選ぼう</h2>
「今まで、まったくプログラミングをしたことがない」という人がプログラミングを"独学"するのであれば、まずは、とにかくインストールが簡単なプログラム言語を選びましょう。
インストール以外に、あれやこれやと設定しなくてはならないことが多かったりすると、そこでハマってHello Worldまでたどり着けなかったりすることが多々あります。


<h2>まずは、コピペから</h2>
開発環境を整えたら、いきなりコード書き始めるのではなく、サンプルコードをコピペして実行しまししょう。(参考書によっては、公式サイトでサンプルコードをダウンロードできます）
サンプルコードが実行できずエラーが出る場合は、設定を間違っているかバージョンが違っていたりする可能性があります。

<h2>ネットの記事や参考書には間違いもある</h2>
ネットの記事は当然として、参考書などにも残念ながら"誤記"というものがあります。とかく初めのうちは「参考書に間違いがあるはずない！」と思ってハマりやすいので以下の点に気を付けてください。
・なるべく新しい参考書を購入する。
・買ったら必ず公式サイトに正誤表が出てないか確認する。

<h2>バージョンを揃えよう</h2>
参考書等で学ぶ際は、言語のバージョンだけでなく、ライブラリや開発環境などのバージョンも参考書内で使用しているバージョンに合わせましょう。
バージョンが違うと、動かなかったり、記載されている通りの結果がでなかったりすることがあります。

<h2>エラーメッセージを検索しよう</h2>
とにかくエラーメッセージが表示されたら、そのメッセージをコピペしてググりましょう。
ただしエラーメッセージには自分が付けた名前（変数名や関数名など）が含まれている場合があります。
これらの"自分が付けた名前"を含んだまま検索すると正解にたどり着くのが遠のくので、それらを外して検索してください。


<h2>総括</h2>
個人的には、今まで一切「プログラミングを行ったことが無い」という人が"独学"でプログラミングを勉強しようというのであれば、<a href="http://jsdo.it/">jsdo.it</a>のようなコードが共有できて、ブラウザ上で編集してそのまま実行できる開発環境がおすすめです。
とりあえずブラウザさえあればプログラミングを始められますし、"間違いなく動いてるサンプルコード"を多数手に入れることができるのは、初心者にとってとても助けになります。

とにかく初めの頃は、「一字一句間違いなく入力できるか」だけでいっぱいいっぱいになりがちです。そこに「SDKへのPATHが通ってません」のようなエラーが英語で表示されたりすると、それだけで挫折しかねません。

特定の言語をマスターしようとするより、まずは、初期設定や環境構築が簡単な言語から初めて、「プログラミングの独学の仕方」を学ぶのが良いかと思います。


<strong>関連性がありそうな他の記事</strong>
<a href="http://shimz.me/blog/?p=643">新人プログラマーが理想と現実のギャップに打ちのめされる前に読んでおくと良いかもしれない参考書２冊</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1764</wp:post_id>
		<wp:post_date>2012-11-16 23:21:14</wp:post_date>
		<wp:post_date_gmt>2012-11-16 14:21:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1764</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[541026352591431]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world%e3%81%be%e3%81%a7%e3%81%9f%e3%81%a9%e3%82%8a%e3%81%a4%e3%81%91%e3%81%aa%e3%81%84%e4%ba%ba%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%a0%e7%8b%ac%e5%ad%a6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427244189;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:643;}i:1;a:1:{s:2:"id";i:3167;}i:2;a:1:{s:2:"id";i:4025;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.jsでコマンドライン引数の処理を行うなら「argv」が便利</title>
		<link>http://shimz.me/blog/node-js/1784</link>
		<pubDate>Tue, 20 Nov 2012 05:21:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1784</guid>
		<description></description>
		<content:encoded><![CDATA[複雑なオプションが指定された引数なども、とても簡単に取得できるので便利です。

<a href="https://npmjs.org/package/argv">argv</a>

インストールはnpmで
 
<pre class="lang:sh decode:true " >$ npm install argv</pre> 


argvオブジェクトを作成してrunメソッドを実行すると、引数をオブジェクトとして取得することができます。
<pre class="lang:js decode:true " title="引数の取得" >var argv = require('argv');
console.log(argv.run());
</pre> 
<pre class="lang:sh decode:true " title="実行結果" >$ node sample.js test aaa
{ targets: [ 'test', 'aaa' ], options: {} }
</pre> 


オプションが指定された引数を取得したい場合は、optionメソッドで取得するオプションの設定をします。
<pre class="lang:js decode:true " title="オプションを取得" >var argv = require('argv');

argv.option({
	name: 'option',
	short: 'o',
	type : 'string',
	description :'あなたのスクリプトのオプションを定義します',
	example: &quot;'script --option=value' or 'script -o value'&quot;
});
console.log(argv.run());
</pre> 
<pre class="lang:sh decode:true " title="実行結果" >$ node sample test -o aaa
{ targets: [ 'test' ], options: { option: 'aaa' } }
</pre> 

ヘルプも自動的に作成されます
<pre class="lang:sh decode:true " >$ node sample -h
Usage: sample [options]

        --help, -h
                Displays help information about this script
                'sample -h' or 'sample --help'

        --option, -o
                あなたのスクリプトのオプションを定義します
                'script --option=value' or 'script -o value'
</pre> 

オプションの値には型を指定することができます。
<pre class="lang:js decode:true " title="型指定" >var argv = require('argv');

argv.option([
    {
        name: 'option',
        type: 'csv,int'
    },
    {
        name: 'path',
        short: 'p',
        type: 'list,path'
    }
]);

console.log(argv.run());
</pre> 
 <pre class="lang:sh decode:true " title="実行結果" >$ node sample test --option=123,456.001,789.01
{ targets: [ 'test' ], options: { option: [ 123, 456, 789 ] } }

$ node sample test -p /path/to/file1 -p /path/to/file2
{ targets: [ 'test' ], options: { path: [ '/path/to/file1', '/path/to/file2' ] } }
</pre> 

独自の型を作成することができます。
<pre class="lang:js decode:true " title="カスタムタイプ" >var argv = require('argv');

argv.type( 'squared', function( value ) { //squared型を定義
    value = parseFloat( value );
    return value * value;
});

argv.option({
    name: 'square',
    short: 's',
    type: 'squared'
});
console.log(argv.run());
</pre> 
上記で作成したsquared型は、--square or -s オプションで指定された引数の2乗された値を返します。
<pre class="lang:sh decode:true " title="実行結果" >$ node sample test -s 2
{ targets: [ 'test' ], options: { square: 4 } }
</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1784</wp:post_id>
		<wp:post_date>2012-11-20 14:21:48</wp:post_date>
		<wp:post_date_gmt>2012-11-20 05:21:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1784</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[541432105884189]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js%e3%81%a7%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%83%a9%e3%82%a4%e3%83%b3%e5%bc%95%e6%95%b0%e3%81%ae%e5%87%a6%e7%90%86%e3%82%92%e8%a1%8c%e3%81%86%e3%81%aa%e3%82%89%e3%80%8cargv%e3%80%8d%e3%81%8c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427380415;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3783;}i:1;a:1:{s:2:"id";i:3501;}i:2;a:1:{s:2:"id";i:2701;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>353</wp:comment_id>
			<wp:comment_author><![CDATA[【Nodejs】便利なNodeモジュール【TIPS】 | FiS Project]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.fisproject.jp/2012/12/nodejs%e3%81%a1%e3%82%87%e3%81%93%e3%81%a3%e3%81%a8%e3%83%a1%e3%83%a2/</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.34</wp:comment_author_IP>
			<wp:comment_date>2014-10-18 15:52:20</wp:comment_date>
			<wp:comment_date_gmt>2014-10-18 06:52:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 詳しくはこちらを参考に。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413615140.405828952789306640625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413758920.130589962005615234375;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>node.jsでTCPプロキシ＆ポートフォワーディング</title>
		<link>http://shimz.me/blog/node-js/1797</link>
		<pubDate>Wed, 21 Nov 2012 02:44:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1797</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>node.jsでTCPプロキシ</strong>
<pre class="lang:js decode:true " title="tcp_proxy.js" >var util = require('util');
var net = require(&quot;net&quot;);

process.on(&quot;uncaughtException&quot;, function(e) {
	console.log(e);
});

if (process.argv.length != 5) {
  console.log(&quot;引数が正しく入力されていません:&quot; +　&quot; proxy_port target_host target_port&quot;);
    console.log(&quot;node scriptfile 3000 www.google.com 80&quot;);
  process.exit();
}

var proxyPort = process.argv[2];
var targetHost = process.argv[3];
var targetPort = process.argv[4];

net.createServer(function (proxySocket) {
  var connected = false;
  var buffers = new Array();
  var targetSocket = new net.Socket();
  targetSocket.connect(parseInt(targetPort), targetHost, function() {
    connected = true;
    if (buffers.length &gt; 0) {
      for (i = 0; i &lt; buffers.length; i++) {
        console.log(buffers[i].toString());
        targetSocket.write(buffers[i]);
      }
    }
  });

  proxySocket.on(&quot;error&quot;, function (e) {
    targetSocket.end();
  });
  targetSocket.on(&quot;error&quot;, function (e) {
    console.log(&quot;targethostに接続できません &quot; + targetHost + ', port ' + targetPort);
    proxySocket.end();
  });

  proxySocket.on(&quot;data&quot;, function (data) {
	console.log(&quot;send: &quot;+data.toString()); //送信データ
    if (connected) {
      targetSocket.write(data);
    } else {
      buffers[buffers.length] = data;
    }
  });
  targetSocket.on(&quot;data&quot;, function(data) {
	console.log(&quot;rec: &quot; + data.toString());  //受信データ
    proxySocket.write(data);
  });

  proxySocket.on(&quot;close&quot;, function(had_error) {
    targetSocket.end();
  });
  targetSocket.on(&quot;close&quot;, function(had_error) {
    proxySocket.end();
  });

}).listen(proxyPort);</pre> 



使い方）
<pre class="lang:sh decode:true " >$ node tcp_proxy.js [プロキシポート] [ターゲットホスト] [ターゲットポート]</pre> 

例）
<pre class="lang:sh decode:true " >$ node tcp_proxy.js 23 example.com 23
</pre> 


tcp_proxy.jsを実行した端末で、ローカルホストにtelnetクライアントで接続すると、プロキシ経由でexample.comにアクセスします。
smtpとかsshとかいろんなプロトコルで試してみると面白いかも？

&emsp;

<strong>http-proxyモジュールを使ったポートフォワーディング</strong>
モジュールのインストール
 
<pre class="lang:js decode:true " >npm install http-proxy</pre>  
<pre class="lang:js decode:true " title="port_forwarding.js" >var httpProxy = require('http-proxy');
var options = {
    hostnameOnly:true,
    router: {
        'example.com': '127.0.0.1:8080',
        'hoge.example.com': '127.0.0.1:9090'
    }

}
httpProxy.createServer(options).listen(80);</pre> 



実行すると80番ポートでlistenして、example.comにアクセスしてきた通信を8080ポートに、hoge.example.comでアクセスしてきた通信を9090ポートに送信します。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1797</wp:post_id>
		<wp:post_date>2012-11-21 11:44:09</wp:post_date>
		<wp:post_date_gmt>2012-11-21 02:44:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1797</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[541849332509133]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js%e3%81%a7tcp%e3%83%97%e3%83%ad%e3%82%ad%e3%82%b7%ef%bc%86%e3%83%9d%e3%83%bc%e3%83%88%e3%83%95%e3%82%a9%e3%83%af%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427217600;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2601;}i:1;a:1:{s:2:"id";i:1850;}i:2;a:1:{s:2:"id";i:2975;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</title>
		<link>http://shimz.me/blog/editor/1812</link>
		<pubDate>Fri, 23 Nov 2012 09:06:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1812</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/11/37e3808047553cedb34daa9b1d7ab2a3.jpg" alt="" title="写真" width="1000" height="788" class="alignnone size-full wp-image-1834" />

<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>に引き続き、プログラミングだけでなくWEBサイトのデザインもiPadで行えたら素晴らしいですよね（？）

HTML Egg は、HTMLやCSSなどの知識がなくても<a href="http://ja.wikipedia.org/wiki/WYSIWYG">WYSIWYG</a>エディタを使って、簡単にWEBサイトのデザインを行うことができるホームページ作成アプリです。


<a href="https://itunes.apple.com/us/app/html-egg-web-page-creator/id446992850?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/ipad_egg-150x150.png" alt="" title="ipad_egg" width="150" height="150" class="alignnone size-thumbnail wp-image-1814" /></a>
<a href="https://itunes.apple.com/us/app/html-egg-web-page-creator/id446992850?mt=8&at=10lMp5">Web Page Creator for iOS - HTML Egg</a>


実際の動作については、下記の動画をごらんください。


<iframe width="540" height="380" src="http://www.youtube.com/embed/Jr78vGyU2Fc" frameborder="0" allowfullscreen></iframe>


<h1>特徴</h1>

<strong>直観的な操作</strong>
画像やテキストなどをペタペタ張り付けて行くだけで、WEBサイトを作成することができます。要素の移動やサイズの変更なども指でなぞるだけ。
<iframe width="540" height="310" src="http://www.youtube.com/embed/FWOD8sqUhFc" frameborder="0" allowfullscreen></iframe>


<strong>豊富なテンプレート</strong>
ＰＣサイト向けのみならず、スマートフォンサイト向けのテンプレートも豊富に用意にされています。
<iframe width="540" height="310" src="http://www.youtube.com/embed/4Ef-EH_V9Q8?list=PLA73F06C7E09205FB&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>dropboxと連携</strong>
dropboxとLINKすることでバックアップを保存することができます。リストアも簡単
<iframe width="540" height="310" src="http://www.youtube.com/embed/lJOJUaB9yHY?list=PLF375775E647C14E6&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>出力形式</strong>
作成したWEBファイルは、FTPで直接サーバーアップロードできるほか、PNGイメージやPDFとして出力することもできます。
<iframe width="540" height="310" src="http://www.youtube.com/embed/yx0nM-xWAX0?list=PL0812AC2DABC84F80&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>オプションのアプリが豊富</strong>

<a href="https://itunes.apple.com/jp/app/egg-nation-web-page-templates/id529246615?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/0a7038cd8ae284ac1d20f62b07124f84.png" alt="" title="0a7038cd8ae284ac1d20f62b07124f84" width="144" height="144" class="alignnone size-full wp-image-1827" /></a>
<a href="https://itunes.apple.com/jp/app/egg-nation-web-page-templates/id529246615?mt=8&at=10lMp5">Egg Nation Web Page Templates</a>
HTML EGGユーザーによって作成されたテンプレートのギャラリーアプリです。HTML EGGに取り込んで編集することができます。

<a href="https://itunes.apple.com/jp/app/add-widgets-into-websites/id515742771?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/ad023b3a853a3f2c422c3d3931815cee.png" alt="" title="ad023b3a853a3f2c422c3d3931815cee" width="144" height="144" class="alignnone size-full wp-image-1828" /></a>
HTML EGGに<a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88">ウィジェット</a>を追加することができるアプリです。独自のウィジェットを作成することもできます。
<iframe width="540" height="310" src="http://www.youtube.com/embed/S9kkbcg_6b4?list=PL5ABE1E4700F04555&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>豊富なチュートリアル</strong>
YOUTUBEに専門のチャンネルがあり多数のチュートリアル動画が投稿されています。
<a href="http://www.youtube.com/user/htmlegg">Web Page Creator for iOS - HTML Egg channel</a>

作成したHTMLファイルをアップロードするサーバーが必要になるので、<a href="http://webya.opdsgn.com/webservice/strikingly/">Striking.ly</a>のように気軽にホームページが作れるわけではないですが、なかなかよくできたアプリだと思います。

【関連】
<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>
<a href="http://shimz.me/blog/iphoneipad/2730">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1812</wp:post_id>
		<wp:post_date>2012-11-23 18:06:52</wp:post_date>
		<wp:post_date_gmt>2012-11-23 09:06:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1812</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1834]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[542893379071395]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[striking-ly%e3%81%ab%e3%82%82%e8%b2%a0%e3%81%91%e3%81%aa%e3%81%84%ef%bc%9f%ef%bc%81%e3%80%80ipad%e3%81%a7%e3%82%89%e3%81%8f%e3%82%89%e3%81%8f%e3%83%9b%e3%83%bc%e3%83%a0%e3%83%9a%e3%83%bc%e3%82%b8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427375022;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2730;}i:1;a:1:{s:2:"id";i:3096;}i:2;a:1:{s:2:"id";i:2860;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【node.js】一度に実行する非同期処理の数を制限して、何回かに分けて処理する</title>
		<link>http://shimz.me/blog/node-js/1850</link>
		<pubDate>Tue, 27 Nov 2012 05:08:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1850</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.mixu.net/2011/02/02/essential-node-js-patterns-and-snippets/">Essential Node.js patterns and snippets</a>
<pre class="lang:js decode:true " title="pile.js" >exports.Pile = function() {
   this.pile = [];
   this.concurrency = 0;
   this.done = null;
   this.max_concurrency = 10;
}
exports.Pile.prototype = {
  add: function(callback) {
   this.pile.push(callback);
  },
  run: function(done, max_concurrency) {
      this.done = done || this.done;
      this.max_concurrency = max_concurrency || this.max_concurrency;
      var target = this.pile.length;
      var that = this;
      var next = function() {
         that.concurrency--;
         (--target == 0 ? that.done() : that.run());
      };
      while(this.concurrency &lt; this.max_concurrency &amp;&amp; this.pile.length &gt; 0) {
         this.concurrency++;
         var callback = this.pile.shift();
         callback(next);
      }
   }
};</pre> 


使用例） 
<pre class="lang:js decode:true " title="test.js" >var pile = require(&quot;./pile.js&quot;).Pile;
var pilex = new pile();

var counter = 0;
 
for(var i = 0; i &lt; 50; i++) {
   pilex.add( function test(next) {　　//実行する非同期処理を登録
      setTimeout( function() {
         counter++;
         console.log(counter +&quot; Hello world&quot;);
         next();
      }, 1500);
     }
   );
}
pilex.run(function() {  //登録した処理を実行
	console.log(&quot;Done &quot;+counter);
	}, 5); //一度に実行する非同期処理の制限数</pre> 


サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/35dh/js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1850</wp:post_id>
		<wp:post_date>2012-11-27 14:08:22</wp:post_date>
		<wp:post_date_gmt>2012-11-27 05:08:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1850</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[544719642222102]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90node-js%e3%80%91%e4%b8%80%e5%ba%a6%e3%81%ab%e5%ae%9f%e8%a1%8c%e3%81%99%e3%82%8b%e9%9d%9e%e5%90%8c%e6%9c%9f%e5%87%a6%e7%90%86%e3%81%ae%e6%95%b0%e3%82%92%e5%88%b6%e9%99%90%e3%81%97%e3%81%a6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426516875;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3087;}i:1;a:1:{s:2:"id";i:2601;}i:2;a:1:{s:2:"id";i:4100;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>中二病版「誕生日のことば」ジェネレーターを闇プログラマーっぽく作ってみた</title>
		<link>http://shimz.me/blog/javascript/1858</link>
		<pubDate>Wed, 28 Nov 2012 05:52:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1858</guid>
		<description></description>
		<content:encoded><![CDATA[元ネタはこちら。
<a href="http://twitpic.com/57pvr0">中二病版　「誕生日のことば」</a>


<script type="text/javascript" src="http://jsdo.it/blogparts/kPcK/js?width=465&height=496&view=play"></script>

完全なる悪ふざけ。頑張ればJavaScriptで日本語プログラミングもできるかも？　需要がありそうもないけど。

コードを書いているうちに、どんどん迷子になって、自分でもよくわからなくなった orz
とりあえずchromeでは動きました。他は知らん。
ホント JavaScript は地獄だぜ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1858</wp:post_id>
		<wp:post_date>2012-11-28 14:52:38</wp:post_date>
		<wp:post_date_gmt>2012-11-28 05:52:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1858</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[545191125508287]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%ad%e4%ba%8c%e7%97%85%e7%89%88%e3%80%80%e3%80%8c%e8%aa%95%e7%94%9f%e6%97%a5%e3%81%ae%e3%81%93%e3%81%a8%e3%81%b0%e3%80%8d%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%ac%e3%83%bc%e3%82%bf%e3%83%bc%e3%82%92]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427334782;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2856;}i:1;a:1:{s:2:"id";i:3039;}i:2;a:1:{s:2:"id";i:3684;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>documentオブジェクトの拡張</title>
		<link>http://shimz.me/blog/javascript/1866</link>
		<pubDate>Thu, 29 Nov 2012 00:29:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1866</guid>
		<description></description>
		<content:encoded><![CDATA[昨日、めちゃくちゃなコードを作っていて知った副産物

documentオブジェクトはprototypeでメソッドを追加できないけど、__proto__に直接入れしまえば動くブラウザもあるみたい。
サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/812A/js?width=465&height=496&view=play"></script>

まぁ、でも間違いなく非推奨なので、使い道はないけれども。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1866</wp:post_id>
		<wp:post_date>2012-11-29 09:29:32</wp:post_date>
		<wp:post_date_gmt>2012-11-29 00:29:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>document%e3%82%aa%e3%83%96%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%81%ae%e6%8b%a1%e5%bc%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[545567138804019]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426441515;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3085;}i:1;a:1:{s:2:"id";i:2534;}i:2;a:1:{s:2:"id";i:2928;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Google Analytics 】「期待外れ」な記事を見つけ出すカスタムレポートをつくった。</title>
		<link>http://shimz.me/blog/analytics/1874</link>
		<pubDate>Fri, 30 Nov 2012 07:50:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1874</guid>
		<description></description>
		<content:encoded><![CDATA[Google アナリティクスを確認していて、直帰率の高さが気になったので、多少悪あがきをしようかなと。
SEOに関しては、まったくの素人なので分析とかは適当です。

<h2>やったこと</h2>
記事（ページ）ごとの、速度／直帰率／離脱率／訪問者数、を表示するカスタムレポートをつくります。

指標グループや、ディメンションの詳細の設定は以下のような感じ。
<img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000016.jpg" alt="" title="WS000016" width="860" height="379" class="alignnone size-full wp-image-1876" />

これでレポートの設定は終わり。

実際に作ったレポートを表示して、アドバンスフィルタで訪問者数の少ないページを切り落とします。
（訪問者数が少ないと、直帰率や離脱率があまりあてにならないので）
「アドバンス」のリンクをクリックして設定。
<a href="http://shimz.me/blog/wp-content/uploads/2012/11/WS000017.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000017.jpg" alt="" title="WS000017" width="1164" height="219" class="alignnone size-full wp-image-1878" /></a>

アドバンスフィルタを適用したら、直帰率でソートします。
<a href="http://shimz.me/blog/wp-content/uploads/2012/11/WS000018.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000018.jpg" alt="" title="WS000018" width="1362" height="186" class="alignnone size-full wp-image-1880" /></a>

注意するのは以下の２点

<strong>・直帰率・離脱率が高く、平均表示時間が遅いページ</strong>
これらは、ページの読み込みに時間がかかっていて人が離脱していってる可能性が高いので、画像を軽くするなどして対応。
（ウチの場合は、画像より外部からスクリプトを読み込んでいたりする記事はどうしても重くなるので、仕方がない部分だったりします）

<strong>・直帰率・離脱率が高いが、平均表示時間はさほど遅くなく、平均ページ滞在時間が短いページ</strong>
これが、ずばり訪問者からみたときに「期待外れ」な記事である可能性が大です。
記事へのリンクをクリックしてみたものの、「ちっ、使えねぇ」といって離脱してくタイプのコンテンツ orz

……まぁ、仕方ないね～

とりあえず、件のページの詳細を調べてみたところ「タブレット」「キーボード」というキーワードで流入してくる率が高いようなので、記事の冒頭にそれらのキーワードで入ってくる訪問者の関心を惹きそうな記事へのリンクを付けることで、対応してみました。
これで、ちょっとでも直帰率が減るといいなぁ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1874</wp:post_id>
		<wp:post_date>2012-11-30 16:50:44</wp:post_date>
		<wp:post_date_gmt>2012-11-30 07:50:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1874</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[546175388743194]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90google-analytics-%e3%80%91%e3%80%8c%e6%9c%9f%e5%be%85%e5%a4%96%e3%82%8c%e3%80%8d%e3%81%aa%e8%a8%98%e4%ba%8b%e3%82%92%e8%a6%8b%e3%81%a4%e3%81%91%e5%87%ba%e3%81%99%e3%82%ab%e3%82%b9%e3%82%bf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1876]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426159056;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3230;}i:1;a:1:{s:2:"id";i:3306;}i:2;a:1:{s:2:"id";i:2755;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>両親に贈るのに最適だった「iPad教科書」</title>
		<link>http://shimz.me/blog/iphoneipad/1891</link>
		<pubDate>Sat, 01 Dec 2012 09:50:17 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1891</guid>
		<description></description>
		<content:encoded><![CDATA[【2014/10/30追記】
※ 書籍を紹介してからだいぶ時間が経ちiPadのOSも変わっため、下記書籍に掲載されている情報は古くなってしまています。現在のOSに対応した新しいシリーズが出版されていますので、そちらをお求めください。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822297306/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51bn8tKwNNL._SL160_.jpg" alt="やさしく学べる iPadスクール標準教科書 2っと楽しもう編 (スクール標準教科書シリーズ)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822297306/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">やさしく学べる iPadスクール標準教科書 2っと楽しもう編 (スクール標準教科書シリーズ)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.10.30</div></div><div class="amazlet-detail">増田 由紀 <br />日経BP社 <br />売り上げランキング: 348,769<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822297306/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

↓以下、過去の記事。

<hr>

　

両親がiPadを欲しがっていたのでプレゼントしたのですが、なにぶんパソコン等をいままでいっさい触ったことが無い人なので、いくらiPadが直感的な操作が可能といっても、やはりマニュアル的なものが必要になりました。

そこで、両親に贈るのに適したiPadの入門書がないかと書店でいろいろ探してみたのですが……なかなか思うような参考書がみつからりません。

欲しいのは、本当に基本的な操作方法<strong>だけ</strong>が掲載されている本で、初期設定等は自分が既に済ましてしまっているので「wifiの設定の仕方」の様な項目はむしろ邪魔だったりするのですが、そういった余計な内容の載っていない入門書がなかなか無くて困りました。

いろいろ書店を巡って、やっとみつけた理想に近い参考書が以下の本。

<a href="http://www.amazon.co.jp/gp/product/4822293742/ref=as_li_tf_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4822293742&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4822293742&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4822293742" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />


（Amazon で中身を閲覧することができます）

この本は、「本当になにも解らない人」に贈るiPadの入門書としてはもっとも理想的だと思います。

なによりも操作方法の説明に徹していて、iPadの設定関連についてはごっそり省いているのが素晴らしい！

文字も大きく、画像がふんだんに使われているので読みやすいですし、なにより薄いので「これを全部読まないとiPadは使いこなせないのか……」みたいなゲッソリ感を与えてしまうこともないでしょうｗ


とにかく、初心者中の初心者に贈る入門書を探しているのであれば、この参考書がお勧めです。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1891</wp:post_id>
		<wp:post_date>2012-12-01 18:50:17</wp:post_date>
		<wp:post_date_gmt>2012-12-01 09:50:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1891</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[546637842030282]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%a1%e8%a6%aa%e3%81%ab%e8%b4%88%e3%82%8b%e3%81%ae%e3%81%ab%e6%9c%80%e9%81%a9%e3%81%a0%e3%81%a3%e3%81%9f%e3%80%8cipad%e6%95%99%e7%a7%91%e6%9b%b8%e3%80%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3983]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373685;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2594;}i:1;a:1:{s:2:"id";i:3650;}i:2;a:1:{s:2:"id";i:3228;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「コードは汚くてもいい」を条件付きで擁護してみる</title>
		<link>http://shimz.me/blog/programming/1899</link>
		<pubDate>Mon, 03 Dec 2012 03:43:45 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1899</guid>
		<description></description>
		<content:encoded><![CDATA[釣りじゃないですよ。わりとまじめに考えました。

<blockquote>実際にYコンビネーターで成功しているハッカーというのは、決して美しいコードが書けるわけではありません。プログラミングの上手さより大事なことは、まずどれだけユーザーの欲しいことを理解できるかということで、次に重要なのはその条件をもとに実際に使いやすい製品を作ることができるか、ということですね。そのなかのコードは別にきれいである必要はなくて、ユーザーが喜べばいいだけの話ですからね。むしろコードがどれくらいきれいかを気にする人は出来の悪いプログラマーだとぼくは思っているくらいです。コードが気になってしまうと締め切りに間に合わず、ビジネスにならないわけですから。ポール・グレアムもそのように考えている人だと思います

<a href="http://wired.jp/2012/02/03/interview-ginzamarkets/5/">美しいコードを書こうとするのは悪いプログラマーだ</a>
</blockquote>



<blockquote>極端な話、コードがもうメチャメチャでも、動いて金が回れば正解なんですよ。「アイツの書くコードは汚いけど、アイツが入ったプロジェクトは絶対勝つよね」ってエンジニアは、絶対に呼ばれます。もう間違いない。少なくとも、僕は欲しいですし。

<a href="http://careerhack.en-japan.com/report/detail/66">エンジニアよ、ゼネラリストなんて目指すな！―VASILY 金山裕樹のキャリア論</a></blockquote>

定期的にでてきますね、この話題。
そのたびにフルボッコに叩かれるわけなんですが……個人的に思うところを書いておきます。

結論から言うと、

WEBサービスのスタートアップなどでは、コードの美しさよりリリースのスピードを優先させることは十分ありえるし、妥当だと思います。



<img src="http://shimz.me/blog/wp-content/uploads/2012/12/a.gif" alt="" title="a" width="499" height="374" class="alignnone size-full wp-image-1907" />

<hr>

とりあえず、「美しい」とか「汚い」とかの表現があいまいなので、一応この記事の中での定義を決めておきます。



<div class='colorbox'>

<strong>美しいコード</strong>
可読性が高く、保守しやすく、拡張性が高く、再利用しやすいコード

<strong>汚いコード</strong>
最低限のバグは潰してあり、基本的な脆弱性は塞いであるが、読みづらく、とりあえず動いてますって感じのコード</div>

&nbsp;

コードは汚いより美しい方が良いに決まっているわけすが……実際にはそのコードの寿命によるかなと思います。

綺麗、汚いにかかわらずコードには寿命があります。

サービスが立ちいかなくなったりとか、技術の移り変わりだとかで、捨てなきゃならん、あるいは一から全部書き直さなくちゃならんってことは、必ず発生します。

使い捨てのコードでさえ美しさを最優先させるのってのは、仕事ではなくて趣味です。

これから作るサービスがちゃんとビジネスとして成功するかわからない、資金に余裕がなくて優秀なエンジニアなんて雇えない、そんなスタートアップの状況下でなら、コードの美しさよりリリースするスピードを優先させるのはそんなにおかしなことでもないですし、「資金調達が上手くいったら優秀なエンジニア引き抜いて、中身丸ごと綺麗に書き直そうぜ」ってのも、戦略としてありだと思います。
スタートアップ時に書くコードの寿命は短くていいし、むしろそんな初期に書いたコードをその後何年も使い続け、保守し拡張し続ける方が無茶だと思います。

実際には綺麗なコードが書けるエンジニアは書くスピードも速かったりするのですが、でも、そういう優秀なエンジニアはちゃんと高額な給与で向かい入れられるべきだと思うし、そうなるとスタートアップ時にそんな人材を調達するのはかなり困難であるはずで、そんな中で美しさとスピード、どちらかを優先しなくてはならないとしたらスピードでしょう。
とにかく、とっととリリースしてビジネスとして成功させていかないと、エンジニアに払う給与だっていずれなくなってしまうのです。 

それにこの方が、エンジニアの地位も向上すると思うんですよね。

優秀なエンジニアには、その優秀さ（美しいコードが書ける）がちゃんと評価され必要とされて大きなお金が払われるわけですから。


なんとなく、日本の「美しいコードであるべき」論争には、「上から下まで全ての人間があらゆる状況下で完璧な仕事をするべき」という職人魂の悪い部分が出ているような気がします。

そういう思想のもとでは、「汚いコードを書くエンジニアなんてものは許されないし、存在しないはず」とその姿が無視され、実際には大きな差があるはずの、優秀なエンジニアと未熟なエンジニアが十把一絡げにされて「全部で５人月でお願いします」みたいな話になってしまうのではないでしょうか。

スタートアップ時と、会社の成長期では必要となる人材が違ってくるという話がありますが、それはコードにも当てはまるってことだと思います。

美しさにこだわた挙句リリースが遅れて競合に先を行かれてビジネスとしてポシャッた、なんてことになれば、その綺麗に書いたコードもゴミ箱に捨てるしかないわけです。

まずはビジネス優先させないと……給与でないと困るし、会社潰れても困りますしね。


【余談】
ザッカーバーグが最初に書いたFacebookのコードも酷いスパゲッティだったって話もどっかで聞いたし、海外のスーパーなエンジニアの武勇伝には「今はでっかいサービスになってるが、俺が雇われた頃のコードは酷いスパゲッティで、それをFack!と罵りながら全部書き直したんだぜ、ハッハッハッハ」ってエピソードがわりと沢山あったと思うので、そんなに珍しい話でもないと思うんですけどね。

まぁ、SIerとかになるまた話が違ってくるとは思いますが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1899</wp:post_id>
		<wp:post_date>2012-12-03 12:43:45</wp:post_date>
		<wp:post_date_gmt>2012-12-03 03:43:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%b3%e3%83%bc%e3%83%89%e3%81%af%e6%b1%9a%e3%81%8f%e3%81%a6%e3%82%82%e3%81%84%e3%81%84%e3%80%8d%e3%82%92%e6%9d%a1%e4%bb%b6%e4%bb%98%e3%81%8d%e3%81%a7%e6%93%81%e8%ad%b7%e3%81%97%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[547515115275888]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1907]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427408901;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3096;}i:1;a:1:{s:2:"id";i:2977;}i:2;a:1:{s:2:"id";i:3167;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.jsでスクレイピング（cheerio版）</title>
		<link>http://shimz.me/blog/node-js/1948</link>
		<pubDate>Tue, 04 Dec 2012 02:57:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1948</guid>
		<description></description>
		<content:encoded><![CDATA[以前<a href="http://shimz.me/blog/?p=19">、node.ioを使ったスクレイピング</a>についての記事を書きましたが、cheerioというライブラリ(XML/HTML parser)を使った方が簡単だということに気付いたので、そちらを紹介

<a href="https://github.com/MatthewMueller/cheerio">cheerio</a>

cheerio インストール
 
<pre class="lang:sh decode:true " >$ npm install cheerio</pre> 


サンプル 
<pre class="lang:js decode:true " >
var request = require(&quot;request&quot;);
var cheerio = require(&quot;cheerio&quot;);

request(
	{
		uri: &quot;http://shimz.me/blog/&quot;,
	}, 
	function(error, response, body) {
		var $ = cheerio.load(body); //取得したページのbody部をパース

		$(&quot;.entry-title &gt; a&quot;).each(function() { //パースした内容にはjQuery風のセレクタでアクセスできる
			var link = $(this);
			var text = link.text();
			var href = link.attr(&quot;href&quot;);

			console.log(text + &quot; -&gt; &quot; + href);
		});
	}
);</pre> 


こっちの方が簡単ですね。

【追記】
どうも、ちゃんと取得できないときがあるっぽい。
<pre class="lang:js decode:true " >&gt; $(&quot;channel &gt; link&quot;).toString()
'&lt;link&gt;'
&gt; $(&quot;channel &gt; title&quot;).toString()
'&lt;title&gt;GUNMA GIS GEEK&lt;/title&gt;'
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1948</wp:post_id>
		<wp:post_date>2012-12-04 11:57:33</wp:post_date>
		<wp:post_date_gmt>2012-12-04 02:57:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1948</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[547970125230387]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js%e3%81%a7%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%ef%bc%88cheerio%e7%89%88%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391476;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2701;}i:1;a:1:{s:2:"id";i:19;}i:2;a:1:{s:2:"id";i:2975;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>258</wp:comment_id>
			<wp:comment_author><![CDATA[All My Favorite Things &rsaquo; node.js + cheerio = crawling]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://akton.boo.jp/blog/?p=162</wp:comment_author_url>
			<wp:comment_author_IP>210.157.22.46</wp:comment_author_IP>
			<wp:comment_date>2013-12-20 23:30:44</wp:comment_date>
			<wp:comment_date_gmt>2013-12-20 14:30:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ・http://liginc.co.jp/programmer/archives/4848 ・http://shimz.me/blog/node-js/1948 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387549844.5732309818267822265625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387757011.3276150226593017578125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>反広告社をダサいと感じる理由。</title>
		<link>http://shimz.me/blog/other/1974</link>
		<pubDate>Thu, 06 Dec 2012 05:03:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1974</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ji-sedai.jp/special/generations/post_4.html">【すべての広告を焼燬する】悪戯広告結社『反広告社』、その愛憎と信念を聴く</a>


<blockquote>反広告社：はい。ルールというルールはありません。ただ、私共の方針に合致しない広告の場合、理由を説明し掲載を見送る場合があります。例えば実務家に少しでも負けてるコピー、嘘が入ったコピー、笑えないコピー、今この社会に出す必要がないコピー、私たちが言う必要のないコピー等です。改善余地があると考えた時は、私も一緒になって代案を制作します。伊勢丹の「恋が着せ、愛が脱がせる」やLUMINEの「悪い女ほど、清楚な服が、よく似合う」、JR東日本の「愛に雪、恋を白」に勝てるコピーとは何か、四六時中考えています。
</blockquote>

なるほど、このグループは「コピー」を単なる「言葉」としてしか考えていないから、出てくる作品があんなにも雑なデザインなのか。

反広告社のポスターは、とにかくフォントの選び方が適当（っていうか何も考えてないっぽく見える）だったり、ただ単に画像の上に文字をベターと貼り付けただけで、文字ツメやベースラインの調整もされてないものが多い。

デザインのセンスがないとか以前に、なにもやってない。つまり手抜き。

"一番「面白い言葉」や「好い言葉」思いついた奴が勝ち"ってのは、それ単なる大喜利だよ。

ネットで拾った画像に文字貼り付ければ「コピー」になると考えているのなら、その考えがダサイ。

<blockquote>反広告社：弊社が無断で作り、発表している広告を、ターゲットが自社広告として使いはじめた時です。そうなってはじめて、既存の広告会社を打破したと言えると考えます。弊社の活動が終わるとしたら、そのときです。</blockquote>

ネタにはなるだろうけど、ネタ以上のものにはなりえないだろうし、これが既存広告の脅威になるとも思えないし、本職からしたら「うん、そういう遊びは、まともにデザインできるようになってからやろうな？」って言われて終わると思う。

今の広告業界や広告そのものに疑問があったり、反発を感じるってのはわかるけど、"技術"を疎かに、軽視しているって所がダサイ。


<a href="http://www.amazon.co.jp/gp/product/4568502551/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4568502551&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4568502551&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4568502551" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1974</wp:post_id>
		<wp:post_date>2012-12-06 14:03:37</wp:post_date>
		<wp:post_date_gmt>2012-12-06 05:03:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%8d%e5%ba%83%e5%91%8a%e7%a4%be%e3%82%92%e3%83%80%e3%82%b5%e3%81%84%e3%81%a8%e6%84%9f%e3%81%98%e3%82%8b%e7%90%86%e7%94%b1%e3%81%8c%e3%82%8f%e3%81%8b%e3%81%a3%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427309153;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3167;}i:1;a:1:{s:2:"id";i:3305;}i:2;a:1:{s:2:"id";i:3614;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar]たった２行の追加でFullCalendarをiPad対応にするスクリプト</title>
		<link>http://shimz.me/blog/jquery/1983</link>
		<pubDate>Mon, 10 Dec 2012 01:16:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1983</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/joshgerdes/jquery.ui.touch">jquery.ui.touch</a>

FullCalendarをiPad等のタッチ操作に対応させる方法はいくつかあるみたいですが、今のところ上記のスクリプトを使うのが一番簡単だと思います。

使い方は以下。

ヘッダで上記スクリプトを読み込んで。
 
<pre class="lang:xhtml decode:true " >
&lt;script src=&quot;jquery.ui.touch.js&quot;&gt;&lt;/script&gt;
</pre> 

カレンダー設定後にaddTouchを付加する。
 
<pre class="lang:js mark:16 decode:true " >
$(document).ready(function() {

	var date = new Date();
	var d = date.getDate();
	var m = date.getMonth();
	var y = date.getFullYear();
	
	var calendar = $('#calendar').fullCalendar({
		header: {
			left: 'prev,next today',
			center: 'title',
			right: 'month,agendaWeek,agendaDay'
		},
	});
	
	$('#calendar').addTouch();
});
</pre> 


<a href="http://shimz.me/example/fullcalenar/02/">example</a>(iPadで見てください）

動作確認：iPad(iOS6)

イベント（スケジュール）の登録、移動、時間の変更をタッチ操作で行うことができます。
一応iPhoneでも操作できるはずですが小さすぎてあまり実用的ではありません。また、iPad以外のタブレット端末では動作確認してません。

【備考】
タッチ操作の場合タッチ（クリック）でスケジュールの登録を行わせると誤操作しやすいので、スケジュールの登録は別のイベント（ダブルクリック）などに割り振った方がよさそう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1983</wp:post_id>
		<wp:post_date>2012-12-10 10:16:07</wp:post_date>
		<wp:post_date_gmt>2012-12-10 01:16:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-1983</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fullcalendar%e3%81%9f%e3%81%a3%e3%81%9f%ef%bc%92%e8%a1%8c%e3%81%ae%e8%bf%bd%e5%8a%a0%e3%81%a7fullcalendar%e3%82%92ipad%e5%af%be%e5%bf%9c%e3%81%ab%e3%81%99%e3%82%8b%e3%82%b9%e3%82%af%e3%83%aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3454]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373140;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1460;}i:1;a:1:{s:2:"id";i:2475;}i:2;a:1:{s:2:"id";i:2963;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 値の正規化(d3.scale)</title>
		<link>http://shimz.me/blog/d3-js/2020</link>
		<pubDate>Thu, 13 Dec 2012 08:28:23 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2020</guid>
		<description></description>
		<content:encoded><![CDATA[ 
<pre class="lang:js decode:true " >var dataset = [12, 159, 0, 5555, 24, 6243, 369, 2525, 9999, 1212]
</pre> 
例えば、上記のような0～10000までの値が含まれたデータセットを0px～450pxのラインに収めたい場合にはデータセットをピクセルの範囲内に収めるため、値の<a href="http://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%8C%96">正規化</a>を行う必要があります。

わりとメンドクサイ作業なのですが、d3.jsにはこのデータの正規化を行うための便利な関数が用意されているので、簡単に正規化を行うことができます。

<strong>スケールオブジェクトの作成</strong>
 
<pre class="lang:js decode:true " >var scale = d3.scale.linear()
    .domain( ["データセットの最小値", "データセットの最大値"])
    .range( ["スケールの最小値", "スケールの最大値"]);
</pre> 
作成したscaleオブジェクトの引数に値を入れると、正規化された値が出力されます。

 
<pre class="lang:js decode:true " >&gt; var scale = d3.scale.linear().domain([0, 10000]).range([0, 450]);
&gt; scale(10)
0.45
&gt; scale(100)
4.5
&gt; scale(1212)
54.54
</pre> 


具体的な利用法は以下のサンプルを。
<script type="text/javascript" src="http://jsdo.it/blogparts/qUfcG/js?width=465&height=496&view=javascript"></script>
赤＝データセットの値をそのままポジションの値として配置
緑＝Ｘ軸にスケール（0～450)を適応
青＝Ｘ・Ｙ軸にスケール（0～450)を適応

また、通常のpx指定では、左上が(0,0)となり、右下に行くほど値が大きくなりますが、グラフなどの描写ではY軸を逆転させ、値が大きい要素を上に表示したい場合が多々あります。
そういった指定もreangeを逆転するだけで簡単に行う事ができます。
<script type="text/javascript" src="http://jsdo.it/blogparts/h7Lm/js?width=465&height=496&view=javascript"></script>
赤＝通常のスケールを指定して配置
緑＝padding(50px)を指定して配置
青＝Y軸を逆転（↓に行くほど値が低くなる）して配置


ちなみにrangeには数値だけなくカラーコードを指定することができます。
データセットの値をカラースケールに適応させたい場合に便利です。
<script type="text/javascript" src="http://jsdo.it/blogparts/mgul/js?width=465&height=496&view=javascript"></script>




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2020</wp:post_id>
		<wp:post_date>2012-12-13 17:28:23</wp:post_date>
		<wp:post_date_gmt>2012-12-13 08:28:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2020</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js-%e5%80%a4%e3%81%ae%e6%ad%a3%e8%a6%8f%e5%8c%96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427321941;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3307;}i:1;a:1:{s:2:"id";i:3991;}i:2;a:1:{s:2:"id";i:3319;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【iPhone/iPad】フルスクリーンで「ホーム画面に追加」ジェネレーター</title>
		<link>http://shimz.me/blog/iphoneipad/2080</link>
		<pubDate>Fri, 14 Dec 2012 03:35:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2080</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/labo/FullScreeBKM/">iPhone/iPad Full Screen Bookmark</a>

特定のサイトをフルスクリーンで開くようにホーム画面に追加するジェネレーターです。
iPhone/iPad共にiOS6でしか動作確認してません。
ICON画像はPNGじゃないとたぶんダメです。大きすぎてもダメかな。
（ICON画像の指定は、iOS6のsafariでないとinput type="file"に対応してなかったと思うので使えません）


<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121451-01" rel="attachment wp-att-2081"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121451-01-156x300.png" alt="iOS Screenshot 20121214-121451 01" width="156" height="300" class="aligncenter size-medium wp-image-2081" /></a>
タイトル、サイトのURL、アイコンに使用する画像を選択して「実行」ボタンを押してください。

&nbsp;

<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121518-01" rel="attachment wp-att-2083"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121518-01-156x300.png" alt="iOS Screenshot 20121214-121518 01" width="156" height="300" class="aligncenter size-medium wp-image-2083" /></a>

<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121653-03" rel="attachment wp-att-2084"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121653-03-156x300.png" alt="iOS Screenshot 20121214-121653 03" width="156" height="300" class="aligncenter size-medium wp-image-2084" /></a>
画面が切り替わったら、safariのメニューから「ホーム画面に追加」を選択

&nbsp;

<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121645-02" rel="attachment wp-att-2085"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121645-02-156x300.png" alt="iOS Screenshot 20121214-121645 02" width="156" height="300" class="aligncenter size-medium wp-image-2085" /></a>
<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121633-01" rel="attachment wp-att-2086"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121633-01-156x300.png" alt="iOS Screenshot 20121214-121633 01" width="156" height="300" class="aligncenter size-medium wp-image-2086" /></a>
タイトルを編集して「追加」を行えば、ホーム画面にブックマークが追加されます。

&nbsp;

後は、追加したアイコンをタップすれば、指定したサイトがフルスクリーンで開きます。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2080</wp:post_id>
		<wp:post_date>2012-12-14 12:35:54</wp:post_date>
		<wp:post_date_gmt>2012-12-14 03:35:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%95%e3%83%ab%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%81%a7%e3%80%8c%e3%83%9b%e3%83%bc%e3%83%a0%e7%94%bb%e9%9d%a2%e3%81%ab%e8%bf%bd%e5%8a%a0%e3%80%8d%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2081]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427125392;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:3883;}i:2;a:1:{s:2:"id";i:4025;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CDN(Content Delivery Network)、JavaScriptライブラリまとめ</title>
		<link>http://shimz.me/blog/javascript/2107</link>
		<pubDate>Mon, 17 Dec 2012 05:25:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2107</guid>
		<description></description>
		<content:encoded><![CDATA[JavaScriptのライブラリをお手軽に導入できて便利な<a href="http://e-words.jp/w/CDN.html">CDN</a>ですが、どのサービスで何のライブラリが使えるのか忘れがちだったのでメモ。
ついでに、RequireJSを使ったTIPS

<hr>

RequireJSを用いたCDNからライブラリの読み込みに失敗した際のフォールバック

 
<pre class="lang:js decode:true " >requirejs.config({
    enforceDefine: true,
    paths: {
        jquery: [
            'http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min',
            'http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.8.0.min',
            &quot;libs/jquery&quot;
        ]
    }
});

require(['jquery'], function ($) {
       console.log(jQuery);
});
</pre> 

拡張子の「.js」は省いておく必要がある。

<h2>CDNリスト</h2>

&emsp;

<strong><a href="https://developers.google.com/speed/libraries/devguide?hl=ja">Google Hosted Libraries</a></strong>
<a href="http://angularjs.org/">AngularJS</a>
<a href="http://www.chromium.org/developers/how-tos/chrome-frame-getting-started">Chrome Frame</a>
<a href="http://dojotoolkit.org/">Dojo</a>
<a href="http://extjs.co.jp/products/core/manual/">Ext Core</a>
<a href="http://jquery.com/">jQuery</a>
<a href="http://jqueryui.com/">jQuery UI</a>
<a href="http://mootools.net/">MooTools</a>
<a href="http://prototypejs.org/">Prototype</a>
<a href="http://script.aculo.us/">script_aculo_us</a>
<a href="http://code.google.com/p/swfobject/">SWFObject</a>
<a href="https://developers.google.com/webfonts/docs/webfont_loader">WebFont Loader</a>

<strong><a href="http://scriptsrc.net/">ScriptSrc.net</a></strong>
Google Hosted Librariesのscript読み込みタグをクリックするだけでクリップボードにコピーできるサービス。

<hr>
<strong><a href="http://www.asp.net/ajaxlibrary/cdn.ashx">Microsoft Ajax Content Delivery Network</a></strong>
<a href="http://jquery.com/">jQuery</a>
<a href="http://jqueryui.com/">jQuery UI</a>
<a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/">jQuery Validation</a>
<a href="http://jquerymobile.com/">jQuery Mobile</a>
<a href="http://api.jquery.com/category/plugins/templates/">jQuery Templates</a>
<a href="http://jquery.malsup.com/cycle/">jQuery Cycle</a>
<a href="http://datatables.net/">jQuery DataTables</a> - テーブル操作（<a href="http://shimz.me/blog/category/datatables">参考</a>）
<a href="http://modernizr.com/releases/">Modernizr Releases</a>
<a href="http://www.asp.net/ajaxlibrary/AjaxControlToolkitSampleSite/">Ajax Control Toolkit</a>
<a href="http://www.jshint.com/">JSHint</a>
<a href="http://knockoutjs.com/">Knockout</a>
<a href="http://www.asp.net/web-forms">ASP.NET Web Forms and Ajax</a>
<a href="http://msdn.microsoft.com/ja-jp/asp.net/aa336581.aspx">ASP.NET MVC</a>

<hr>


<strong><a href="http://developer.yahoo.com/yui/articles/hosting/">YUI 2: Dependency Configurator</a></strong>
<a href="http://yuilibrary.com/">YUI JavaScript Core
YUI CSS Packages
YUI JavaScript Utilities
YUI User Interface Widgets
YUI Aggregate (Rollup) Files
YUI Developer Tools</a>

<hr>


<strong><a href="http://cdnjs.com/">cdnjs</a></strong>
<a href="http://cssgrid.net/">1140</a>
<a href="http://960.gs/">960gs</a><a href="http://ace.ajax.org/">ace</a>
<a href="https://github.com/liferay/alloy-ui">alloy-ui</a>
<a href="http://amplifyjs.com/">amplifyjs</a>
<a href="http://angularjs.org/">angular.js</a>
<a href="http://augmentjs.com/">augment.js</a>
<a href="https://github.com/jeromegn/Backbone.localStorage">backbone-localstorage.js</a>
<a href="http://github.com/marionettejs/backbone.eventbinder">backbone.eventbinder</a>
<a href="http://documentcloud.github.com/backbone/">backbone.js</a>
<a href="http://github.com/marionettejs/backbone.marionette">backbone.marionette</a>
<a href="https://github.com/theironcook/Backbone.ModelBinder#prerequisites">backbone.modelbinder</a>
<a href="https://github.com/addyosmani/backbone.paginator">backbone.paginator</a>
<a href="http://github.com/derickbailey/backbone.syphon/">backbone.syphon</a>
<a href="http://thedersen.com/projects/backbone-validation">backbone.validation</a>
<a href="http://github.com/marionettejs/backbone.wreqr">backbone.wreqr</a>
<a href="http://benchmarkjs.com/">benchmark</a>
<a href="http://bonsaijs.org/">bonsai</a>
<a href="http://jbutz.github.com/bootstrap-lightbox/">bootstrap-lightbox</a>
<a href="http://camanjs.com/">camanjs</a>
<a href="http://schteppe.github.com/cannon.js">cannon.js</a>
<a href="http://harvesthq.github.com/chosen">chosen</a>
<a href="http://code.google.com/chrome/chromeframe/">chrome-frame</a>
<a href="http://jashkenas.github.com/coffee-script/">coffee-script</a>
<a href="http://www.lalit.org/lab/jsoncookies">cookiejar</a>
<a href="http://craftyjs.com/">crafty</a>
<a href="https://github.com/codler/jQuery-Css3-Finalize">css3finalize</a>
<a href="http://css3pie.com/">css3pie</a>
<a href="http://cufon.shoqolate.com/">cufon</a>
<a href="http://mbostock.github.com/d3/">d3</a> - データ可視化（<a href="http://shimz.me/blog/category/d3-js">参考</a>）
<a href="http://jsantell.github.com/dancer.js">dancer.js</a>
<a href="http://code.google.com/p/dat-gui/">dat-gui</a>
<a href="http://datatables.net/extras/fixedheader/">datatables-fixedheader</a>
<a href="http://datatables.net/">datatables</a>
<a href="http://www.datejs.com/">datejs</a>
<a href="http://davisjs.com/">davis.js</a>
<a href="http://www.dillerdesign.com/experiment/DD_belatedPNG/">dd_belatedpng</a>
<a href="http://documentup.com/">documentup</a>
<a href="http://dojotoolkit.org/">dojo</a>
<a href="https://dropbox.com/developers">dropbox.js</a>
<a href="http://dygraphs.com/">dygraph</a>
<a href="https://github.com/embedly/embedly-jquery">embedly-jquery</a>
<a href="https://github.com/emberjs/data">ember-data.js</a>
<a href="http://emberjs.com/">ember.js</a>
<a href="https://github.com/kriskowal/es5-shim">es5-shim</a>
<a href="http://evejs.com/">eve.js</a>
<a href="http://www.sencha.com/products/extjs/">ext-core</a>
<a href="http://fancyapps.com/fancybox/">fancybox</a>
<a href="http://fineuploader.com/">file-uploader</a>
<a href="https://getfirebug.com/firebuglite/">firebug-lite</a>
<a href="http://flexiejs.com/">flexie</a>
<a href="http://code.google.com/p/flot/">flot</a>
<a href="http://fortawesome.github.com/Font-Awesome/">font-awesome</a>
<a href="http://foundation.zurb.com/">foundation</a>
<a href="http://galleria.io/">galleria</a>
<a href="http://garlicjs.org/">garlic.js</a>
<a href="https://github.com/CardinalPath/gas">gas</a>
<a href="https://rubygems.org/gems/gmaps4rails">gmaps4rails</a>
<a href="http://g.raphaeljs.com/">graphael</a>
<a href="http://www.handlebarsjs.com/">handlebars.js</a>
<a href="http://hashgrid.com/">hashgrid</a>
<a href="http://headjs.com/">headjs</a>
<a href="http://highcharts.com/">highcharts</a>
<a href="http://highlightjs.org/">highlight.js</a>
<a href="http://mnot.github.com/hinclude/">hinclude</a>
<a href="https://github.com/balupton/History.js/">history.js</a>
<a href="http://twitter.github.com/hogan.js/">hogan.js</a>
<a href="https://github.com/aFarkas/html5shiv">html5shiv</a>
<a href="http://wavded.github.com/humane-js/">humane-js</a>
<a href="http://icanhazjs.com/">ICanHaz.js</a>
<a href="http://jade-lang.com/">jade</a>
<a href="https://github.com/jakesgordon/javascript-state-machine">javascript-state-machine</a>
<a href="http://joapp.com/">jo</a>
<a href="http://dev.iceburg.net/jquery/jqModal/">jqModal</a>
<a href="http://srobbin.com/jquery-plugins/backstretch/">jquery-backstretch</a>
<a href="https://github.com/carhartl/jquery-cookie">jquery-cookie</a>
<a href="http://keith-wood.name/countdown.html">jquery-countdown</a>
<a href="http://gsgd.co.uk/sandbox/jquery/easing/">jquery-easing</a>
<a href="http://gamequeryjs.com/">jquery-gamequery</a>
<a href="http://benalman.com/projects/jquery-hashchange-plugin/">jquery-hashchange</a>
<a href="https://github.com/tkyk/jquery-history-plugin">jquery-history</a>
<a href="http://www.infinite-scroll.com/infinite-scroll-jquery-plugin/">jquery-infinitescroll</a>
<a href="http://deepliquid.com/content/Jcrop.html">jquery-jcrop</a>
<a href="http://code.appendto.com/plugins/jquery-mockjax/">jquery-mockjax</a>
<a href="http://brandonaaron.net/code/mousewheel/docs">jquery-mousewheel</a>
<a href="http://nivo.dev7studios.com/">jquery-nivoslider</a>
<a href="http://needim.github.com/noty/">jquery-noty</a>
<a href="http://stevenbenner.github.com/jquery-powertip/">jquery-powertip</a>
<a href="http://flesler.blogspot.com/2007/10/jqueryscrollto.html">jquery-scrollTo</a>
<a href="http://omnipotent.net/jquery.sparkline">jquery-sparklines</a>
<a href="http://textextjs.com/">jquery-textext</a>
<a href="https://github.com/cowboy/jquery-throttle-debounce">jquery-throttle-debounce</a>
<a href="http://timeago.yarp.com/">jquery-timeago</a>
<a href="http://jquerytools.org/">jquery-tools</a>
<a href="https://github.com/allmarkedup/jQuery-URL-Parser">jquery-url-parser</a>
<a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation//">jquery-validate</a>
<a href="http://neteye.github.com/activity-indicator.html">jquery.activity-indicator</a>
<a href="http://www.asual.com/jquery/address/">jquery.address</a>
<a href="http://benalman.com/projects/jquery-bbq-plugin/">jquery.ba-bbq</a>
<a href="http://www.jacklmoore.com/colorbox">jquery.colorbox</a>
<a href="http://jquery.malsup.com/cycle/">jquery.cycle</a>
<a href="http://jquery.malsup.com/form/">jquery.form</a>
<a href="http://formalize.me/">jquery.formalize</a>
<a href="http://desandro.github.com/imagesloaded/">jquery.imagesloaded</a>
<a href="https://github.com/christianv/jquery-lifestream">jquery.lifestream</a>
<a href="http://jamesflorentino.github.com/nanoScrollerJS/">jquery.nanoscroller</a>
<a href="http://spservices.codeplex.com/">jquery.SPServices</a>
<a href="http://mottie.github.com/tablesorter/docs/">jquery.tablesorter</a>
<a href="http://ricostacruz.com/jquery.transit/">jquery.transit</a>
<a href="http://jquery.com/">jquery</a>
<a href="http://touchpunch.furf.com/">jqueryui-touch-punch</a>
<a href="http://jqueryui.com/">jqueryui</a>
<a href="http://millermedeiros.github.com/js-signals/">js-signals</a>
<a href="http://jscrollpane.kelvinluck.com/">jScrollPane</a>
<a href="https://github.com/douglascrockford/JSON-js">json2</a>
<a href="http://bestiejs.github.com/json3">json3</a>
<a href="http://jsoneditoronline.org/">jsoneditor</a>
<a href="http://jstorage.info/">jStorage</a>
<a href="http://jsxgraph.org/">jsxgraph</a>
<a href="http://kerningjs.com/">kerning.js</a>
<a href="http://cdnjs.com/">kiwi</a>
<a href="http://knockoutjs.com/documentation/plugins-mapping.html">knockout.mapping</a>
<a href="http://knockoutjs.com/">knockout</a>
<a href="http://labjs.com/">labjs</a>
<a href="http://leafletjs.com/">leaflet</a>
<a href="http://lesscss.org/">less.js</a>
<a href="http://lodash.com/">lodash.js</a>
<a href="http://masonry.desandro.com/">masonry</a>
<a href="http://meyerweb.com/eric/tools/css/reset/">meyer-reset</a>
<a href="http://mobilizejs.com/">mobilizejs</a>
<a href="http://www.modernizr.com/">modernizr</a>
<a href="http://momentjs.com/">moment.js</a>
<a href="http://mootools.net/">mootools-more</a>
<a href="http://mootools.net/">mootools</a>
<a href="http://oesmith.github.com/morris.js/">morris.js</a>
<a href="https://github.com/janl/mustache.js">mustache.js</a>
<a href="http://ninjaui.com/">ninjaui</a>
<a href="http://rappdaniel.com/noisy/">noisy</a>
<a href="http://necolas.github.com/normalize.css/">normalize</a>
<a href="http://ocanvas.org/">ocanvas</a>
<a href="http://www.openajax.org/member/wiki/OpenAjax_Hub_1.0_Specification">openajax-hub</a>
<a href="http://openlayers.org/">openlayers</a>
<a href="http://code.google.com/p/pagedown/wiki/PageDown">pagedown</a>
<a href="http://paperjs.org/">paper.js</a> - Canvas上でベクター描画を行う（<a href="http://shimz.me/blog/category/paper-js">参考</a>）
<a href="https://github.com/mtrpcic/pathjs">path.js</a>
<a href="http://css3pie.com/">pie</a>
<a href="https://github.com/walterdavis/placeholder-shiv">placeholder-shiv</a>
<a href="https://github.com/bestiejs/platform.js">platform</a>
<a href="http://leaverou.github.com/prefixfree/">prefixfree</a>
<a href="http://code.google.com/p/google-code-prettify/">prettify</a>
<a href="http://processingjs.org/">processing.js</a>
<a href="http://prototypejs.org/">prototype</a>
<a href="http://meltingice.github.com/psd.js/">psd.js</a>
<a href="http://www.pubnub.com/">pubnub</a>
<a href="http://mths.be/punycode">punycode</a>
<a href="http://pusher.com/">pusher</a>
<a href="http://qooxdoo.org/">qooxdoo</a>
<a href="http://qunitjs.com/">qunit</a>
<a href="http://raphaeljs.com/">raphael</a>
<a href="https://github.com/lincolnloop/raven-js">raven.js</a>
<a href="http://remotestoragejs.com/">remoteStorage</a>
<a href="https://github.com/jrburke/require-cs">require-cs</a>
<a href="https://github.com/requirejs/domReady">require-domReady</a>
<a href="http://github.com/requirejs/i18n">require-i18n</a>
<a href="https://github.com/requirejs/text">require-text</a>
<a href="https://github.com/jrburke/require-jquery">require.js</a>
<a href="http://requirejs.org/">require.js</a>
<a href="https://github.com/scottjehl/Respond">respond.js</a>
<a href="http://responsive-slides.viljamis.com/">ResponsiveSlides.js</a>
<a href="http://retinajs.com/">retina.js</a>
<a href="http://code.shutterstock.com/rickshaw/">rickshaw</a>
<a href="http://sammyjs.org/">sammy.js</a>
<a href="http://cdnjs.com/">scion</a>
<a href="http://www.dustindiaz.com/scriptjs/">script.js</a>
<a href="http://script.aculo.us/">scriptaculous</a>
<a href="http://selectivizr.com/">selectivizr</a>
<a href="https://github.com/automatthew/shred">shred</a>
<a href="http://simplecartjs.org/">simplecartjs</a>
<a href="http://sizzlejs.com/">sizzle</a>
<a href="http://socket.io/">socket.io</a>
<a href="https://github.com/sockjs/sockjs-client">sockjs-client</a>
<a href="https://github.com/dougmartin/Stop-Censorship">sopa</a>
<a href="http://fgnass.github.com/spin.js/">spin.js</a>
<a href="http://maccman.github.com/spine/">spinejs</a>
<a href="http://hay.github.com/stapes">stapes</a>
<a href="https://github.com/mrdoob/stats.js/">stats.js</a>
<a href="https://github.com/marcuswestin/store.js">store.js</a>
<a href="https://github.com/joshaven/string_score">string_score</a>
<a href="http://sugarjs.com/">sugar</a>
<a href="http://code.google.com/p/swfobject/">swfobject</a>
<a href="http://swipejs.com/">swipe</a>
<a href="http://sylvester.jcoglan.com/">sylvester</a>
<a href="http://alexgorbatchev.com/SyntaxHighlighter">SyntaxHighlighter</a>
<a href="http://mrdoob.github.com/three.js/">three.js</a>
<a href="http://baijs.nl/tinyscrollbar/">tinyscrollbar</a>
<a href="https://github.com/Treesaver/treesaver">treesaver</a>
<a href="http://tweet.seaofclouds.com/">tweet</a>
<a href="http://twitter.github.com/bootstrap/">twitter-bootstrap</a>
<a href="https://github.com/remy/twitterlib/">twitterlib.js</a>
<a href="http://documentcloud.github.com/underscore/">underscore.js</a>
<a href="http://epeli.github.com/underscore.string/">underscore.string</a>
<a href="http://medialize.github.com/URI.js/">URI.js</a>
<a href="https://github.com/tbranyen/use.js">use.js</a>
<a href="http://vertx.io/">vertx</a>
<a href="https://github.com/ai/visibility.js">visibility.js</a>
<a href="http://imakewebthings.github.com/jquery-waypoints">waypoints</a>
<a href="http://code.google.com/apis/webfonts/docs/webfont_loader.html">webfont</a>
<a href="http://xregexp.com/">xregexp</a>
<a href="http://xuijs.com/">xuijs</a>
<a href="http://yepnopejs.com/">yepnope</a>
<a href="http://developer.yahoo.com/yui/">yui</a>
<a href="http://zeptojs.com/">zepto</a>
<a href="http://tech.dropbox.com/?p=165">zxcvbn</a>

<hr>
<strong><a href="http://www.jsdelivr.com/">jsDelivr</a></strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2107</wp:post_id>
		<wp:post_date>2012-12-17 14:25:24</wp:post_date>
		<wp:post_date_gmt>2012-12-17 05:25:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2107</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[555088177851915]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>facebook_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:103:"Posted to <a href="https://www.facebook.com/555088177851915" target="_blank">your Facebook Timeline</a>";s:5:"error";b:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[cdncontent-delivery-network%e3%80%81javascript%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%81%be%e3%81%a8%e3%82%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427400657;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2183;}i:1;a:1:{s:2:"id";i:2601;}i:2;a:1:{s:2:"id";i:1167;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上に学校区情報（国土数値情報）を表示する</title>
		<link>http://shimz.me/blog/map/2135</link>
		<pubDate>Wed, 19 Dec 2012 01:19:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2135</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報</a>サイトからダウンロードしたJPGIS形式の情報をKMLに変換して、Google Map上に表示する手順です。

今回使用したのは以下。

<a href="http://nlftp.mlit.go.jp/ksj/jpgis/datalist/KsjTmplt-A27.html">国土数値情報　小学校区データ</a>

小学校区のデータをGoogle Map上にインポートします。

<a href="http://shimz.me/example/gmapv3/KML/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000006-300x124.jpg" alt="WSd000006" width="300" height="124" class="aligncenter size-medium wp-image-2142" /></a>


<h2>手順</h2>
１．JPGIS形式のデータをSHAPE形式に変換（初めからSHAPE形式のデータがダウンロードできる場合は要らない）
２．SHAPE形式のデータをKML形式に変換
３．KML形式のデータを整形
４．Google Map上に読み込み



<h2>■JPGIS形式のデータをSHAPE形式に変換</h2>
<a href="http://nlftp.mlit.go.jp/ksj/gml/gml_datalist.html">国土数値情報データ変換ツール</a>
データ変換ツール（KsjTool）を使って、ダウンロードしたXMLファイルをSHAPE形式に変換します。
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000000-300x234.jpg" alt="WSd000000" width="300" height="234" class="aligncenter size-medium wp-image-2136" />



<h2>■SHAPE形式のデータをKML形式に変換</h2>
<a href="http://www2.qgis.org/ja/site/">Quantum GIS</a>をインストールします。
起動したら、変換したSHAPE形式のデータファイルの中からshpのファイル（今回はポリゴンデータを使いたいのでSD02.shpを使用します）をドラッグ＆ドロップします。
（空間参照系は「WGS 84」を選択）
このまますべてのデータをKMLに変換してもいいのですが、データ量が多すぎるとGoogle Mapに掲載できる制限を超えてしまうので、KMLに変換するデータを絞り込みます。
「レイヤー」→「属性テーブルのオープン」を選択。
今回はINSカラムの値が「高崎」のものだけを選択します。

<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000001-300x228.jpg" alt="WSd000001" width="300" height="228" class="aligncenter size-medium wp-image-2137" />
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000003-300x174.jpg" alt="WSd000003" width="300" height="174" class="aligncenter size-medium wp-image-2138" />

必要なデータだけが選択された状態になったら、「レイヤー」→「選択部分をベクタファイルとして保存する…」をクリックしKMLファイルとして出力します。
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000004-224x300.jpg" alt="WSd000004" width="224" height="300" class="aligncenter size-medium wp-image-2139" />



<h2>■KML形式のデータを整形</h2>
一応、KMLファイルが作成できたのですが、このままでは不要な情報などが多いので整形します。
今回は、Notepad++の正規表現置換を使って手動で書き換えました。
大量に整形が必要な場合は、変換スクリプトを作った方がいいかもしれません。

<a href="http://www.mergely.com/QdD5QXJy/">整形したKMLデータのdiff</a>
左が元データ、右が整形したデータとなります。



<h2>■Google Map上に読み込み</h2>
KMLファイルの読み込み方法は以下。
 
<pre class="lang:xhtml decode:true " >&lt;html&gt;
&lt;head&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;hl=ja&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  function initialize() {
    var initPos = new google.maps.LatLng(36.3219088, 139.0032936);
    var myOptions = {
      noClear : true,
      center : initPos,
      zoom : 12,
      mapTypeId : google.maps.MapTypeId.ROADMAP
    };
    var map_canvas = new google.maps.Map(document.getElementById(&quot;map_canvas&quot;), myOptions);
    
    var kmlUrl = &quot;http://&lt;ホスト名&gt;/takasaki.kml&quot;; //KMLファイルの読み込み
    var kmlLayer = new google.maps.KmlLayer(kmlUrl, {preserveViewport:true});
    kmlLayer.setMap(map_canvas);
        
  }
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload=&quot;initialize()&quot;&gt;
  &lt;div id=&quot;map_canvas&quot; style=&quot;width:100%; height:100%&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 

<a href="http://shimz.me/example/gmapv3/KML/index.html">example</a>

<h2>関連</h2>
<a href="http://shimz.me/blog/d3-js/3984">群馬県の小学校区とボロノイ図を重ね合わせてみた</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2135</wp:post_id>
		<wp:post_date>2012-12-19 10:19:09</wp:post_date>
		<wp:post_date_gmt>2012-12-19 01:19:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2135</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2142]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-map%e4%b8%8a%e3%81%ab%e5%ad%a6%e6%a0%a1%e5%8c%ba%e6%83%85%e5%a0%b1%ef%bc%88%e5%9b%bd%e5%9c%9f%e6%95%b0%e5%80%a4%e6%83%85%e5%a0%b1%ef%bc%89%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427384218;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2670;}i:1;a:1:{s:2:"id";i:2151;}i:2;a:1:{s:2:"id";i:4038;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上にヒートマップを表示する</title>
		<link>http://shimz.me/blog/map/2151</link>
		<pubDate>Thu, 20 Dec 2012 00:24:16 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2151</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報</a>サイトからダウンロードした<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-L02-v2_1.html">都道府県地価調査データ(点)</a>を元にGoogle Map上に群馬県の地価データをヒートマップで表示しました。

<a href="http://shimz.me/example/gmapv3/06/"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSmm000000-300x141.jpg" alt="WSmm000000" width="300" height="141" class="aligncenter size-medium wp-image-2152" /></a>

国土数値情報からダウンロードしたデータをKMLにコンバートし、さらにJavascriptの配列に変更(手動)してます。
（ぶっちゃけJPGIS(XML)から、直接JavaScriptの配列に変換した方が楽だったような気も…）
KML形式への変換の仕方は以下の記事を参照してください。

<a href="http://shimz.me/blog/map/2135">Google Map上に学校区情報（国土数値情報）を表示する</a>

※追記
Quantum GISでgeoJSON形式で出力することができるので、そっちを使う方がらくでした。

データさえできてしまえば、ヒートマップを表示するのは簡単です。
HeatmapLayerを使用するには、libraries=visualizationを付加してGoogle Map APIを読み込んでください。
 
<pre class="lang:xhtml decode:true " >&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;v=3&amp;language=ja&amp;libraries=visualization&quot;&gt;&lt;/script&gt;
</pre> 
<pre class="lang:js decode:true " title="GMAP API HeatmapLayer" >var data = []; 
data =  [
{&quot;surveyedPrice&quot;:31500,pos:[138.549837,36.534579]},
{&quot;surveyedPrice&quot;:19600,pos:[138.552933,36.537296]},
{&quot;surveyedPrice&quot;:4950,pos:[138.564714,36.461183]},
{&quot;surveyedPrice&quot;:22800,pos:[138.585049,36.59217]},
{&quot;surveyedPrice&quot;:5300,pos:[138.585787,36.508158]},
{&quot;surveyedPrice&quot;:172000,pos:[138.590885,36.521871]},
　　　　　　　　　　　　　　　・
　　　　　　　　　　　　　　　・
　　　　　　　　　　　　　　　・
　　　　　　　　　　　　　　　・
{&quot;surveyedPrice&quot;:23800,pos:[139.61774,36.220006]}
];


function initialize() {
    //地図初期化
    var initPos = new google.maps.LatLng(36.3219088, 139.0032936);
    var myOptions = {
      noClear : true,
      center : initPos,
      zoom : 10,
      mapTypeId : google.maps.MapTypeId.ROADMAP
    };
    var map_canvas = new google.maps.Map(document.getElementById(&quot;map_canvas&quot;), myOptions);    
    
    
    
    //ヒートマップ用のデータの作成
    var bounds = new google.maps.LatLngBounds();
    var  pos, populations = [];
    for (var i=0; i &lt; data.length; i++) {
        pos = new google.maps.LatLng(data[i].pos[1], data[i].pos[0]);
        populations.push({
            location : pos,
            weight : data[i].surveyedPrice //ヒートマップの重み付けに使用するデータを指定
        })
        bounds.extend(pos); 
    }
    map_canvas.fitBounds(bounds); //全てのデータが画面に収まる様に表示を変更

    //ヒートマップレイヤの作成
    var heatmap = new google.maps.visualization.HeatmapLayer({
            radius:25 //ヒートマップの各ポイントの大きさ
        });
    
    heatmap.setData(populations);
    heatmap.setMap(map_canvas);

 
}
google.maps.event.addDomListener(window, &quot;load&quot;, initialize);

 </pre> 



<a href="http://shimz.me/example/gmapv3/06/">example</a>


【参考】
<a href="https://developers.google.com/maps/documentation/javascript/layers#JSHeatMaps">Google Developers - Google Maps JavaScript API v3  Heatmap Layer</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2151</wp:post_id>
		<wp:post_date>2012-12-20 09:24:16</wp:post_date>
		<wp:post_date_gmt>2012-12-20 00:24:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2151</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[556599281034138]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>facebook_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:103:"Posted to <a href="https://www.facebook.com/556599281034138" target="_blank">your Facebook Timeline</a>";s:5:"error";b:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-map%e4%b8%8a%e3%81%ab%e3%83%92%e3%83%bc%e3%83%88%e3%83%9e%e3%83%83%e3%83%97%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427381888;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3984;}i:1;a:1:{s:2:"id";i:2379;}i:2;a:1:{s:2:"id";i:3733;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>360</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 23:12:11</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 14:12:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Google Map上にヒートマップを表示する | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414541678.3312931060791015625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414505531.2137100696563720703125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>FTPで「451 Failure writing to local file」エラー</title>
		<link>http://shimz.me/blog/troubleshooting/2178</link>
		<pubDate>Fri, 21 Dec 2012 00:26:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2178</guid>
		<description></description>
		<content:encoded><![CDATA[入稿データを送ろうとしたら、「451 Failure writing to local file」エラーが発生してアップロードができない。
相手先に調べてもらったところ、単純に容量がいっぱいになっていただけだった orz

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2178</wp:post_id>
		<wp:post_date>2012-12-21 09:26:26</wp:post_date>
		<wp:post_date_gmt>2012-12-21 00:26:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ftp%e3%81%a7%e3%80%8c451-failure-writing-to-local-file%e3%80%8d%e3%82%a8%e3%83%a9%e3%83%bc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427377851;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:846;}i:1;a:1:{s:2:"id";i:3326;}i:2;a:1:{s:2:"id";i:4097;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascriptでtxtファイルの比較・差分(diff)を表示するライブラリ「Mergely」</title>
		<link>http://shimz.me/blog/javascript/2183</link>
		<pubDate>Sat, 22 Dec 2012 00:05:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2183</guid>
		<description></description>
		<content:encoded><![CDATA[以前、<a href="http://shimz.me/blog/map/2135">こちら</a>の記事で使用した二つのファイル（テキスト）の差異(diff)を表示してくれるWebサービス「<a href="http://www.mergely.com">Mergely</a>」ですが、ライブラリが公開されているので自サイトにdiffの仕組みを取り入れることができます。

<a href="http://www.mergely.com/about.php">Mergely(ライブラリ)</a>

使用方法は非常に簡単です。

 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Mergelyライブラリの読み込み --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://shimz.me/libs/mergely-3.0/lib/codemirror.js&quot;&gt;&lt;/script&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://shimz.me/libs/mergely-3.0/lib/codemirror.css&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://shimz.me/libs/mergely-3.0/lib/mergely.js&quot;&gt;&lt;/script&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://shimz.me/libs/mergely-3.0/lib/mergely.css&quot; /&gt;

&lt;/head&gt;


&lt;body&gt;
    &lt;div id=&quot;compare&quot;&gt;&lt;div&gt;
&lt;/body&gt;


&lt;script&gt;
$(document).ready(function () {
	$('#compare').mergely({
		cmsettings: { 
			readOnly: false, //読込みのみ
			lineNumbers: true //行番号の表示
		},
		lhs: function(setValue) {
			setValue('日本語でも\nちゃんとdiff\nできますか？\n編集もできたりしますか？'); //比較元テキスト
		},
		rhs: function(setValue) {
			setValue('日本語でも\nちゃんとdiff\nできる\n編集もできるので\n何か入力してみてね！'); //比較先テキスト
		}
	});
});
&lt;/script&gt;
&lt;/html&gt;</pre> 


サンプル
<iframe src="http://shimz.me/example/mergely/" height="240" width="100%"></iframe>

外部ファイルの読み込みは、jQueryのXHRオブジェクト使います。

 
<pre class="lang:js decode:true " >        $(document).ready(function () {
			$('#compare').mergely({
				cmsettings: { readOnly: false, lineWrapping: true }
			});
			$.ajax({
				type: 'GET', async: true, dataType: 'text',
				url: 'lhs_hoge.txt',
				success: function (response) {
					$('#compare').mergely('lhs', response);
				}
			});
			$.ajax({
				type: 'GET', async: true, dataType: 'text',
				url: 'rhs_hoge.txt',
				success: function (response) {
					$('#compare').mergely('rhs', response);
				}
			});
		});</pre> 


対応しているブラウザは以下。
<ul>
<li>Firefox 2+</li>
<li>Chrome - any version</li>
<li>Internet Exporer 9+</li>
<li>Safari 3+</li>
<li>Opera 9+</li>
</ul>

なにげにファイルのドラッグ＆ドロップにも対応していたりするので便利です。その他、詳しい機能についてはリファレンスを参照してください。

<a href="http://www.mergely.com/doc/index.html">Mergely Reference Manual</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2183</wp:post_id>
		<wp:post_date>2012-12-22 09:05:35</wp:post_date>
		<wp:post_date_gmt>2012-12-22 00:05:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2183</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2189]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%a7diff%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%80%8cmergely%e3%80%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427405086;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3785;}i:1;a:1:{s:2:"id";i:3937;}i:2;a:1:{s:2:"id";i:2838;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【アクセスアップ】月間1万PVを超えたので、年末だしこの１年間でやってきたこととかまとめてみる</title>
		<link>http://shimz.me/blog/analytics/2194</link>
		<pubDate>Sat, 29 Dec 2012 03:23:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2194</guid>
		<description></description>
		<content:encoded><![CDATA[年末なので、Googleアナリティクスでも見ながら一年を振り返ってみます。

<h2>アクセス解析</h2>
<strong>アクセス数（直近１か月）</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000000.jpg" alt="ga000000" width="619" height="326" class="aligncenter size-full wp-image-2222" />
<strong>（2012/1/1～2012/12/28)</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000001.jpg" alt="ga000001" width="619" height="193" class="aligncenter size-full wp-image-2224" />
ブログをbloggerから移行したのが、2011年の11月頃なので、ひとまず順調に推移してきたかな？と。


<strong>流入元</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000002.jpg" alt="ga000002" width="619" height="178" class="aligncenter size-full wp-image-2226" />
殆どがGoogleからの流入で、Twitterやはてブなどからの流入は、それより２桁少ない数値になっています。
記事をアップした際にはTwitterに通知してみたりもしているのですが、あまり流入は無い感じ。
これはつまり、記事タイトルが興味をもたれるようなものになっていないってことですね orz
ただ、ブログ記事のタイトルについてはソーシャルメディアよりも、検索エンジンでのキーワードを重視していてそれがGoogleからの流入につながっている面もあるので難しいところですが。


<h2>アクセス解析総括</h2>
全体的にはそこそこ伸びたかな？と。
今年はわりと意識してアクセス数を増やす施行を行ってみたのでSEOを学ぶ良いきっかけとなりました。
以下は、アクセスアップのために今年行ってみた内容です。


<h2>アクセスアップのために行ったこと</h2>
その前に、このブログを構築した環境は以下となります。
ホスティング：さくらクラウド／プラン1
CMS:Wordpress
アクセス解析:Google アナリティクス, Jetpackプラグイン／サイト統計情報
この後紹介する「高速化」の中には、サーバーを借りてないと行えないものもあります。

SEO対策については以下の書籍を参考に行いました。
<a href="http://www.amazon.co.jp/gp/product/4844328093/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=toriaezu04b-22&linkCode=as2&camp=247&creative=1211&creativeASIN=4844328093"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=4844328093&MarketPlace=JP&ID=AsinImage&WS=1&tag=toriaezu04b-22&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4844328093" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />




<strong>WEBマスターツールへの登録</strong>
<a href="https://www.google.com/webmasters/tools/home?hl=ja">Google ウェブマスターツール</a>
<a href="http://www.bing.com/webmaster">Bing Webmaster Center</a>
ちゃんと登録していなかった(^^;)　GoogleとMSのWEBマスターツールへ登録しました。
サイトマップの作成には、「Google XML Sitemaps」プラグインを使用しています。

<a href="http://www.arnebrachhold.de/projects/wordpress-plugins/google-xml-sitemaps-generator/">Google XML Sitemaps</a>



<strong>高速化</strong>
これはアクセスアップのためというよりは、重いと自分がイライラするのでやっていたことですが、Googleに対してはわりと効果的だったようです。

・Apache コンテンツの圧縮転送を設定→<a href="mod_deflateによるコンテンツの圧縮転送　">参考</a>
・PHP-APCの導入→<a href="http://rewse.jp/blog/p/4213">参考</a>
・MySQL、bufferのサイズとlog Fileのサイズを変更→<a href="http://blog.flatlabs.net/20100727_212649/">参考</a>
・Head Cleanerプラグインの導入→<a href="http://dogmap.jp/2012/05/09/head-cleaner-4/">参考</a>
・JetPackプラグインのPhoton機能を導入
　(ブログにアップした画像をコンテンツ・デリバリー・ネットワーク (CDN) に転送することで画像の読み込み速度をアップする機能）

以上です。現状のサイト速度のサマリーのステータスは以下のようになってます。

<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000004.jpg" alt="ga000004" width="578" height="249" class="aligncenter size-full wp-image-2230" />

表示時間がちょっと重いのですが、ウチの場合「SyntaxHighlighter」プラグインが構文強調表示を行うために、記事内のプログラムコードをパースするため遅くなる傾向があるので難しいですね。
なお、今のところ、wordpressの高速化で有名な「W3 Total Cache」や「WP Super Cache」などは導入してません。
あまりいろいろなプラグイン等でキャッシュが生成されると、なにかあった時の原因究明が難しくなるので。



<strong>キーワード選び</strong>
今まで記事を書く際にキーワードというものを意識してこなかったのですが、今年はちゃんと意識してキーワードを選ぶようにしてみました。
具体的には記事を書いた際に、GoogleのキーワードアドバイスツールやGoogleトレンドなどで検索して検索ボリュームが大きいキーワードを記事タイトルに含めるようにしてみました。
以下の記事は、diffで検索してみた際に、同時に検索されているキーワードとして「txt」や「比較」「差分」などの検索ボリュームが大きかったのでタイトルを変更した例です。

『Jvasscriptでdiffを表示するライブラリ「Mergely」』
　↓変更
『<a href="http://shimz.me/blog/javascript/2183">Javascriptでtxtファイルの比較・差分(diff)を表示するライブラリ「Mergely</a>」』

キーワード選びには、<a href="http://ferret-plus.com/">フェレット</a>やGoogle ウェブマスターツールの「検索クエリ」なども参考にしています。



<h2>やったこと総括</h2>
ホントに基本的なSEOしかやっていませんが、改めて「基本は大事だな」と感じました。
最近ではアクセスアップというとどうしてもソーシャルメディアに注目が集まりがちですが、<strong>このブログで一番のアクセス数を稼いでくれている記事は、Twitterに投げてもリツイートされることもなく、はてブもされていない記事だったりする</strong>ので、わからんもんですね。
アクセス解析などを使って「キーワード」を探す作業は、ゲーム的でなかなか面白かったです。
意図した通りの結果がでることはなかなかありませんでしたが orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2194</wp:post_id>
		<wp:post_date>2012-12-29 12:23:02</wp:post_date>
		<wp:post_date_gmt>2012-12-29 03:23:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2194</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e3%82%a2%e3%83%83%e3%83%97%e3%80%91%e6%9c%88%e9%96%931%e4%b8%87pv%e3%82%92%e8%b6%85%e3%81%88%e3%81%9f%e3%81%ae%e3%81%a7%e3%80%81%e5%b9%b4%e6%9c%ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2222]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427139162;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3230;}i:1;a:1:{s:2:"id";i:2903;}i:2;a:1:{s:2:"id";i:3624;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsを使ってSVGで地図を描く</title>
		<link>http://shimz.me/blog/d3-js/2200</link>
		<pubDate>Mon, 24 Dec 2012 04:26:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2200</guid>
		<description></description>
		<content:encoded><![CDATA[詳しく説明できるほど理解できていないので、とりあえずサンプルとコードを載せておきます。

<a href="http://shimz.me/example/d3js/geo_example/geo1/"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/diff000001-300x186.jpg" alt="diff000001" width="300" height="186" class="aligncenter size-medium wp-image-2202" /></a>



データは「<a href="http://www.naturalearthdata.com/">Natural Earth</a>」からダウンロードしたシェープデータを<a href="http://www2.qgis.org/ja/site/">Quantum GIS</a>で<a href="http://s.kitazaki.name/docs/geojson-spec-ja.html">GeoJSON</a>に変換してd3.jsに読み込ませています。
Quantum GISでのデータの変換方法は<a href="http://shimz.me/blog/map/2135">こちら</a>を。

 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE html&gt;
&lt;meta charset="utf-8"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
&lt;script src="testgeo.js"&gt;&lt;/script&gt;

&lt;/head&gt;

&lt;body&gt;
&lt;svg&gt;&lt;/svg&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 


 
<pre class="lang:js decode:true " >
d3.json(&quot;world.geojson&quot;, function(json) {  
  var geodata = json.features;
  
  projection = d3.geo
    .mercator()		//投影法の指定
    .scale(100)	//スケール（ズーム）の指定
    .rotate([-150,0,0])
    .translate([300,200])


  path = d3.geo.path().projection(projection);　//投影
  
  var svg = d3.select(&quot;svg&quot;);

  var map =  svg.append(&quot;svg:g&quot;)
    .selectAll(&quot;path&quot;)
    .data(geodata)
    .enter()
    .append(&quot;svg:path&quot;)
    .attr({
      &quot;d&quot;: D(path),
      &quot;fill&quot;: &quot;green&quot;,
      &quot;fill-opacity&quot;: 0.5,
      &quot;stroke&quot;: &quot;black&quot;
    });   
});</pre> 

<a href="http://shimz.me/example/d3js/geo_example/geo1/">example</a>


【関連】
<a href="http://shimz.me/blog/d3-js/2351">【D3.js】鶴舞う形の群馬県をSVGで描いてみる</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2200</wp:post_id>
		<wp:post_date>2012-12-24 13:26:40</wp:post_date>
		<wp:post_date_gmt>2012-12-24 04:26:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2200</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2202]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6svg%e3%81%a7%e5%9c%b0%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427197389;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:3489;}i:2;a:1:{s:2:"id";i:2631;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>今年やること。／ブログタイトル変更しました。</title>
		<link>http://shimz.me/blog/other/2263</link>
		<pubDate>Thu, 03 Jan 2013 03:45:08 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2263</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>■ 今年やること。</h2>

・d3.jsをもうちょっと使いこなせるように勉強
・GISについて勉強する
・Google Map API以外の地図APIも使えるように
・GISの勉強に疲れたらenchant.jsを勉強する

今年は、上記に関する記事が増える予定です。

<h2>■ ブログのタイトルを変更</h2>
もともと、何も思いつかなかったので「undefined」というタイトルになったのですが、これだと<a href="http://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%B3%E3%83%80%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3">ファインダビリティ</a>が低いのでタイトル変更しました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2263</wp:post_id>
		<wp:post_date>2013-01-03 12:45:08</wp:post_date>
		<wp:post_date_gmt>2013-01-03 03:45:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2263</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[564490900244976]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bb%8a%e5%b9%b4%e3%82%84%e3%82%8b%e3%81%93%e3%81%a8%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427383604;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2321;}i:1;a:1:{s:2:"id";i:3181;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【JavaScriptコードメトリックス】 ソースコードの複雑さや保守の容易さを測定できるWEBサイト</title>
		<link>http://shimz.me/blog/web/2279</link>
		<pubDate>Sat, 05 Jan 2013 04:08:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2279</guid>
		<description></description>
		<content:encoded><![CDATA[あくまで目安です。

<a href="http://jscomplexity.org/">Analysis | JSComplexity.org</a>

<a href="http://jscomplexity.org/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/jssa.jpg" alt="jssa" width="542" height="467" class="aligncenter size-full wp-image-2280" /></a>

テキストエリアにJavaScriptコードを入力すると、全体のサイクロマティック複雑度(循環的複雑度)と保守容易性指数 、各ファンクション毎にプログラムステップ法(ハルステッドモデル)で測定した結果を出力してくれるサービス。

コードメトリックス値の算出には、node.jsの「<a href="https://github.com/philbooth/complexityReport.js">complexityReport.js</a>」プラグインを使用しているとのこと。




コードメトリックスの各用語については以下を参照してください。
<a href="http://msdn.microsoft.com/ja-jp/library/vstudio/bb385914.aspx">コード メトリックス値</a>
<a href="http://msdn.microsoft.com/ja-jp/library/vstudio/ms182212.aspx">サイクロマティック複雑度</a>

もっと詳しい内容はwikiで。
<a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E6%B8%AC%E5%AE%9A%E6%B3%95">ソフトウェア測定法</a>
<a href="http://ja.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E7%9A%84%E8%A4%87%E9%9B%91%E5%BA%A6">循環的複雑度</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2279</wp:post_id>
		<wp:post_date>2013-01-05 13:08:13</wp:post_date>
		<wp:post_date_gmt>2013-01-05 04:08:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90javascript%e3%82%b3%e3%83%bc%e3%83%89-%e3%83%a1%e3%83%88%e3%83%aa%e3%83%83%e3%82%af%e3%82%b9%e3%80%91-%e3%82%bd%e3%83%bc%e3%82%b9%e3%82%b3%e3%83%bc%e3%83%89%e3%81%ae%e8%a4%87%e9%9b%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427287181;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2977;}i:1;a:1:{s:2:"id";i:4052;}i:2;a:1:{s:2:"id";i:1899;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「ライフゲームの世界」という動画が面白すぎて眠れなくなったのでブログ書く。</title>
		<link>http://shimz.me/blog/other/2295</link>
		<pubDate>Tue, 08 Jan 2013 13:27:46 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2295</guid>
		<description></description>
		<content:encoded><![CDATA[ネタが無いので更新する予定では無かったのですが、ニコニコ動画でたまたま観た動画が面白すぎて感動したので紹介。
<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0">ライフゲーム</a>については動画１で丁寧に説明されているのでそちらを。
一つの動画につきだいたい５分から１０分程度なので、最初からちゃんとみることをお勧めします。
８個目の動画で、背中がゾクゾクとするような感動をきっと味わえるはずです。

非常に単純な<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0#.E3.83.A9.E3.82.A4.E3.83.95.E3.82.B2.E3.83.BC.E3.83.A0.E3.81.AE.E3.83.AB.E3.83.BC.E3.83.AB">ルール</a>によって、とても複雑な仕組み(世界/生態系)が形成されるのがライフゲームの醍醐味、魅力ですがその神髄を味わえます。

いやー、良い動画と巡りあった。

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19347846?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19347846">【ニコニコ動画】ライフゲームの世界【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19355431?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19355431">【ニコニコ動画】ライフゲームの世界２【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19365540?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19365540">【ニコニコ動画】ライフゲームの世界３【複雑系】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19383175?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19383175">【ニコニコ動画】ライフゲームの世界４【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19393651?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19393651">【ニコニコ動画】ライフゲームの世界５【複雑系】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19429634?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19429634">【ニコニコ動画】ライフゲームの世界６【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19470535?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19470535">【ニコニコ動画】ライフゲームの世界７【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19509968?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19509968">【ニコニコ動画】ライフゲームの世界８【複雑系】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19566296?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19566296">【ニコニコ動画】ライフゲームの世界 最終回【複雑系】</a></noscript>

ライフゲームはJavaScriptでも作成することが可能です。
下記サイトにデモとソースコードが掲載されています。

<a href="http://www.quesucede.com/public/gameoflife/index.html">HTML5, JavaScript and Canvas - Conway's Game of Life</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2295</wp:post_id>
		<wp:post_date>2013-01-08 22:27:46</wp:post_date>
		<wp:post_date_gmt>2013-01-08 13:27:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2295</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3303]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%8c%e3%83%a9%e3%82%a4%e3%83%95%e3%82%b2%e3%83%bc%e3%83%a0%e3%81%ae%e4%b8%96%e7%95%8c%e3%80%8d%e3%81%a8%e3%81%84%e3%81%86%e5%8b%95%e7%94%bb%e3%81%8c%e9%9d%a2%e7%99%bd%e3%81%99%e3%81%8e%e3%81%a6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387464;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3624;}i:1;a:1:{s:2:"id";i:1031;}i:2;a:1:{s:2:"id";i:3967;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「D3をはじめよう」　サンプルコード</title>
		<link>http://shimz.me/blog/d3-js/2299</link>
		<pubDate>Wed, 09 Jan 2013 01:33:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2299</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.oreilly.co.jp/books/9784873115979/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/picture_large978-4-87311-597-9.jpeg" alt="picture_large978-4-87311-597-9" width="516" height="660" class="aligncenter size-full wp-image-2300" /></a>

「Getting Started with D3」の日本語版「<a href="http://www.oreilly.co.jp/books/9784873115979/">D3をはじめよう</a>」がオライリーのEbook Storeにて発売されていたので、購入しました。
とりあえず、写経中。
写経したものは以下に置いてあります。

<a href="http://shimz.me/example/Getting_Started_with_D3/">Getting_Started_with_D3</a>

O'Reilly Japan では、何故か書籍の詳細ページでサンプルコードをダウンロードできないようなのですが、本家の詳細ページではおとせます。
コードはともかくd3に読み込ませるJSONデータがないと写経もできないので、本家からサンプルコードをダウンロードしておくのをおすすめします。

<a href="http://shop.oreilly.com/product/0636920025429.do">Getting Started with D3</a>

「Download Example Code」からサンプルコードをダウンロードしてください。正規化されたJSONデータと、元データを正規化するためのPythonコードが付いてきます。

書籍の内容は、D3をまったく使ったことが無い人向けの入門書となってます。
d3の特徴である、データをDOMに結び付ける機能について丁寧に説明されていますが、そのかわり、レイアウト機能やプラグインについての説明などは少なめです。







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2299</wp:post_id>
		<wp:post_date>2013-01-09 10:33:37</wp:post_date>
		<wp:post_date_gmt>2013-01-09 01:33:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8cd3%e3%82%92%e3%81%af%e3%81%98%e3%82%81%e3%82%88%e3%81%86%e3%80%8d%e3%80%80%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%b3%e3%83%bc%e3%83%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2300]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427158717;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3378;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Waypoints】特定のHTML要素にスクロールイベントを設置するjQueryプラグイン</title>
		<link>http://shimz.me/blog/jquery/2304</link>
		<pubDate>Thu, 10 Jan 2013 01:50:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2304</guid>
		<description></description>
		<content:encoded><![CDATA[ちょうど、スクロールイベントを制御するシンプルなライブラリを探していて見つけたプラグインです。
「このdivタグより下にスクロールしたらイベントを発生させて関数を呼ぶ」といったことが簡単に行えます。
その他、１つのHTML要素に複数のスクロールイベントを設置したり、オプションのoffset値を使えば、「この要素から下に100pxスクロールしたらイベントを発生させる」など細かい指定も可能です。

パララックス効果を使ったWEBサイトを作成する際などに便利ですね。

<a href="http://imakewebthings.com/jquery-waypoints/">jQuery Waypoints</a>

■サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/rzJd/js?width=465&height=496&view=play"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2304</wp:post_id>
		<wp:post_date>2013-01-10 10:50:22</wp:post_date>
		<wp:post_date_gmt>2013-01-10 01:50:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90waypoints%e3%80%91%e7%89%b9%e5%ae%9a%e3%81%aehtml%e8%a6%81%e7%b4%a0%e3%81%ab%e3%82%b9%e3%82%af%e3%83%ad%e3%83%bc%e3%83%ab%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e3%82%92%e8%a8%ad%e7%bd%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[568364843190915]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427334828;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3132;}i:1;a:1:{s:2:"id";i:2693;}i:2;a:1:{s:2:"id";i:3874;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[2013年04月01日から2013年04月07日までのつぶやき | BENNO9]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://elegumi.com/benno9/1004</wp:comment_author_url>
			<wp:comment_author_IP>112.78.117.185</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 09:42:08</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 00:42:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] スクロールイベントを設置するjQueryプラグイン | GUNMA GIS GEEK shimz.me/blog/jquery/2304 posted at 13:19:59   [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370911328.0432150363922119140625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【ジェネラティブ・アート】ランダムを操作する技術</title>
		<link>http://shimz.me/blog/book/2311</link>
		<pubDate>Tue, 15 Jan 2013 08:43:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2311</guid>
		<description></description>
		<content:encoded><![CDATA[「ロジカルにカオスと戯れる。それがジェネラティブ・アート」

具体的な内容は<a href="http://www.cbc-net.com/topic/2012/12/processing-generative-art/">公式サイト</a>を。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4861008565/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51CX4ea-1JL._SL160_.jpg" alt="ジェネラティブ・アート -Processingによる実践ガイド" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4861008565/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">ジェネラティブ・アート -Processingによる実践ガイド</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.11.04</div></div><div class="amazlet-detail">Matt Pearson <br />ビー・エヌ・エヌ新社 <br />売り上げランキング: 228,175<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4861008565/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>



<blockquote>私たちは不完全で予測不可能な形状を望んでいるのかもしれません。しかし、だからといって不明瞭であてもなくさまようような不完全さもいりません。私たちは、有機性（オーガニック）と機械性（メカニカル）の間、カオスと秩序の間の、ちょうど良くバランスがとれたスイートスポットを探しています。</blockquote>


第２章「ランダム性とノイズ」まで読了。

ジェネラティブ・アートのように、作り手にすら予測不可能な出力を行うプログラムを書くにはランダム性が欠かせません。
しかし、コンピューターが生み出すランダムは、どこかシステマチックで味気ないものです。
出目に偏りがないとそれはそれで不自然なランダムなわけで、そこから生まれるのは単に雑然としただけのカオスでしかありません。
そこで、ある程度自然な偏りを持ったランダム、「ノイズ」が必要になります。

この本で使用しているProcessingには、そのものずばりnoiseという関数があって<a href="http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%83%AA%E3%83%B3%E3%83%8E%E3%82%A4%E3%82%BA">パーリンノイズ</a>が手軽に使えたりしますが、第２章ではパーリンノイズだけに依存することなく、自分の手で独自のノイズ関数を作ってランダム性を操作する方法が詳しく説明されてます。

ランダムな要素を自分の作品の中に取り込みたのだけれど、コンピューターの融通の利かないランダムに手を焼いている……そんな方へお勧めです。

<a href="http://www.cbc-net.com/topic/2012/12/generative-art-in-html5/">HTML5でのジェネラティブ・アート［Processing、JavaScript、チュートリアル］ （『ジェネラティブ・アート』の未刊の章）
</a>

【その他、参考】
パーリンノイズの仕組みについては以下を。
<a href="http://www.technotype.net/hugo.elias/models/m_perlin.html">Perlinノイズ(Perlin Noise)</a>

javascriptでパーリンノイズを使用するためのライブラリもあります。
<a href="http://www.sjeiti.com/perlin-noise-versus-simplex-noise-in-javascript-final-comparison/">Perlin noise versus Simplex noise in Javascript (final comparison)</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2311</wp:post_id>
		<wp:post_date>2013-01-15 17:43:55</wp:post_date>
		<wp:post_date_gmt>2013-01-15 08:43:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2311</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[571334212893978]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>facebook_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:103:"Posted to <a href="https://www.facebook.com/571334212893978" target="_blank">your Facebook Timeline</a>";s:5:"error";b:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2313]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%a9%e3%83%86%e3%82%a3%e3%83%96%e3%83%bb%e3%82%a2%e3%83%bc%e3%83%88%e3%80%91%e3%83%a9%e3%83%b3%e3%83%80%e3%83%a0%e3%82%92%e6%93%8d%e4%bd%9c%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427212661;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3096;}i:1;a:1:{s:2:"id";i:3780;}i:2;a:1:{s:2:"id";i:643;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GIS入門リンクまとめ（自分用）</title>
		<link>http://shimz.me/blog/map/2321</link>
		<pubDate>Wed, 16 Jan 2013 06:57:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2321</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="540" height="360" src="//www.youtube.com/embed/oMUGp0rGf7I" frameborder="0" allowfullscreen></iframe>

「今年はGISを学ぶぞ！」と心に決め、ブログのタイトルまで変更したのですが、一向にGISに関する記事を投稿することができません。
なんにもやっていないというわけでは無いんですが……GIS広すぎ！

一言にGISと言っても、そこに含まれる知識や技術は膨大で、初心者がどこから手を付けていいものやらさっぱりです。
（当初は、「GISというのは地理情報データの規格なのかな？」とかいろんな勘違いをしてました）

仕方がないので、とりあえず「GIS入門」なのどキーワードでググっては出てきたサイトをかったっぱしから読みわからない用語をググる、という再帰的検索に終始しています。

なので、記事に出来ることが今のところ何もないのですが、ひとまず自分的に勉強になったな～というサイトのリンクを貼り付けておきます。

<h2>GIS入門リンク</h2>
<a href="http://ja.wikipedia.org/wiki/%E5%9C%B0%E7%90%86%E6%83%85%E5%A0%B1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0">地理情報システム</a>
　とりあえず、Wikipedia。

<a href="http://home.csis.u-tokyo.ac.jp/~akuri/hajimete/kihon.htm">GISのキホン</a>
　個人的にココの説明が一番理解しやすかったです。

<a href="http://www.esrij.com/getting-started/what-is-gis/">GIS とは　－esriジャパン</a>
　ArcGISというGIS界(?)では有名なソフトウェアを出している会社

<a href="http://www.gis.jacic.or.jp/gis/gakushu/whatisgis/whatisgis6.html">ＧＩＳでできること</a>
　GISの具体的な活用方法

<a href="http://www.jmc.or.jp/faq/faq.html">地図博士の部屋</a>
　GISとか以前に、そもそも基本的な知識が足りなかったことに気付いたのでココで勉強中

<a href="http://www.osgeo.jp/wp-content/uploads/2010/11/qgis_hands_on_foss4g2010.pdf">初心者のための Quantum GIS入門(PDF)</a>
<a href="http://docs.osgeo.jp/foss4g/qgis/user_guide-1.6.0/user_guide.html">QGIS User Guide</a>
 オープンソースのGISソフトウェア。使いこなせるようになりたいなー。　

<a href="https://developers.google.com/kml/documentation/?hl=ja">KML 入門用ドキュメント</a>
　Google Mapで地理データを扱うならこの形式なのかな？

<a href="http://kshigeru.blogspot.jp/2012/05/geojson.html">GeoJSON の日本語訳</a>
　どういうポジションにあるのかわからないけど、とりあえずWebで使うならJSONは良いよね、楽で。

<a href="https://github.com/mbostock/d3/wiki/Geo-Projections">D3 Geo Projections</a>
　このライブラリを使いこなせるるようになりたくて、GISの勉強を始めたと言っても過言ではない。

<a href="http://www.slideshare.net/wata909/webgis-4626476">Web時代のデスクトップGIS</a>
　Web-GISなる言葉もあるらしい。このスライドに書かれているように、自分はまさにGoogle Mapから入ったタイプ。

<a href="http://lets.postgresql.jp/documents/tutorial/PostGIS">PostGISを使ってみよう</a>
　PostgreSQLで地理空間情報を扱うための拡張。ポスグレは結構使ってきたけど、これは手を出したことがなかった。

<a href="http://blog.madapaja.net/2010/11/mongodb.html">MongoDBの地理空間のインデックスを試してみる</a>
 MongoDBでも地理空間情報を扱えるらしい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2321</wp:post_id>
		<wp:post_date>2013-01-16 15:57:01</wp:post_date>
		<wp:post_date_gmt>2013-01-16 06:57:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2321</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2327]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gis%e5%85%a5%e9%96%80%e3%83%aa%e3%83%b3%e3%82%af%e3%81%be%e3%81%a8%e3%82%81%ef%bc%88%e8%87%aa%e5%88%86%e7%94%a8%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427383177;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3228;}i:1;a:1:{s:2:"id";i:3853;}i:2;a:1:{s:2:"id";i:3614;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Evernoteをファイルストレージとして使うメリット</title>
		<link>http://shimz.me/blog/other/2331</link>
		<pubDate>Thu, 17 Jan 2013 05:17:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2331</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/01/evernote20130107.jpg" alt="evernote20130107" width="1280" height="758" class="aligncenter size-full wp-image-2338" />

<a href="http://appllio.com/explanation/o01-20130116-2986-dropbox-evernote">「Dropbox」と「Evernote」の違いとは - 書類作成に追われる人にオススメの機能と使い方</a>

そもそも、「まったく違う用途のアプリを比較するのが間違っている」という意見もあるみたいですが、自分のようにEvernoteをファイルストレージとしても利用していると、ファイルをEvernoteとDropbox のどちらに保管するかは結構迷います。
さすがに両方に同じファイルを保存しておくのはもったいないし。

そこで、ファイルストレージとしてみた場合の、双方の利点を考えてみます。

<h2>Evernoteの利点</h2>
Evernoteでは、ファイルにメタ情報を付加できます。正しくは「ファイルをクリップしたノートに」ですが。
Evernoteの基本は「ノート」なので、クリップされたファイルもノートに付加されたデータの一つでしかないわけです。
ノートには、ファイルの他にも、タイトルやタグ、URL、そしてもちろんテキストなどを付加することができ、それらを一まとめにして管理することができます。

これが結構便利です。

例えば「ちょっと良いな」と見つけたjQueryのプラグインなんかを、ダウンロードし保存しておこうとします。
この時、Evernoteならダウンロードしたファイルだけでなく、落としたサイトのURLや簡単な説明などを１つのノートにまとめておけるので、あとで必要になった際に探すのが楽になります。
また、ファイル数が増えると「これは何のためのプラグインだったかな？」と用途自体を忘れてしまったりすることがありますが、ファイルをクリップしたノートに一緒にスナップショットなどを貼り付けておくと、パッと見でもわかりやすくなるのでお勧めです。

↓こんな感じ。後で見たときに何に使うプラグインなのか分かりやすい。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/ga000009.jpg" alt="ga000009" width="891" height="910" class="aligncenter size-full wp-image-2332" />


画像の管理なんかにも便利ですね。画像ファイルだけだと「どこで落とした画像だったかな？」「作者は誰だっけ？」と分からなくなることが多々あるので。

<h2>Dropboxの利点</h2>
Dropboxは、ファイルの変更履歴などが自動的に保管されるので、自分が作成したドキュメントなどを保存しておくのに便利です。
あと、普通のフォルダとして意識しないで使える手軽さはやはり欠かせません。


最近は、「自分が作ったもの」はDropbox に、「人が作ったものは」Evernoteに保存するように使いわけています。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2331</wp:post_id>
		<wp:post_date>2013-01-17 14:17:26</wp:post_date>
		<wp:post_date_gmt>2013-01-17 05:17:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2331</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2338]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[evernote%e3%82%92%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%b9%e3%83%88%e3%83%ac%e3%83%bc%e3%82%b8%e3%81%a8%e3%81%97%e3%81%a6%e4%bd%bf%e3%81%86%e3%83%a1%e3%83%aa%e3%83%83%e3%83%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391456;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3202;}i:1;a:1:{s:2:"id";i:3465;}i:2;a:1:{s:2:"id";i:2670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「サイド・バイ・サイド」</title>
		<link>http://shimz.me/blog/movie/2346</link>
		<pubDate>Sun, 20 Jan 2013 11:35:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2346</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="http://www.youtube.com/embed/mOXKQaxUqsc" frameborder="0" allowfullscreen></iframe>

「<a href="http://www.uplink.co.jp/sidebyside/">サイド・バイ・サイドーフィルムからデジタルシネマへ</a>」を観てきました。

デジタルシネマの台頭によってフィルムが消えつつある今、俳優であるキアヌ・リーブスが、ハリウッドの著名な映画監督や映画関係者に自らホスト役となってインタビューを行ったドキュメンタリーです。

デジタルカメラでの撮影が可能になったことで誰でも現場で即座に撮影した映像を確認できることになり、その結果撮影監督の権限が狭まったなど、なかなか興味深い話が多かったです。

フィルムの場合、品質にバラツキがあるため映画館によって映像の質が違うとか。

また、動画撮影可能なデジタル一眼カメラの出現によって、それまで多大なコストがかかっていた映画撮影が個人レベルでも可能になり、撮影した映像を多くの人に公開する動画サイトの出現などと相まって「映画を作る」という行為も民主化されてきているなど。

デジタル化がもたらす新たな可能性と問題点は、映画に限らずどの業界でも起きうる事で、なかなか勉強になりました。

……しかし、あらゆる映画監督の中でも、なんと言ってもデビッド・リンチの存在感は凄いｗ


<a href="http://takasaki-cc.jp/">シネマテークたかさき</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2346</wp:post_id>
		<wp:post_date>2013-01-20 20:35:33</wp:post_date>
		<wp:post_date_gmt>2013-01-20 11:35:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b5%e3%82%a4%e3%83%89%e3%83%bb%e3%83%90%e3%82%a4%e3%83%bb%e3%82%b5%e3%82%a4%e3%83%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2744]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1424659751;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3780;}i:1;a:1:{s:2:"id";i:3555;}i:2;a:1:{s:2:"id";i:3565;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】鶴舞う形の群馬県をSVGで描いてみる</title>
		<link>http://shimz.me/blog/d3-js/2351</link>
		<pubDate>Mon, 21 Jan 2013 05:40:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2351</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo2/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/tsuru_gunma.jpg" alt="tsuru_gunma" width="375" height="320" class="aligncenter size-full wp-image-2640" /></a>

<a href="http://shimz.me/blog/d3-js/2200">前回</a>のつづき。D3.js ver.3を使ってSVGで地図の作成をおこないます。

なお、D3.js ver.3の新機能については以下を。
<a href="https://github.com/mbostock/d3/wiki/JP-3.0">D3.js 3.0 の新機能</a>


<h2>データの作成</h2>
地図の元となるデータを作成します。
<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報ダウンロードサービス</a>から群馬県の<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html">行政区域データ</a>をダウンロードします。
ダウンロードしたファイルの中から、shpファイルを<a href="http://www2.qgis.org/ja/site/">Quantum GIS</a>に読み込ませてGeoJSONに変換。
「レイヤー」→「名前をつけて保存」→ GeoJSON形式で保存。

<h2>地図の表示</h2>
d3.jsの読み込み
 
<pre class="lang:xhtml decode:true " >
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >
var path, map, xy;

xy = d3.geo
	.mercator()		//投影法の指定
	.scale(80000)	//スケール（ズーム）の指定
	.center([139.0032936, 36.3219088]); //中心の座標を指定

path = d3.geo.path().projection(xy);　//geoJSONのデータをパスに変換する関数を作成

map = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 960).attr(&quot;height&quot;, 600); //地図用のステージ(SVGタグ)を作成


d3.json(&quot;gunma.geojson&quot;, function(json) { //geoJSONファイルの読み込み
  return map.append(&quot;svg:g&quot;)
            .attr(&quot;class&quot;, &quot;tracts&quot;)
            .selectAll(&quot;path&quot;)
            .data(json.features)
            .enter()
            .append(&quot;svg:path&quot;)
            .attr(&quot;d&quot;, path)  //位置情報をPathのd属性に変換して適応
            .attr(&quot;fill-opacity&quot;, 0.5)
            .attr(&quot;fill&quot;, &quot;green&quot;)
            .attr(&quot;stroke&quot;, &quot;#222&quot;);
});
</pre> 


<a href="http://shimz.me/example/d3js/geo_example/geo2/">example</a>

参考
<a href="http://s.kitazaki.name/docs/geojson-spec-ja.html">GeoJSON フォーマット仕様</a>


<h2>TopoJSONを使う</h2>
GeoJSONをTopoJSONに変換することで、データセットのファイルサイズを小さくすることができます。

参考
<a href="http://ja.d3js.info/blocks/mike/map/">D3.jsとTopoJSONで地図を作る</a>

TopoJSON変換用のツールをインストール
 
<pre class="lang:sh decode:true " >npm install -g topojson
</pre> 

GeoJSONをTopoJSONへ変換
 
<pre class="lang:sh decode:true " >topojson -o gunma.topojson gunma.geojson
</pre> 

TopoJSON用のプラグインを読み込み。
 
<pre class="lang:xhtml decode:true " >
&lt;script src=&quot;http://d3js.org/topojson.v0.min.js&quot;&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >
var width = 600,
    height = 600;

	//ステージとなるsvgを追加
var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

	
//topjson読み込み	
d3.json(&quot;gunma.topojson&quot;, function(error, json) {

	//topojsonオブジェクトの作成
	var gunma = topojson.object(json, json.objects.gunma);
	
	var projection = d3.geo.mercator()
					   .center([139.0032936, 36.3219088])
					   .scale(80000)
					   .translate([width / 2, height / 2]);
	
	var path = d3.geo.path().projection(projection);

	
	//パスの描画
	svg.selectAll(&quot;.gunma&quot;)
    .data(topojson.object(japan, japan.objects.gunma).geometries) //topojson、geometriesデータを読み込み
	.enter().append(&quot;path&quot;)
    .attr(&quot;class&quot;, function(d) { return &quot;gunma&quot; + d.id; })
    .attr(&quot;d&quot;, path);
	
	
	//色塗り
	var grad = d3.scale.linear().domain([0, 38]).range([&quot;#0000FF&quot;, &quot;#FFFFFF&quot;]);
	for(var i=0; i &lt; 36+1; i++){
		d3.select(&quot;.gunma&quot;+i).attr(&quot;fill&quot;, grad(i));
	}
	
});
</pre> 

<a href="http://shimz.me/example/d3js/geo_example/geo2/topo.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2351</wp:post_id>
		<wp:post_date>2013-01-21 14:40:38</wp:post_date>
		<wp:post_date_gmt>2013-01-21 05:40:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2351</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2640]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e9%b6%b4%e8%88%9e%e3%81%86%e5%bd%a2%e3%81%ae%e7%be%a4%e9%a6%ac%e7%9c%8c%e3%82%92svg%e3%81%a7%e6%8f%8f%e3%81%84%e3%81%a6%e3%81%bf%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427348329;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2635;}i:1;a:1:{s:2:"id";i:2200;}i:2;a:1:{s:2:"id";i:2797;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【OpenLayers】電子国土Web.NEXT</title>
		<link>http://shimz.me/blog/map/2369</link>
		<pubDate>Tue, 22 Jan 2013 06:51:41 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2369</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://internet.watch.impress.co.jp/docs/column/chizu/20130110_581167.html">国土地理院「電子国土Web.NEXT」開発担当者インタビュー</a>

記事を読むまでその存在をしらなかったのですが、Google Mapのように自サイトに埋め込んで使えるようです。

ver.4から「<a href="http://openlayers.org/">OpenLayers</a>」に対応して使いやすくなったみたい。

OpenLayersの勉強がてら、ちょっと触ってみようと思います。

サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/alKp/js?width=465&height=496&view=play"></script>


<a href="http://portal.cyberjapan.jp/portalsite/sample/index2.html">電子国土ポータル　OpenLayersサイトサンプル集</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2369</wp:post_id>
		<wp:post_date>2013-01-22 15:51:41</wp:post_date>
		<wp:post_date_gmt>2013-01-22 06:51:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90openlayers%e3%80%91%e9%9b%bb%e5%ad%90%e5%9b%bd%e5%9c%9fweb-next</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2373]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427381264;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2746;}i:1;a:1:{s:2:"id";i:3565;}i:2;a:1:{s:2:"id";i:3560;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</title>
		<link>http://shimz.me/blog/d3-js/2379</link>
		<pubDate>Wed, 23 Jan 2013 02:38:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2379</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo3/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/ggooglemap.jpg" alt="ggooglemap" width="519" height="512" class="aligncenter size-full wp-image-2380" /></a>


<h2>Google MapにD3.jsで作成したSVGをオーバーレイする</h2>
<a href="http://shimz.me/blog/d3-js/2351">前回</a>作成した鶴（群馬県SVG）をGoogle Mapに貼り付けます。
詳しくは、<a href="http://shimz.me/example/d3js/geo_example/geo3/">example</a>のソースを直接みてください。

 
<pre class="lang:css decode:true " >
#map {
	width: 500px;
	height: 500px;
}

.SvgOverlay {
	position: relative;
	width: 500px;
	height: 500px;           
}

.SvgOverlay svg {
	position: absolute;
	top: -4000px;
	left: -4000px;
	width: 8000px;
	height: 8000px;        
}

.SvgOverlay path {
	stroke: black;
	stroke-width: 1px;
	fill-opacity: .6;
}
</pre> 
 
<pre class="lang:js decode:true " >
d3.json(&quot;gunma.geojson&quot;, function(json) {
	main(json);
});

function main(json) {
	
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 9,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			center: new google.maps.LatLng(36.53, 139.06),       
		});

		
	var overlay = new google.maps.OverlayView(); //OverLayオブジェクトの作成
	overlay.onAdd = function () {
		
		//オーバーレイ設定
		var layer = d3.select(this.getPanes().overlayLayer).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;SvgOverlay&quot;);
		var svg = layer.append(&quot;svg&quot;);
		var gunmalayer = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions&quot;);
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection();

		//Google Projection作成
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}

		//パスジェネレーター作成
		path = d3.geo.path().projection(googleMapProjection);　
            
		overlay.draw = function () {
			
			
			//地図描く
			gunmalayer.selectAll(&quot;path&quot;)
				.data(json.features)
				.attr(&quot;d&quot;, path) 
			.enter().append(&quot;svg:path&quot;)
				.attr(&quot;d&quot;, path)
				.attr(&quot;class&quot;, function(d) { return &quot;gunma&quot; + d.id; });
		
			//色塗り
			var grad = d3.scale.linear().domain([0, 38]).range([&quot;#0000FF&quot;, &quot;#FFFFFF&quot;]);
			for(var i=0; i &lt; 36+1; i++){
				d3.select(&quot;.gunma&quot;+i).attr(&quot;fill&quot;, grad(i));
			}


		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);
	
	//せっかくなんでアニメーションとかも付けてみる。
	var anime = Anime();
	setInterval(anime, 1000);
		
};
function Anime(){			
	var flag = true;
	return function(){
		if(flag){
			d3.select(&quot;.gunma16&quot;).transition().attr(&quot;fill&quot;, &quot;red&quot;);
			flag = false;
		}else{
			d3.select(&quot;.gunma16&quot;).transition().attr(&quot;fill&quot;, &quot;blue&quot;);
			flag = true;
		}
	}

}
</pre> 



OverlayViewを作成して、Google MapにsetMapします。
drawメソッドが、再描画（ズームイン、ズームアウト等）するたびに呼び出されるので、その中で地図を描画します。
ポイントは以下の２点
 
<pre class="lang:css decode:true " >.SvgOverlay svg {
	position: absolute;
	top: -4000px;
	left: -4000px;
	width: 8000px;
	height: 8000px;        
}
</pre> 

↑オーバーレイするSVGタグを画面外に-4000pxほどずらして設置
 
<pre class="lang:js mark:4 decode:true " >			var googleMapProjection = function (coordinates) {  //Google Map 用のprojectionを設定
				var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
				var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
				return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
			}
</pre> 


↑Projection関数が返すx,yの値に+4000pxして返す

これで、D3.jsで作成したSVGをグーグルマップにオーバーレイすることができたのですが……ものすごく重いです。
再描画が行われるたびにいちいち止まって実用的ではないので、データセットの軽量化を行います。

<h2>SHAPEデータの簡素化</h2>
国土数値情報サイトからダウンロードしたままのデータではあまりに重いので、一部情報をそぎ落として簡素化します。
シェープファイルの簡素化は以下のオンラインサービスを使用することで簡単に行えます。

<a href="http://mapshaper.com/test/MapShaper.swf">MapShaper</a>

国土数値情報サイトからダウンロードしたデータの中から、SHPファイルを上記サイトにアップロードします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/shpe000000.jpg" alt="shpe000000" width="554" height="446" class="aligncenter size-full wp-image-2384" />
中央下にあるバーを右に動かすとデータが簡素化されます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/shpe000001.jpg" alt="shpe000001" width="554" height="446" class="aligncenter size-full wp-image-2385" />
あんまり動かしすぎると、出来の悪いポリゴンみたいになるので注意。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/shpe000002.jpg" alt="shpe000002" width="554" height="446" class="aligncenter size-full wp-image-2386" />

程よきところで「export」ボタンを押して、Shapefile形式のpolygonsとpolylinesをダウンロードします。
ダウンロードしたpolygonsとplylinesのshpファイルを<a href="http://shimz.me/blog/d3-js/2351">前回</a>同様<a href="http://www2.qgis.org/ja/site/">Quantum GIS</a>を使ってGeoJSONファイルに変換します。

簡素化する前のGeoJSONファイルのサイズが「3.07MB」だったのに対して、「46KB」までデータセットのサイズを小さくすることができました。
これなら、グーグルマップ上にオーバーレイしてもそんなに重くならずに済みます。

↓軽くした方
<a href="http://shimz.me/example/d3js/geo_example/geo3/light.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2379</wp:post_id>
		<wp:post_date>2013-01-23 11:38:55</wp:post_date>
		<wp:post_date_gmt>2013-01-23 02:38:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2379</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2380]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91google-map%e3%81%absvg%e3%82%92%e3%82%aa%e3%83%bc%e3%83%90%e3%83%bc%e3%83%ac%e3%82%a4%e3%81%99%e3%82%8bshape%e3%83%87%e3%83%bc%e3%82%bf%e8%bb%bd%e9%87%8f%e5%8c%96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427384517;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3770;}i:1;a:1:{s:2:"id";i:2819;}i:2;a:1:{s:2:"id";i:3984;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】画像をデータセットとして使う</title>
		<link>http://shimz.me/blog/d3-js/2406</link>
		<pubDate>Thu, 24 Jan 2013 08:22:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2406</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/d3canvas/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/54e63f844254d9c9d85b02a36349db2f.jpg" alt="分解" width="1158" height="206" class="aligncenter size-full wp-image-2408" /></a>

読み込んだ画像ファイルをcanvasに転写し、getImageDataで取得したcanvasPixelArrayを整形して、d3へ渡します。
後は受けとったデータを元にsvgのcircleで描画。
詳細は<a href="http://shimz.me/example/d3js/d3canvas/">example</a>のソースを参照してください。

ボタンクリックで、色情報を元に分解　→　あんまり綺麗に分解できず orz 


 
<pre class="lang:js decode:true " >var w = 100;
var h = 100;

//canvas 設置
d3.select('body').append('canvas')
  .attr('id', 'canvas')
  .attr('width', w)
  .attr('heigh', h)
  .attr('style', 'display:none')

var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');

//イメージオブジェクト作成
var imgObj = new Image();
imgObj.src = "Parrots.jpg";


imgObj.onload = function() {   //画像の読み込み
	
	ctx.drawImage(imgObj, 0, 0); //canvasに転写
	
	var imgData = ctx.getImageData(0, 0, w, h); //ImageDataオブジェクト取得


	var imgDataArray  = [];
	for(var i=0; i &lt; imgData.width * imgData.height * 4 ; i+=4){	
		//canvasPixelArrayを整形したデータをimgDataArrayに
		imgDataArray.push( {
			r:imgData.data[i],
			g:imgData.data[i+1],
			b:imgData.data[i+2],
			color:(function(r,g,b){return ((((0&lt;&lt;8)+r&lt;&lt;8)+g&lt;&lt;8)+b)})(imgData.data[i], imgData.data[i+1], imgData.data[i+2])
		} ); 
		
		
	}

	var svg = d3.select('body').append('svg'); //svgタグ設置
	
	svg.selectAll("circle")
		.data(imgDataArray)  //canvasから取得したピクセルデータ
		.enter()
		.append("svg:circle")
		.attr('cx', function(d, i){ return (i % w) * 2})
		.attr('cy', function(d, i){ return Math.floor(i / w) * 2})
		.attr('fill', function(d, i){ return  "#" + d.color.toString(16)})
		.attr('r', 2)
	
}</pre> 


<a href="http://shimz.me/example/d3js/d3canvas/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2406</wp:post_id>
		<wp:post_date>2013-01-24 17:22:19</wp:post_date>
		<wp:post_date_gmt>2013-01-24 08:22:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2406</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2408]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e7%94%bb%e5%83%8f%e3%82%92%e3%83%87%e3%83%bc%e3%82%bf%e3%82%bb%e3%83%83%e3%83%88%e3%81%a8%e3%81%97%e3%81%a6%e4%bd%bf%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427376917;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2892;}i:1;a:1:{s:2:"id";i:2755;}i:2;a:1:{s:2:"id";i:2701;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>304</wp:comment_id>
			<wp:comment_author><![CDATA[Over 2000 D3.js Examples and Demos | TechSlides]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techslides.com/over-2000-d3-js-examples-and-demos/</wp:comment_author_url>
			<wp:comment_author_IP>107.170.15.66</wp:comment_author_IP>
			<wp:comment_date>2014-02-03 00:06:35</wp:comment_date>
			<wp:comment_date_gmt>2014-02-02 15:06:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Decomposing an image from canvas to SVG [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391381475.1436860561370849609375;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391353596.0014150142669677734375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】 データの取得（ダウンロードできる公開情報まとめ）</title>
		<link>http://shimz.me/blog/d3-js/2416</link>
		<pubDate>Fri, 25 Jan 2013 08:26:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2416</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/01/stockvault-bookshelf-126368.jpg" alt="stockvault-bookshelf-126368" width="600" height="400" class="aligncenter size-full wp-image-2417" />

<a href="http://matome.naver.jp/odai/2135883023685089601">公開データまとめ</a>

データを可視化するにも、そもそもデータがなければ始まらないので、政府や官公庁が配信している情報をまとめています。

主に、GISデータやCSVなどで配信されているモノを集めました。

随時更新していきます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2416</wp:post_id>
		<wp:post_date>2013-01-25 17:26:38</wp:post_date>
		<wp:post_date_gmt>2013-01-25 08:26:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-%e3%83%87%e3%83%bc%e3%82%bf%e3%81%ae%e5%8f%96%e5%be%97%ef%bc%88%e3%83%80%e3%82%a6%e3%83%b3%e3%83%ad%e3%83%bc%e3%83%89%e3%81%a7%e3%81%8d%e3%82%8b%e5%85%ac%e9%96%8b%e6%83%85</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2417]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426623097;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4095;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3378;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>356</wp:comment_id>
			<wp:comment_author><![CDATA[オープンデータ | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3166</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 16:47:30</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 07:47:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【D3.js】 データの取得（ダウンロードできる公開情報まとめ） | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414485395.5497639179229736328125;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414482450.965351104736328125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>「アノニマス・ライフ 名を明かさない生命」展をみてきました。</title>
		<link>http://shimz.me/blog/other/2422</link>
		<pubDate>Mon, 28 Jan 2013 05:55:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2422</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.ntticc.or.jp/Exhibition/2012/AnonymousLife/work08_j.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/work_photo08.jpg" alt="work_photo08" width="294" height="523" class="aligncenter size-full wp-image-2429" /></a>
《アエウム》 2009-12年　渡辺豪


東京オペラシティ内にあるNTTインターコミュニケーション・センターで現在開催されている「アノニマス・ライフ 名を明かさない生命」展を観てきました。
内容は以下。

<blockquote>匿名の，名前のわからない，個性のないもの．アノニマス（anonymous）とは，そのような意味を持っています．ギリシア語の接頭辞an-（～なしの）にonyma（名前）が組み合わされて，「名前がない」を意味しますが，展覧会の作品はそれぞれに題名がつけられていて，名前がないわけではありません．では，「名前がない」とは一体どういうことを意味するのでしょうか．
　例えば，ロボット工学の一部では，テクノロジーの発達に後押しされ，「機械の生命」を作り出そうとしています．しかし，その成果物の多くは，私たちがSFなどに夢見る理想的なアンドロイドからすれば完全なものとは言えず，それはアンドロイドと呼ばれるひとつ手前の存在，名づけえぬ何ものかなのです．また，遺伝子操作に代表されるバイオ・テクノロジーやクローン技術などの生殖医療技術の急速な発達は，私たちがその本質を理解するよりも早く，名づけることのできない，もうひとつの「生」のあり方を現実のものとしてきました．
　この展覧会では，そのような名づけることのできない生命，本当の名を明かしていないものたち，「アノニマス・ライフ」ということばを手がかりに，機械と人間を分かつ自明であったはずの「生」の意味を問い直すとともに，テクノロジーの進歩が新たな光を当てたセクシュアリティやアイデンティティの問題をはじめ，私たちの社会の中に遍在する多様なゆらぎ，境界，そしてその侵犯をめぐる作品を紹介します．

<a href="http://www.ntticc.or.jp/Exhibition/2012/AnonymousLife/index_j.html">アノニマス・ライフ ― 名を明かさない生命</a></blockquote>


どの作品も非常に興味深く楽しめたのですが、展示会のタイトルやテーマと、実際に展示されている作品にズレがあったかな？　と。
この展示会における「アノニマス」の定義は、「まだ名まえの無いもの。名づけようの無いもの」ということなんだと思いますが、スプツニ子！さんの「<a href="http://www.youtube.com/watch?v=gnb-rdGbm6s">生理マシーン</a>」や高嶺格さんの「Ask for a Trade」なんかは、ジェンダーやアイデンティティの不確かさに問いかけを行うような作品だったと思います。
名づけようのない生命ということでは、展示されていた"キメラ"を描いた中世の版画（たしかプリニウス 『博物誌』）などの方がテーマに即していたように思えました。


■リプリーQ2

<a href="http://www.ntticc.or.jp/Exhibition/2012/AnonymousLife/work02_j.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/work_photo02-199x300.jpg" alt="work_photo02" width="199" height="300" class="aligncenter size-medium wp-image-2433" /></a>
本当は「米朝アンドロイド」を観たかったのですが、展示期間が過ぎてました orz
そのかわりに展示されていたのがアクトロイドの「リプリーQ2」
実際に見るのは初めてだったのですが、やはり直接見ると「<a href="http://ja.wikipedia.org/wiki/%E4%B8%8D%E6%B0%97%E5%91%B3%E3%81%AE%E8%B0%B7%E7%8F%BE%E8%B1%A1">不気味の谷</a>」を意識せざるおえません。
造形の精密さより、たぶん動作に意志を感じられないところがどうにも違和感を抱くのだと思います。
もしそうだとすると、この違和感をなくすには自律しないとならないってことなので……不気味の谷を越えるのはまだまだ遠そうです。
パフォーマンス作品「模像と鏡像 - 美容師篇」については動画が放映されてましたが、これはやっぱりライブで見ないといけない作品でしょうね。

■エミー・マランスと12組の足
<iframe src="http://embed.ted.com/talks/lang/ja/aimee_mullins_prosthetic_aesthetics.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

『義肢はもはや失ったものを補うのではない 新たに生まれた空間に 装着者が自由な創作を実現する 力の象徴』

元パラリンピックの選手でもあり、女優・モデルでもあるエミー・マランスさんのTEDでのプレゼンが展示会内で放映されてました。
個人的に一番興味深かったです。
義足は、足りない器官を補うための代替物ではなく、人間の能力を拡張する道具なのだなぁ～と納得。
攻殻機動隊で描かれたようにパラリンピックの選手が、オリンピックの選手の記録を抜くなんてこともそう遠くない話なのかもしれないですね。


■総論
作品自体は楽しめました。
ただ、「名づけようのない生命」とまで含めてしまったのは、展示会の規模にたいして風呂敷広げすぎたのかも。
むしろそのテーマなら、以前紹介した<a href="http://shimz.me/blog/other/2295">自己複製するライフゲーム</a>やモンサント社が作ってる遺伝子組み換え植物（下記動画参照）なんかの方が「なんかモヤモヤして、名づけようのない生命(?)」って感じがします。あと、今後かならず生命倫理的に問題になってくるであろうiPS細胞周辺の技術とか。前述した展示会の序文の中に書かれていた『遺伝子操作に代表されるバイオ・テクノロジーやクローン技術などの生殖医療技術』に関する展示品があったらよかったなーと。

<iframe width="560" height="315" src="http://www.youtube.com/embed/PO7RmRVZs6A" frameborder="0" allowfullscreen></iframe>

全体通して「機械と人間の境界があいまいになっていくこと」への問い、みたいな事がコンセプトだったのでしょうけど、結局そんな問いなんてどこ吹く風といった感じに、身体と機械の融合を新たな可能性として人生を謳歌するエミー・マランスさんの動画が一番印象に残るという不思議な後味を感じた展示会でした。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2422</wp:post_id>
		<wp:post_date>2013-01-28 14:55:42</wp:post_date>
		<wp:post_date_gmt>2013-01-28 05:55:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%a2%e3%83%8e%e3%83%8b%e3%83%9e%e3%82%b9%e3%83%bb%e3%83%a9%e3%82%a4%e3%83%95-%e5%90%8d%e3%82%92%e6%98%8e%e3%81%8b%e3%81%95%e3%81%aa%e3%81%84%e7%94%9f%e5%91%bd%e3%80%8d%e5%b1%95%e3%82%92</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2429]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427357480;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1764;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】全国の熱中症発生数を表示してみた（CSVデータ読み込み）</title>
		<link>http://shimz.me/blog/d3-js/2451</link>
		<pubDate>Wed, 30 Jan 2013 03:05:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2451</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/csv/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/Heatstroke-e1359513926393.jpg" alt="Heatstroke" width="600" height="314" class="aligncenter size-full wp-image-2452" /></a>

とりあえず、色々やってみて覚えよう！ってことで。
「<a href="http://tenbou.nies.go.jp/gis/">国立環境研究所</a>」よりいただいた熱中症発生数のデータを可視化。
ダウンロードしたtsvファイルをExcelを使ってcsvに変更、文字コードをUTF8にコンバートしてD3に読み込ませています。
 
<pre class="lang:js decode:true " >d3.csv("Heatstroke.csv", function(rows) {
		
		var svg = d3.select('body').append('svg');
		var margin = 60;
		var textmargin = 10
		var interval = 110;
		var sort = Sort();
		
		var dmax =  d3.max(rows.map(function(d) { return parseInt(d['指標値(単位:人)']); })) //指標値の最大値を取得
		var dmin =  d3.min(rows.map(function(d) { return parseInt(d['指標値(単位:人)']); })) //指標値の最少値を取得
		var scaleX = d3.scale.linear().domain([dmin, dmax]).range([30, 120]);



		svg.selectAll('.circle')  //サークルを出力
		   .data(rows)
		   .enter()
		   .append('circle')
		   .attr('class', 'circle')

		svg.selectAll('.name')  //県名を出力
		   .data(rows)
		   .enter()
		   .append('text')
		   .attr('class', 'name')

		svg.selectAll('.count') //指標値を出力
		   .data(rows)
		   .enter()
		   .append('text')
		   .attr('class', 'count')
		   
		   
		draw(rows)
		
		d3.select('body')
		   .on('click', function(){   //bodyにクリックイベントを設置
			var tmp = sort(rows);
			draw(tmp);
		   })

		function Sort(){
			var sortNext = 0;
			return function (data){
				switch(sortNext){
					case 0:
						data.sort(function(a,b){return a['指標値(単位:人)'] - b['指標値(単位:人)']});
						break;
					case 1:
						data.sort(function(a,b){return b['指標値(単位:人)'] - a['指標値(単位:人)'] });
						break;
					
				}
				sortNext++;
				if(sortNext &gt; 1) sortNext = 0;
				return data;
			}

		}
			   
			   
		function draw(data){	

			svg.selectAll('.circle')
			   .data(rows)
			   .transition()
			   .attr('opacity',0.6)
			   .attr('fill', 'red')
			   .attr('r', function(d){ return Math.floor(scaleX(parseInt(d['指標値(単位:人)']))) })
			   .attr('cx', function(d, i) { return (i % 10) * interval + margin})
			   .attr('cy', function(d, i){ return Math.floor(i / 10) * interval + margin})
			
			svg.selectAll('.name')
			   .data(rows)
			   .transition()
			   .attr('x', function(d, i) { return (i % 10) * interval + margin})
			   .attr('y', function(d, i){ return Math.floor(i / 10) * interval + margin - textmargin})
			   .text(function(d){ return d['都道府県名'] })
				   
			svg.selectAll('.count')
			   .data(rows)
			   .transition()
			   .attr('x', function(d, i) { return (i % 10) * interval + margin})
			   .attr('y', function(d, i){ return Math.floor(i / 10) * interval + margin + textmargin})
			   .text(function(d){ return d['指標値(単位:人)'] + "人" })

		 
		}	
	});</pre> 

d3.csvでcsvファイルを読み込むと１行目をキーとした連想配列が返ってきます。あとはそれをデータセットとして使用するだけ。簡単！

<a href="http://shimz.me/example/d3js/csv/">example</a>

ホントは、ソートを行った時に、サークルが移動するようなインタラクションにしたかったのだけれど、力及ばすでした orz

↑やり方が分かったので追記。

<a href="http://shimz.me/example/d3js/csv/index2.html">example</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2451</wp:post_id>
		<wp:post_date>2013-01-30 12:05:55</wp:post_date>
		<wp:post_date_gmt>2013-01-30 03:05:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2451</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2452]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js-%e7%bf%92%e4%bd%9c%e3%80%91%e5%85%a8%e5%9b%bd%e3%81%ae%e7%86%b1%e4%b8%ad%e7%97%87%e7%99%ba%e7%94%9f%e6%95%b0%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f%ef%bc%88csv]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427318535;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2797;}i:1;a:1:{s:2:"id";i:2755;}i:2;a:1:{s:2:"id";i:3841;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>306</wp:comment_id>
			<wp:comment_author><![CDATA[Over 2000 D3.js Examples and Demos | TechSlides]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techslides.com/over-2000-d3-js-examples-and-demos/</wp:comment_author_url>
			<wp:comment_author_IP>107.170.15.66</wp:comment_author_IP>
			<wp:comment_date>2014-02-03 00:15:13</wp:comment_date>
			<wp:comment_date_gmt>2014-02-02 15:15:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Number of heat stroke [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391381475.1352989673614501953125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391354113.39548397064208984375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】 Satellite Projection（衛星俯瞰図）てすと</title>
		<link>http://shimz.me/blog/d3-js/2462</link>
		<pubDate>Thu, 31 Jan 2013 04:00:15 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2462</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2013/01/satellite1.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/satellite1.jpg" alt="satellite1" width="968" height="733" class="aligncenter size-full wp-image-2463" /></a>


D3.jsには上記のような地図を表示するためのProjection(投影法)関数が用意されているのですが……なかなか思うように使いこなせません。
投影法を指定する際の一番難しいポイントは正しい数値を指定しないと、すぐ地図が画面外へ消えてしまうところですね。

Satellite Projectionの各値(rotateやtiltなど）を変更すると、どのように地図の見え方が変わるのか確認するためにテストをつくってみました。

<a href="http://shimz.me/example/d3js/geo_example/geo4/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/satellite12.jpg" alt="satellite12" width="1265" height="829" class="aligncenter size-full wp-image-2464" /></a>

 
<pre class="lang:js decode:true " >

var path, map, xy;
var map = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 960).attr(&quot;height&quot;, 600); //地図用のステージ(SVGタグ)を作成

d3.json(&quot;japan.geojson&quot;, function(json) {
   map.selectAll(&quot;path&quot;)
            .data(json.features)
            .enter()
            .append(&quot;svg:path&quot;)
			.attr(&quot;class&quot;, &quot;base&quot;);
			
	draw(80000, [45.00, -10, -50], 60, 200);
			
});


function draw(scale, rotate, tilt, clipAngle){

	projection = d3.geo.satellite()  //Satellite Projectionの指定
		.center([139.0032936, 36.3219088])
		.scale(scale)
		.rotate(rotate) //3軸の回転角
		.tilt(tilt) //視点の傾き？
		.clipAngle(clipAngle) //地図の表示範囲をカットする角度？


	path = d3.geo.path().projection(projection);　

	d3.selectAll('.base')
		.transition()
		.attr(&quot;d&quot;, path)  
		.attr(&quot;fill-opacity&quot;, 1)
		.attr(&quot;fill&quot;, &quot;green&quot;)
		.attr(&quot;stroke&quot;, &quot;#222&quot;);

			
}

d3.selectAll('input').on('change', function(d){
	var scale = document.getElementById(&quot;scale&quot;).value; 　//　d3.select(this).attr('value') //d3.selectだとなぜかスライダーのvalue値がうまく取れない。
	d3.select('#scaleValue').attr(&quot;value&quot;, scale);
	var rotate = [];
	rotate.push(document.getElementById(&quot;rotate1&quot;).value);
	rotate.push(document.getElementById(&quot;rotate2&quot;).value);
	rotate.push(document.getElementById(&quot;rotate3&quot;).value);
	d3.select('#rotate1Value').attr(&quot;value&quot;, rotate[0]);
	d3.select('#rotate2Value').attr(&quot;value&quot;, rotate[1]);
	d3.select('#rotate3Value').attr(&quot;value&quot;, rotate[2]);
	var tilt = document.getElementById(&quot;tilt&quot;).value; 　
	d3.select('#tiltValue').attr(&quot;value&quot;, tilt);
	var clipAngle = document.getElementById(&quot;clipAngle&quot;).value; 　
	d3.select('#clipAngleValue').attr(&quot;value&quot;, clipAngle);

	draw(scale, rotate, tilt, clipAngle);
});</pre> 


Chromeでしか動作確認してません。
<a href="http://shimz.me/example/d3js/geo_example/geo4/">example</a>

各値のスライダーを変更すると地図に反映されます。

日本地図のデータは、<a href="http://www.diva-gis.org/gdata">DIVA-GIS</a>からダウンロードしたものを、<a href="http://mapshaper.com/test/MapShaper.swf">MapShaper</a>で軽くしてQuantum GISでGeoJSONに変換するといういつもの流れです。
詳しくは<a href="http://shimz.me/blog/d3-js/2379">こちら</a>の「SHAPEデータの簡素化」を参照してください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2462</wp:post_id>
		<wp:post_date>2013-01-31 13:00:15</wp:post_date>
		<wp:post_date_gmt>2013-01-31 04:00:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2462</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-satellite-projection%ef%bc%88%e8%a1%9b%e6%98%9f%e4%bf%af%e7%9e%b0%e5%9b%b3%ef%bc%89%e3%81%a6%e3%81%99%e3%81%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427408545;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3548;}i:1;a:1:{s:2:"id";i:2892;}i:2;a:1:{s:2:"id";i:2817;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar]カレンダーに画像を表示する</title>
		<link>http://shimz.me/blog/fullcalendar/2475</link>
		<pubDate>Fri, 01 Feb 2013 08:57:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2475</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/fullcalenar/03/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/fullcalimage.jpg" alt="fullcalimage" width="604" height="451" class="aligncenter size-full wp-image-2478" /></a>

Googleカレンダーっぽいカレンダーを作成できるjQueryのプラグイン「<a href="http://arshaw.com/fullcalendar/">FullCalendar</a>」
通常、イベント（予定）は文字でしか登録できませんが、ちょっとした工夫で、カレンダーに画像をイベントとして表示することができます。

 
<pre class="lang:js decode:true " >$('#calendar').fullCalendar({
    eventRender: function(events, element) {
	if(events.img){
	    $(element.context)  //imgプロパティが存在するイベントだけtitleを画像に差し替え
		.css("border-color", "transparent")
		.css("background-color", "transparent")
		.html('&lt;img class="photo"  src="'+events.img+'" /&gt;');
        }
    },
    events: [
	{
	    title: '通常のイベント',
	    start: new Date(y, m, 15),
	},			
	{
	    title: '画像　イベント',
	    start: new Date(y, m, 1),
	    img:"img2.jpg"					
	},
	{
	    title: '画像　イベント',
	    start: new Date(y, m, 2),
	    img:"img3.jpg"					
	}
    ]
});
</pre> 


<a href="http://shimz.me/example/fullcalenar/03/">example</a>

貼り付けた画像もイベントなので、ドラッグで移動することができます。

【追記】
Fullcalendar ver.1.6.4 では上記コードでは画像を表示できません。
下記のコードを使用してください。
 
<pre class="lang:js mark:4 decode:true " >$('#calendar').fullCalendar({
    eventRender: function(events, element) {
	if(events.img){
	    $(element[0])  //imgプロパティが存在するイベントだけtitleを画像に差し替え
	    .css("border-color", "transparent")
	    .css("background-color", "transparent")
	    .html('&lt;img class="photo"  src="'+events.img+'" /&gt;');
	}
    },
    events: [
	{
	    title: '通常のイベント',
	    start: new Date(y, m, 15),
	},			
	{
	    title: '画像　イベント',
	    start: new Date(y, m, 1),
	    img:"img2.jpg"					
	},
	{
	    title: '画像　イベント',
	    start: new Date(y, m, 2),
	    img:"img3.jpg"					
	}
    ]
});</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2475</wp:post_id>
		<wp:post_date>2013-02-01 17:57:58</wp:post_date>
		<wp:post_date_gmt>2013-02-01 08:57:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2475</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2478]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fullcalendar%e3%82%ab%e3%83%ac%e3%83%b3%e3%83%80%e3%83%bc%e3%81%ab%e7%94%bb%e5%83%8f%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427286292;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1265;}i:1;a:1:{s:2:"id";i:1483;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[WordPress]カテゴリ毎のフィード(rss)を配信する。</title>
		<link>http://shimz.me/blog/wordpress/2489</link>
		<pubDate>Sat, 02 Feb 2013 00:29:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2489</guid>
		<description></description>
		<content:encoded><![CDATA[ブログ記事の内容が大分バラツキがでてきたので、カテゴリ毎のRSSを配信することにしました。
カテゴリページにRSSへのリンクがあります。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/caterss.jpg" alt="caterss" width="455" height="128" class="aligncenter size-full wp-image-2491" />

D3.jsに関する記事のみ配信する<a href="http://shimz.me/blog/category/d3-js/feed">RSS</a>
Fullcalendarに関する記事のみの<a href="http://shimz.me/blog/category/fullcalendar/feed">RSS</a>

などと、必要なカテゴリの更新情報だけを受け取ることができます。

<hr>

<h2>■ カテゴリページにRSSのリンクを出力する</h2>
以下のコードをカテゴリページに記述するとrssへのリンクを出力することができます。

 
<pre class="lang:xhtml decode:true " >&lt;a href=&quot;../category/&lt;?php $cat = get_the_category(); echo $cat[0]-&gt;slug; ?&gt;/feed&quot;&gt;RSS&lt;/a&gt;
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2489</wp:post_id>
		<wp:post_date>2013-02-02 09:29:03</wp:post_date>
		<wp:post_date_gmt>2013-02-02 00:29:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2489</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2491]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[wordpress%e3%82%ab%e3%83%86%e3%82%b4%e3%83%aa%e6%af%8e%e3%81%ae%e3%83%95%e3%82%a3%e3%83%bc%e3%83%89rss%e3%82%92%e9%85%8d%e4%bf%a1%e3%81%99%e3%82%8b%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426460348;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:3629;}i:2;a:1:{s:2:"id";i:2519;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit] スニペットを使う</title>
		<link>http://shimz.me/blog/editor/2519</link>
		<pubDate>Thu, 07 Feb 2013 00:30:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2519</guid>
		<description></description>
		<content:encoded><![CDATA[Komodo Editの高機能なスニペットを使いこなしましょう。
&nbsp;
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000000.jpg" alt="snip000000" width="655" height="661" class="aligncenter size-full wp-image-2560" />
定型文を入力するのに欠かせない<a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88">スニペット</a>機能。
Komodo Editでのスニペットの登録はToolbox上で行います。

Toolboxビュー上で右クリック→「Add」→「new snipet」
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip.jpg" alt="snip" width="385" height="485" class="aligncenter size-full wp-image-2559" />

登録したスニペットはToolbox上でダブルクリックして実行します。
Ctrl+Shift+K で呼び出して使用することもできますし、各スニペットにキーバインドを設定することもできます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000005.jpg" alt="snip000005" width="655" height="661" class="aligncenter size-full wp-image-2561" />

また、Toolbox内のsampleファルダ以下、Abbreviationsフォルダにプログラム言語毎のフォルダがあるのですが、その中にスニペットをいれて置くと、エディタ上でスニペット名を記述した後に Ctrl+t でスニペットを貼付けることができます。
<blockquote>
例）
sample ➡ Abbreviations ➡ javascriptフォルダに「snip」というスニペットを入れている場合

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000006.jpg" alt="snip000006" width="256" height="330" class="aligncenter size-full wp-image-2562" />
javascriptファイルの編集時のみ「snip」と記述して Ctrl+t を押すとスニペットの挿入がおこなわれます。
</blockquote>

&nbsp;
<h2>Interpolation shortcut</h2>
&nbsp;
Komodo Editでは、「<a href="http://docs.activestate.com/komodo/4.4/shortcuts.html">Interpolation shortcut</a>」という、実行時にスニペットを動的に変化させて貼り付けを行う特殊なコードがあります。
（EmEditorのプレースホルダーのようなもの）
これを使用すると、スニペット機能が格段に便利になります。
いくつか代表的なものだけ紹介します。

<strong>■ %tabstop</strong>
%tabstopは、スニペットを貼り付けた際にタブの移動を制御することができるショートカットです。

 
<pre class="lang:js highlight:0 decode:true " title="書式" >[[%tabstop:＜デフォルト値＞]]</pre> 


スニペットを実行した後、Tabキーを押すとフォーカスが%tabstop上を移動します。
値の変更を素早く行いたいときに重宝します。
また、ショートカット名の語尾に数値を付けることで、一時的な変数のようにつかえます。
 
<pre class="lang:js highlight:0  decode:true " title="example" >/*
 *[[%tabstop1:ClassName]]
 * /

var [[%tabstop1]] = function(){
    [[%tabstop]]
}
</pre> 

上記のスニペットを実行した後、最初にフォーカスが当るコメント内の「ClassName」を変更すると、同時にvar横の変数名も変更されます。
下記動画参照

<iframe width="559" height="433" src="http://www.youtube.com/embed/FLbFCkNHLI4" frameborder="0" allowfullscreen></iframe>

&nbsp;

<strong>■ %s</strong>
%sは、エディタ上で選択しているテキストをスニペットに代入するショートカットです。
 
<pre class="lang:js highlight:0  decode:true " title="書式" >[[%s]]</pre> 


エディタ上で文字を選択しながらスニペットを実行すると、選択したテキストが%sに代入されてスニペットが貼り付けられます。
下記のコードは、選択したテキストをh1タグで囲むスニペットです。
 
<pre class="lang:xhtml highlight:0  decode:true " title="example" >&lt;h1&gt;[[%s]]&lt;/h1&gt;
</pre> 


%sショートカットを使用したスニペットは、実行時にテキストが選択されていないとエラーになります。
テキストが選択されていない場合にデフォルト値を出力するには以下のように記述します。
 
<pre class="lang:js highlight:0  decode:true " title="書式" >[[%s:else:＜デフォルト値＞]]</pre> 

%sもショートカットの語尾に数値を付けることで、一時的な変数(後方参照)のようにつかえます。


&nbsp;

<strong>■ %date</strong>
%dateは、スニペット実行時の日次を代入するショートカットです。
 
<pre class="lang:js highlight:0  decode:true " title="書式" >[[%date:＜出力形式＞]]</pre> 

スニペット実行時に、日次が代入されます。
出力形式は下記のようにカスタマイズできます。
 
<pre class="lang:js highlight:0  decode:true " title="example" >[[%date:%d/%m/%Y %H:%M:%S]]
</pre> 

&nbsp;

<strong>■ %ask</strong>
%askは、スニペット実行時にダイアログを表示し、入力された値を貼り付けるスニペットに反映します。
 
<pre class="lang:js highlight:0  highlight:0 decode:true " >[[%ask:＜ラベル名＞:＜デフォルト値＞]]</pre> 

%askの含まれたスニペットは、実行するとダイアログを開きます。
ダイアログに入力された値をスニペットに代入して貼り付けを行います。
 
<pre class="lang:js highlight:0  decode:true " title="example" >$.ajax({
   type: &quot;[[%ask:type:post]]&quot;,
   url: [[%ask:url:&quot;hoge.php&quot;]],
   data: [[%ask:data]],
   success: function(msg){
     
   }
 });
</pre> 

上記のスニペットを実行すると下記のようなダイアログが表示され、入力した値が貼り付けるスニペットに反映されます。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000004.jpg" alt="snip000004" width="487" height="167" class="aligncenter size-full wp-image-2563" />

%askもショートカットの語尾に数値を付けることで、一時的な変数のように使えます。


&nbsp;

&nbsp;

いかかでしたでしょうか。
他にも様々な機能を持った「<a href="http://docs.activestate.com/komodo/4.4/shortcuts.html">Interpolation shortcut</a>」がありますので、調べてみると面白いかもしれません。


なお、スニペット設定画面の「Maintain indentation context after insertion」の項目にチェックを入れておくと、スニペットを貼付ける際に前後のインデントに合わせて貼付けを行ってくれるので、チェックを入れておきましょう。

次回は、Toolboxの別の機能「マクロ」か「コマンド」の紹介をする予定です。

&nbsp;

【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>

&nbsp;
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2519</wp:post_id>
		<wp:post_date>2013-02-07 09:30:49</wp:post_date>
		<wp:post_date_gmt>2013-02-07 00:30:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2519</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2560]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[komodo-edit-%e3%82%b9%e3%83%8b%e3%83%9a%e3%83%83%e3%83%88%e3%82%92%e4%bd%bf%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427127729;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2579;}i:1;a:1:{s:2:"id";i:2661;}i:2;a:1:{s:2:"id";i:74;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 viewBox属性を使ったPan/Zoon</title>
		<link>http://shimz.me/blog/d3-js/2526</link>
		<pubDate>Sun, 03 Feb 2013 05:28:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2526</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/zoom1/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/vboxzoom1.jpg" alt="vboxzoom1" width="498" height="501" class="aligncenter size-full wp-image-2527" /></a>
ドラッグで移動、ホイールで拡大縮小が行えます。

	
 
<pre class="lang:js decode:true " >	var width = 500;
	var height = 500;
	var vbox_x = 500;
	var vbox_y = 500;
	var vbox_default_width = vbox_width = 1000;
	var vbox_default_height = vbox_height = 1000;
	
	var svg = d3.select('body')
		.append('svg')
		.attr("width", width)
		.attr("height", height)
		.attr("viewBox", "" + vbox_x + " " + vbox_y + " " + vbox_width + " " + vbox_height); //viewBox属性を付加

	
	random = function(){
		var min = 0;
		var max = 1;
		if(arguments.length == 1){
			max = arguments[0];
		}else{
			min = arguments[0];
			max = arguments[1];
		}
		
		return Math.floor(Math.random() * (max - min) ) + min;
	}
	
	
	var dataSet = [];
	
	for(var i=0; i < 50; i++){
		dataSet.push({x:random(0,2000),y:random(0,2000),r:random(60,200)});
	}
	
	
	var color = d3.scale.linear().domain([0, dataSet.length]).range(["steelblue", "red"])
		.interpolate(d3.interpolateHsl);
		;
	
	
	svg.selectAll('.circle')
	   .data(dataSet)
	   .enter()
	   .append('circle')
	   .attr('opacity', 0.5)
	   .attr('cx', function(d){ return d.x })
	   .attr('cy', function(d){ return d.y })
	   .attr('r', function(d){ return d.r })
	   .attr('fill', function(d, i){ return color(i);  })
	   .attr('class', 'circle');
	   

	  drag = d3.behavior.drag().on("drag", function(d) {
		vbox_x -= d3.event.dx;
		vbox_y -= d3.event.dy;
		return svg.attr("translate", "" + vbox_x + " " + vbox_y); //基点の調整。svgタグのtranslate属性を更新
	  });
	  svg.call(drag);
	
	zoom = d3.behavior.zoom().on("zoom", function(d) {
		var befere_vbox_width, before_vbox_height, d_x, d_y;
		befere_vbox_width = vbox_width;
		before_vbox_height = vbox_height;
		vbox_width = vbox_default_width * d3.event.scale;
		vbox_height = vbox_default_height * d3.event.scale;
		d_x = (befere_vbox_width - vbox_width) / 2;
		d_y = (before_vbox_height - vbox_height) / 2;
		vbox_x += d_x;
		vbox_y += d_y;
		return svg.attr("viewBox", "" + vbox_x + " " + vbox_y + " " + vbox_width + " " + vbox_height);  //svgタグのviewBox属性を更新
	});
  
  　　svg.call(zoom);   
</pre> 

<a href="http://shimz.me/example/d3js/zoom1/">example</a>

ドラッグでの移動が行われた際にはsvgタグのtranslate属性を更新し、拡大が行われた際にはviewBox属性を更新することで、pan/zoom機能を実装しています。

Web InspectorのElementsタブを開いて、操作によってSVGタグの属性値がどのように変わるのか確認すると、理解しやすいかもしれません。

<a href="http://shimz.me/blog/wp-content/uploads/2013/02/vboxzoom2.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/vboxzoom2-300x189.jpg" alt="vboxzoom2" width="300" height="189" class="aligncenter size-medium wp-image-2528" /></a>


参考
<a href="http://www6.airnet.ne.jp/manyo/xml/svg/step2.html">SVGの座標</a> (viewBox属性について）

<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_04.htm">図形の変形</a> (transform属性について)

<a href="http://msdn.microsoft.com/ja-jp/library/gg589508(v=vs.85).aspx">SVG でズームやパンを行う方法</a>






]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2526</wp:post_id>
		<wp:post_date>2013-02-03 14:28:09</wp:post_date>
		<wp:post_date_gmt>2013-02-03 05:28:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2526</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2527]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-viewbox%e5%b1%9e%e6%80%a7%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9fpanzoon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427403810;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3670;}i:1;a:1:{s:2:"id";i:2607;}i:2;a:1:{s:2:"id";i:2993;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptでフォトレタッチ(画像処理）を行うライブラリ「Pixastic」</title>
		<link>http://shimz.me/blog/pixastic/2534</link>
		<pubDate>Mon, 04 Feb 2013 06:48:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2534</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/pixastic/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/pixsticexm.jpg" alt="pixsticexm" width="522" height="304" class="aligncenter size-full wp-image-2542" /></a>

以前、「<a href="http://shimz.me/blog/javascript/238">javascriptで自動着色やってみた。</a>」という記事で、モノクロのコミック画像に着色をするautocolorというPixasticの自作アクション（エフェクト）を作成したのですが、「<a href="http://www.pixastic.com/lib/">Pixastic</a>」本体について改めて紹介してみたいと思います。


<a href="http://www.pixastic.com/lib/">Pixastic</a>


PixasticはJavaScriptで画像にぼかしをかけたり、トリミングや明るさ・コントラストの調整など様々な加工を行うことができるライブラリです。

詳しい内容は、Documentationの「<a href="http://www.pixastic.com/lib/docs/">Introduction</a>」にデモがあるのでそちらで確認できます。

また、このライブラリを使用して作られた同名のオンラインフォトレタッチサービスがありますので、それを使ってみることでこのライブラリのポテンシャルを知る事ができます。

<a href="http://editor.pixastic.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/epixastic.jpg" alt="epixastic" width="600" height="295" class="aligncenter size-full wp-image-2537" /></a>
<a href="http://editor.pixastic.com/">Pixastic Editor</a>
（先ほど試したらファイルアップロードができなくなっているようです。Sample Imagesからは画像が読み込めるので、その画像でならどのような加工がおこなえるのか試せます）


残念ながからcanvasを使用するため、モダンブラウザでないと一部アクションが動作しません。
（ぼかしや反転などのアクションはcanvasが使えないIEにも対応しています）

<h2>使用方法</h2>
pixasticコアライブラリと使用するアクションファイルを読み込みます。
 
<pre class="lang:xhtml decode:true " >&lt;script type=&quot;text/javascript&quot; src=&quot;pixastic/pixastic.core.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;pixastic/actions/brightness.js&quot;&gt;&lt;/script&gt;
</pre> 

画像(imgオブジェクト）にアクションを実行します。
 
<pre class="lang:js decode:true " >window.onload = function(){
	   var img = new Image();
	   img.src = &quot;01.jpg&quot;;   //イメージオブジェクトの読み込み 

	   
	  img.onload = function() {  //イメージの読み込みが完了したら実行されるコールバック
		var newimg = Pixastic.process(
			img,
			&quot;brightness&quot;,	// 使用するアクションの名前

			{		// オプション

				&quot;brightness&quot; : 120,	// 明るさ指定
				&quot;contrast&quot; : 0.5,	// コントラスト指定
				&quot;rect&quot; : {		// エフェクトを掛ける範囲指定
					&quot;left&quot; : 100,
					&quot;top&quot; : 100,
					&quot;width&quot; : 200,
					&quot;height&quot; : 150
				}
			}
		)
		document.body.appendChild(img);  //元画像をbodyに追加(img要素)		
		document.body.appendChild(newimg);  //加工済画像をbodyに追加(canvas要素)		
	  }

}</pre> 

<a href="http://shimz.me/example/pixastic/01/">example</a>

process関数の戻り値はcanvas要素になるので、加工したデータをimg要素として追加したい場合は、toDataURL()を使ってデータURIスキームに変換してください。
 
<pre class="lang:js decode:true " >var newImgElm = new Image();
newImgElm.src = newimg.toDataURL()  
newImgElm.onload = function(){
	document.body.appendChild(newImgElm);  //加工済画像をbodyに追加(img要素)		
}
</pre> 


<hr>
■ CSSのクラスでエフェクトをかける
もっと簡単に、imgタグのclass属性にアクションを指定するだけで画像を加工するという方法もあります。
 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;Pixastic css&lt;/title&gt;

&lt;script&gt;
var pixastic_parseonload = true;  //ライブラリの読み込みより先に記述しないとダメ
&lt;/script&gt;
&lt;script src=&quot;pixastic/pixastic.core.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;pixastic/actions/invert.js&quot;&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;h2&gt;Pixastic css&lt;/h2&gt;

&lt;img src=&quot;01.jpg&quot; class=&quot;pixastic pixastic-invert(rect=50,50,150,150)&quot;/&gt; 
&lt;/body&gt;
&lt;/html&gt;
</pre> 

<a href="http://shimz.me/example/pixastic/01/css.html">example</a>

たったこれだけ、非常に簡単ですね。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2534</wp:post_id>
		<wp:post_date>2013-02-04 15:48:52</wp:post_date>
		<wp:post_date_gmt>2013-02-04 06:48:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2534</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="pixastic"><![CDATA[Pixastic]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2542]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%a7%e3%83%95%e3%82%a9%e3%83%88%e3%83%ac%e3%82%bf%e3%83%83%e3%83%81%e7%94%bb%e5%83%8f%e5%87%a6%e7%90%86%ef%bc%89%e3%82%92%e8%a1%8c%e3%81%86%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427269929;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3058;}i:1;a:1:{s:2:"id";i:238;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SQL]PostgreSQLの幾何データ演算子TIPS</title>
		<link>http://shimz.me/blog/sql/2556</link>
		<pubDate>Wed, 06 Feb 2013 03:02:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2556</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/posGeometry.jpg" alt="posGeometry" width="406" height="284" class="aligncenter size-full wp-image-2557" />


PostgreSQLには豊富な幾何データ型と幾何データを扱うための演算子があります。

<a href="http://www.postgresql.jp/document/8.1/html/datatype-geometric.html">幾何データ型</a>
<a href="http://www.postgresql.jp/document/8.1/html/functions-geometry.html">幾何関数と演算子</a>

主に地理データを扱う時に使用することが多いのですが、地理データ以外に使っても便利な効果が得られます。

例えば、ある二つのデータ（ここでは、「価格」と「大きさ」とします)が、最大値からどれだけ離れているかを求めたい場合は、以下のクエリで最大値からの距離が求めることができます。
（先に求めておいた最大値と比較したいカラムを、それぞれpoint型に型変換したのち「<->」演算子で２点の距離を出力します）

 
<pre class="lang:pgsql decode:true " >SELECT point(price, itemSize) &lt;-&gt; point(maxPrice, maxItemSize) from example_table
</pre> 

あるいは、複数のカラムの値が、ある範囲内に収まっているかどうか？　は以下のクエリで判定することができます。
 
<pre class="lang:pgsql decode:true " >select box(point(price, itemSize), point(cost, amant)) ~ box(point(5000, 60), point(1200, 10)) from example_table
</pre> 

各カラムの値が、指定した範囲内に収まっていれば「真」が返ってきます。

その他にも、データが指定した範囲より右に有るか左にあるか？という比較が行えたり、boxの中心点の距離を取得することで、「どのくらい似ているか？」の指標が得られたりするので、簡単なレコメンドやクラスタリングなどを行いたいときに、使ってみると面白いかもしれません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2556</wp:post_id>
		<wp:post_date>2013-02-06 12:02:10</wp:post_date>
		<wp:post_date_gmt>2013-02-06 03:02:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2556</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2557]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[sqlpostgresql%e3%81%ae%e5%b9%be%e4%bd%95%e3%83%87%e3%83%bc%e3%82%bf%e6%bc%94%e7%ae%97%e5%ad%90tips]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427284398;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2670;}i:1;a:1:{s:2:"id";i:2977;}i:2;a:1:{s:2:"id";i:4152;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SQL]SELECT文で行(レコード)同士の相関係数を取得する</title>
		<link>http://shimz.me/blog/sql/2564</link>
		<pubDate>Fri, 08 Feb 2013 01:34:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2564</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000000.jpg" alt="pear000000" width="435" height="164" class="aligncenter size-full wp-image-2565" />

例えば、上記のようなデータがあったとして、列同士の相関係数はcorr関数を使う事で簡単に取得することができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000001.jpg" alt="pear000001" width="434" height="166" class="aligncenter size-full wp-image-2566" />
 
<pre class="lang:pgsql decode:true " title="a列とc列の相関係数を求める" >select corr(a, c) from example_tb
</pre> 


しかし、時として行同士の相関係数を取得したい場合があります。
<a href="http://shimz.me/blog/other/2564/attachment/pear000002" rel="attachment wp-att-2567"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000002.jpg" alt="pear000002" width="435" height="172" class="aligncenter size-full wp-image-2567" /></a>
上記のデータだと、id:1のレコードに対してid:3のレコードとの相関係数が欲しいのですが……求め方がわかりません orz
仕方がないので、SELECT文の中でピアソンの積率相関係数計算を行って、相関係数を求めることにします。（もっと簡単に取得できる方法がありましたら教えてください）

id:1のレコードに対して他のレコードのピアソン相関係数を取得するSELECT文は以下となります。(対象とするのは、a,b,c,d,e の5項目とします)
 <pre class="lang:pgsql decode:true " title="id:1のレコードに対して、他のレコードとの相関係数を取得する">SELECT
x.id, x.a, x.b, x.c, x.d, x.e,
(
    (
        (x.a*y.a)+(x.b*y.b)+(x.c*y.c)+(x.d*y.d)+(x.e*y.e) 
    )
    -
    (
        (x.a+x.b+x.c+x.d+x.e)*(y.a+y.b+y.c+y.d+y.e)/5
    )
)
/
NULLIF(
	(
	    sqrt(
	            (
	                (pow(x.a,2)+pow(x.b,2)+pow(x.c,2)+pow(x.d,2)+pow(x.e,2)) 
	                - 
	                (x.a+x.b+x.c+x.d+x.e)*(x.a+x.b+x.c+x.d+x.e)/5
	            )
	            *
	            (
	                (pow(y.a,2)+pow(y.b,2)+pow(y.c,2)+pow(y.d,2)+pow(y.e,2)) 
	                - 
	                (y.a+y.b+y.c+y.d+y.e)*(y.a+y.b+y.c+y.d+y.e)/5 
	            )
	        )
	 
	)
,0)
as pearson
from 
example_tb x,
example_tb y
where y.id = 1 
order by pearson DESC</pre> 

上記クエリを実行した結果が以下です。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000003.jpg" alt="pear000003" width="284" height="170" class="aligncenter size-full wp-image-2568" />

正の相関関係にあたる、自分自身のレコードには「１」が、負の相関関係にあたるid:2のレコードに大しては「-1」がちゃんと返ってきました。同じカラムに入っている値が近いほど、1に近い値が返ってきます。

５項目全て同じ値のレコードは相関を計ることができずNULLが返ります。
postgreSQLのcorr関数の仕様にあわせました。
あと、５項目の中にNULLが含まれていても上記の式では相関係数を計算できないのでNULLを返します。

ExcelのPEARSON関数を使って相関係数を求めた結果と比較してみます。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000004.jpg" alt="pear000004" width="543" height="215" class="aligncenter size-full wp-image-2569" />

ちょっと誤差が出ているのが気になりますが、まぁだいたい合ってますかね。

これで、行間の比較係数を取得することができました。
比較対象とする項目(カラム)が増える毎に、クエリを修正しなくてはならないので使い勝手はいまいちですが。

相関係数の計算式は下記書籍を参考にさせていただきました。
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4873113644&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<hr>
<h2>備考</h2>

上記コードでpow関数を使わずにベキ乗計算をおこなっている部分があります。
なぜか、ここでpow関数を使うと数値がずれるので回避策としてpow関数を使わずベキ乗計算をしています。

<pre class="lang:pgsql decode:true mark:17,23" title="正しく計算される">select
(
	(
		(5*5)+(3*3)+(5*5)+(3*3)+(5*5)
	)
	-
	(
		(5+3+5+3+5)*(5+3+5+3+5)/5
	)
)
/
(
	sqrt(
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				((5+3+5+3+5)*(5+3+5+3+5))/5  
			)
			*
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				((5+3+5+3+5)*(5+3+5+3+5))/5  
			)
		)
)</pre> 
➡1

 
<pre class="lang:pgsql decode:true mark:17,23" title="正しく計算されない">select
(
	(
		(5*5)+(3*3)+(5*5)+(3*3)+(5*5)
	)
	-
	(
		(5+3+5+3+5)*(5+3+5+3+5)/5
	)
)
/
(
	sqrt(
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				pow((5+3+5+3+5),2)/5  
			)
			*
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				pow((5+3+5+3+5),2)/5  
			)
		)
)
</pre> 


➡1.04166666666667

同じ計算をしているはずなのに……なぜ？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2564</wp:post_id>
		<wp:post_date>2013-02-08 10:34:50</wp:post_date>
		<wp:post_date_gmt>2013-02-08 01:34:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2564</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2568]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[sqlselect%e6%96%87%e3%81%a7%e5%88%97%e3%83%ac%e3%82%b3%e3%83%bc%e3%83%89%e9%96%93%e3%81%ae%e7%9b%b8%e9%96%a2%e4%bf%82%e6%95%b0%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374711;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3295;}i:1;a:1:{s:2:"id";i:2701;}i:2;a:1:{s:2:"id";i:948;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gunmaweb #12に参加してきました。</title>
		<link>http://shimz.me/blog/other/2570</link>
		<pubDate>Sun, 10 Feb 2013 09:40:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2570</guid>
		<description></description>
		<content:encoded><![CDATA[地元群馬県で行われた勉強会、<a href="http://atnd.org/events/35921">Gunmaweb #12</a>に参加しました。

初参加だったのですが、参加者は32人とのことで大盛況。
普段会社にこもっているので、群馬にこんなにも同じ業界の方が居たんだ！　ということにまずビックリするというｗ
「やはり社外へと出て行かないといかんな」と新ためて感じた次第です。

次回は２か月後ということなので、ぜひまた参加したいと思います。

&nbsp;

&nbsp;

<hr>
以下、今回行われたライトニングトーク/プレゼンの感想


<strong>「正解がわかりません」 LT <a href="https://twitter.com/korogaru">@korogaru</a> さん</strong>
A/Bテストという、２種類のページを作成しトラフィックを分けて効果を測定する最適化手法についてプレゼンされていました。
一応、知ってはいたのですが実際に試したことはいままでなかったので、cookieを使って振り分けの確立を調整するなど、具体的なノウハウが聞けてありがたかったです。「あと測定する値を間違えると、効果についてまったく違った結論をだしてしまうことになるので気を付けなければいけない」など、ちょうどKindleで「<a href="http://www.amazon.co.jp/dp/B00B42SXH0/ref=kinw_dp_ke">統計学が最強の学問である</a>」を読んでいたところだったので、自分的にホットな話題でした。
仕事では、なかなか周囲を説得するのがまだまだ難しいので、ひとまず自分のサイトで試してみたいですね。

&nbsp;

<strong>「vimをつくってみた」 LT <a href="https://twitter.com/tsurumau">@tsurumau</a> さん</strong>
「JavaScriptのゲームエンジン<a href="http://impactjs.com/">Impact</a>でvim作った」、というまさに「その発想はなかったわー」というプレゼンでした。
vimクローンでありながら、独自コマンドで猫がミサイルぶっ放したり。
（何を言ってるのか わからねーと思うが……）
Impactについては、以前「<a href="http://matome.naver.jp/odai/2134682461157875201">Javascript 2Dゲームエンジンまとめ</a>」を作ったときに気にはなっていたのですが、有料のライブラリだったので手が出せなかったので具体的な使用例を知れてうれしいです。
同じ作者さんが作られている「Ejecta」(*1)も非常に興味深いので、今後目が離せないライブラリだと思いました。

&nbsp;

<strong>「Photoshopの自動処理で効率作業」 LT <a href="https://twitter.com/caz0404">@caz0404</a> さん</strong>
Photoshopのアクション機能について紹介されていました。
いわゆるエディタなどの録画マクロ（録画→操作→録画終了で再生を押すと操作が再生される）機能のようで、画像の明るさ調節などをアクションにしておくことで複数の画像を一括で処理することができるとのことでした。私はPhotoshopそのものにあまり触ることがないので、デザイナーさんの作業効率化のノウハウなどを聞けたのは興味深かったですね。
あと、おまけで紹介されていたPhotoshopの新機能(?)が凄かったです。
画像の一部を切り取って移動したら自動的に背景に合うように処理してくれる、みたいな」
（うまく説明できない　orz）

&nbsp;

<strong>「モダンすぎる静的サイトの作り方」 LT <a href="https://twitter.com/yterajima">@yterajima</a> さん</strong>
WEBサイト作成の生産性向上のために今や欠かせなくなりつつあるメタ言語。
CSSメタ言語の<a href="http://less-ja.studiomohawk.com/">Less</a>や<a href="http://sass-lang.com/">sass</a>、Javascriptメタ言語の<a href="http://ja.wikipedia.org/wiki/CoffeeScript">CoffeeScript</a>などが有名ですが、HTMLの記述を効率化する<a href="https://github.com/yterajima/slim/tree/README_ja">slim</a>というメタ言語について紹介されていました。
まったくその存在を知らなかったのですが、 記号含有率が低く構文も覚えやすいテンプレートエンジンですね、使ってみたいと思います。
また、メタ言語やテンプレートエンジンはどうしてもコンパイルするという手間が増えてしまうのが悩みの種ですが、それらをまとめて効率よく管理できる「<a href="http://middleman-guides.e2esound.com/">Middleman</a>」というサイトジェネレータについても教えていただきました。

&nbsp;

<strong>「エンジニアがTRPGをやるべき理由 〜隣り合わせの遊びと技術〜」 LT <a href="https://twitter.com/parrot_studio">@parrot_studio</a> さん</strong>
「TRPG=agile」とのことで、二つの共通点について話されいました。
中学生の頃、ソードワールドにハマってリプレイやルールブックなどを読み漁ったのですが、実際に体験したことはないのですが、説明を聞いていて「目標に向けて複数人協力しながら進めていく様」というのは、まさにプロジェクトだなと感じました。GM=PMとも言えるなぁ、と。
TRPGを共同で遊ぶなかで発生する問題や障害は、その他のプロジェクトで起きる問題と共通していて、だからこそ経験として生きるのでしょうね。
ちなみに、私はTRPGというと「<a href="http://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6%E3%83%A9%E3%83%B3">シャドウラン</a>」の世界観が凄い好きだったのですが、久々に思い出して調べてみたら……販売中止になっていました orz


&nbsp;

<strong>「javascriptで苦戦した経験」 LT <a href="https://twitter.com/kanayannet">@kanayannet</a></strong>
Javascriptのハマりどころやその解決方法についてプレゼンされてました。
こういう、ノウハウやトラブルシュートについての情報とかありがたいですね。
特に私のように、あまり周囲にエンジニアが居ない環境だったりするとどうしてもそういった情報に疎くなってしまうので。
（プライベートブラウズONにしていると、Mobile SafariでlocalStorageが使えない、とかはじめて知りました）
あと、iOS6のキャッシュ問題はやはりみなさん苦労しているみたいですね。


&nbsp;

<strong>「MTCafe Gunma 2013へのお誘い」 LT <a href="https://twitter.com/hjfuji">@hjfuj</a>i さん</strong>
来月、3/1に行われる「<a href="http://kokucheese.com/event/index/71371/">MTCafe</a>」といイベントと、MTの現状についてプレゼンされていました。
MTについては、最近話題を追っていなかったのでかなり疎くなっていましたが……いつの間にかMTの開発の中心が日本に移っていたというはビックリしまた。
開発元になっている会社(Six Apart, Ltd.)が国内にあるというのは、ある意味心強いですね。
文字コードがらみでハマったりすることがとかないでしょうし。(海外のマイナーなCMSとかで遊んでたりするとたまにハマったりするので）
2004年頃から始まったblogブームの立役者でもあり、実績も十分。パートナー会社も多いですし、企業ユース使うならWordpressより向いているのかもと思いました。
個人ユースでは、今のところWordpressの「テンプレート？　php直書きですがなにか？」という手軽さがなかなか手放せなかったりしますがｗ

&nbsp;

<strong>「Koi::Bana」LT <a href="https://twitter.com/clicktx">@clicktx</a> さん</strong>
始まって数分間は「婚約会見が始まるのかな？」と思いましたが、婚約したのは「SubLime Text」とだったようですｗ
<a href="http://shimz.me/blog/editor/74">Komodo Edit</a>派ではありますが、やはり他のエディタは気になりますし、<a href="http://liginc.co.jp/designer/archives/6774">”恋に落ちるエディタ”「Sublime Text」</a>といえば注目の的なので捨て置けません。
「ちょっと、いいかも」なんて心が揺らぎましたが、私も負けずにKomod Editをプッシュしていきたいと思います。

&nbsp;

<strong>「Nuuk Jam」 LT <a href="https://twitter.com/ivoryworks">@ivoryworks</a> さん</strong>
テキストをURLエンコードして疑似URLを作り、それをGoogle URL Shortenerに送って短縮URLに変換する……つまり短縮URLをデータの保存に使ってしまおうという、これまた「その発想はなかったわー」なプレゼンでした。
テキストだけでなく、画像もdata URI Schemeにして分割しそれぞれを短縮URLに変換、変換した短縮URLをまとめてさらに短縮URLを作る……という凄技。
Base64にエンコードしてしまえば、サイズの問題はありますが基本的にどんな形式のファイルでも短縮URL化できると思うので、秘密なファイルを短縮URL化して保存しておくとかできそうです（夢がひろがるますね！）
一番の問題点は、Googleに見つかるとバンされそうというところですがｗ 


&nbsp;

&nbsp;


<hr>
*1 <a href="http://impactjs.com/ejecta">Ejecta</a>
通常、ImpactやEnchant.jsなどのJavascriptエンジンで作ったゲームをPhoneGap等でアプリ化すると、作成したゲームはWebView の中で実行されるため処理速度がmobile safariで見たときよりも遅れることになります。
Ejectaは、独自に実装したcanvas APIを持ち、Javascriptで書かれた描画処理をopenGLで、またサウンドをopenALで実行するという、「そこまでするか！」という驚愕のフレームワークです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2570</wp:post_id>
		<wp:post_date>2013-02-10 18:40:27</wp:post_date>
		<wp:post_date_gmt>2013-02-10 09:40:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2570</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2004]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gunmaweb-12%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426953071;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3335;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:3515;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[Gunma.web#12に参加しました - e2esound.com業務日誌]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.e2esound.com/wp/2013/02/10/gunmaweb12%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%be%e3%81%97%e3%81%9f/</wp:comment_author_url>
			<wp:comment_author_IP>112.78.112.148</wp:comment_author_IP>
			<wp:comment_date>2013-02-10 21:49:27</wp:comment_date>
			<wp:comment_date_gmt>2013-02-10 12:49:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 12回目を迎えた群馬で開催されるそっち系の人向け勉強会Gunma.web#12に参加しました。個別の発表については_shimizuさんのブログ記事 Gunmaweb #12に参加してきました。 | GUNMA GIS GEEK に詳しいです。 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360500567.7833659648895263671875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360536916.7078800201416015625;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Macでアスキーアートが崩れてしまう問題を回避する(webフォント)</title>
		<link>http://shimz.me/blog/troubleshooting/2573</link>
		<pubDate>Mon, 11 Feb 2013 11:31:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2573</guid>
		<description></description>
		<content:encoded><![CDATA[ただし、日本語を含むAAは無理。

<a href="http://shimz.me/labo/video_canvas/badapple/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/130211-0002.png" alt="130211-0002" width="753" height="630" class="aligncenter size-full wp-image-2574" /></a>

以前、canvasタグについて勉強していたときに、動画をアスキーアートに変換するスクリプトをつくってみたのですが、Macのブラウザで閲覧するとAAを動かしたときにどうしても崩れてしまい、解決策も思いつかずに放置していました。

preタグで囲ってmonospacedを指定しても崩れまくり、<a href="https://www.google.co.jp/search?q=%E7%AD%89%E5%80%8D+mono&oq=%E7%AD%89%E5%80%8D+mono&aqs=chrome.0.57j62.4365&sourceid=chrome&ie=UTF-8#hl=ja&safe=off&tbo=d&sclient=psy-ab&q=mac+%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%88&oq=mac+%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%88&gs_l=serp.3..0j0i30l5j0i8i30l2.52697.57401.2.57798.17.16.1.0.0.2.146.1535.11j5.16.0...0.0...1c.1j4.2.serp.nlht5ZbmBK8&pbx=1&bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&bvm=bv.42080656,d.aGc&fp=e35fca99988c77f2&biw=1362&bih=651">ググって</a>みても、クライアントにフォントをインストールするぐらいしか方法がなさそうだったので、webサイトでは無理かなーと。

最近になって「そういえばWebフォントなんてものがあったな」と思い出し試してみたところわりと巧くいったので、メモしておきます。

とはいっても、単純にwebフォント読み込むCSSを指定しただけなんですが。
使ったのは<a href="http://www.google.com/webfonts">Google WebFonts</a>からダウンロードした「<a href="http://www.google.com/webfonts/specimen/VT323">VT323</a>」です。
落としたフォントファイルをサーバーにアップして、あとはCSSでフォントの読み込みと指定を行うだけです。

 
<pre class="lang:css decode:true " >@font-face {
   font-family: MyWebFont;
   src: url('VT323-Regular.ttf') format(&quot;truetype&quot;);
}

pre{
   font-family: MyWebFont;
}
</pre> 


これで、Macで見ても文字が崩れることがなくなりました。
まぁ、日本語は当然ダメなままなので、使いどころは限られますが。

アルファベットはデータ量少なくてうらやましい……

<a href="http://shimz.me/labo/video_canvas/badapple/">example</a>
chrome or Firefoxでないと動きません。
初回アクセス時は、動画とwebフォントの読み込みで表示されるまでに時間がかかります。









]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2573</wp:post_id>
		<wp:post_date>2013-02-11 20:31:31</wp:post_date>
		<wp:post_date_gmt>2013-02-11 11:31:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2573</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2574]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[mac%e3%81%a7%e3%82%a2%e3%82%b9%e3%82%ad%e3%83%bc%e3%82%a2%e3%83%bc%e3%83%88%e3%81%8c%e5%b4%a9%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e5%95%8f%e9%a1%8c%e3%82%92%e5%9b%9e%e9%81%bf%e3%81%99]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308755;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:2609;}i:2;a:1:{s:2:"id";i:2933;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 SVGで路線図を描く</title>
		<link>http://shimz.me/blog/d3-js/2575</link>
		<pubDate>Tue, 12 Feb 2013 12:31:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2575</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo5/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/rosen1.jpg" alt="rosen1" width="673" height="622" class="aligncenter size-full wp-image-2576" /></a>


<a href="http://shimz.me/example/d3js/geo_example/geo5/">example</a>

今までやってきた内容の復習に、D3.jsを使って路線図を描いててみました。
当初は、バスの路線図を作っていたのですが、群馬県内に絞ってもバス停やバスルートの情報量が多く、重くて大変だったので途中で路線変更しました。

鉄道データは、いつものごとく<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N02.html">国土数値情報</a>より。

*Quantum GISは正式にQGISに名称が変更されました。

<a href="http://qgis.org/ja/site/">QGIS</a>

鉄道データ(Shape)を<a href="http://www2.qgis.org/ja/site/">Quantum GIS</a>に読み込み、群馬県内を選択、選択したレイヤーをいったん切り出しShapeで保存、<a href="http://mapshaper.com/test/MapShaper.swf">MapShaper</a>で簡素化。
再度、Quantum GISに読み込んでGeoJSONに変換。
また、鉄道(線)データだけTopoJSONに変換しています。
(点データはTopoJSONに変換してもさほど軽量化の恩恵が得られないみたいなのでそのままつかってます）
途中、Quantum GISの属性データの文字化け問題に悩まされましたが、下記サイトを参考にさせてもらい解決。
<a href="https://sites.google.com/site/qgismemo/010-dao-ru/qgis1-8no-wen-zi-huake-dui-chu-fa">QGIS1.8の文字化け対処法</a>
とりあえず、形にはなったかなと。
パン／ズーム機能についてはviewBox属性を使用。
projectionのscaleを使った方が正確だし見やすくなるのですが、そうするとどうしても最描画が必要になって重くなるので。
(でも、鉄道データはバスデータに比べて大分小さくなったので、scale使ってもさほど重くならないかもしれません)

この辺りの行程は、過去記事を参照ください。


<a href="http://shimz.me/blog/d3-js/2351">鶴舞う形の群馬県をSVGで描いてみる</a>
<a href="http://shimz.me/blog/d3-js/2379">Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</a>
<a href="http://shimz.me/blog/d3-js/2526">viewBox属性を使ったPan/Zoon</a>

■今後の課題
<ul>
	<li>viewBox属性を使ったパン／ズームだとラベルの位置指定が難しい。</li>
	<li>svg要素が重なり合う時のコントロール(z-indexがsvgでは効かないので……どうしよう）</li>
	<li>バスのデータみたいに情報量が多い場合は「見えている範囲内のデータだけ読み込む」ような処理が必要</li>
</ul>

<s>当面、一番の問題は重なり合いのコントロールですかね。
DOMに追加する順番で重なり合いを操作したいところですが、d3.jsonなど非同期で読み込んでいるとどうしても一番上に置きたい要素が、他の要素の下に隠れてしまったりします。
あとは、追加後にDOMを並べ替えるか。
参照：<a href="http://stackoverflow.com/questions/6566406/svg-re-ordering-z-index-raphael-optional">SVG re-ordering z-index (Raphael optional)</a>
う〜ん、めんどくさい。
</s>
始めにレイヤー構造を含んだsvgを作っておいてそこに追加していくだけで解決しました（＾＾；）
完全に失念していて、Twitterで教えてもらうまでまったく気付きませんでした orz


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2575</wp:post_id>
		<wp:post_date>2013-02-12 21:31:29</wp:post_date>
		<wp:post_date_gmt>2013-02-12 12:31:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2575</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2576]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427376899;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2135;}i:1;a:1:{s:2:"id";i:2670;}i:2;a:1:{s:2:"id";i:4052;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-svg%e3%81%a7%e8%b7%af%e7%b7%9a%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>305</wp:comment_id>
			<wp:comment_author><![CDATA[Over 2000 D3.js Examples and Demos | TechSlides]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techslides.com/over-2000-d3-js-examples-and-demos/</wp:comment_author_url>
			<wp:comment_author_IP>107.170.15.66</wp:comment_author_IP>
			<wp:comment_date>2014-02-03 00:07:45</wp:comment_date>
			<wp:comment_date_gmt>2014-02-02 15:07:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Example of map with routes in Gunma [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391381475.139503955841064453125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391353665.0647900104522705078125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>[Komodo Edit]マクロを使う</title>
		<link>http://shimz.me/blog/editor/2579</link>
		<pubDate>Wed, 13 Feb 2013 09:57:18 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2579</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>の続きです。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000007.jpg" alt="macro000007" width="258" height="279" class="aligncenter size-full wp-image-2588" />


Komodo Editのマクロ機能はスニペット機能以上に多機能でとても紹介しきれません。
どのくらい高機能かというと、マクロ機能でチェスゲームが作れるぐらい高機能です。(下記動画参照)
<iframe width="560" height="315" src="http://www.youtube.com/embed/8AtxvfyZMSQ" frameborder="0" allowfullscreen></iframe>
ちなみにこの動画、制作元「ActiveStateSoftware」の公式動画です。バカですね―良い意味で。
詳細については、公式の「<a href="http://docs.activestate.com/komodo/4.4/macroapi.html">Macro API Reference</a>」を参照していただくとして、Komodo Editマクロ機能の特徴を紹介したいと思います。

&nbsp;

<strong>■ マクロの録画</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000001.jpg" alt="macro000001" width="110" height="32" class="aligncenter size-full wp-image-2580" />
もっとも簡単なマクロの作成方法です。
録画ボタンを押してキーストロークを録画します。

&nbsp;

<strong>■ スクリプティング</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000000.jpg" alt="macro000000" width="860" height="682" class="aligncenter size-full wp-image-2581" />
Komodo Editのマクロは、JavaScript／Pythonで記述します。
基本的にはJavaScriptが標準のようです。
マクロ作成は、Toolbox上で右クリック Add→new Macro、編集は右クリック「properties」から行ってください。
また、Toolbox上のmacroをドラッグしてエディタ上にドロップするとワークスペースでマクロの編集が行えます。この場合、マクロの編集に補完機能が効くので編集が楽になります。

&nbsp;

<strong>■ マクロの実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000002.jpg" alt="macro000002" width="252" height="242" class="aligncenter size-full wp-image-2583" />
Toolbox上でmacroをダブルクリックすると実行します。
Ctrl+Shift+Kで呼び出して使ったり、各マクロにキーバインドを指定して実行することができます。
後述しますが、エディタのキーバインドをviエミュレートモードにしていると、viコマンドとしてマクロを実行することができます。

&nbsp;

<strong>■ バックグラウンドでの実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000003.jpg" alt="macro000003" width="292" height="142" class="aligncenter size-full wp-image-2584" />

propertiesの「Run in Background」にチェックを入れるとマクロをバックグラウンドで実行することができます。

&nbsp;

<strong>■ イベントトリガーで実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000004.jpg" alt="macro000004" width="860" height="682" class="aligncenter size-full wp-image-2585" />
作成したマクロは、イベントを通じて自動的に実行することができます。
設定できるイベントは以下
<ul>
	<li>Komodo Edit の起動プロセス終了後(On startup)</li>

	<li>ファイルオープン後(After file open)</li>

	<li>ファイルを保存する直前(Before file save)</li>

	<li>ファイルの保存が完了した後(After file save)</li>

	<li>ファイルクローズ直前(Before file close)</li>

	<li>ファイルクローズ後(After file close)</li>

	<li>Komodo Editの終了時(On shutdown)</li>

	<li>システム通知を受けた時(On a system notification)</li>
</ul>


なお、イベントによって複数のマクロが実行される場合Rankが高いものが優先されます。

「Before file save」「Before file close」「On shutdown」をトリガーとしたマクロでは、マクロ内で戻り値にnullを指定(return null)することで、保存・クローズ・終了の処理をキャンセルすることができます。

&nbsp;

<strong>■ viコマンドとしてマクロを実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000006.jpg" alt="macro000006" width="285" height="57" class="aligncenter size-full wp-image-2586" />
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000005.jpg" alt="macro000005" width="248" height="49" class="aligncenter size-full wp-image-2587" />
Komodo EditのPreferences→Editor→Key Bindings→Key Binding Schemesで「vi」を指定している場合、作成したマクロをviコマンドとして実行できます。(Viエミュレートモード)
※Toolboxに「Vi Commands」というフォルダを作成しその中にマクロを保存することで使用できるようになります。

&nbsp;

■ マクロを探す
以下リンク先でさがしてみてください。

<a href="http://community.activestate.com/forums/komodo-macros-and-extensions">Komodo Macros and Extensions</a>

&nbsp;

【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>
&nbsp;

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2579</wp:post_id>
		<wp:post_date>2013-02-13 18:57:18</wp:post_date>
		<wp:post_date_gmt>2013-02-13 09:57:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit%e3%83%9e%e3%82%af%e3%83%ad%e3%82%92%e4%bd%bf%e3%81%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2588]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427330674;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2519;}i:1;a:1:{s:2:"id";i:74;}i:2;a:1:{s:2:"id";i:148;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「モンサントの不自然な食べもの」</title>
		<link>http://shimz.me/blog/movie/2590</link>
		<pubDate>Mon, 18 Feb 2013 02:42:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2590</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/filmrental_img_dl-002-e1361155373291.jpg" alt="filmrental_img_dl-002" width="500" height="331" class="aligncenter size-full wp-image-2592" />

<a href="http://takasaki-cc.jp/top">シネマテーク高崎</a>にて上映していたので観てきました。

<a href="http://www.uplink.co.jp/monsanto/">映画『モンサントの不自然な食べもの』公式サイト</a>

<iframe width="560" height="315" src="http://www.youtube.com/embed/9YxO4RFffXE" frameborder="0" allowfullscreen></iframe>


GMO(遺伝子組み換え)作物のシェア90%を占めるモンサント社の疑惑を調査したドキュメンタリー。

モンサント社を追っかけているジャーナリストが、新たな用語や、登場人物、疑惑などを知るたびにググって調査し、取材を繰り返すという構成が面白かったです。（この構成は、モンサント社からの訴訟攻撃を避ける意味もあったそうですが）

多少バイアスを考慮したとしても、これを見る限りではGMO作物の安全性はまだまだ不安が残るなーという印象。

安全性以上に、GOM作物には特許が認められ独占販売が可能な点とFDA(アメリカ食品医薬品局)との癒着が問題を大きくしていると思いました。

GMO作物が含まれた食品であることを表記できなくしたのは、消費者から選択の自由を奪うことになっていると思うのですが、この辺アメリカの基準はよくわかりませんね。

厚生労働省の資料みたら、害虫抵抗性、除草剤耐性遺伝子が組み込まれたモンサント社の大豆は普通に日本でも安全性が確認された食品として入ってきてるんで、ちょっと不安。(「安全性審査が終了し公表された遺伝子組換え食品及び添加物リスト（平成25年1月31日現在版） 」にて確認)

<a href="http://www.mhlw.go.jp/seisakunitsuite/bunya/kenkou_iryou/shokuhin/idenshi/index.html">厚生労働省－遺伝子組換え食品とは</a>

作物種子の一社独占で競争相手なしってのはやっぱり怖いので、オープンソース化したGMO種子とか出てくるといいのかもしれません。(それはそれで怖いかもしれないけど)

遺伝子組み換え食品の実態を追ったドキュメンタリーとしては、今年の６月に「<a href="http://www.uplink.co.jp/sekatabe/">世界が食べられなくなる日</a>」という作品が公開されるらしいのでそちらも見に行きたいと思います。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2590</wp:post_id>
		<wp:post_date>2013-02-18 11:42:00</wp:post_date>
		<wp:post_date_gmt>2013-02-18 02:42:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8e%e3%83%a2%e3%83%b3%e3%82%b5%e3%83%b3%e3%83%88%e3%81%ae%e4%b8%8d%e8%87%aa%e7%84%b6%e3%81%aa%e9%a3%9f%e3%81%b9%e3%82%82%e3%81%ae%e3%80%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2591]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427389104;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2311;}i:1;a:1:{s:2:"id";i:2612;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javasriptの型につまずく（ローン計算）</title>
		<link>http://shimz.me/blog/javascript/2593</link>
		<pubDate>Wed, 20 Feb 2013 12:19:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2593</guid>
		<description></description>
		<content:encoded><![CDATA[普段、余り型を気にすることのないJavascriptですが、たまに数値を計算を行うコードを書く必要があると型を忘れてつまずくことがあります。
d3.jsでも数値データを扱うことが多いので注意が必要です。

下記はローン計算を行うExcelのRMT関数をJavascriptで実装したものですが、引数を「input typ="text"」から取得した場合、値の型は「String」型になるのでそのまま計算するとかなり大きな誤差がでます。
このような場合は「parseInt」や「parseFloat」関数を使って型変換を行う必要があります。
 
<pre class="lang:js decode:true " >//PMT関数
function pmt(rate_per_period, number_of_payments, present_value, future_value, type){
    if(rate_per_period != 0.0){
        var q = Math.pow(1 + rate_per_period, number_of_payments);
        return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));
    } else if(number_of_payments != 0.0){
        return -(future_value + present_value) / number_of_payments;
    }

    return 0;
}



window.onload = function(){
	var riritsu = $('input[name=riritsu]').val();	//0.005
	var kikan = $('input[name=kikan]').val();		//12
	var genzai = $('input[name=genzai]').val();		//150000
	var shourai = $('input[name=shourai]').val();	//0
	var kigen = $('input[name=kigen]').val();		//1

	//var shiharai = pmt(riritsu, kikan, genzai, shourai, kigen); //-&gt; -747 間違い
	var shiharai = pmt(parseFloat(riritsu), parseFloat(kikan), parseFloat(genzai), parseFloat(shourai), parseFloat(kigen)); //-&gt; -12846　正解
	$('input[name=shiharai]').val(Math.floor(shiharai));
}
</pre> 

&emsp;

参考
<a href="http://blog.goo.ne.jp/kori39/e/03d9ce6a3180e9a553644a763fc42542">javascriptのキャスト</a>

&emsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2593</wp:post_id>
		<wp:post_date>2013-02-20 21:19:52</wp:post_date>
		<wp:post_date_gmt>2013-02-20 12:19:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2593</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javasript%e3%81%ae%e5%9e%8b%e3%81%ab%e3%81%a4%e3%81%be%e3%81%9a%e3%81%8f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427313205;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3319;}i:1;a:1:{s:2:"id";i:3015;}i:2;a:1:{s:2:"id";i:3738;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>いまさらだけど「Kindle化リクエスト」ボタンはえげつなくていい。</title>
		<link>http://shimz.me/blog/other/2594</link>
		<pubDate>Thu, 21 Feb 2013 07:25:14 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2594</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000008.jpg" alt="macro000008" width="312" height="135" class="aligncenter size-full wp-image-2595" />
↑このボタン。
アマゾンでは、Kindle版が出ていない本すべてにこの「Kindle化リクエスト」ボタンが表示されます。
このボタンを購入ボタンの近くに設置するのは、アマゾンにとっては諸刃の剣のはずです。
なぜなら「Kindle版が無いので仕方なく、紙の本を購入するつもりだったユーザー」が、このボタンが画面内にあることによって紙の本の購入を控える可能性があるからです。

「とりあえずKindle化リクエスト投げて様子をみよう」と。

でも、アマゾンは付けています。

買い控えを考えるきっかけになりうるボタン。

そのボタンをKindle化されていない書籍全ての画面に設置しています。

ここにアマゾンの余裕と本気が伺えると思うのです。

同時に、このボタンを設置することでアマゾンは「Kindle版があったら買っていたかもしれないユーザー」の数をデータとして取得しています。

これは、出版社がKindle版を用意しなかったために失った「機会損失の数」でもあるわけです。

つまりアマゾンは紙の本の売り上げを一部犠牲にしながら、出版社を説得(脅迫)するためのデータをせっせと集めているともいえるわけですね。

なかなかにえげつない。

しかし、一向に腹が据わらない様子の国内の出版社を見ていると、アマゾンのえげつなさが頼もしく思えます。

ただでさえ、電子書籍とか関係なく紙の本の売り上げは年々さがっていて、さらにリアル書店の減少でアマゾンの影響力は大きくなっている現状なわけで、時間が経つほどに累積されていくKindle化リクエストは、プレッシャーとなって出版社に圧力をかけてくれるのではないかと期待しています。

そんなわけで全力でアマゾンを応援するとともに、楽天ブックスとか紀伊國屋書店BookWebとかは、早急に「Kobo化リクエスト」ボタンや「Kinoppy化リクエスト」ボタンを付けて欲しいとなと思います。



【余談】
<a href="http://www.sankeibiz.jp/business/news/121209/bsj1212091903003-n1.htm">「電子教科書」出版社は複雑な思い　重たい医学書から解放！学生は歓迎の声</a>
<blockquote>府立大によると、電子教科書を販売する条件として、紙の教科書と電子教科書の双方を購入することを挙げる社が複数出てくる可能性があるという。「そうなれば学生の金銭的負担が大きくなり、大学が電子教科書を推奨するわけにはいかなくなる」。高畑学部長はこう憂慮する。</blockquote>

売りたいんだか売りたくないんだか。もはや本末転倒以外のなにものでもないなぁ。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2594</wp:post_id>
		<wp:post_date>2013-02-21 16:25:14</wp:post_date>
		<wp:post_date_gmt>2013-02-21 07:25:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%84%e3%81%be%e3%81%95%e3%82%89%e3%81%a0%e3%81%91%e3%81%a9%e3%80%8ckindle%e5%8c%96%e3%83%aa%e3%82%af%e3%82%a8%e3%82%b9%e3%83%88%e3%80%8d%e3%83%9c%e3%82%bf%e3%83%b3%e3%81%af%e3%81%88%e3%81%92</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2595]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391921;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4122;}i:1;a:1:{s:2:"id";i:2876;}i:2;a:1:{s:2:"id";i:3222;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[GMaps API v3] ストリートビューを使う。 </title>
		<link>http://shimz.me/blog/map/2598</link>
		<pubDate>Fri, 22 Feb 2013 10:09:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2598</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/streetview/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/streetview000000-e1361527646935.jpg" alt="streetview000000" width="559" height="312" class="aligncenter size-full wp-image-2599" /></a>

<a href="http://sankei.jp.msn.com/region/news/130221/gnm13022102210003-n1.htm">ストリートビュー、２７市町村も対象に　グーグル　群馬</a>

グーグル グッジョブ! (￣∇￣ﾉﾉ"ﾊﾟﾁﾊﾟﾁﾊﾟﾁ!!

これまでは「ストビューなんて使えるのは、所詮一部の都会人だけ」と手を出さずに拗ねていましたが、これから心を入れ替えて勉強しようと思います。

とりあえず基本から。

 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;GMap Streetview example&lt;/title&gt;
&lt;script src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body onload=&quot;initialize()&quot;&gt;
&lt;h2&gt;GMap Streetview API　テスト &lt;/h2&gt;
&lt;div&gt;
    &lt;div id=&quot;map_canvas&quot; style=&quot;float:left;width: 400px; height: 300px&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;pano&quot; style=&quot;width: 400px; height: 300px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
    &lt;div id=&quot;panoInfo&quot; style=&quot;width: 425px; height: 240 px;&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Position&lt;/b&gt;&lt;/td&gt;&lt;td id=&quot;position_cell&quot;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;POV Heading&lt;/b&gt;&lt;/td&gt;&lt;td id=&quot;heading_cell&quot;&gt;270&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;POV Pitch&lt;/b&gt;&lt;/td&gt;&lt;td id=&quot;pitch_cell&quot;&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;input id=&quot;address&quot; type=&quot;textbox&quot; value=&quot;群馬県前橋市&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;検索&quot; onclick=&quot;addressSearch()&quot;&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre> 
<pre class="lang:js decode:true " >var map;
var geocoder = new google.maps.Geocoder();
var sv = new google.maps.StreetViewService();
var panorama;

    
function initialize() {
    defPos = new google.maps.LatLng(36.322161, 139.00613099999998);
    
    //地図初期化 
    var mapOptions = {
        center: defPos,
        zoom: 14,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

    //ストリートビュー初期化
    var panoramaOptions = {
        position: defPos,
        pov: {
            heading: 44,
            pitch: 13
        }
    };  
    panorama = new  google.maps.StreetViewPanorama(document.getElementById('pano'),panoramaOptions);
    map.setStreetView(panorama);
      
  
  
    //ストリートビューにeventListener登録
    google.maps.event.addListener(panorama, 'position_changed', function() {
        var positionCell = document.getElementById('position_cell');
        positionCell.firstChild.nodeValue = panorama.getPosition();
    });
    google.maps.event.addListener(panorama, 'pov_changed', function() {
        var headingCell = document.getElementById('heading_cell');
        var pitchCell = document.getElementById('pitch_cell');
        headingCell.firstChild.nodeValue = panorama.getPov().heading;
        pitchCell.firstChild.nodeValue = panorama.getPov().pitch;
    });     
}

//検索
function addressSearch(){    
    var address = document.getElementById('address').value;    
    geocoder.geocode({ 'address': address}, function(results, status){
        if(status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location); //地図移動
            
            sv.getPanoramaByLocation(    //指定された軽度緯度上にストリートビューが存在するかチェック
                results[0].geometry.location,
                500, //検索範囲(m)
                function(svData,svStatus){
                    if(svStatus == google.maps.StreetViewStatus.OK){
                        panorama.setPosition(svData.location.latLng);    //ストリートビュー移動                        
                    }else{
                        alert(&quot;ストリートビュー対象外の地域です。&quot;)
                    };
                }
            );
        } else {
             alert('座標の取得に失敗しました: ' + status);
        }
    });
} 
</pre> 


<a href="http://shimz.me/example/gmapv3/streetview/01/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2598</wp:post_id>
		<wp:post_date>2013-02-22 19:09:40</wp:post_date>
		<wp:post_date_gmt>2013-02-22 10:09:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2598</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2600]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gmaps-api-v3-%e3%82%b9%e3%83%88%e3%83%aa%e3%83%bc%e3%83%88%e3%83%93%e3%83%a5%e3%83%bc%e3%82%92%e4%bd%bf%e3%81%86%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395727;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2841;}i:1;a:1:{s:2:"id";i:3747;}i:2;a:1:{s:2:"id";i:3937;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>画像からExif情報(GPS)を取得する node.js or Javascript EXIF Reader</title>
		<link>http://shimz.me/blog/node-js/2601</link>
		<pubDate>Mon, 25 Feb 2013 00:32:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2601</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/getEXIF/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/streetview000003.jpg" alt="streetview000003" width="493" height="291" class="aligncenter size-full wp-image-2602" /></a>

画像から<a href="http://ja.wikipedia.org/wiki/Exchangeable_image_file_format">Exif</a>情報(の中の位置情報)を取得する方法メモ。

&nbsp;
&nbsp;

<strong>■ サーバーサイド(node.js)</strong>

<a href="https://github.com/gomfunkel/node-exif">node-exif</a>というライブラリがあったので使ってみる。
 
<pre class="lang:sh decode:true " >npm install exif
</pre>  
<pre class="lang:js decode:true " title="getEXIF.js" >var ExifImage = require('exif').ExifImage;

try {
    new ExifImage({ image : 'test.jpg' }, function (error, image) {
        if (error)
            console.log('Error: '+error.message);
        else
            console.dir(image['gps']);
    });
} catch (error) {
    console.log('Error: ' + error);
}</pre> 
 
<pre class="lang:sh decode:true " title="実行" >$ node getEXIF.js
</pre> 

Exif情報は取得できるが、なぜか正しい位置情報が取得できない。
<pre class="lang:js mark:10,20 decode:true " title="出力結果" >gps:[
  { tag: &lt;Buffer 00 01&gt;,
    format: 2,
    components: 2,
    value: 'N',
    tagName: 'GPSLatitudeRef' },
  { tag: &lt;Buffer 00 02&gt;,
    format: 5,
    components: 3,
    value: [ 36, 36, 36 ],
    tagName: 'GPSLatitude' },
  { tag: &lt;Buffer 00 03&gt;,
    format: 2,
    components: 2,
    value: 'E',
    tagName: 'GPSLongitudeRef' },
  { tag: &lt;Buffer 00 04&gt;,
    format: 5,
    components: 3,
    value: [ 139, 139, 139 ],
    tagName: 'GPSLongitude' },
  { tag: &lt;Buffer 00 07&gt;,
    format: 5,
    components: 3,
    value: [ 11, 11, 11 ],
    tagName: 'GPSTimeStamp' }
]
</pre> 


しかたがないので、imagemagickのwrapper(<a href="https://github.com/rsms/node-imagemagick">node-imagemagick</a>)を使う。
非同期のフロー制御に<a href="https://github.com/caolan/async">async</a>を使うので、一緒にインストールする。
 
<pre class="lang:sh decode:true " >$ yum install ImageMagick
$ npm install imagemagick
$ npm install async
</pre> 
<pre class="lang:js decode:true " title="getEXIF2.js" >var im = require('imagemagick');
var async = require('async');
 
 var imgFile = 'test.jpg';
 
 async.series(
 [
	 function(callback) { im.identify(['-format', '%[EXIF:GPSLatitude]', imgFile],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLatitude': metadata.trimRight() });
		 });
	 }, function(callback) { im.identify(['-format', '%[EXIF:GPSLatitudeRef]', imgFile],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLatitudeRef': metadata.trimRight() });
		 });
	 }, function(callback) { im.identify(['-format', '%[EXIF:GPSLongitude]', imgFile],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLongitude': metadata.trimRight() });
		 });
	 }, function(callback) { im.identify(['-format', '%[EXIF:GPSLongitudeRef]', imgFile ],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLongitudeRef': metadata.trimRight() });
		 });
	 }
 ],
 function(err, results){
    console.dir(results);
});</pre> 

 
<pre class="lang:sh decode:true " title="実行" >$ node getECIF2.js</pre> 


正しく、位置情報が取得できた。
 
<pre class="lang:js decode:true " title="出力結果" >[
  { GPSLatitude: '36/1, 1968/100, 0/1' },
  { GPSLatitudeRef: 'N' },
  { GPSLongitude: '139/1, 49/100, 0/1' },
  { GPSLongitudeRef: 'E' }
]
</pre> 

&nbsp;
&nbsp;

<strong>■ クライアントサイド</strong>
下記ライブラリを使用する（今回はjQuery版を使用）
<a href="http://www.nihilogic.dk/labs/exif/">Javascript EXIF Reader</a>
<a href="http://www.nihilogic.dk/labs/exifjquery/">Javascript EXIF Reader - jQuery Plugin</a>
使用法はいたって簡単。
ライブラリを読み込んでjQueryオブジェクトのメソッドとして「.exif()」を使用するだけ。

<pre class="lang:xhtml mark:7,18,19 decode:true " >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;jquery.exif.js&quot;&gt;&lt;/script&gt;
&lt;title&gt;Javascript EXIF Reader text&lt;/title&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;a href=&quot;http://www.nihilogic.dk/labs/exif/&quot;&gt;Javascript EXIF Reader&lt;/a&gt; テスト(クリックで位置情報表示)
&lt;img src=&quot;test.jpg&quot; id=&quot;img&quot; exif=&quot;true&quot; /&gt;

&lt;script&gt;
$(&quot;#img&quot;).click(function() {
	alert(
	      &quot;Longitude: &quot; + $(this).exif(&quot;GPSLongitude&quot;) + &quot;\n&quot; +
	      &quot;Latitude: &quot; + $(this).exif(&quot;GPSLatitude&quot;)
	      );
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 



<a href="http://shimz.me/example/getEXIF/index.html">example</a>

ただ、「input type='file'」で選択した画像から上記ライブラリでExif情報を取得する方法がわからない（できない？）
data URI schemeにしてしまうとExif情報は取得できないみたい。
クライアント側で完結できないみたいなので、結局サーバー側に画像を一旦保存する必要があるっぽい。
 
<pre class="lang:js decode:true " title="失敗例" >//このコードは動かない
$(&quot;#uploadFile&quot;).change(function() {

    var file = this.files[0]; //input type=&quot;file&quot;からファイルを取得
    if (!file.type.match(/^image\/(png|jpeg|gif)$/)) return;

    var reader = new FileReader();
    reader.readAsDataURL(file); //data URI schemeとしてファイルを読み込み
    reader.onload = function(evt) {
	    $(&quot;#img&quot;).attr(&quot;src&quot;, evt.target.result); //取得したデータをimgタグのsrcに追加
    }
    
    //imgタグのsrcに指定されているのがdata URI schemeだとExifが取得できない
   $(&quot;#img&quot;).click(function() { 
    alert(
	  &quot;Longitude: &quot; + $(this).exif(&quot;GPSLongitude&quot;) + &quot;\n&quot; +
	  &quot;Latitude: &quot; + $(this).exif(&quot;GPSLatitude&quot;)
	  );
    });        
});
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2601</wp:post_id>
		<wp:post_date>2013-02-25 09:32:35</wp:post_date>
		<wp:post_date_gmt>2013-02-25 00:32:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2601</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2602]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%94%bb%e5%83%8f%e3%81%8b%e3%82%89exif%e6%83%85%e5%a0%b1gps%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b-node-js-or-javascript-exif-reader]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390577;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2975;}i:1;a:1:{s:2:"id";i:2749;}i:2;a:1:{s:2:"id";i:2851;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】水平パンニング</title>
		<link>http://shimz.me/blog/d3-js/2607</link>
		<pubDate>Wed, 06 Mar 2013 07:46:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2607</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/zoom2/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/panning.jpg" alt="panning" width="522" height="417" class="alignleft size-full wp-image-2608" /></a>

<a href="http://shimz.me/example/d3js/zoom2/index.html">example</a>

データを表示する領域を制限して、ドラッグした際に続きのデータを見せる方法。
参考にしたサイトでは、この表示方法を「horizontal panning behavior」と呼んでいたので「水平パンニング」としました。
コードのコメントに書いた以上の説明が出来ないので、詳しく知りたい方は下記のリンク先を参照してください。

参考
<a href="http://computationallyendowed.com/blog/2013/01/21/bounded-panning-in-d3.html">Bounded Panning in D3</a>

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >//データセットの作成
var dataSet = [];
var random = function(){ return parseInt(Math.random()*100) };    
for(var i=0; i &lt; 101; i++){
	dataSet.push(
		{
			x: i*10,
			y: random()
		}
	)
	
}


//svg ステージ設置
var svg_width = 500;
var svg = d3.select('body')
			.append('svg')
			.attr('width', svg_width)
			.attr('cursor', 'move'); 

//データセットの最大値取得
var x_max = d3.max(dataSet, function(d){ return d.x  }); //X最大値取得
var y_max = d3.max(dataSet, function(d){ return d.y  }); //Y最大値取得

var x_margin = 20; //X軸両端のマージン

//スケール関数を作成
var x_scale = d3.scale.linear().domain([0, x_max]).range([x_margin, x_max - x_margin])
var y_scale = d3.scale.linear().domain([0, y_max]).range([y_max, 0]);


//スケールを元にpathのd属性を設定するline関数を作成    
var line = d3.svg.line()
	.x(function(d) { return x_scale(d.x); })
	.y(function(d) { return y_scale(d.y); })
	.interpolate('basis');

//折れ線グラフ描画        
svg.append('g')
	.datum(dataSet)
  .append('path')
	.attr('class', 'data')
	.attr('d', line) //line関数をデータセットに適用
	.attr('stroke', 'red')
	.attr('fill', 'none')

//X軸補助目盛線描画
var x_axis = d3.svg.axis().scale(x_scale); //スケールを元に目盛線を作成
svg.append('g')
	.attr('class', 'x axis')
	.attr('transform', 'translate(0,' + 100 + ')') 
	.call(x_axis);
	
//ズームイベント設置
var zoom = d3.behavior.zoom()
	.x(x_scale)
	.scaleExtent([1, 1]) //zoom倍率の範囲？　[&quot;最小&quot;, &quot;最大&quot;]値らしい。
	.on('zoom', function(){
		
		var t = zoom.translate(); //translation vector取得。マウスの移動量。
		var tx = t[0]; //x軸に対するマウスの移動量
		var ty = t[1]; //Y軸に対するマウスの移動量
		//console.log(t);
		
		//txの値の範囲を制限
		tx = Math.min(tx, 0); //最大値を0までに制限
		tx = Math.max(tx, svg_width - x_max); //最小値を-500までに制限 
		//console.log(tx);
		
		//translation vectorをzoomに設定し再描画する
		zoom.translate([tx, ty]);
		svg.select('.data').attr('d', line);
		svg.select('.x').transition().attr('transform', 'translate(' + tx + ' ,' + y_max + ')');
	});
svg.call(zoom);</pre> 



目盛りにだけtransitionを設定したら、後を追っかけるような面白い動きになった。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2607</wp:post_id>
		<wp:post_date>2013-03-06 16:46:49</wp:post_date>
		<wp:post_date_gmt>2013-03-06 07:46:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2607</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2608]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_429649857124104]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e6%b0%b4%e5%b9%b3%e3%83%91%e3%83%b3%e3%83%8b%e3%83%b3%e3%82%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427365853;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2797;}i:1;a:1:{s:2:"id";i:2451;}i:2;a:1:{s:2:"id";i:2975;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ネットで実名を使うメリット</title>
		<link>http://shimz.me/blog/other/2609</link>
		<pubDate>Thu, 07 Mar 2013 08:09:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2609</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/funny-pictures-auto-anonymous-photo-389629.jpeg" alt="funny-pictures-auto-anonymous-photo-389629" width="590" height="332" class="alignleft size-full wp-image-2610" />


&nbsp;
&nbsp;


<a href="http://sakedrink.info/1610/%E5%AE%9F%E5%90%8D%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%BF%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93/">実名でインターネットをはじめてみてよかったこと、悪かったこと
</a>



自分も実名を使用するようになってから「実名ってわりといいな」と思ってはいたのですが、なぜか日本では「実名にしろ！」と声高に騒ぐユーザーほど残念な傾向あったりするので……

まぁ、いい機会なので個人的に感じた「ネットで実名を使うメリット」を書いてみます。


<strong>■ オフで恥ずかしくない？</strong>
たとえば、ハンドルネームに「ダークフレイムマスター」なんて付けてしまったなら、オフで会った際に「ダークフレイムマスターこと○○です」という自己紹介が必要となるわけです。死にます。
懇談会で店員がそばいるときに「ダークフレイムマスターさん、何にします？」とか言われたらモリサマーのように床を転げまわって死にます。
そもそもオフで会う時点で匿名性なんて無くなったも同然になるわけで、勉強会等に参加すると決めたときから実名を使うようにしました。

<strong>■ 自制心が高まる？</strong>
さすがに実名だと安易に暴言吐いたり、軽はずみに誰かに絡んだりしなくなりますよね？　たぶん。

&nbsp;
&nbsp;
<h2>本題</h2>

<strong>■ 一番危ないのは匿名(半匿名)アカ＋実名アカ</strong>
最近はソー活などの流行もあって、Twitterでは匿名だけどFacebookやmixiは実名を使っているユーザーとか、仕事で自社のブログやソーシャルメディアでのPRを任されている、という方は結構居るんじゃないでしょうか。
個人的には、このような匿名アカと実名アカを使い分けるほうがリスクが高いと思います。
実際、炎上事件では「匿名だと思って好き勝手やってたら、わりと簡単に特定された」というケースの方が、結果が悲惨なことになっています。
匿名性を維持し続けるのって難しいんですよね。
車の写真をアップしたら、ボンネットに映りこんだ風景から家が特定されたとか。
匿名アカで飼い犬についてつぶやいたら、大学のＨＰに掲載しているプロフィールと照合されて特定された教授などもいました。
画像のExif情報は毎回ちゃんと削除してますか？
会社や学校の愚痴なんて特定のための大きなヒントになります。
「地震なう」「雪降ってる」「電車とまった」こんな単純な情報でも、ある程度地域を絞りこむ事が可能です。
どんなに情報を小出しにしたところで、<a href="http://ja.wikipedia.org/wiki/%E4%BA%BA%E8%82%89%E6%A4%9C%E7%B4%A2">人肉検索</a>のターゲットにされたらひとたまりもありません。
ネットでアクティブに活動すれば、どうしたってログが溜まり情報は漏れるので、だったら実名アカで発言の内容を自制するほうがセキュアな気がします。

<strong>■なんか流れ的に</strong>
スマートフォンのTwitter公式クライアントに「アドレス帳から友人を探す」機能が付きましたが、世の中的にはネット上にリアルな人間関係(ソーシャルグラフ）を持ち込ませるのが流行りのようです。
たぶん、その方がお金が動きそうな気がするからなんでしょうね。
海外のサービスだけでなく日本の企業が提供するサービス、「はてな」や「ニコニコ動画」「pixiv」などだっていつ何時「友達検索機能つけました！」とか言い出さないとも限りません。
日本の企業はそんなことしないだろうと思っていても、「業績が悪化したところを海外の企業に買い取られて……」なんてことがこの先絶対に無いとは言い切れないわけです。
ある日突然、リアルな友人知人のアカウントなどをお勧めされて慌てるぐらいなら、初めから見つかるもんだと思って利用するほうが楽な気がします。


<strong>■ 総括</strong>
リンク先の記事でも書かれていましたが「リアルバレしたらどうしよう」とか考えなくてすむようになるのは楽ですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2609</wp:post_id>
		<wp:post_date>2013-03-07 17:09:20</wp:post_date>
		<wp:post_date_gmt>2013-03-07 08:09:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2609</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2610]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%8d%e3%83%83%e3%83%88%e3%81%a7%e5%ae%9f%e5%90%8d%e3%82%92%e4%bd%bf%e3%81%86%e3%83%a1%e3%83%aa%e3%83%83%e3%83%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427060044;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2331;}i:1;a:1:{s:2:"id";i:1031;}i:2;a:1:{s:2:"id";i:3685;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「もうひとりのシェイクスピア」</title>
		<link>http://shimz.me/blog/movie/2612</link>
		<pubDate>Sun, 10 Mar 2013 05:23:45 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2612</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="http://www.youtube.com/embed/In1dB3B13YM?list=PLFA46B9D55823F1DC" frameborder="0" allowfullscreen></iframe>

自筆原稿や日記などが見つかっていないことや、法律や古典などの知識がなければ書けない作品があるが学歴からみて不自然であることから、たびたび語られるシェイクスピア別人説。

シェイクスピア別人説の一つ「シェイクスピア＝フランシス・ベーコン説」に関してはアメリカのメンデンホールという物理学者がシェイクスピアの文章の40万語とベーコンの文章の20万語について比較分析を行った実験が計量文献学やテキストマイニングの事例としてよく挙げられます。
最近、<a href="http://www.amazon.co.jp/gp/product/B00B42SXH0/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B00B42SXH0&linkCode=as2&tag=toriaezu04b-22">統計学が最強の学問である</a>でこの事例を読んだばかりのところに、タイミングよく近くの映画館で放映されたので観に行ってきました。

この作品は別人説のひとつ、エドワード・ド・ヴィアー (第17代オックスフォード伯)説を主軸に、史実と虚構を織り交ぜて作成された策謀劇。

とにかく再現された１６世紀イギリスの舞台装置や美術がすばらしかった。

ただ、史実をある程度元にしたためか、敵役として登場したはずのロバート・セシル卿に後半に進むにつれなんだか肩入れしてしまうという困ったことにｗ

エセックス伯も陥れられたというより自爆にしか見えない描かれ方で、たぶん製作側もそのことは感じていたじゃないかな？　

終幕近くでセシルがベンにかける台詞はあきらかに敵役を超えたものだったし。

ともあれ、陰謀渦巻く宮廷劇が好きなかたには是非お勧め。


<a href="http://shakespeare-movie.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/anonymous_ws.jpg" alt="anonymous_ws" width="215" height="319" class="size-full wp-image-2613" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2612</wp:post_id>
		<wp:post_date>2013-03-10 14:23:45</wp:post_date>
		<wp:post_date_gmt>2013-03-10 05:23:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%82%e3%81%86%e3%81%b2%e3%81%a8%e3%82%8a%e3%81%ae%e3%82%b7%e3%82%a7%e3%82%a4%e3%82%af%e3%82%b9%e3%83%94%e3%82%a2%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2613]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_272469619553631]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427152095;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3880;}i:1;a:1:{s:2:"id";i:2590;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 テーブルを使ったヒートマップ(Google Analytics 可視化)</title>
		<link>http://shimz.me/blog/d3-js/2614</link>
		<pubDate>Mon, 11 Mar 2013 10:09:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2614</guid>
		<description></description>
		<content:encoded><![CDATA[色が濃いほど訪問者数が多い時間となってます。
<a href="http://shimz.me/example/d3js/table/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/gsheatmap.jpg" alt="gsheatmap" width="737" height="606" class="alignleft size-full wp-image-2618" /></a>

Google Analyticsからエクスポートしたデータ(日時、時間毎の訪問者数)を元にd3.jsを使ってテーブルを作成しました。
下記のようなカスタムレポートを作成しCSVでエクスポートしています
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gad31.jpg" alt="gad31" width="975" height="261" class="alignleft size-full wp-image-2615" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gad32.jpg" alt="gad32" width="999" height="352" class="alignleft size-full wp-image-2616" />
ダウンロードしたcsvには余計なノイズが入っているので削除します。
↓６行目まで要らない
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gad33.jpg" alt="gad33" width="664" height="396" class="alignleft size-full wp-image-2617" />

これでデータの準備が完成。

<hr>

<a href="http://shimz.me/example/d3js/table/01/">example</a>

 
<pre class="lang:js decode:true " >d3.csv('ga.csv', function(csv){ //csvデータの読み込み

	
	var max = d3.max(csv, function(d){ return d.visitors }); //訪問者数の最大値取得
	
	var colorScale = d3.scale.linear().domain([0, max]).range(["#FFF0F5", "#DC143C"]); //カラースケールを作成
	
	var  hours  = d3.range(24); //時間表示用
	
	var data = 	d3.nest().key(function(d){return d.date;}).entries(csv); //CSVから取得したデータをdateフィールドの値でネスト		
	//console.log(data);
	
	
	var tbody = d3.select('body').append('table').append('tbody'); //table作成
	var tfoot = d3.select('table').append('tfoot'); //tableにtfootをappend
	
	tfoot.append('th'); //空th追加
	
	//tfootに時間thを追加
	tfoot.selectAll('class')
		.data(hours)
		.enter()
		.append('th')
		.attr("class", "hours")
		.text(function(d){ return d});
	
	
	//tr追加
	var trs = tbody.selectAll('tr')
	  .data(data)
	  .enter()
	  .append('tr')
	  
	 //thに年月日を追加
	 trs.append('th').text(function(d){ 
		var Year = d.key.substring(0, 4);
		var Month = d.key.substring(4, 6);
		var Day = d.key.substring(6, 8);
		var text = Year + "/" + Month + "/" + Day;
		return text;
	});

	
	//td追加
	trs.selectAll('td')
	   .data(function(d){ return d.values} )
	   .enter()
	   .append('td')
	   .style("background-color", function(d){ return colorScale(d.visitors); })
	   .on('mouseover', function(d){
			d3.select(this).text(d.visitors); //mouoverした際に訪問者数を表示
	   })
	   .on("mouseout", function(d){
			d3.select(this).text("");		   
	   });
	  
});</pre> 


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2614</wp:post_id>
		<wp:post_date>2013-03-11 19:09:07</wp:post_date>
		<wp:post_date_gmt>2013-03-11 10:09:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2614</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2618]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_174911382657769]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-%e3%83%86%e3%83%bc%e3%83%96%e3%83%ab%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e3%83%92%e3%83%bc%e3%83%88%e3%83%9e%e3%83%83%e3%83%97google-analytics-%e5%8f%af%e8%a6%96%e5%8c%96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427361591;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2755;}i:1;a:1:{s:2:"id";i:2695;}i:2;a:1:{s:2:"id";i:2975;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】超基本！ コンソールでselect,data,enterメソッドを理解する。</title>
		<link>http://shimz.me/blog/d3-js/2619</link>
		<pubDate>Tue, 12 Mar 2013 02:19:36 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2619</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsの<a href="http://i1.wp.com/shimz.me/blog/wp-content/uploads/2013/03/evelearningcurve.jpg?resize=800%2C777">学習曲線</a>が急激な坂道を描くのは、D3独特のデータバインディングの仕組みを理解するのに時間がかかるためだと思います。

そこで、ブラウザの開発ツールを使用してD3.jsの基本であるデータバインディングの仕組みを細かく観察していきます。
&nbsp;
&nbsp;

ちなみに下記の記事を参考にさせていただきました。合わせて読むと理解がしやすいかもしれません。

<a href="http://alignedleft.com/tutorials/d3/binding-data/">D3 Tutorials: Binding data</a>

<hr>

<h2>サンプル</h2>
<pre class="lang:xhtml decode:true " ><!DOCTYPE html>
<html>
<head>
<meta charset=&amp;quot;utf-8 />
<title>D3 select,data,enter</title>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
var a = ["test", "hoge", "hello d3"]; //今回バインドするデータ
</script>
</head>
<body>

</body>
</html>
</pre> 

今回使用するHTMLです。
D3.jsライブラリの読み込みと、バインドするデータとして変数aを設定しているだけのソースです。
bodyタグの中には、何のエレメントも存在しません。
ここに、開発ツールのコンソールからD3.jsを使用してデータ(変数a)をバインドしたp要素を追加します。


<h2>1.要素の選択</h2>
<pre class="lang:js decode:true " >d3.select('body')
</pre> 

まずは、selectメソッドから。
jQueryのcssセレクタと殆どかわりません。
ここでは、bodyタグを選択しています。
戻り値としてD3 Selectionオブジェクトが返ってきます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000000.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000000.jpg" alt="d3select000000" width="1234" height="407" class="alignleft size-full wp-image-2620" /></a>


<h2>2.データをバインドする要素の選択</h2>
<pre class="lang:js decode:true " >d3.select('body').selectAll('p')
</pre> 

bodyタグの中の全てのpタグを選択しています。
ここで重要なのは、このステートメントが実行される段階では<strong>対象となるpタグはまだ存在していません</strong>。
DOM上に存在していないエレメントを選択しているわけですが、エラーにはなりません。
これが、データをバインディングする要素を決定する宣言となります。
戻り値として空のD3 Selectionオブジェクト(配列)が返ります。
<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000001.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000001.jpg" alt="d3select000001" width="1234" height="407" class="alignleft size-full wp-image-2621" /></a>


<h2>3.データのバインドを開始</h2>
<pre class="lang:js decode:true " >d3.select('body').selectAll('p').data(a)
</pre> 

dataメソッドでデータのバインドを開始します。
先ほどの空の配列にデータ分(length)の空オブジェクトが準備され、戻り値として返ります。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000002.jpg" alt="d3select000002" width="1234" height="407" class="alignleft size-full wp-image-2622" /></a>


<h2>4.データの数だけ、d3オブジェクトを作成</h2>
<pre class="lang:js decode:true " >d3.select('body').selectAll('p').data(a).enter()
</pre> 

enterメソッドでdataメソッドで準備された空のオブジェクトにデータを保存します。
戻り値の中を確認すると、それぞれのオブジェクトに__data__プロパティが追加され、そこにデータが保存されているのが見えます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000003.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000003.jpg" alt="d3select000003" width="1234" height="407" class="alignleft size-full wp-image-2623" /></a>


<h2>5.データをバインドし、要素を追加</h2>
<pre class="lang:js decode:true " >d3.select('body').selectAll('p').data(a).enter().append('p')
</pre> 

appendメソッドでp要素とデータのバインディングを行います。
この時点で初めてDOMにPタグが挿入されます。


<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000004.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000004.jpg" alt="d3select000004" width="1234" height="407" class="alignleft size-full wp-image-2624" /></a>

戻り値を見ると、各要素に__data__プロパティが挿入されているのが見えます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000005.jpg" alt="d3select000005" width="467" height="81" class="size-full wp-image-2625" />


<h2>6.バインドされたデータを使用して要素を操作</h2>
<pre class="lang:js decode:true " >d3.selectAll('p').text(function(d){console.log(d); return d })
</pre> 

バインドされたデータを使ってpタグにテキストを挿入します。
textメソッドの中でコールバックを渡していますが、引数(d)には__data__プロパティの値が渡されます。
コールバック内のreturn で返した戻り値がテキストとしてpタグに挿入されます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000006.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000006.jpg" alt="d3select000006" width="1234" height="407" class="alignleft size-full wp-image-2626" /></a>


&nbsp;

以上が、d3.jsのデータバインディングの基本的な仕組みとなります。
さらに詳しく知りたい方は、以下のドキュメントを参照してください。

<a href="http://ja.d3js.node.ws/document/tutorial/circle.html">d3.js - 三つの小円</a>


<hr>
実際に実行して試せるページを作ってみました。
ボタンを上から順にクリックしてconsole.logに出力された内容を確認してみてください。

<a href="http://shimz.me/example/d3js/binding_data/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000007.jpg" alt="d3select000007" width="590" height="377" class="alignleft size-full wp-image-2627" /></a>

<a href="http://shimz.me/example/d3js/binding_data/">example</a>
※Mac版のchromeだとfirebug liteが何故か動作しなくて動かない orz
&nbsp;
&nbsp;

<h2>関連</h2>
既にDOM上に存在している要素に対してデータを元に操作する、新たなデータをバインドするなどについては下記の記事を参照ください。
<a href="http://shimz.me/blog/d3-js/3295">【D3.js】データセットの増減をDOM要素に反映する</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2619</wp:post_id>
		<wp:post_date>2013-03-12 11:19:36</wp:post_date>
		<wp:post_date_gmt>2013-03-12 02:19:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2619</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_517894454928990]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2628]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e8%b6%85%e5%9f%ba%e6%9c%ac%ef%bc%81-%e3%82%b3%e3%83%b3%e3%82%bd%e3%83%bc%e3%83%ab%e3%81%a7selectdataenter%e3%83%a1%e3%82%bd%e3%83%83%e3%83%89%e3%82%92%e7%90%86%e8%a7%a3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427367953;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:862;}i:1;a:1:{s:2:"id";i:3035;}i:2;a:1:{s:2:"id";i:3564;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 SVGで地球儀を描く</title>
		<link>http://shimz.me/blog/d3-js/2631</link>
		<pubDate>Wed, 13 Mar 2013 02:35:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2631</guid>
		<description></description>
		<content:encoded><![CDATA[回転させるのも簡単、そうD3ならね。
<a href="http://shimz.me/example/d3js/geo_example/geo6/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3glob.jpg" alt="d3glob" width="564" height="503" class="alignleft size-full wp-image-2634" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo6/">example</a>

データはNaturalEarthの「<a href="http://www.naturalearthdata.com/downloads/110m-cultural-vectors/">Admin 0 – Countries</a>」から。
見づらくなるので南極大陸には消えていただいた。
消し方は、ダウンロードしたsahpeデータを <a href="http://www.qgis.org/">Quantum GIS</a>に取り込んで、メニューの「レイヤー」から「属性テーブルのオープン」を選択。
属性テーブルの中から「sovereignt」の値が「Antractica」になっている行を選択し、下のほうにあるアイコンから「選択部分を反転する」をクリック。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/qgisdelete.jpg" alt="qgisdelete" width="1211" height="608" class="size-full wp-image-2633" />
南極大陸以外が選択されているのを確認して「レイヤー」から「選択部分をベクタファイルとして保存する」をクリック→「Geo JSON」形式で保存。
一応topojsonに変換して軽量化。

 
<pre class="lang:sh decode:true " >$ topojson -o conuntries.topojson conuntries.geojson</pre> 

以上で、地図データ作成終了。
あとは、D3の「<a href="https://github.com/mbostock/d3/wiki/Geo-Projections">Geo Projections</a>」機能を使って表示するだけ。
この辺のデータ作成については、過去の記事に詳細を載せているので興味ある方は<a href="http://shimz.me/blog/category/map">こちら</a>を。


<h2>サンプルコード</h2>
<pre class="lang:xhtml decode:true " title="index.html" >
&lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;D3 Globe&lt;/title&gt;
    &lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;http://d3js.org/topojson.v0.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 

 
<pre class="lang:js decode:true " title="index.js" >window.onload = function(){
    var stage,path, map, xy;
    
    stage = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 960).attr(&quot;height&quot;, 600); //地図を表示するステージ

    //海　実はただのcircle
    stage.append('circle')
        .attr({
            fill:&quot;blue&quot;,
            cx:480,
            cy:250,
            r:245
        });
        
    projection = d3.geo.orthographic() //投影法を指定
        .scale(245) //大きさ
        .rotate([0,0,0]) //x,y,z回転
        .clipAngle(90); //表示する角度 180度を指定すると裏側の大陸まで表示される
    
    path = d3.geo.path().projection(projection);
        
    d3.json(&quot;conuntries.topojson&quot;, function(json){ //地図情報の読み込み
        
        var data = topojson.object(json, json.objects.conuntries); //topojson変換
       
        stage.append(&quot;svg:g&quot;).attr({&quot;class&quot;:&quot;earth&quot;}); //g要素追加(グループ化)
       
       //地図表示
        map = stage
            .selectAll(&quot;path&quot;)
            .data(data.geometries) 
            .enter()
            .append(&quot;svg:path&quot;)
            .style(&quot;background-color&quot;, &quot;blue&quot;)
            .attr({
                &quot;d&quot;:path,
                &quot;fill-opacity&quot;:1,
                &quot;fill&quot;:&quot;green&quot;,
                &quot;stroke&quot;:&quot;#222&quot;
            })
            .on(&quot;mouseover&quot;, function(){
                d3.select(this).attr(&quot;fill&quot;, &quot;red&quot;);
            })
            .on(&quot;mouseout&quot;, function(){
                d3.select(this).transition().duration(500).attr(&quot;fill&quot;, &quot;green&quot;);
            });
    });
    
    setInterval(update, 200); //定期的に回転させる
    
    var i=0;
    function update(){
        i = i+1;
        projection.rotate([i,0,0]);  //x軸の値を増加
        path = d3.geo.path().projection(projection);    //path関数をアップデート
        map.attr(&quot;d&quot;, path); //paht関数をmapオブジェクトに適用
    }
}</pre> 


<a href="http://shimz.me/example/d3js/geo_example/geo6/">example</a>

<h3>追記</h3>
海を描画するのに、わざわざcircle要素を使う必要はなかったようです。
詳細は下記記事のサンプルコードを参照ください。
<a href="http://shimz.me/blog/d3-js/4052">地軸を傾けながらSVGで地球儀を表示する</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2631</wp:post_id>
		<wp:post_date>2013-03-13 11:35:03</wp:post_date>
		<wp:post_date_gmt>2013-03-13 02:35:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2631</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_171791592972155]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2634]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-svg%e3%81%a7%e5%9c%b0%e7%90%83%e5%84%80%e3%82%92%e6%8f%8f%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385747;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】群馬県の賃貸価格データを可視化してみた（散布図＆地図）</title>
		<link>http://shimz.me/blog/d3-js/2635</link>
		<pubDate>Wed, 13 Mar 2013 16:50:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2635</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo7/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/scatter_map.jpg" alt="scatter_map" width="694" height="508" class="alignnone size-full wp-image-2636" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo7/">example</a>

クリックすると散布図上の要素を地図上にプロットします。


<h2>■ データの作成</h2>
下記形式のCSV(物件データ)からgeoJSONデータを作成しました。
 
<pre class="lang:default decode:true " >id,rent,room,lat,lng,address,city
14388189,25000,1R,36.40078694,139.0906517,群馬県前橋市幸塚町,前橋
4032272,28000,1K,36.38146,139.0660219,群馬県前橋市紅雲町１丁目,前橋
6834694,55000,2DK,36.364055,139.0582739,群馬県前橋市後家町,前橋
14404269,49000,1LDK,36.29101675,139.0376737,群馬県高崎市下佐野町,高崎
16727463,56000,2LDK,36.35130443,139.3227214,群馬県太田市藪塚町,太田
4038181,48000,2DK,36.38122111,139.0359931,群馬県前橋市元総社町,前橋</pre> 

CSVを<a href="http://www.qgis.org/">Quantum GIS</a>でよみこみます。
メニュー「レイヤー」→「デリミティッドテキストレイヤの追加」
CSVファイルを選択。デミリタは「カンマ」を指定。XYフィールドでは「x:lng」「y:lat」を指定。読み込みの際の空間参照システムの指定は、元データの位置情報形式によりますが通常は「WGS 84」でＯＫ。

CSV読み込み
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3scatter000000.jpg" alt="d3scatter000000" width="520" height="566" class="alignnone size-full wp-image-2638" />
読み込み成功
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3scatter000001-e1363218545940.jpg" alt="d3scatter000001" width="590" height="377" class="alignnone size-full wp-image-2639" />

問題なく読み込めたらgeoJSONとして保存します。
物件データはこれで完了
地図データ（群馬県）の作成は、<a href="http://shimz.me/blog/d3-js/2351" target="_blank">こちら</a>の記事を参考にしてください。


<h2>サンプルコード</h2>
<pre class="lang:xhtml decode:true " title="index.html" >
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;style&gt;
body {
    padding: 10px;
}

.grid .tick {
    stroke: lightgrey;
    opacity: 0.7;
}
.grid path {
    stroke-width: 0;
}
&lt;/style&gt;
&lt;body&gt;
&lt;svg di=&quot;svg&quot;&gt;&lt;/svg&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 
 
<pre class="lang:js decode:true " title="index.js" >window.onload = function(){
    var sw = 700; //ステージ横幅
    var sh = 600; //ステージ縦幅

    //svg追加
    var svg = d3.select('svg').attr({
        width:sw,
        height:sh
    })
    .style(&quot;background-color&quot;, &quot;#f5f5dc&quot;);

    var x_margin = 80; //X軸マージン
    var y_margin = 80; //Y軸マージン
    var y_step = 20; //Y軸間隔
    var mode_flag = &quot;graph&quot;; //モード切換用フラグ
    
    //投影法設定
    projection = d3.geo
    .mercator()        
    .scale(200000)
    .rotate([-0.4,0.3,0]) 
    .center([139.0032936, 36.3219088]); 
        
    path = d3.geo.path().projection(projection);
    
    //群馬地図データ読み込み
    d3.json('gunma.geojson', function(json){
    
    svg.selectAll(&quot;path&quot;) //群馬県地図追加
        .data(json.features)
        .enter()
        .append(&quot;svg:path&quot;)
        .attr({
        &quot;class&quot;:&quot;gunma&quot;,
        &quot;d&quot;:path,
        &quot;fill&quot;: &quot;green&quot;,
        &quot;fill-opacity&quot;:0, //非表示
        &quot;stroke&quot;:&quot;black&quot;,
        &quot;stroke-opacity&quot;:0 //非表示
        });
        
    });

    //物件データ読み込み
    d3.json('dummy.geojson?1', function(json){
    
    //データセット（賃料）の最小値、最大値取得　
    //var rentMin = d3.min(json.features ,function(d){ return d.properties.rent} ); //使ってない
    var rentMax = d3.max(json.features ,function(d){ return d.properties.rent} );
        
    //スケール設定
    var xScale = d3.scale.linear().domain([0, rentMax]).range([0, sw-(x_margin*2)]);
    var yScale = d3.scale.ordinal().domain([
                    &quot;&quot;,&quot;1R&quot;,&quot;1K&quot;, &quot;1DK&quot;, &quot;1LDK&quot;, &quot;1SLDK&quot;,
                    &quot;2R&quot;,&quot;2K&quot;, &quot;2DK&quot;, &quot;2LDK&quot;, &quot;2SLDK&quot;,
                    &quot;3R&quot;,&quot;3K&quot;, &quot;3DK&quot;, &quot;3LDK&quot;, &quot;3SLDK&quot;,
                    &quot;4R&quot;,&quot;4K&quot;, &quot;4DK&quot;, &quot;4LDK&quot;, &quot;4SLDK&quot;,
                ].reverse()).range(d3.range(0, 420, y_step));
        
    //目盛り設定
    var xAxis = d3.svg.axis().scale(xScale).tickSize(1).ticks(5).tickFormat(function(d){ return (d/10000)+&quot;万円&quot;});
    var yAxis = d3.svg.axis().scale(yScale).tickSize(1).orient('left');
        
    //目盛りX軸作成
    svg.append('g')
        .attr({
        &quot;class&quot;:&quot;axis&quot;,
        transform: &quot;translate(&quot;+x_margin+&quot;,&quot; + 480 + &quot;)&quot;
        })
        .call(xAxis);
    //X軸グリッド    
    svg.append(&quot;g&quot;)
        .attr(&quot;class&quot;, &quot;grid axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(&quot;+x_margin+&quot;,&quot; + 480 + &quot;)&quot;)
        .call(
        d3.svg.axis()
        .scale(xScale)
        .orient(&quot;bottom&quot;)
        .ticks(10)
        .tickSize(-400, 0, 0)
        .tickFormat(&quot;&quot;)
        );          
            
            
    //目盛りY軸作成
    svg.append('g')
        .attr({
        &quot;class&quot;:&quot;axis&quot;,
        transform: &quot;translate(&quot;+x_margin+&quot;,&quot; + y_margin + &quot;)&quot;
        })
        .call(yAxis);
    //Y軸グリッド    
    svg.append(&quot;g&quot;)
        .attr(&quot;class&quot;, &quot;grid axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(&quot;+x_margin+&quot;,&quot; + y_margin + &quot;)&quot;)
        .call(
        d3.svg.axis()
        .scale(yScale)
        .orient(&quot;left&quot;)
        .tickSize(-(sw-(x_margin*2)), 0, 0)
        .tickFormat(&quot;&quot;)
        );
        
    
    //物件データプロット(point)        
    svg.selectAll('circle')
        .data(json.features)
        .enter()
        .append('circle')
        .attr({
        &quot;r&quot;:6,
        &quot;fill-opacity&quot;:0.5,
        &quot;fill&quot;:function(d){ return cityColor(d.properties.city)},               
        &quot;cx&quot;:function(d){ return xScale(d.properties.rent) + x_margin},
        &quot;cy&quot;:function(d){ return yScale(d.properties.room) + y_margin} ,
        })
        .on(&quot;mouseover&quot;, function(){
        d3.select(this).attr({
            &quot;r&quot;:10,
            &quot;fill&quot;:&quot;black&quot;,
            &quot;fill-opacity&quot;:1
        });
        })
        .on(&quot;mouseout&quot;, function(){
            d3.select(this).attr({
            &quot;r&quot;:6,
            &quot;fill&quot;:function(d){ return cityColor(d.properties.city)},  
            &quot;fill-opacity&quot;:0.5
        });
        })
        .append('title') //ツールチップ追加
        .text(function(d){ return (d.properties.rent/10000) + &quot;万円/&quot; + d.properties.room + &quot; &quot; +d.properties.address });
         
     //ciry-&gt;color name 変換   
    function cityColor(city){
        var color = &quot;gray&quot;;
        switch(city){
        case '高崎': color=&quot;red&quot;;break;                
        case '前橋': color=&quot;teal&quot;;break;
        case '伊勢崎': color=&quot;maroon&quot;;break;
        case '安中': color=&quot;blue&quot;;break;
        case '太田': color=&quot;purple&quot;;break;
        case 'みどり': color=&quot;navy&quot;;break;
        case '佐波郡': color=&quot;lime&quot;;break;
        case '館林': color=&quot;aqua&quot;;break;
        case '藤岡': color=&quot;yellow&quot;;break;
        case '足利': color=&quot;pink&quot;;break;
        }
        return color;
    }
    
    //表示モード切替     
    svg.on(&quot;click&quot;, function(){
        if(mode_flag == &quot;graph&quot;){ map_mode(); mode_flag = &quot;map&quot; }
        else if(mode_flag == &quot;map&quot;){ graph_mode(); mode_flag = &quot;graph&quot; }
    });   
    
    //グラフ表示    
    function graph_mode(){
        d3.selectAll(&quot;.axis&quot;)  //目盛表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:1,    
            &quot;stroke-opacity&quot;:1 
        })
        .duration(1000) 
        .delay(100);
    
        d3.selectAll(&quot;.gunma&quot;)  //地図非表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:0,    
            &quot;stroke-opacity&quot;:0 
        })
        .duration(1000) 
        .delay(100);
                    
        svg.selectAll('circle') //pointをグラフ上に移動
        .transition()
        .attr({ //X軸：賃料,Y軸：間取からpointを配置する位置を指定
            &quot;cx&quot;:function(d, i){ return xScale(d.properties.rent) + x_margin},
            &quot;cy&quot;:function(d, i){ return yScale(d.properties.room) + y_margin} ,
        })
        .duration(1000) 
        .delay(100);
        
    }
        
    //地図表示
    function map_mode(){
        d3.selectAll(&quot;.axis&quot;)  //目盛非表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:0,    
            &quot;stroke-opacity&quot;:0 
        })
        .duration(1000) 
        .delay(100);
            
        d3.selectAll(&quot;.gunma&quot;) //地図表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:0.3,    
            &quot;stroke-opacity&quot;:0.3 
        })
        .duration(1000) 
        .delay(100);
    
        svg.selectAll('circle') //pointを地図上に移動
        .transition()
        .attr({ //緯度経度からpointを配置する位置を指定
            &quot;cx&quot;:function(d){ return projection(d.geometry.coordinates)[0]; },
            &quot;cy&quot;:function(d){ return projection(d.geometry.coordinates)[1]; }
        })
        .duration(1000) 
        .delay(100);
        
    }

    });
       
    
}</pre> 
 


<h2>TIPS</h2>
グラフのY軸に間取りデータを適応していますが、グラフとして並べるには「2LDK」などの文字列を対応するコード(数値)に変換する必要があります。
53行目では、Scaleのordinalメソッドを使用して「間取り→コード」の変換を行っています。
 
<pre class="start-line:53 lang:js decode:true " >    var yScale = d3.scale.ordinal().domain([
                    &quot;&quot;,&quot;1R&quot;,&quot;1K&quot;, &quot;1DK&quot;, &quot;1LDK&quot;, &quot;1SLDK&quot;,
                    &quot;2R&quot;,&quot;2K&quot;, &quot;2DK&quot;, &quot;2LDK&quot;, &quot;2SLDK&quot;,
                    &quot;3R&quot;,&quot;3K&quot;, &quot;3DK&quot;, &quot;3LDK&quot;, &quot;3SLDK&quot;,
                    &quot;4R&quot;,&quot;4K&quot;, &quot;4DK&quot;, &quot;4LDK&quot;, &quot;4SLDK&quot;,
                ].reverse()).range(d3.range(0, 420, y_step));
</pre> 


scaleのrangeには以下の配列が挿入されています。
 
<pre class="lang:js decode:true " >&gt; d3.range(0, 420, y_step)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400]
</pre> 


作成したyScale関数に間取りを渡すと、対応する数値に変換されます。
 
<pre class="lang:js decode:true " >
&gt; yScale('1R')
380
&gt; yScale('1K')
360
&gt; yScale('4LDK')
20
&gt; yScale('4SLDK')
0
</pre> 



<a href="http://shimz.me/example/d3js/geo_example/geo7/">example</a>

【関連】
<a href="http://shimz.me/blog/d3-js/2703" target="_blank">【D3.js + GMap】群馬県の過疎地域</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2635</wp:post_id>
		<wp:post_date>2013-03-14 01:50:40</wp:post_date>
		<wp:post_date_gmt>2013-03-13 16:50:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2635</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2636]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_344806108971066]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e7%be%a4%e9%a6%ac%e7%9c%8c%e3%81%ae%e8%b3%83%e8%b2%b8%e7%89%a9%e4%bb%b6%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e5%8f%af%e8%a6%96%e5%8c%96%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427223812;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3760;}i:1;a:1:{s:2:"id";i:3984;}i:2;a:1:{s:2:"id";i:4125;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>362</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 23:41:29</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 14:41:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【D3.js】群馬県の賃貸価格データを可視化してみた（散布図＆地図） | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414507289.9145290851593017578125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414541678.32390689849853515625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【node.js+D3.js】RSSリーダーを作る</title>
		<link>http://shimz.me/blog/node-js/2643</link>
		<pubDate>Fri, 15 Mar 2013 01:13:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2643</guid>
		<description></description>
		<content:encoded><![CDATA[<p>feedparserの仕様が変わったため現在動きません。</p>
<hr></hr>

<img class="aligncenter size-full wp-image-2644" alt="googlereader2" src="http://shimz.me/blog/wp-content/uploads/2013/03/googlereader2.jpg" width="615" height="341" />

<a href="http://itpro.nikkeibp.co.jp/article/NEWS/20130314/463318/?top_nhl">Googleが酷いこと</a>をしたので自前のRSSリーダーを作成してみます。
フィードを読み込んでリストとして表示するだけの、最低限の機能しかありません。


<h2>node.jsでRSS取得サーバーを作成</h2>
フィードの読み込みには「feedparser」ライブラリを使用します。

 
<pre class="lang:sh decode:true " >$ npm install feedparser
</pre> 

feedパラメーターにフィードのURLを指定してGETリクエストを送ると取得した内容をJSONで返すだけのサーバーです。(WEB API)

 
<pre class="lang:js decode:true " >var FeedParser = require('feedparser')
	, request = require('request')
	, fs = require('fs')
	, http = require('http')
	, url = require('url');

http.createServer(function (req, res) {
	var pathname = url.parse(req.url).pathname;
	var queryData = url.parse(req.url, true).query;
	var feedurl = unescape(queryData.feed)
	var article = [];
	if(pathname === "/favicon.ico") return;

	request(feedurl)
		.pipe(new FeedParser())
		.on('error', function(error) {
			console.error(error);
		})
		.on('meta', function (meta) {
			//console.error(meta);
		})
		.on('readable', function () {
			// do something else, then do the next thing
			var stream = this, item; 

			while (item = stream.read()) {
				article.push(item);
			}
			stream.end = function(){
				res.writeHead(200, {
					'Content-Type':'application/json; charset=utf-8',
					'Access-Control-Allow-Origin':'*',
					'Pragma': 'no-cache',
					'Cache-Control' : 'no-cache'
				});
				if(queryData.limit) article = article.slice(0, queryData.limit);
				res.write(JSON.stringify(article));
				res.end();			
			};

		});


	process.on('uncaughtException', function (err) {
		console.log('uncaughtException =&gt; ' + err);
		console.log(feedurl); 
		res.writeHead(500);
		res.write("error!");
		res.end(); 
	});
}).listen(1337, '127.0.0.1');


function send(){

}
console.log('Server running at http://127.0.0.1:1337/?feed=&lt;RSS URL&gt;&amp;limit=&lt;length&gt;');</pre> 

ローカルで動かすこと前提なので、セキュリティとか考慮してません。


<h2>D3.jsでRSSリーダーのフロントエンドを作成</h2>
D3.jsはグラフの作成だけでなく、フロントエンドのUIを作成するのにも使えます。
 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8" /&gt;
&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
var list = [ //読み込むフィードの指定
	{title:"GUNMA GIS GEEK", url:"http://shimz.me/blog/feed", limit:5},
	{title:"はてブ", url:"http://feeds.feedburner.com/hatena/b/hotentry", limit:5},
	{title:"WIRED.jp", url:"http://wiredvision.jp/feed/atom.xml", limit:5}
]

//IE v.9以下非対応
list.map(function(d){
	d.id　= d.title.replace(/\s|\t|　|\.|,|\\/g,""); //titleからDOM idを作成
});

var date = new Date();

window.onload = function(){
	var ul = d3.select('body').selectAll('ul').data(list)
				.enter()
				.append('div')
				.attr('id', function(d){ return d.id})
				.append('ul')

	ul.html(function(d){ return "&lt;h3&gt;" + d.title + "&lt;/h3&gt;"})
		.attr('class', function(d){ return d.id + "_ul"})
		.selectAll(append_li)

	function　append_li(d){
			var date = new Date();
			var encUrl = escape(d.url);
			d3.json('http://127.0.0.1:1337/?feed='+encUrl+'&amp;limit='+d.limit + "&amp;"+date, function(json){
				d3.select('.'+d.id +"_ul")
				  .selectAll("."+d.id+"_list")
				  .data(json)
				  .enter()
				  .append('li')
				  .attr("class", d.id+"_list")
				  .html(function(d){
					return '&lt;a href="'+d.link+'" target="_blank"&gt;' + d.title + '&lt;/a&gt;';
				  })
			});
			return 'li';
		  }

}
&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;</pre> 


<h2>実行</h2>
まずサーバーを起動します。

 
<pre class="lang:sh decode:true " >node server.js</pre> 

サーバーが起動したら、reader.htmlを開きます。以上。
<img class="aligncenter size-full wp-image-2645" alt="simplerssreader" src="http://shimz.me/blog/wp-content/uploads/2013/03/simplerssreader.jpg" width="590" height="272" />

<a href="https://github.com/shimizu/SimpleRssReader">https://github.com/shimizu/SimpleRssReader</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2643</wp:post_id>
		<wp:post_date>2013-03-15 10:13:25</wp:post_date>
		<wp:post_date_gmt>2013-03-15 01:13:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2643</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2644]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_423461314415037]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90node-jsd3-js%e3%80%91rss%e3%83%aa%e3%83%bc%e3%83%80%e3%83%bc%e3%82%92%e4%bd%9c%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387612;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2975;}i:1;a:1:{s:2:"id";i:2690;}i:2;a:1:{s:2:"id";i:2701;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>本は捨てるもの</title>
		<link>http://shimz.me/blog/other/2646</link>
		<pubDate>Sat, 16 Mar 2013 00:14:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2646</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/oldbook.jpg" alt="oldbook" width="590" height="392" class="aligncenter size-full wp-image-2648" />

１週間に１冊小説を買うと１年で48冊の本が増える。
他、コミックスや雑誌、仕事柄どうしても購入せざる終えない技術書などを含めると、年間でわりと簡単に100冊を超えたりする。

当然、これら全ての本をとっておくスペースはないので、幾つかは捨てたり古書店に売ったりする。

また、永遠に価値の変わらない本があれば賞味期限のある本もある。

Twitter API 1.0の頃に買った参考書はそろそろ賞味期限が切れる。

本を買うのと同じくらい頻繁に本を捨てる。

だから私は書籍に関してはDRMをあまり気にしない。

オンラインゲームやソーシャルゲームでサービスが終了したら電子の海に藻屑となって消える仮想的なアイテムに、何万円もつぎ込む人が居ることを考えればさほど特殊なことでもないような気がする。

読みたいときにすぐ買えて、場所もとらない。廃品回収に出す手間もない。

一時の利便性を購入していると思えば、そんなに高い買い物でもないだろう。

そんなわけで、今日もせっせとKindleで本を購入してる。

<a href="http://anond.hatelabo.jp/20130314194117">シンプルな生き方を目指す</a>


【備考】
まぁ、安くなる分には文句はないので、DRM付きの場合は値引きとかしてくれるといいのだけれど。
あと、そのうちどっかが「格安なストリーミングでの書籍レンタル」とかやったらいいと思う。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2646</wp:post_id>
		<wp:post_date>2013-03-16 09:14:31</wp:post_date>
		<wp:post_date_gmt>2013-03-16 00:14:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9c%ac%e3%81%af%e6%8d%a8%e3%81%a6%e3%82%8b%e3%82%82%e3%81%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2648]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_636019143089326]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426952764;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2935;}i:1;a:1:{s:2:"id";i:643;}i:2;a:1:{s:2:"id";i:3305;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】作っておくと便利な関数達</title>
		<link>http://shimz.me/blog/d3-js/2649</link>
		<pubDate>Sun, 17 Mar 2013 00:48:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2649</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>ショートカット</h2>
D3はどうしても無名関数を多用することになるので、ショートカットを作っておくと便利です。
 
<pre class="lang:js decode:true " >function D(params){
    return function(d, i){
        if(typeof params ==='function') { return params(d) }
        else if( typeof params ==='string'){ return (new Function( 'return (' + d + params + ')' )()) }
        else { return d};
    }
}

function I(params){
    return function(d, i){
        if(typeof params ==='function') { return params(i) }
        else if( typeof params ==='string'){ return (new Function( 'return (' + i + params + ')' )()) }
        else { return i};
    }
}

function F(name){
  var params=Array.prototype.slice.call(arguments,1);  
    return function(d){
        if(typeof params[0] ==='function') { return params[0](d[name]) }
        else if( typeof params[0] ==='string'){ return (new Function( 'return (' + d[name] + params[0] + ')' )()) }
        else if( typeof name === 'object' ){ return name }
        else { return d[name]};
    }
}
</pre> 

使い方
 
<pre class="lang:js decode:true " title="sample" >var data1 = [10, 20 30];

//before 

d3.selectAll('rect')
  .data(data1)
  .enter()
  .append('rect')
  .attr({
     x:function(d){ return d },
     y:function(d){ return d * 10 + 100 }
  });

// after 

d3.selectAll('rect')
  .data(data1)
  .enter()
  .append('rect')
  .attr({
     x:D(),
     y:D('* 10 + 100')
  });

// other

var data2 = [{x:10, y:20, color:10}, {x:10, y:20, color:20}, {x:10, y:20, color:30}}
var colorScale = d3.scale.category20();

d3.selectAll('circle')
  .data(data1)
  .enter()
  .append('circle')
  .attr({
     r:I(),
     x:F('X'),
     y:F('y', '* 10 + 100'),
     color:F('color', colorScale),
  });</pre> 
   


<h2>部分適用、ランダム、データ生成</h2>
curryは厳密にはカリー化ではなく部分適用かもしれませんが、覚えやすいのでこの名前を使ってます。
 
<pre class="lang:default decode:true " >if (!Function.prototype.curry){
    (function(){
	var slice = Array.prototype.slice;
	
	Function.prototype.curry = function(){
	    var target = this;
	    var args = slice.call(arguments);
	    
	    return function(){
		var allArgs = args;
		if (arguments.length &amp;gt; 0){
		    allArgs = args.concat(slice.call(arguments));
		}
		return target.apply(this, allArgs);
	    };
	};
    }());
}

function R(s){ return Math.floor(Math.random() * s) }; 

function createData(obj, length){
    var data = [];
    for(var i=0; i < length; i++){
        if(typeof obj === 'function'){ data.push(obj())} 
        else{data.push(obj)};   
    }
    return data;
}
</pre> 

使い方
 
<pre class="lang:js decode:true " title="sample" >var rmdObj = function() { return {x:R(100), y:R(100)} };
var data = createData.curry(rmdObj);
data(4) // -> [{"x":93,"y":57},{"x":10,"y":26},{"x":26,"y":46},{"x":5,"y":50}]
data(4) // -> [{"x":17,"y":38},{"x":88,"y":77},{"x":48,"y":92},{"x":71,"y":26}]"
</pre> 

ランダムなデータを生成したいときに便利



<h2>トグル</h2>
トグルにしたい関数を二つ渡します。
 
<pre class="lang:js decode:true " >function toggle(){
    var fn = arguments;
    var l = arguments.length;
    var i = 0;
    return function(){
        if(l <= i) i=0;
        fn[i++]();            
    }
}
</pre> 

使い方
 
<pre class="lang:js decode:true " title="sample" >    function a1(){
          alert('Hello');  
    }
    function a2(){
        alert('world');    
    }
setInterval(toggle(a1, a2), 1000)
</pre> 



<h2>D3 Helper Function</h2>
jsdo.itで試せます。
<script type="text/javascript" src="http://jsdo.it/blogparts/qliL/js"></script>
&nbsp;
&nbsp;
<h2>D3utilityを使ったサンプル</h2>
<hr>
<script type="text/javascript" src="http://jsdo.it/blogparts/hhMQ/js"></script>
<script type="text/javascript" src="http://jsdo.it/blogparts/aKGu/js"></script>
<script type="text/javascript" src="http://jsdo.it/blogparts/tZNX/js"></script>
<script type="text/javascript" src="http://jsdo.it/blogparts/uOE3/js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2649</wp:post_id>
		<wp:post_date>2013-03-17 09:48:52</wp:post_date>
		<wp:post_date_gmt>2013-03-17 00:48:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2649</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_180121295468890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%8a%e3%81%8f%e3%81%a8%e4%be%bf%e5%88%a9%e3%81%aa%e9%96%a2%e6%95%b0%e9%81%94]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378255;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2975;}i:1;a:1:{s:2:"id";i:3824;}i:2;a:1:{s:2:"id";i:3753;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 Layout sample1</title>
		<link>http://shimz.me/blog/d3-js/2652</link>
		<pubDate>Mon, 18 Mar 2013 00:37:41 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2652</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/layout.jpg" alt="layout" width="462" height="461" class="aligncenter size-full wp-image-2653" />

D3.jsのLayout機能のサンプルです。

<a href="http://shimz.me/blog/d3-js/2649">こちら</a>で作成した関数を使っているので、合わせてどうぞ。


<a href="https://github.com/mbostock/d3/wiki/Pie-Layout"><strong>pie</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/hhMQ/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<a href="https://github.com/mbostock/d3/wiki/Stack-Layout"><strong>stack</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/qnNO/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<a href="https://github.com/mbostock/d3/wiki/Pack-Layout"><strong>pack</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/p52c/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<a href="https://github.com/mbostock/d3/wiki/Treemap-Layout"><strong>Treemap</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/2gSa/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2652</wp:post_id>
		<wp:post_date>2013-03-18 09:37:41</wp:post_date>
		<wp:post_date_gmt>2013-03-18 00:37:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-layout-sample1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2654]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_383477928426273]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427295736;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3803;}i:1;a:1:{s:2:"id";i:2701;}i:2;a:1:{s:2:"id";i:3534;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上に雲と天気を表示する</title>
		<link>http://shimz.me/blog/map/2656</link>
		<pubDate>Tue, 19 Mar 2013 00:31:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2656</guid>
		<description></description>
		<content:encoded><![CDATA[【追記】<a href="http://shimz.me/blog/google-map-api/3556">Google Maps APIの「お天気＆雲レイヤ」と「Panoramioレイヤ」は2015年に廃止されるそうです。</a>
<hr />
&nbsp;

<a href="http://shimz.me/example/gmapv3/07/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/googleweather1.jpg" alt="googleweather1" width="590" height="362" class="aligncenter size-full wp-image-2657" /></a>

いつのまにか、そんな機能がついていたらしい。

<a href="https://developers.google.com/maps/documentation/javascript/layers#WeatherLayer">The Weather and Cloud Layers (Library)</a>
なぜか、日本語版の「デベロッパーズガイド」にはこの機能のことが載ってない。

天気を表示するWeatherLayerと、雲を表示するCloudLayerを使用する場合は、libraries=weatherを付加してGoogle Map APIを読み込んでください。
<pre class="lang:xhtml decode:true " >&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;v=3&amp;language=ja&amp;libraries=weather&quot;&gt;
</pre> 
表示の仕方は<a href="http://shimz.me/blog/map/2151">ヒートマップ</a>に比べるとだいぶ簡単。
 
<pre class="lang:js decode:true " >function initialize() {
        var mapDiv = document.getElementById(&quot;map_canvas&quot;);
        var mapCanvas = new google.maps.Map(mapDiv, {
                center : new google.maps.LatLng(35.681382, 139.766084),
                zoom : 6,
                mapTypeId : google.maps.MapTypeId.ROADMAP
        });
        
       //天気レイヤ追加
        var weatherLayer = new google.maps.weather.WeatherLayer(); 
        weatherLayer.setMap(mapCanvas);
       
        //雲レイヤ追加
        var cloudLayer = new google.maps.weather.CloudLayer(); 
        cloudLayer.setMap(mapCanvas);
        
        
}
google.maps.event.addDomListener(window, &quot;load&quot;, initialize);</pre> 

<a href="http://shimz.me/example/gmapv3/07/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2656</wp:post_id>
		<wp:post_date>2013-03-19 09:31:49</wp:post_date>
		<wp:post_date_gmt>2013-03-19 00:31:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2656</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2657]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_580909865254385]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-map%e4%b8%8a%e3%81%ab%e9%9b%b2%e3%81%a8%e5%a4%a9%e6%b0%97%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427386043;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3556;}i:1;a:1:{s:2:"id";i:3671;}i:2;a:1:{s:2:"id";i:3793;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</title>
		<link>http://shimz.me/blog/editor/2661</link>
		<pubDate>Wed, 20 Mar 2013 01:17:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2661</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/komodoTools.png" alt="komodoTools" width="140" height="113" class="aligncenter size-full wp-image-2665" />

Dropbox等を使って複数の端末にインストールされたKomodo Editのtoolboxを同期させることができます。

WindowsとMac間でもスニペットやマクロの共有が可能です。

やりかたは、とても簡単。

toolboxのディレクトリ(tools)をDorpbox等に移動して、元の場所にシンボリックリンクを貼るだけです。

toolsディレクトリの場所はKomodo Editを起動し、toolbox上で右クリック「show Exploer(show Finder)」を選べばtoosフォルダが開きます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/komodoTooboxrightClick.jpg" alt="komodoTooboxrightClick" width="172" height="244" class="size-full wp-image-2666" />

toolsフォルダまでのパスを調べたらDropboxに移動し、シンボリックリンクを貼ってください．

<pre class="lang:sh decode:true " title="windows" >mklink /d  &lt;&lt;komodo Edit Path &gt;&gt;¥KomodoEdit¥7.1¥tools   &lt;&lt;Dpropbox Paht&gt;&gt;¥Dropbox¥tools
</pre> 
<pre class="lang:sh decode:true " title="Mac" >ln -s   &lt;&lt;Dpropbox Paht&gt;&gt;/Dropbox/tools &quot;&lt;&lt;komodo Edit Path &gt;&gt;/KomodoEdit/7.1/tools&quot;
</pre> 


WindowsのmklinkコマンドとMacのlnコマンドで<strong>引数が逆になる</strong>ので注意。(mklinkは管理者として実行しないとダメ)
macの場合、Komodo Editのパスに"/Application Support/"が含まれると思うのでダブルクォーテーションで囲みます。
また、mklinkの場合は「/d」オプションを忘れずに。


【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
&nbsp;


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2661</wp:post_id>
		<wp:post_date>2013-03-20 10:17:28</wp:post_date>
		<wp:post_date_gmt>2013-03-20 01:17:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2661</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2665]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_176342412516976]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[kodoedit-%e8%a4%87%e6%95%b0%e7%ab%af%e6%9c%ab%e3%81%a7%e3%82%b9%e3%83%8b%e3%83%9a%e3%83%83%e3%83%88%e3%82%84%e3%83%9e%e3%82%af%e3%83%ad%e3%82%92%e5%90%8c%e6%9c%9f%e5%85%b1%e6%9c%89%e3%81%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427139970;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2579;}i:1;a:1:{s:2:"id";i:74;}i:2;a:1:{s:2:"id";i:148;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinkStationにrsyncしたファイルをwindowsで開こうとしたら「アクセスが拒否されました。」と言われた時の対応</title>
		<link>http://shimz.me/blog/troubleshooting/2667</link>
		<pubDate>Thu, 21 Mar 2013 04:09:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2667</guid>
		<description></description>
		<content:encoded><![CDATA[バックアップを取るrsyncサーバーが必要になったので、LinkStationを購入。
rsyncサーバとして使う方法は以下の記事を参照。

<a href="http://d.hatena.ne.jp/rednes/20090806/1249516084">BuffaloのNASをrsyncサーバとして使う</a>

問題なくファイルは送れるのだけれど、Windowsから送ったファイルを開こうとすると拒否られた。

<img src="http://shimz.me/blog/wp-content/uploads/2013/03/linkstationrsync.jpg" alt="linkstationrsync" width="275" height="191" class="alignnone size-full wp-image-2668" />

とりあえず、メンドウなので「--chmodオプション」でパーミッションを「777」に指定することで回避
[shell]
rsync -avz --chmod=a+wr test.txt  rsync://admin@&lt;&lt;NAS IP-ADDRESS&gt;&gt;:873/disk1_rbackup
[/shell]

これで開ける。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2667</wp:post_id>
		<wp:post_date>2013-03-21 13:09:29</wp:post_date>
		<wp:post_date_gmt>2013-03-21 04:09:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linkstation%e3%81%abrsync%e3%81%97%e3%81%9f%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92windows%e3%81%a7%e9%96%8b%e3%81%93%e3%81%86%e3%81%a8%e3%81%97%e3%81%9f%e3%82%89%e3%80%8c%e3%82%a2%e3%82%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2668]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_121136258076856]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427389593;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:2331;}i:2;a:1:{s:2:"id";i:3465;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fusion TablesとGoogle Mapの連動が革命的に便利になっていた。</title>
		<link>http://shimz.me/blog/map/2670</link>
		<pubDate>Fri, 22 Mar 2013 11:38:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2670</guid>
		<description></description>
		<content:encoded><![CDATA[誰でも、地図を使った情報配信が出来る時代に……
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/fusion.jpg" alt="fusion" width="525" height="286" class="alignnone size-full wp-image-2687" />


<a href="http://pc.nikkeibp.co.jp/article/column/20110829/1036486/">Fusion Tables</a>とは「Google ドライブ」で利用できるデータベースです。
今年に入っていろいろと機能が追加されたらしく、以前に比べると非常に便利にそして手軽になっていました。
&nbsp;
<a href="https://www.google.com/fusiontables/DataSource?docid=1mlnItXyXD8lfmGtAhujeGgLMwLTB3OwZlLcZtdI">デモ１</a>
<a href="https://www.google.com/fusiontables/DataSource?docid=1hab1wE95GxzoQ7jwFwAkhFwJnli6d6g0zjf3AfY">デモ２</a>


<h2>目次</h2>
１．MAPジェネレーター機能
２．住所等を位置情報に変換
３．Google Map Apiのコードとして出力する

&nbsp;

<h2>１．MAPジェネレーター機能</h2>
以前は、ポイント表示ぐらいしか使えなかったような気がしたのですが、ポリゴンの情報などもアップロードできるようになり、KMLファイルなど位置情報を持つファイルをアップロードした場合、自動的にマッピングしてくれるようになっています。

今回は、国土数値情報からダウンロードした「交通流動量 パーソントリップ発生・集中量データ」をアップロードしてみます。
まずは、Quantum GISを使ってシェープデータを<a href="http://shimz.me/blog/map/2135">KMLに変換</a>します。

変換したKMLをアップロードします。

「作成」から「Fusion Tables」を選択します。
「Fusion Tables」をはじめて使うかたは「アプリを追加」から追加してください。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000014.jpg" alt="gmfusiontables000014" width="624" height="342" class="border alignnone size-full wp-image-2671" />

&nbsp;

作成したKMLをアップロードします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000002.jpg" alt="gmfusiontables000002" width="624" height="338" class="border alignnone size-full wp-image-2672" />

&nbsp;

しばらくするとプレビューが表示されるので問題なければ「Next」ボタンを押します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000003.jpg" alt="gmfusiontables000003" width="624" height="338" class="border alignnone size-full wp-image-2673" />

&nbsp;

「Fusion Tables」ファイルが作成されました。
既に「Map of geometry」というタブが作成されています。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000001.jpg" alt="gmfusiontables000001" width="624" height="345" class="border alignnone size-full wp-image-2675" />

&nbsp;

タブをクリックするとMap上にデータが表示されます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000004.jpg" alt="gmfusiontables000004" width="624" height="345" class="border alignnone size-full wp-image-2674" />

&nbsp;

「Tools」->「Change Map Styles」からデータ表示のカスタマイズを行います。
今回は「Polygons」の「Fill color」を「Gradient」に。
カラムを選択して最小値と最大値を入力すれば完成です。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000005.jpg" alt="gmfusiontables000005" width="590" height="531" class="border alignnone size-full wp-image-2676" />

&nbsp;

マップに戻ると…選択したカラムの値によって地図が塗り分けられるようになりました。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000007.jpg" alt="gmfusiontables000007" width="624" height="345" class="border size-full wp-image-2678" />

&nbsp;

フィルタを使って絞りこみ表示なども簡単です。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000009.jpg" alt="gmfusiontables000009" width="624" height="345" class="border size-full wp-image-2679" />

&nbsp;

<h2>２．住所を位置情報に変換</h2>
簡単に言ってしまうと、住所や郵便番号などの入ったカラムをgeocodeを使って位置情報に変換する機能です。
緯度経度など地理情報を持たないデータも地図上にマッピングすることができます。

都道府県の「人口、面積、人口密度」を記載したcsvファイルをアップロードします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000000-e1363949308353.jpg" alt="ggmfusiontables000000" width="624" height="426" class="border size-full wp-image-2680" />

&nbsp;

カラムのメニューからChangeを選びます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000001.jpg" alt="ggmfusiontables000001" width="401" height="250" class="border size-full wp-image-2681" />

&nbsp;

「Type」をLocationに変更してセーブします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000003.jpg" alt="ggmfusiontables000003" width="363" height="555" class="border size-full wp-image-2682" />

&nbsp;

選択したカラムの値の色が黄色くなります。
（この時点ではまだ位置情報に変換されていません）
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000004.jpg" alt="ggmfusiontables000004" width="624" height="426" class="border size-full wp-image-2683" />

&nbsp;

FileメニューからGeocodeを選択します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000005.jpg" alt="ggmfusiontables000005" width="282" height="401" class="border size-full wp-image-2684" />

&nbsp;

「start」ボタンをクリック。Geocodeによる変換が開始します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000008.jpg" alt="ggmfusiontables000008" width="624" height="426" class="border size-full wp-image-2685" />

&nbsp;

変換が終わったらMapタブを追加しちゃんと位置が合っているか確認します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000010.jpg" alt="ggmfusiontables000010" width="640" height="437" class="border size-full wp-image-2686" />

以上です。
この機能を使えば、今まで位置情報が手に入らず活用できていなかったデータも地図上に表示して使うことができます。

ちなみにGeocodeによる変換は1日2500件という制限があります。
変換が終わっっていない行は黄色く表示されたままなので、次の日にでもまた変換作業をおこなってください。
(分かりやすく色づけしてくれるなんてGoogleさんは親切ですねｗ)

ちなみに、位置情報はあとから変更も可能です。
詳細は<a href="http://shimz.me/blog/map/4038">こちら</a>を。

&nbsp;

<h2>３．Google Maps Apiのコードとして出力する機能</h2>
Google Maps APIのコードとして出力できるので、他データと組み合わせてレイヤーを重ねたりなどのカスタマイズもできます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000008.jpg" alt="gmfusiontables000008" width="473" height="622" class="border size-full wp-image-2689" />
&nbsp;

<h2>関連記事</h2>
<a href="http://shimz.me/blog/map/3793">複数のFusion Tablesを一つの地図上に重ねて表示する。</a>
<a href="http://shimz.me/blog/map/4038">[Fusion Tables]阪神・淡路大震災の記録写真(オープンデータ)に位置情報付加してみた。</a>
&nbsp;
&nbsp;

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2670</wp:post_id>
		<wp:post_date>2013-03-22 20:38:51</wp:post_date>
		<wp:post_date_gmt>2013-03-22 11:38:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2670</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_428601800562306]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2687]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fusion-tables%e3%81%a8google-map%e3%81%ae%e9%80%a3%e5%8b%95%e3%81%8c%e9%9d%a9%e5%91%bd%e7%9a%84%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427389139;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3202;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>350</wp:comment_id>
			<wp:comment_author><![CDATA[GoogleMapに複数個のピンを一括登録（for Fusion Tables） | BeanB]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://beanb.wordpress.com/2014/09/01/fusion-tables%e3%81%a8googlemap%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e8%a4%87%e6%95%b0%e7%ae%87%e6%89%80%e3%81%ab%e4%b8%80%e6%8b%ac%e3%81%a7%e3%83%94%e3%83%b3%e3%8</wp:comment_author_url>
			<wp:comment_author_IP>66.155.8.139</wp:comment_author_IP>
			<wp:comment_date>2014-09-02 11:33:47</wp:comment_date>
			<wp:comment_date_gmt>2014-09-02 02:33:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 参考にしたのはこのサイトhttp://shimz.me/blog/map/2670 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409642116.7032968997955322265625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409625227.2699930667877197265625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>[node.js]静的コンテンツを表示するWEBサーバー</title>
		<link>http://shimz.me/blog/node-js/2690</link>
		<pubDate>Tue, 26 Mar 2013 02:22:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2690</guid>
		<description></description>
		<content:encoded><![CDATA[ローカルでちょっとしたテストを行いたいときなどに。
実行するとカレントディレクトリをルートディレクトリとしたWEBサーバーがローカルで起動します。
下位フォルダなどに置かれたコンテンツにもアクセスできます。
ついでにJSONファイルなどには、ヘッダーに「Access-Control-Allow-Origin」を付加します。

<pre class="lang:js decode:true " title="server.js" >var http = require(&quot;http&quot;),
    url = require(&quot;url&quot;),
    path = require(&quot;path&quot;),
    fs = require(&quot;fs&quot;),
    port = process.argv[2] || 8888;
 
     
http.createServer(function(request, response) {

	var Response = {
		&quot;200&quot;:function(file, filename){
			var extname = path.extname(filename);
			var header = {
				&quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;,
				&quot;Pragma&quot;: &quot;no-cache&quot;,
				&quot;Cache-Control&quot; : &quot;no-cache&quot;	   
			}

			response.writeHead(200, header);
			response.write(file, &quot;binary&quot;);
			response.end();
		},
		&quot;404&quot;:function(){
			response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
			response.write(&quot;404 Not Found\n&quot;);
			response.end();
		
		},
		&quot;500&quot;:function(err){
			response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
			response.write(err + &quot;\n&quot;);
			response.end();
		
		}
	}

  
	var uri = url.parse(request.url).pathname
	, filename = path.join(process.cwd(), uri);

	fs.exists(filename, function(exists){
		console.log(filename+&quot; &quot;+exists);
		if (!exists) { Response[&quot;404&quot;](); return ; }
		if (fs.statSync(filename).isDirectory()) { filename += '/index.html'; }

		fs.readFile(filename, &quot;binary&quot;, function(err, file){
		if (err) { Response[&quot;500&quot;](err); return ; }
			Response[&quot;200&quot;](file, filename);   
		}); 

	});
 
   
}).listen(parseInt(port, 10));
  
console.log(&quot;Server running at http://localhost:&quot; + port );</pre> 


実行
<pre class="lang:sh decode:true " >$ node server.js </pre> 

D3.jsのcsvメソッドなんかはセキュリティの関係でローカルのファイルを読めない(chromeの起動オプションとかで回避できるみたいだけど)ので、シンプルなwebサーバーがあると重宝します。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2690</wp:post_id>
		<wp:post_date>2013-03-26 11:22:37</wp:post_date>
		<wp:post_date_gmt>2013-03-26 02:22:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2690</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_499760763416668]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js%e3%83%86%e3%82%b9%e3%83%88%e7%94%a8%e3%81%ab%e9%9d%99%e7%9a%84%e3%82%b3%e3%83%b3%e3%83%86%e3%83%b3%e3%83%84%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8bweb%e3%82%b5%e3%83%bc%e3%83%90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378536;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2643;}i:1;a:1:{s:2:"id";i:1167;}i:2;a:1:{s:2:"id";i:2944;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【tipsy】シンプルでカッコいいツールチップを表示するjQueryプラグイン</title>
		<link>http://shimz.me/blog/jquery/2693</link>
		<pubDate>Wed, 27 Mar 2013 03:04:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2693</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/tipsy/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/tipsy.jpg" alt="tipsy" width="167" height="133" class="alignnone size-full wp-image-2694" /></a>

<a href="http://onehackoranother.com/projects/jquery/tipsy/">tipsy - Facebook-style tooltip plugin for jQuery</a>

使い方はとても簡単で要素を指定してtipsyを実行するだけ。
<pre class="lang:js decode:true " >$('#example-1').tipsy();
</pre> 
ツールチップの表示位置や表示されるまでのスピードなども設定できます。
また、HTMLだけではなくSVGのツールチップも装飾してくれます。

SVGでは、ツールチップをtitle属性ではなく、titile要素をツールチップを表示したい要素の子要素として記述します。
svgでのツールチップの記述。
 
<pre class="lang:xhtml decode:true " >&lt;svg&gt;
    &lt;circle class=&quot;circle&quot; fill=&quot;red&quot; r=&quot;21&quot; cx=&quot;100&quot; cy=&quot;100&quot;&gt;
        &lt;title&gt;hoge&lt;/title&gt;
   &lt;/circle&gt;
&lt;/svg&gt;
</pre> 

tipsyはこの場合でも問題なくツールチップを装飾してくれます。
jQueryを読み込まないとならないけれど、D3.jsと組み合わせてつかっても便利です。

<a href="http://shimz.me/example/d3js/tipsy/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2693</wp:post_id>
		<wp:post_date>2013-03-27 12:04:10</wp:post_date>
		<wp:post_date_gmt>2013-03-27 03:04:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2693</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2694]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90tipsy%e3%80%91%e3%82%b7%e3%83%b3%e3%83%97%e3%83%ab%e3%81%a7%e3%82%ab%e3%83%83%e3%82%b3%e3%81%84%e3%81%84%e3%83%84%e3%83%bc%e3%83%ab%e3%83%81%e3%83%83%e3%83%97%e3%82%92%e8%a1%a8%e7%a4%ba]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427227231;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3181;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:4052;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】時間毎のアクセス数を可視化</title>
		<link>http://shimz.me/blog/d3-js/2695</link>
		<pubDate>Thu, 28 Mar 2013 03:33:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2695</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/color/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/colormap000000.jpg" alt="colormap000000" width="600" height="346" class="alignnone size-full wp-image-2696" /></a>


今回は、週ごとと曜日ごとへの並べ変えができるようにしてみました。


<h2>データセットの準備</h2>
元データは、<a href="http://shimz.me/blog/d3-js/2614">こちら</a>と同じくGoogle Analyticsからエクスポートしたものを使ってます。
こんな感じ。
 
<pre class="lang:default decode:true " >date,hour,visitors
2013-01-01,0,2
2013-01-01,1,1
2013-01-01,3,1
2013-01-01,7,2
　　・
　　・
　　・
</pre> 

上記のcsvを扱いやすいようにd3.nest関数を使って、日付(date)をキーとしたオブジェクトに変換しています。
変換後のデータはこんな感じ。
 
<pre class="lang:js decode:true " >[
	{
		"key" : "2013-01-01", "values" : [ {
			"date" : "2013-01-01", "hour" : "0", "visitors" : "2"
		},
		{
			"date" : "2013-01-01", "hour" : "1", "visitors" : "1"
		},
					・
					・
					・
		]
	},

	{
		"key" : "2013-01-02", "values" : [ {
			"date" : "2013-01-02", "hour" : "0", "visitors" : "2"
		},
		{
			"date" : "2013-01-02", "hour" : "1", "visitors" : "1"
		},
					・
					・
					・			
		]
	},

	{
		"key" : "2013-01-03", "values" : [ {
			"date" : "2013-01-03", "hour" : "0", "visitors" : "5"
		},
		{
			"date" : "2013-01-03", "hour" : "1", "visitors" : "4"
		},
					・
					・
					・			
		]
	},
	・
	・
	・			
]</pre> 

読み込むたびに変換処理が行われるのは重いので変換したデータをJSONで出力→保存して使いました。
<a href="http://shimz.me/example/d3js/color/01/nest.html">CSV→JSON変換</a>
 
<pre class="lang:js decode:true " >d3.csv('access.csv', function(csv){

	data = d3.nest()
			.key(function(d){  return d.date; }) //dateをkeyにしてネスト
			.entries(csv);
			
	var jsonData = JSON.stringify(data);

	//Data URI schemeとしてエクスポート
	d3.select('body').append('p').append('a').text('Data URI schemeで出力').attr({
			href: "data:text/plain;base64,"+ btoa(jsonData)
	});

	//テキストエリアにエクスポート
	d3.select('body').append('textarea').text(jsonData);
	
});</pre> 

これでデータセットの準備が整ったので表示します。



<h2>表示</h2>
keyにしたdateの数だけグループ(&lt;g&gt;)を作成し、その中に１日分のラベルとセル(&lt;rect&gt;)を収めています。
週ごと、曜日ごとの切り替わりは、gタグのtarnsform属性をy軸だけ変化させて移動してます。
セルを並べるのが割とメンドクサクてマジックナンバー頻出の酷いコードになりました orz
あと、ネストしたデータから最大値を取り出すのは結構大変でした。
 
<pre class="lang:js decode:true " >d3.json('access.json' ,function(data){
	var weekday = ["日","月","火","水","木","金","土"];

	//visitorsの最大値を取得
	var max = d3.max( 
			data.map(function(d){
				return parseInt(
					d.values.map(function(dd){
						return parseInt(dd.visitors)
					})
				)
			})
		 );
	
	var svg = d3.select('svg').data([data]);
	
	var colorScale = d3.scale.linear().domain([0,5, 15, max]).range(["#FFFFFF","#FF9999" ,"#FF0000","#990000"]);
	
	
	var groupAttr = {
			transform: function(){
				var m = 10;
				return function(d, i){
						if((new Date(d.key)).getDay()==0) m += 40;  //日曜日ごとにY軸のマージンを増加
						return "translate(" +[200, m + (i * 16)] + ")";
					}
				}(),
			width:10,
			height:10									
	}
	
	
	var group = svg.selectAll('g') //日付ラベルと一日分のセルを囲むグループ
			.data(D())
			.enter()
			.append('g')
			.attr(groupAttr)
	
	
	var ylabelAttr = {
			x: -100,
			y: 10,
			"text-anchor": "middle",
			"aligbment-baseline": "center",
			fill: "black",
			stroke: "none"																												
		}

	var ylabel = group.append('text') //日付ラベル追加
			.attr(ylabelAttr)
			.text(function(d){ return d.key + ":" + weekday[(new Date(d.key)).getDay()] })
	
	
	var rectAttr = {
			x: F('hour', '* 20'),
			y: 0,
			width:10,
			height:10,
			fill: F('visitors', colorScale)					
		}

	var rect = group.selectAll('rect') //カラーセル追加
			.data(F('values'))
			.enter()
			.append('rect')
			.attr(rectAttr)
			
	rect.append('title').text(function(d){ return d.date + " " + d.hour +"時 訪問者:" + d.visitors }) //tooltip追加
	
	
	
	svg.on("click", toggle(daySort, weekSort));	
	
		
	//曜日ごと表示
	function daySort(){
		group.transition().duration(1000).attr({
			transform:function(d, i){
				var day = (new Date(d.key)).getDay();
				return "translate(" + [200, day * 300 ] + ")"
			}
		});
		rect.attr({
			y:function(d, i){
				var l = 0, preDate;
				return function(d, i){
					if(d.date != preDate){ l += 2.5; preDate = d.date} //日付が変わったらセルのy軸を一段下げる
					return l
				}
			}()
		});				
		ylabel.attr(y:I('* 2.5+12'));
	}
	
	//週ごと表示	
	function weekSort(){
		group.transition().duration(1000).attr({
			transform: function(){
				var m = 10;
				return function(d, i){
					if((new Date(d.key)).getDay()==0) m += 40;  //日曜日ごとにY軸のマージンを増加
					return "translate(" +[200, m + (i * 16)] + ")";
				}
			}(),				
		});
		rect.attr(rectAttr);
		ylabel.attr(ylabelAttr)	;		
	}


	

	/*
	 *D3 Utility
	 *http://shimz.me/blog/d3-js/2649
	 */
	</pre> 

<a href="http://shimz.me/example/d3js/color/01/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2695</wp:post_id>
		<wp:post_date>2013-03-28 12:33:59</wp:post_date>
		<wp:post_date_gmt>2013-03-28 03:33:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2695</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2696]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e6%99%82%e9%96%93%e6%af%8e%e3%81%ae%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e6%95%b0%e3%82%92%e5%8f%af%e8%a6%96%e5%8c%96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427365601;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2975;}i:1;a:1:{s:2:"id";i:2701;}i:2;a:1:{s:2:"id";i:2755;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>リアクティブドキュメントを作成するライブラリ、他</title>
		<link>http://shimz.me/blog/bookmark/2699</link>
		<pubDate>Fri, 29 Mar 2013 07:27:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2699</guid>
		<description></description>
		<content:encoded><![CDATA[気になった記事メモ。

<div class="box"><a href="http://worrydream.com/Tangle/" target="_blank">Tangle: a JavaScript library for reactive documents</a>
リアクティブドキュメント(?)を作成できるライブラリ。どんなことが出来るのかはデモを見たほうが早い。</div>
<div class="box"><a href="http://objrefnotset.blogspot.jp/2013/03/currying-favor-with-partial-application.html" target="_blank">Object Reference Not Set: Currying Favor with Partial Application to get JavaScript SQL</a>
カリー化を利用して、JavaScriptのオブジェクトからSQL風に値を取り出す機能を実装するチュートリアル。</div>
<div class="box"><a href="http://davidwalsh.name/vendor-prefix" target="_blank">Detect Vendor Prefix with JavaScript</a>
閲覧中のブラウザが使用しているベンダープレフィックスを検出する</div>
<div class="box"><a href="http://bilaw.al/2013/03/17/hacking-the-a-tag-in-100-characters.html" target="_blank">Hacking the &lt;a&gt; tag in 100 characters</a>
aタブにhref属性の値(リンク先)を変更するonclickイベントを仕込めば、マウスオーバーでリンク先を確認してもフィッシングが可能だよね、という話。</div>
<div class="box"><a href="http://o-0.me/pXY/" target="_blank">pXY.js - pixel analysis for HTML5 Canvas</a>
Canvasを使った画像分析用ライブラリ</div>
<div class="box"><a href="http://games.greggman.com/game/webgl-3d-cameras/" target="_blank">WebGL 3D – Cameras « games.greggman.com</a>
Web GLのカメラ操作についてのチュートリアル</div>

&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2699</wp:post_id>
		<wp:post_date>2013-03-29 16:27:10</wp:post_date>
		<wp:post_date_gmt>2013-03-29 07:27:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%aa%e3%82%a2%e3%82%af%e3%83%86%e3%82%a3%e3%83%96%e3%83%89%e3%82%ad%e3%83%a5%e3%83%a1%e3%83%b3%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90%e3%81%99%e3%82%8b%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427402133;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2977;}i:1;a:1:{s:2:"id";i:862;}i:2;a:1:{s:2:"id";i:2534;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>今後の予定(D3.jsとかGISとか他)</title>
		<link>http://shimz.me/blog/other/2700</link>
		<pubDate>Sun, 31 Mar 2013 11:28:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2700</guid>
		<description></description>
		<content:encoded><![CDATA[年度も終わるので改めて。
やることリスト。

<ul>
	<li>D3.js、データセットを追加したり減らしたりしてのアップデート、トランジションが意図した通りに動かない場合が多いので調べる。
</li>
	<li>シェープファイルをMapShaperで軽くすると属性情報がごっそり抜けるので、これの対処方法を調査。
</li>
	<li>↑Quantum GISで出来ないのかな？
</li>
	<li>Quantum GIS で属性テーブルの結合の仕方
</li>
	<li>Google Maps APIも機能が増えてきたので追う。カスタムストリートビュー作りたい。
</li>
</ul>


あと、データの作り方もうちょっと勉強したい。用意されているデータだけだと限界がある。

スクレイピングとかのデータの取得方法と、取得したデータを使いやすいように整形する方法の勉強が必要かな。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2700</wp:post_id>
		<wp:post_date>2013-03-31 20:28:40</wp:post_date>
		<wp:post_date_gmt>2013-03-31 11:28:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bb%8a%e5%be%8c%e3%81%ae%e4%ba%88%e5%ae%9ad3-js%e3%81%a8%e3%81%8bgis%e3%81%a8%e3%81%8b%e4%bb%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425892610;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2575;}i:1;a:1:{s:2:"id";i:2321;}i:2;a:1:{s:2:"id";i:4052;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Gunma.webのソーシャルグラフ作ってみた。</title>
		<link>http://shimz.me/blog/node-js/2701</link>
		<pubDate>Mon, 01 Apr 2013 09:59:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2701</guid>
		<description></description>
		<content:encoded><![CDATA[ソーシャルグラフには浪漫があるよね。
<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/force.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/colormap000002.jpg" alt="colormap000002" width="600" height="422" class="aligncenter size-full wp-image-2702" /></a>

ソーシャルグラフを作ってみたかったので、Gunma.webに参加されたユーザーのグラフを作ってみました。
ユーザー間のリンクは、同じイベントに参加している回数が多いほど太く表示されます。
アイコンやユーザー名をクリックするとリンクが強調(赤)されます。
（アイコン画像はATNDから直で読み込んでいるので、そのうち弾かれるかも）

<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/force.html">Gunma.web Social Graph</a>
激重です。できればChromeで見てやってください。


Gunma.webについては<a href="http://gunma-web.org/">こちら</a>


<h2>やったこと</h2>
<ol>
	<li>ATNDからイベント参加ユーザの取得</li>

	<li>イベントに参加したユーザーの組み合わせ（Combination）リスト作成</li>

	<li>重複する組み合わせをカウント(同じイベントに参加している回数)</li>

	<li>上記のデータをCSVで出力</li>

	<li>CSVファイルをD3.jsでJSONに変換</li>

	<li>Force Layoutdで表示</li>
</ol>



<h2>データセットの作成(手作業多め)</h2>
ATNDからデータを取得するスクリプトをnode.jsで作成します。
(APIを使えばよかったということに後で気付きましたが、後の祭り)

まずは、必要なライブラリをインストールします。
 
<pre class="lang:sh decode:true " >$ npm install request
$ npm install cheerio
</pre> 


Atndスクレイピング用スクリプト(atnd.js)
 
<pre class="lang:js decode:true " >var request = require("request");
var cheerio = require("cheerio");
var atndId  = process.argv[2];
if(!atndId){
	console.log('Not Found atndId')
	return ;
}

request({
	uri: "http://atnd.org/events/" + atndId,
	}, function(error, response, body) {
	var $ = cheerio.load(body);
	var user =[]; 

	$(".a-b &gt; li &gt; span").each(function() {
		var link = $(this).find('a');
		var text = link.text();
		user.push(text);
	});

	var n = user.length;
	var i, j;

	for(i = 0; i &lt; n; i++){
		for(j = i + 1; j &lt; n; j++){
			console.log(user[i] + ", " + user[j]);
		}
	}
});
</pre> 

&nbsp;
実行
 
<pre class="lang:sh decode:true " >$ node atnd.js [ATNDページのID] > gunmaweb1.txt
</pre> 

実行すると対象のATNDページから参加ユーザーを取得し、全ての組み合わせを出力します。
これをgunma.web～gunma.web#12まで繰り返し、全てのユーザー組み合わせを取得。

&nbsp;
出力したテキストファイルをcatコマンドで一つにまとめます。
 
<pre class="lang:sh decode:true " >$ cat * &gt; user.txt
</pre> 


&nbsp;
重複している組み合わせをカウントし、ユニークなユーザー組み合わせのみのリストに変換します
 
<pre class="lang:sh decode:true " >cat user.txt|sort|uniq -c &gt; ulist.txt
</pre> 

（これで計算あっているはず……たぶん）


&nbsp;
作成したファイルをExcelで読み込み「データ→区切り位置」機能を使用して「重複カウント(value),ユーザー（source）、ユーザー（target）」のリストに変換しcsvで保存します。
出来上がったのが下記csvファイルです。
<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/data.csv">data.csv</a>

このcsvをForce Layoutで使用できるようにJSONに変換します。
d3.jsを使って変換スクリプトを作成しました。
 
<pre class="lang:js decode:true " >d3.csv('data.csv', function(data){


	graph = {'nodes': [], 'links': [] };

	data.forEach(function(d){
		graph.nodes.push({'name': d.source });
		graph.nodes.push({'name': d.target });

		graph.links.push({
			'source': d.source,
			'target': d.target,
			'value': d.value
		});
	})
	graph.nodes = d3.keys(
		d3.nest()
		.key(function(d) { return d.name; })
		.map(graph.nodes)
	);

	graph.links.forEach(function(d, i){
		graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);
		graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);
	});


	graph.nodes.forEach(function(d,i){
		graph.nodes[i] = {'name': d };
	});
	

	var jsonData = JSON.stringify(graph);
	//テキストエリアにエクスポート
	d3.select('body').append('textarea').text(jsonData);	

});
</pre> 

<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/convert.html">example convert.html</a>
上記のデータをjsonファイルとして保存して、データ作成は完了です。

source,targetのリストからnodeとlinkを含むオブジェクトを作る作業については、<a href="https://leanpub.com/D3-Tips-and-Tricks">D3 Tips and Tricks</a>「Sankey Diagramsn」の章に詳しく掲載されていますので興味ある方は参照ください。



<h2>Force Layout 表示</h2>
Force Layoutについては<a href="https://github.com/mbostock/d3/wiki/Force-Layout">こちら</a>を
 
<pre class="lang:js decode:true " >d3.json('data.json', function(data){
			
	var w = d3.select('body').style('width').replace('px','');
	var h = 1000;
	
	//dataSet valueの最大値取得
	var valueMax = d3.max(data.links, function(d){ return d.value });
			
	var opacityScale = d3.scale.linear().domain([0, valueMax]).range([0.4, 0.8]);		//valueの値によって透明度を変化させる
	var colorScale = d3.scale.linear().domain([0, valueMax]).range(["white", "blue"]); //valueの値によってカラーを変化させる
	

	//グラフを描画するステージ（svgタグ）を追加
	var svg = d3.select("svg").attr("width", w).attr("height", h);

	//グラフタイトル追加
	svg.append('text')
		.attr({
			x:10,
			y:80,
			fill: "white",
			"font-size":60
		})
		.text("Gunma.web Social Graph");
	 
	//グラフの初期設定
	var force  = d3.layout.force()
		.nodes(data.nodes)
		.links(data.links)
		.gravity(.05) //重力
		.distance(500) //ノード間の距離
		.charge(-300) //各ノードの引き合うor反発しあう力
		.size([w, h]); //図のサイズ
	
	
	//ユーザー間のリンク作成
	var link = svg.selectAll("line.link")
		.data(force.links(), function(d, i) {  return d.source + '-' + d.target; }) //linksデータを要素にバインド
		.enter().append("svg:line")
		.attr({
			"class":function(d){ return "link " + "l"+data.nodes[d.source].name.replace(/\./g,'') + " " + "l"+data.nodes[d.target].name.replace(/\./g,'') }, 
			"stroke": 'blue',
			"stroke-opacity":function(d){ return opacityScale(d.value) },
			"stroke-width":function(d){ return d.value } 
		});
			
	
	//nodeデータをバインディング 
	var node = svg.selectAll("g.node").data(force.nodes(), function(d) { return d.name;} );
	
	//ユーザーグループ
	var nodeEnter = node.enter().append("g")
		.attr("class", "node")
		.attr("id", function(d){ return d.name.replace(/\./g,'') }) 
		.on('click', function(){
			d3.selectAll(".link").attr("stroke", "blue")
			d3.selectAll(".l"+d3.select(this).attr('id'))
			.attr("stroke", "red")
		})
		.call(force.drag); //ノードをドラッグできるように設定
	
	//ユーザーアイコン追加
	nodeEnter.append("image")
		.attr("class", "user")
		.attr({
			"xlink:href":function(d){ return d.img }, //ノード用画像の設定
			"x":"-16px",
			"y":"-16px",
			"width":"32px",
			"height":"32px"
		});
	
	//ユーザー名追加 
	nodeEnter.append("text")
		.attr("class", "nodetext")
		.attr({
			"dx":30,
			"dy":".35em",
			"fill":"white"
		})
		.text(function(d) { return d.name });
	
	//フォースレイアウトのアニメーションを開始
	force.start();
	
	//アニメーションループ
	force.on("tick", function() {
		node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
		link.attr({
			x1: function(d) { return d.source.x; },
			y1: function(d) { return d.source.y; },
			x2: function(d) { return d.target.x; },
			y2: function(d) { return d.target.y; }
		});
	});
	
			
});
</pre> 

<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/force.html">example</a>


<h2>やってみてわかったこと</h2>
データセットを作るのが一番大変。
特に今回はwindows上で作業したのでSJIS-UTF8の変換を繰り返す羽目になってしまった。
nkfはやっぱり便利。
Force Layouは、うまく動かなかったときのデバッグが難しい。

本当は、過去群馬で開催されたイベント全てからデータを取ろうと思っていたのですが、力付きました。
まぁ、これ以上データが多くなると見づらくなるし。
愚直にデータを全て表示するのではなく、程よく省略してフォーカスが当たったときに詳細を表示する（ズーム／パン）処理を行いたいのですが、なかなかうまくいきません orz 

その辺の処理がちゃんとできるようになったら再挑戦したいと思います。

&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2701</wp:post_id>
		<wp:post_date>2013-04-01 18:59:31</wp:post_date>
		<wp:post_date_gmt>2013-04-01 09:59:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2701</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2702]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-gunma-web%e3%81%ae%e3%82%bd%e3%83%bc%e3%82%b7%e3%83%a3%e3%83%ab%e3%82%b0%e3%83%a9%e3%83%95%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427408423;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3714;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:2755;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js + GMap】群馬県の過疎地域</title>
		<link>http://shimz.me/blog/d3-js/2703</link>
		<pubDate>Tue, 02 Apr 2013 05:29:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2703</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo9/"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/kasomap.jpg" alt="群馬県過疎地域" width="497" height="499" class="aligncenter size-full wp-image-2704" /></a>


<a href="http://shimz.me/example/d3js/geo_example/geo9/">example</a>

週末にノマドりながら作ったもの。
技術的には<a href="http://shimz.me/blog/d3-js/2379">以前の記事</a>の延長線上のものなので、新しい部分はない。
本当は、過去のデータも使って過疎地域の遷移を表示してみようと思ったのだけれど、昭和45年のデータと比較してもそんなに違いがなかったので断念。
どうせなら、OpenLayersで同じ事ができるか試せばよかったかも。
<del datetime="2013-05-07T09:42:13+00:00">D3.jsで過疎地域のSVGを描いてGoogleMapのレイヤーに重ねているけれど、ズーム／パンした際の再計算が結構重い。</del>
drawファンクションが呼ばれる度にgeojsonを読み込み直しているので、そりゃ遅いわ　orz
コード修正しました。


全国のデータを表示するなら、KMLにして<a href="http://shimz.me/blog/map/2670">Fusion Tables</a>を使った方が良いかも。

あと、国土数値情報サイトは都道府県毎以外に全国区のデータを一つのshapeファイルで落とせるようにしてくれるといいのに……。


<h2>サンプル</h2>
<pre class="lang:js decode:true " >d3.json(&quot;gunma.geojson&quot;, function(gunmajson) {
	d3.json(&quot;kaso.geojson&quot;, function(kasojson) {  
		main(gunmajson, kasojson)
	});
});



function main(gunmajson, kasojson) {
	
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 9,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			center: new google.maps.LatLng(36.53, 139.06),       
		});

	//Google Map スタイル指定
	var styleOptions = [{
		featureType: 'all',
		elementType: 'labels',
		stylers: [{ visibility: 'on' }]
	}, {
		featureType: 'all',
		elementType: 'geometry',
		stylers: [{ hue: '#593869' }, { saturation: '-70' }, { gamma: '0.5' }]
	}];

	var lopanType = new google.maps.StyledMapType(styleOptions);
	map.mapTypes.set('noText', lopanType);
	map.setMapTypeId('noText');



	//OverLayオブジェクトの作成	
	var overlay = new google.maps.OverlayView(); 

	//オーバーレイ追加
	overlay.onAdd = function () {

		var layer = d3.select(this.getPanes().overlayLayer).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;SvgOverlay&quot;); //レイヤー作成(div)

		var svg = layer.append(&quot;svg&quot;); //レイヤーにSVGタグ追加
		var gunmalayer = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions1&quot;); //群馬県地図表示用グループ
		var kasolayer = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions2&quot;); //過疎地域表示用グループ
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection(); //オーバーレイのProjection取得

		// Google Map Projection 作成
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}

		//Google Map ProjectionをD3.jsのProjectionとして指定
		path = d3.geo.path().projection(googleMapProjection);		

		//地図描画イベントリスナー
		overlay.draw = function () {

			//群馬地図描く
			gunmalayer.selectAll(&quot;path&quot;)
				.data(gunmajson.features)
				.attr(&quot;d&quot;, path) 
				.enter().append(&quot;svg:path&quot;)
				.attr(&quot;d&quot;, path)
				.attr({
					&quot;class&quot;: 'gunma',
					&quot;fill&quot;: &quot;black&quot;,
					&quot;fill-opacity&quot;: 0.2
				});
			
			
			//過疎地域描く
			kasolayer.selectAll(&quot;path&quot;)
				.data(kasojson.features)
				.attr(&quot;d&quot;, path) 
				.enter().append(&quot;svg:path&quot;)
				.attr(&quot;d&quot;, path)
				.attr({
					&quot;class&quot;: &quot;kaso&quot;,
					&quot;fill&quot;: &quot;red&quot;,
					&quot;fill-opacity&quot;: 0.5
				});
				
			
		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);

}</pre> 

<a href="http://shimz.me/example/d3js/geo_example/geo9/">example</a>


【関連】
<a href="http://shimz.me/blog/d3-js/2635" target="_blank">【D3.js】群馬県の賃貸価格データを可視化してみた（散布図＆地図</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2703</wp:post_id>
		<wp:post_date>2013-04-02 14:29:54</wp:post_date>
		<wp:post_date_gmt>2013-04-02 05:29:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2703</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2704]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3googlemapapi%e3%80%91%e7%be%a4%e9%a6%ac%e7%9c%8c%e3%81%ae%e9%81%8e%e7%96%8e%e5%9c%b0%e5%9f%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427295863;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3659;}i:1;a:1:{s:2:"id";i:3737;}i:2;a:1:{s:2:"id";i:3134;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[OpenLayers3 Alphe版発表 | OpenなGISのこと]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.godo-tys.jp/2013/05/07/1526/</wp:comment_author_url>
			<wp:comment_author_IP>210.172.144.218</wp:comment_author_IP>
			<wp:comment_date>2013-05-07 16:40:00</wp:comment_date>
			<wp:comment_date_gmt>2013-05-07 07:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  d3.jsでMapなんていうものあり？ 【D3.js + GMap】群馬県の過疎地域で作成されてます。  [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367912625.2307898998260498046875;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367912400.8600800037384033203125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【英語】Kindleで買えるお勧めHTML5 Canvas技術書【読めない】</title>
		<link>http://shimz.me/blog/javascript/2659</link>
		<pubDate>Fri, 05 Apr 2013 06:14:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2659</guid>
		<description></description>
		<content:encoded><![CDATA[Kindleでは海外の技術書が手軽に買えてありがたいですね。
最近買った本の中から一冊お勧めしたいと思います。

<a href="http://www.amazon.co.jp/gp/product/B0085TJYKU/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B0085TJYKU&amp;linkCode=as2&amp;tag=toriaezu04b-22">Core HTML5 Canvas: Graphics, Animation, and Game Development (Core Series) [Kindle版]</a>
<a href="http://www.amazon.co.jp/gp/product/B0085TJYKU/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B0085TJYKU&amp;linkCode=as2&amp;tag=toriaezu04b-22"><img alt="" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;ASIN=B0085TJYKU&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=toriaezu04b-22" border="0" /></a><img style="border: none !important; margin: 0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&amp;l=as2&amp;o=9&amp;a=B0085TJYKU" width="1" height="1" border="0" />

Canvasについて初歩からアニメーション・衝突検出・物理演算と高度な内容まで包括的に解説したボリュームたっぷりな書籍です。
画像とサンプルコードによる説明が多くて英語が読めなくても結構なんとかなります。
おまけにフルカラー。
<a href="http://corehtml5canvas.com/">公式サイト</a>でデモ／サンプルコードや書籍の内容が確認できます。

デモはこちら。
<a href="http://corehtml5canvas.com/code-live/">http://corehtml5canvas.com/code-live/</a>

書籍のサンプルはメニューの「Free chapter」からどうぞ。86ページ分無料公開と大盤振る舞いです。
<a href="http://corehtml5canvas.com/">http://corehtml5canvas.com/</a>

ペーパーバックだと5,115円ですが、Kindle版だと半額以下の2,209円でお得です。	]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2659</wp:post_id>
		<wp:post_date>2013-04-05 15:14:48</wp:post_date>
		<wp:post_date_gmt>2013-04-05 06:14:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2659</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2715]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e8%8b%b1%e8%aa%9e%e3%80%91kindle%e3%81%a7%e8%b2%b7%e3%81%88%e3%82%8b%e3%81%8a%e5%8b%a7%e3%82%81html5-canvas%e6%8a%80%e8%a1%93%e6%9b%b8%e3%80%90%e8%aa%ad%e3%82%81%e3%81%aa%e3%81%84%e3%80%91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308749;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4122;}i:1;a:1:{s:2:"id";i:2898;}i:2;a:1:{s:2:"id";i:3528;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】「全ツイート履歴」からWord cloudを作ってみた。</title>
		<link>http://shimz.me/blog/d3-js/2711</link>
		<pubDate>Thu, 04 Apr 2013 03:42:18 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2711</guid>
		<description></description>
		<content:encoded><![CDATA[嗜好がバレる。
<a href="http://shimz.me/example/d3js/wordcloud/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/tweetswordcloud.jpg" alt="ツイートワードクラウド" width="561" height="566" class="aligncenter size-full wp-image-2714" /></a>

<a href="http://blog.jp.twitter.com/2012/12/blog-post_20.html">自分のすべてのツイートをダウンロードできるようにしました</a>
<a href="http://blog.jp.twitter.com/2013/03/blog-post_22.html">日本の皆さんにも「全ツイート履歴」が使えるようになりました</a>


全ツイートのダウンロードが可能になっていたので、ダウンロードしたtweets.csvを使ってワードクラウドを作成してみました。

<a href="http://shimz.me/example/d3js/wordcloud/index.html">example</a>



<h2>データセット作成</h2>
過去の全ツイートから固有名詞を抜き出して出現回数順にランキングにしたデータを作成します。
2007年から使っているわりに、累計ツイート数が10,939件と少ないのでテキスト処理系コマンドとExcelを使って行いました。ツイート数が多い場合は、以下の方法では難しいかもしれません。

まず、Windowsで処理しやすいようにS-JISに変換します。
 
<pre class="lang:sh decode:true " >$ nkf -s tweets.csv &gt; tweets_sjis.csv
</pre> 


出力したtweets_sjis.csvをExcelで読み込み、ツイート(text)だけを残して他を全て削除します。
tweets_sjis.txtを<a href="http://ja.wikipedia.org/wiki/MeCab">MeCab</a>に読み込ませ形態素解析を行います。

MeCabの使い方については以下を。
<a href="http://www.mwsoft.jp/programming/munou/mecab_command.html">MeCabのコマンドライン引数一覧とその実行例</a>

 
<pre class="lang:sh decode:true " >$ cat tweets_sjis.txt |mecab &gt; words.txt
</pre> 
↓こんな感じのファイルが出力されます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000001.jpg"><img class="border size-medium wp-image-2712" alt="twitterWC000001" src="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000001-300x148.jpg" width="300" height="148" /></a>
データの区切り位置とフィルタ機能を使って固有名詞のみ取り出し、単語以外を削除して別ファイル(meishi.txt)として保存します。
<a href="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000002-300x148.jpg" alt="twitterWC000002" width="300" height="148" class="bordersize-medium wp-image-2713" /></a>

保存したファイルをソートしてユニークで絞込み重複をカウントします。
 
<pre class="lang:sh decode:true " >sort meishi.txt|uniq -c|sort /R &gt; ranking.txt
</pre> 

これで全ツイートから頻出単語の取出しが完了です。
ちなみに上位10件はこんな感じ。
 
<pre class="lang:default decode:true " >count word
 457 日本
 253 orz
 176 群馬
 170 高崎
  97 東京
  64 アメリカ
  63 Google
  58 iPhone
  55 中国
  51 前橋
</pre> 


どうやら日本が大好きらしい。そして凹みまくっているようです。
このファイルをまたExcel等でcsvに変換しデータ作成作業は終了です。


<h2>ワードクラウドの表示</h2>
D3.jsとwordcludプラグインを使用してワードクラウドを作成します。

<a href="https://github.com/jasondavies/d3-cloud">jasondavies / d3-cloud
</a>
全ての出現単語に対して処理をすると表示されるまでにかなり時間がかかるので1200件に絞っています。
 
<pre class="lang:js decode:true " >d3.csv(‘ranking.csv’, function(data){
	var h = 800;
	var w = 800;
	data = data.splice(0, 1200); //処理wordを1200件に絞る

	var random = d3.random.irwinHall(2)

	var countMax = d3.max(data, function(d){ return d.count} );
	var sizeScale = d3.scale.linear().domain([0, countMax]).range([10, 100])
	var colorScale = d3.scale.category20();

	var words = data.map(function(d) {
		return {
		text: d.word,
		size: sizeScale(d.count) //頻出カウントを文字サイズに反映
		};
	});

	d3.layout.cloud().size([w, h])
		.words(words)
		.rotate(function() { return Math.round(1-random()) *90; }) //ランダムに文字を90度回転
		.font("Impact")
		.fontSize(function(d) { return d.size; })
		.on("end", draw) //描画関数の読み込み
		.start();

	//wordcloud 描画
	function draw(words) {
		d3.select("svg")
		.attr({
			"width": w,
			"height": h
		})
		.append("g")
		.attr("transform", "translate(150,150)")
		.selectAll("text")
		.data(words)
		.enter()
		.append("text")
		.style({
			"font-family": "Impact",
			"font-size":function(d) { return d.size + "px"; },
			"fill": function(d, i) { return colorScale(i); }
		})
		.attr({
			"text-anchor":"middle",
			"transform": function(d) {
				return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
			}
		})
		.text(function(d) { return d.text; });
	}

});</pre> 


<a href="http://shimz.me/example/d3js/wordcloud/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2711</wp:post_id>
		<wp:post_date>2013-04-04 12:42:18</wp:post_date>
		<wp:post_date_gmt>2013-04-04 03:42:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2711</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2714]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e3%80%8c%e5%85%a8%e3%83%84%e3%82%a4%e3%83%bc%e3%83%88%e5%b1%a5%e6%ad%b4%e3%80%8d%e3%81%8b%e3%82%89word-cloud%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427348895;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3861;}i:1;a:1:{s:2:"id";i:2331;}i:2;a:1:{s:2:"id";i:3620;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>307</wp:comment_id>
			<wp:comment_author><![CDATA[Python+d3.js+wordcloud | Etaoin Shrdlu]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tatsurounuma.wordpress.com/2014/02/12/pythond3-jswordcloud/</wp:comment_author_url>
			<wp:comment_author_IP>66.155.9.54</wp:comment_author_IP>
			<wp:comment_date>2014-02-12 00:41:34</wp:comment_date>
			<wp:comment_date_gmt>2014-02-11 15:41:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 以前、Rを使ってTwitterのワードクラウドをつくる、ということをやったのだけれど、このあいだ試してみたらアップデートされたRにパッケージの一部が対応していなかったので、pythonとd3.jsを使いつつ作りなおしてみる。 ワードクラウド作成の肝の部分は、既にプラグインがあったので、それを使いつつ、このへんも参考にする。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392133294.228024959564208984375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392159643.61974811553955078125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>iOSは普及するとともにその魅力を失っていく</title>
		<link>http://shimz.me/blog/other/2716</link>
		<pubDate>Mon, 08 Apr 2013 01:02:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2716</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size:10px;"><a href="http://www.igosso.net/flk/4490601295.html" target="_blank"><img src="http://farm5.staticflickr.com/4049/4490601295_a0b00fb622.jpg" alt="" /></a><br />iPad stand / Veronica Belmont</span>

普及が進むほどに魅力を失っていくのではないかという推測。

あくまで自分の観測範囲内での話。

企業が営業の人間にもたせるデバイスとしてiPhone、iPadの普及が進んでいる。

iOS端末だと、どっかに置き忘れたときでもGPSで追跡ができるし、リモートでロックやデータの消去ができるのでノートPCを持たせるより安全というのがその理由らしい。

この方面では今のところiOS一択らしく某SI業界の営業と話したときも「Androidは自由すぎて……運用ノウハウも無いので今のところ手を出す予定はないですねー」なんて話をしていた。（ちなみにWindows8タブレットなんかも今のところ選択肢には上がっていないらしい）

ポリシーでガチガチに制限がかけられるので、その辺が好まれているそうだ。

まぁ、そんわけでエンタープライズでのiOSのシェアが今後拡大していくのではないかと思う。

ただ、それと同時にiPhoneやiPadに感じていた憧れやありがたみってのは薄れていくのかも。

会社から支給される端末って、なんか魅力を感じなくなるものね。

アリーアダプターは最新のAndroid端末などに惹かれる傾向が強くなっていくんだろう。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2716</wp:post_id>
		<wp:post_date>2013-04-08 10:02:58</wp:post_date>
		<wp:post_date_gmt>2013-04-08 01:02:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ios%e3%81%af%e6%99%ae%e5%8f%8a%e3%81%99%e3%82%8b%e3%81%a8%e3%81%a8%e3%82%82%e3%81%ab%e3%81%9d%e3%81%ae%e9%ad%85%e5%8a%9b%e3%82%92%e5%a4%b1%e3%81%a3%e3%81%a6%e3%81%84%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2717]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426788960;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3293;}i:1;a:1:{s:2:"id";i:2876;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows8 64bit版のプリンタドライバが見つからない時の対処</title>
		<link>http://shimz.me/blog/troubleshooting/2719</link>
		<pubDate>Wed, 10 Apr 2013 03:15:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2719</guid>
		<description></description>
		<content:encoded><![CDATA[古いタイプのネットワークプリンタでWin8 64bit版のドライバが見つからなかったのでその対処方法。

他に方法があるのかもしれないけれど、まぁ楽だったので。

１．<a href="http://sourceforge.jp/projects/pdfcreator/">PDFCreator</a>をインストールする。
インストールすると「デバイスとプリンター」にPDFCreatorが追加される。

<a href="http://shimz.me/blog/wp-content/uploads/2013/04/WS000001.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000001.jpg" alt="WS000001" width="140" height="126" class="border size-full wp-image-2720" /></a>

２．PDFCreatorのポートを変更する。

「プリンターのプロパティ」を開き「ポート」タブで「pdfcmon」のチェックを外し代わりにネットワークプリンタのポートを指定(チェック)する。
ポートが存在しない場合は「ポートの追加」から追加する。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000002.jpg" alt="WS000002" width="479" height="525" class="border size-full wp-image-2721" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000003.jpg" alt="WS000003" width="490" height="525" class="border size-full wp-image-2722" />

これで、印刷できる。

以上。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2719</wp:post_id>
		<wp:post_date>2013-04-10 12:15:52</wp:post_date>
		<wp:post_date_gmt>2013-04-10 03:15:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows8-64bit%e7%89%88%e3%81%ae%e3%83%97%e3%83%aa%e3%83%b3%e3%82%bf%e3%83%89%e3%83%a9%e3%82%a4%e3%83%90%e3%83%bc%e3%81%8c%e8%a6%8b%e3%81%a4%e3%81%8b%e3%82%89%e3%81%aa%e3%81%84%e6%99%82%e3%81%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2720]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427394455;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3410;}i:1;a:1:{s:2:"id";i:2700;}i:2;a:1:{s:2:"id";i:3371;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Komodo Edit 8.0にしてみた。</title>
		<link>http://shimz.me/blog/editor/2724</link>
		<pubDate>Wed, 10 Apr 2013 08:24:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2724</guid>
		<description></description>
		<content:encoded><![CDATA[バージョンアップしてみた。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000004.jpg" alt="WS000004" width="600" height="349" class="alignnone size-full wp-image-2725" />


7系からUIのデザインが変更、ちょっとモダンな雰囲気に。
デザインのカスタマイズもより多機能になったようです。
以下はカスタマイズの一例。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/customized.jpg" alt="customized" width="600" height="438" class="alignnone size-full wp-image-2727" />



個人的にはコードミニマップ機能の追加がうれしいです。
それ以外では、前バージョンからそんなに大きく変化したものもなく、ほとんど戸惑うこともなく使えます。
スニペットの機能が強化されたらしいので、その辺はおいおい調べてみようと思います。



<a href="http://www.activestate.com/komodo-edit">Komodo Edit 8.0</a>


<a href="http://shimz.me/blog/category/editor">Komodo Editの関連記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2724</wp:post_id>
		<wp:post_date>2013-04-10 17:24:13</wp:post_date>
		<wp:post_date_gmt>2013-04-10 08:24:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit-8-0%e3%81%ab%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2727]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427309748;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:74;}i:1;a:1:{s:2:"id";i:148;}i:2;a:1:{s:2:"id";i:2519;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</title>
		<link>http://shimz.me/blog/iphoneipad/2730</link>
		<pubDate>Thu, 11 Apr 2013 01:10:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2730</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://itunes.apple.com/us/app/scriptkit-drag-drop-programming/id549348390?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/ScriptKitDrag.jpg" alt="ScriptKitDrag" width="650" height="431" class="alignnone size-full wp-image-2731" /></a>

<a href="https://itunes.apple.com/us/app/scriptkit-drag-drop-programming/id549348390?mt=8&at=10lMp5">ScriptKit - Drag and Drop Programming for iPad.</a>

ScriptKitは、直感的なドラッグ＆ドロップのインタフェースを介してネイティブiOSのUIコンポーネントとソーシャルメディアのAPIを使用し、iPad上で簡単なプロトタイプを構築するができるプログラミング環境です。

似たアプリに「<a href="https://itunes.apple.com/us/app/codify/id439571171?mt=8&at=10lMp5">Codea</a>」がありますが、Codeaがメディアアートやゲームの作成に向いているのに対して、ScriptKitは実用的なアプリの作成に適しています。
操作感が独特で、全てのAPIにスニペットが用意され、それらをドラッグ＆ドロップでペタペタと貼り付けてコーディングを行います。

<video id="demovideo" autoplay="true" width="476" height="360" loop="true" preload=""> 
<source src="https://s3.amazonaws.com/scriptkit/scriptkit-example-ellipse-476x360.mp4" type="video/mp4">
<source src="https://s3.amazonaws.com/scriptkit/scriptkit-example-ellipse-476x360.webm" type="video/webm"> 
</video>

簡単に中身を確認してみましたが、iOSのMap viewを扱うためのAPIやカメラ・フォトライブラリへのアクセス、HttpgetやHttppost果てはSocketを扱うAPIまで用意されています。(iPadでネットワークプログラミング！)
Dropbox,Facebook,Google Drive,InstgramなどWebサービスを利用するAPIも豊富に用意されていて、数行のコードでDropboxからダウンロードした画像をInstgramにアップロードするようなプログラムを書くことができます。
サンプルコードを見ているだけでもちょっとワクワクしてきます。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/IMG_0031.png" alt="IMG_0031" width="600" height="450" class="alignnone size-full wp-image-2733" />


さて、ここまではあくまでScriptKitというアプリ内での話でしたが、Scriptkitには、作成したコードを実際のiPadアプリとしてビルドするためのXcodeプロジェクトが用意されています。

<a href="https://github.com/Buza/ScriptKit-Runner">ScriptKit-Runner</a>

このプロジェクトファイルを利用し、ScriptKitで作成したコードを「SKRunner」フォルダのscript.luaファイルにコピペすれば、iPadアプリとしてビルドすることができるわけです。

これは凄い。

まだ未完なところもあって、日本語が使えなかったり、ちょくちょく落ちることもありますが、今後に期待したいアプリです。


※ダウンロードは無料。スクラッチパッドで実際にコードを書いて実行できますが、MyScriptとして保存するにはアドオン(1000円)を購入する必要があります。


【追記】
CodeaにもXcodeのプロジェクトとしてexportする機能が付きました。
<a href="http://shimz.me/blog/programming/2781" target="_blank">[Codea]iPadでiPadアプリが作成できるiPadアプリがまた一つ増えました。</a>



【関連】
<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>
<a href="http://shimz.me/blog/editor/1812">Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2730</wp:post_id>
		<wp:post_date>2013-04-11 10:10:10</wp:post_date>
		<wp:post_date_gmt>2013-04-11 01:10:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2730</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2731]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[https://s3.amazonaws.com/scriptkit/scriptkit-example-ellipse-476x360.mp4
737348
video/mp4
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[ipad%e3%81%a7ipad%e3%82%a2%e3%83%97%e3%83%aa%e3%81%8c%e4%bd%9c%e6%88%90%e3%81%a7%e3%81%8d%e3%82%8b%e3%80%8cscriptkit%e3%80%8d%e3%81%8c%e3%81%aa%e3%82%93%e3%81%8b%e5%87%84%e3%81%84%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[https://s3.amazonaws.com/scriptkit/scriptkit-example-ellipse-476x360.webm
1274214
video/webm
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372846;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1812;}i:1;a:1:{s:2:"id";i:2781;}i:2;a:1:{s:2:"id";i:3144;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>職場でWindows XPを使い続けるリスク</title>
		<link>http://shimz.me/blog/other/2738</link>
		<pubDate>Fri, 12 Apr 2013 03:47:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2738</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/computer-virus-.jpg" alt="computer-virus-" width="360" height="240" class="aligncenter size-full wp-image-2739" />

<a href="http://news.mynavi.jp/news/2013/04/12/030/index.html">XPは7の10倍危険!? マイクロソフト、国内企業へ「中古でもいいのでXPから移行を」呼びかけ</a>

もうすぐ、Windows XPのサポートが終了しますね。
正確には「サポート延長期間が終了する」ですが。
マイクロソフトがXPとともに心中するつもりにでもならない限り、これ以上サポートが延長されることは九分九厘ないと思われます。

中には「ウチには未だにWindows2000を使っている社員もいるので全然平気でしょ？」と思っている方もいるかもしれません。

しかし、ちょっとだけ考えを改めたほうがいいかもしれません。

※以降はあくまで推測です。

WindowsXPは、それまで発売された他バージョンのWindowsと比較しても爆発的に普及したOSです。

家庭でも企業でも、バージョンアップされないまま、ここまで利用され続けているOSは他にはなかなか見当たりません。

だからこそ、マイクロソフトが異例の「サポート延長」を行ったわけです。

そのOSにサポート終了後、永遠に塞がれることのない穴が開きます。

これは、いわゆるハック／クラック界の人々にとってはちょっとしたイベントです。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/Anonymous.jpg" alt="Anonymous" width="750" height="600" class="aligncenter size-full wp-image-2740" />

コンピューターウィルス等の製作者は、なるべく多くの端末に感染が広がることを期待します。
利用者の多いOS程ターゲットにされやすいわけです。
また、できる限り脆弱性の発見を遅らせて穴が塞がれるのを遅らせたいと考えるものです。

それが、サポート終了後にはどんなに派手な動作をおこなうウィルスが出現しても、その脆弱性が修正されることは永遠にありません。

そんな"おいしい"ターゲットが巷に大量に溢れる。

<a href="http://getnews.jp/archives/317781">Windows XPはサポート終了後も使われ続ける? その数は少なくとも数千万台規模か </a>

その筋の人からすれば、こんな"面白いイベント"はそうそう起きることではありません。

そんなわけで、<strong>過去サポートが終了したバージョンと比較しても、XPを狙ったウィルスが大量に作成される危険性はわりと高い</strong>のではないかと思います。


もちろん「なにも起きない」かもしれません。

脆弱性への<strong>サポートが切れたOSを使い続けるのは「スラム街で丸腰のまま家のドアに鍵も付けない」みたいなもの</strong>なので、運が良ければ何事もなく済むかもしれません。

しかし、何か起きたときはかなり大変なことになると予想されます。

大事な情報がある日突然全消去されてしまったり、流出したりするかもしれません。

あるいは気づかぬ内に、どこかの掲示板に大量に犯罪予告を書き込んでしまって会社に警察がやってきてPCを押収していく、なんてことがあるかもしれません。

そして何か起きた時には世間は多分同情してはくれないと思います。

多分、会社も守ってはくれないんじゃないでしょうかね。
(まぁ、そんなことがあれば会社も大ダメージでしょうけど）

そんなわけなので、もし職場でXPを使っているのなら<strong>「どうせ言っても無駄だ」なんて思わずに、とりあえず上司にでも「パソコン変えてください！」と進言しましょう。</strong>

すくなくとも"何かあった時"に「自分は散々危ないから変えてくれっていったんですよー」と言えるようにしておいた方が、いいのではないかとおもったりします。

個人的に使い続けるのは、まぁ自己責任の範疇だと思いますが。

【追記】
米マイクロソフトのセキュリティ担当のエンジニアも同じように忠告していますね。
<a href="http://itpro.nikkeibp.co.jp/article/NEWS/20130417/471461/?top_nhl">「サポートが終了したXPは狙われる」、マイクロソフトのセキュリティ担当 </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2738</wp:post_id>
		<wp:post_date>2013-04-12 12:47:44</wp:post_date>
		<wp:post_date_gmt>2013-04-12 03:47:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%81%b7%e5%a0%b4%e3%81%a7windowsxp%e3%82%92%e4%bd%bf%e3%81%84%e7%b6%9a%e3%81%91%e3%82%8b%e3%83%aa%e3%82%b9%e3%82%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2739]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427116004;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:3306;}i:2;a:1:{s:2:"id";i:3684;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[いまだにwindowsXP使ってる男の人って | ちゃんまみのぶろぐ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://chanmami.com/2013/04/17/48/</wp:comment_author_url>
			<wp:comment_author_IP>219.94.128.46</wp:comment_author_IP>
			<wp:comment_date>2013-04-17 18:57:33</wp:comment_date>
			<wp:comment_date_gmt>2013-04-17 09:57:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 先ほど見た記事  【職場でWindows XPを使い続けるリスク】 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366192653.9097011089324951171875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366194517.65450000762939453125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>「塀の中のジュリアス・シーザー」</title>
		<link>http://shimz.me/blog/movie/2743</link>
		<pubDate>Sat, 13 Apr 2013 03:29:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2743</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://heinonakano-c.com/index.html">塀の中のジュリアス・シーザー</a>

<iframe width="560" height="315" src="http://www.youtube.com/embed/XxhXk_u2-RY" frameborder="0" allowfullscreen></iframe>



<blockquote>イタリア、ローマ郊外にあるレビッビア刑務所。ここでは囚人たちによる演劇実習が定期的に行われている。
今年の演目として選ばれたのはシェークスピア作「ジュリアス・シーザー」。出演を希望する囚人たちの中からオーディションによって役者が選ばれ稽古が始まる。各々の監房で、廊下で、遊戯場で、一所懸命に台詞を繰り返す囚人たち。 それぞれの過去や性格などが次第にオーバーラップして演じる役柄と同化していく。そのとき、刑務所自体がローマ帝国へと変貌し、現実と虚構の境を越えていく。
</blockquote>


とまぁ、あらすじを読んだり予告編を見た限りだと一見「ドキュメンタリー」と勘違いしそうではありますが、あくまでフィクションです。
映画の中で演技を行っているのは現実の囚人たちなのですが、映画の中で起きている出来事は脚本がありそれに沿って演じられています。

つまり役者(囚人)たちは、映画の中で「刑務所のなかで、演劇に囚われ現実と虚構の境が融解していく自分たち」を演じているわけです。

実際の"現実"の上に"演劇"と"映画"という２枚の虚構が重なっている「メタ・ドキュメンター」といった感じ。

ここがこの映画の面白いところでもあり、評価の分かれるところでもあるかもしれません。

そういった背景を知り、メタな視点で眺めるといろいろと考えさせられる作品なのですが、逆に映画の背景を一切忘れて、あくまで「映画」としてみると割と微妙なできの作品だったりします。

何しろ、映画の中ではキャラクター(囚人)たちの関係性や過去といったものが殆ど描かれずキャラクターの口からわずかに語られるだけなので、「現実と虚構(劇)が融解していく」感じがあまりせず、全体として「囚人たちが演劇をしました。以上」という作品に見えてしまうんですね。

もうすこし、個々のキャラクターを掘り下げて欲しかった。

そんなわけで背景含みでメタな視点から眺めると興味深い作品ではありますが、率直に「この刑務所を撮った、ドキュメンタリーが見てみたいな」とも感じる評価の難しい作品でした。


<a href="http://heinonakano-c.com/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/20130208114142.jpg" alt="20130208114142" width="228" height="320" class="alignleft size-full wp-image-2745" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2743</wp:post_id>
		<wp:post_date>2013-04-13 12:29:35</wp:post_date>
		<wp:post_date_gmt>2013-04-13 03:29:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e5%a1%80%e3%81%ae%e4%b8%ad%e3%81%ae%e3%82%b8%e3%83%a5%e3%83%aa%e3%82%a2%e3%82%b9%e3%83%bb%e3%82%b7%e3%83%bc%e3%82%b6%e3%83%bc%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2745]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425041724;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3096;}i:1;a:1:{s:2:"id";i:3780;}i:2;a:1:{s:2:"id";i:3880;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WEB地図APIサービス　一覧</title>
		<link>http://shimz.me/blog/map/2746</link>
		<pubDate>Mon, 15 Apr 2013 01:03:08 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2746</guid>
		<description></description>
		<content:encoded><![CDATA[Googleにまたヒドイことされたときのためにも、GMAPS API以外も勉強しておかないといけないなと思いメモ。

<a href="https://developers.google.com/maps/?hl=ja">Google Maps API</a>
<a href="https://developers.google.com/maps/documentation/javascript/?hl=ja">Google Maps JavaScript API v3</a>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/01/"></iframe>
<a href="http://shimz.me/example/gmapv3/01/" target="_blank">Full Size</a>


<a href="http://olp.yahoo.co.jp/">Yahoo! Open Local Platform(地図)</a>
<a href="http://developer.yahoo.co.jp/webapi/map/">YOLP(地図) - Yahoo!デベロッパーネットワーク</a>
<iframe width="100%" height="300" src="http://shimz.me//example/YahooMap/01/"></iframe>
<a href="http://shimz.me//example/YahooMap/01/" target="_blank">Full Size</a>


<a href="http://www.microsoft.com/maps/developers/web.aspx">Bing Maps</a>
<a href="http://www.atmarkit.co.jp/ait/articles/1212/05/news008.html">Microsoftの地図サービス、Bing Mapsを使おう</a>
<iframe width="100%" height="300" src="http://shimz.me//example/bingMap/01/"></iframe>
<a href="http://shimz.me//example/bingMap/01/" target="_blank">Full Size</a>


<a href="http://portal.cyberjapan.jp/">電子国土Web.NEXT</a>
<iframe width="100%" height="300" src="http://shimz.me//example/kokudo/01/"></iframe>
<a href="http://shimz.me//example/kokudo/01/" target="_blank">Full Size</a>

<a href="http://openstreetmap.jp/">Open Street Map</a>
<a href="http://openstreetmap.piyolab.net/">OpenStreetMap API 実験室</a>
<iframe width="100%" height="300" src="http://shimz.me//example/OpenLayers/01/"></iframe>
<a href="http://shimz.me//example/OpenLayers/01/" target="_blank">Full Size</a>


<h2>その他</h2>
<a href="http://cloudmade.com/">Cloudmade</a>/<a href="https://github.com/mbostock/pixymaps">pixymaps</a>
<iframe width="100%" height="300" src="http://shimz.me//example/d3js/pixymaps/01/"></iframe>
<a href="http://shimz.me//example/d3js/pixymaps/01/" target="_blank">Full Size</a>
かっこいいのだけれど、D3 ver3では動かないみたいで残念。

cloudmade.comから取得したデータをOpenLayersで表示すればいいのだろうけど、やり方がわからない。
まずはOpenLayersから勉強しようかな。

<a href="http://openlayers.org/">OpenLayers: Free Maps for the Web</a>
<a href="http://openlayers.org/dev/examples/">OpenLayers Examples</a>
<a href="http://sourceforge.jp/magazine/08/12/26/0151203">OpenLayersで地図を表示する</a>


<h2>参考書</h2>
YOLPやBing Mapsの参考書をAmazonアソシエイトでベタベタ貼ったろ。と思ったのだけれど、検索してみたところ日本語での参考書が見つかりませんでした。 orz

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4048865382&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=5511330647&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=5510706945&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2746</wp:post_id>
		<wp:post_date>2013-04-15 10:03:08</wp:post_date>
		<wp:post_date_gmt>2013-04-15 01:03:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2746</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[web%e5%9c%b0%e5%9b%b3api%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%80%80%e4%b8%80%e8%a6%a7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427296766;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4142;}i:1;a:1:{s:2:"id";i:3698;}i:2;a:1:{s:2:"id";i:4015;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>モラルを理由に表現の自由に制限をかけるべきか。</title>
		<link>http://shimz.me/blog/other/2747</link>
		<pubDate>Tue, 16 Apr 2013 00:08:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2747</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/Erich-Salomon.jpg" alt="Erich-Salomon" width="480" height="346" class="aligncenter size-full wp-image-2748" />

<a href="http://d.hatena.ne.jp/kyoumoe/20130412/1365750948">他人の家を無断で撮影して小馬鹿にした挙句それを指摘されると即ブロックという自称工場萌え大山顕のクソっぷり</a>

※以下は、あくまで個人の見解。

基本的に公の場に置かれている人・物を撮影するのに許可は必要ない。

肖像が商品となる芸能人なんかの場合はパブリシティ権が、晒し目的の場合は名誉毀損や侮辱罪が引っかかる場合があるけれど、件の記事はどちらにも当てはまらないと思う。（あと自治体によっては迷惑防止条例に引っかかる場合があるけどね）

撮影に関して<a href="http://e-words.jp/w/E382AAE38397E38388E382A4E383B3.html">オプトイン</a>で無ければならないと考える人は多いけれど、プライバシーというのは定義が曖昧で個人によってその範囲が変わるので、権利を主張としようと思えばどこまでも主張できてしまうので、プライバシー侵害の拡大解釈はかなり危うい。

人権擁護法案でも、その辺りはかなり問題視されて議論されたけれども。
（<a href="http://ja.wikipedia.org/wiki/%E8%82%96%E5%83%8F%E6%A8%A9">肖像権</a>も定義が曖昧なんだよね）


最近だと問題になりそうなのは「東京六本木ギガピクセル」かな？

<a href="http://tokyogigapixel.360cities.net/">Tokyo Roppongi Gigapixel</a>

屋上で日光浴している人が写っていたり、車のナンバーが読めたりと一部で話題になっている。

<a href="http://kaigaikaramitanihon.blog.fc2.com/blog-entry-124.html">海外「45ギガピクセルの東京パノラマ写真がすごい」</a>

もし、事前に写りこむ全ての人・物に撮影の許可を取る必要があるとしたらこういう作品はまず作れなくなる。

結局のところ「表現の自由」との兼ね合いってことになるんだろうけど。


<blockquote>法的にどうこうじゃなくてお前の中のモラルはどうなってんのって話だから勘違いしないように。</blockquote>


自分だって勝手に撮影されるのは嫌だし、公開のされ方によっては名誉毀損や侮辱罪で訴えるかもしれないけど、公の場ではある程度は我慢しないといけない部分もあるだろうとは思っている。

法的根拠もないままに、みんなが、不快だからモラルに反しているからという理由で「あのライターを干せ！」とか「メディアはあのライターの記事を載せるな！」なんてことをやり出したら、「表現の自由なんてわりと簡単に死ぬぜ」ってネットの上では長いこと議論されてきたのではなかったのか。

ライターが糞だとか即ブロックはダメだろうというのはたぶんその通りなんだろうし、他でいろいろ問題を起こしているのも確かなのだろうけど、少なくとも上記の記事に関しては、「<strong>法的には問題ない記事に対して、直接の被害者でない人間がモラルを理由にWebメディアへ"表現の自由"の自粛を求めている</strong>」という構図であるので、賛同はできない。

それにしても、ポルノ規制の議論なんかでは自粛や自主規制含め表現の自由へ制限をかける事に、はてな民は非常に慎重なるのになぁと思うとなんかモヤモヤする。


【参考】
<a href="http://www.asahi-net.or.jp/~VR5J-mkn/point/privacy/">プライバシーとはなにか　－－「プライバシー保護」と「個人情報保護」の違いに関する考察－－</a>

公の場での撮影に関しては写真家の横木安良夫さんの記事なんかもいろいろ考えさせられる。

<a href="http://alao.cocolog-nifty.com/the_eye_forget/2005/04/post_5cb4.html">盗撮　盗み撮り　キャンデットフォト　スナップ写真 その１</a>
<a href="http://www.hi-ho.ne.jp/toyo-x/shouzou.html">肖像権について</a>
<a href="http://www.snow-flake.jp/%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E5%86%99%E7%9C%9F%E3%81%A8%E8%82%96%E5%83%8F%E6%A8%A9%E3%81%A8%E7%9B%97%E3%81%BF%E6%92%AE%E3%82%8A/">スナップ写真と肖像権と盗み撮り</a>

【余談】
とはいえ、法律なんて簡単に変わるし、法が変わらなくても世間の空気で社会的に「やっちゃだめ」なことに分類されてしまうなんてことは多々あることだけどね。条例で禁止されたり。
車のナンバープレートだって本来モザイクをかける必要なんてないはずなんだけど……怖い人が「プライバシーを侵害された」と乗り込んできたりするしなぁ。

<a href="http://d.hatena.ne.jp/Lhankor_Mhy/20130413/1365850477" target="_blank">洗濯物にモザイク - 不動産屋のラノベ読み</a>

<blockquote>具体的に言うと下着です。そうパンツですよ、パンツ！膨大な枚数の画像からパンツが含まれるものを認識して抜き出す！それしかないでしょう！</blockquote>

やはり、作るしかないのかな「パンツ認識」
となると、分類器の機械学習のために大量のパンツ画像が必要だな。
とりあえず１万枚ほど誰か私に下さい。

【関連】
<a href="http://shimz.me/blog/copyright/1538">著作権法について誤解していたこと</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2747</wp:post_id>
		<wp:post_date>2013-04-16 09:08:43</wp:post_date>
		<wp:post_date_gmt>2013-04-16 00:08:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%a2%e3%83%a9%e3%83%ab%e3%82%92%e7%90%86%e7%94%b1%e3%81%ab%e8%a1%a8%e7%8f%be%e3%81%ae%e8%87%aa%e7%94%b1%e3%81%ab%e5%88%b6%e9%99%90%e3%82%92%e3%81%8b%e3%81%91%e3%82%8b%e3%81%b9%e3%81%8d%e3%81%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2748]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427330967;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1538;}i:1;a:1:{s:2:"id";i:3614;}i:2;a:1:{s:2:"id";i:1764;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>337</wp:comment_id>
			<wp:comment_author><![CDATA[キャンディット・フォトのいいとこ悪いとこ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kenkoes.com/blog/?p=1405</wp:comment_author_url>
			<wp:comment_author_IP>59.106.13.208</wp:comment_author_IP>
			<wp:comment_date>2014-07-14 10:23:09</wp:comment_date>
			<wp:comment_date_gmt>2014-07-14 01:23:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] モラルを理由に表現の自由に制限をかけるべきか  [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405300989.7254199981689453125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405305922.651218891143798828125;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405305923.7044069766998291015625;s:7:"message";s:77:"blogadmin がコメントのステータスをunapprovedに変更しました";s:5:"event";s:17:"status-unapproved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405389256.1879980564117431640625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>[node.js] Geocodeサービスを使った住所→緯度経度変換処理</title>
		<link>http://shimz.me/blog/node-js/2749</link>
		<pubDate>Wed, 17 Apr 2013 00:21:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2749</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/geocoder.html">Yahoo!ジオコーダAPI</a>を利用して住所から緯度経度を求めるスニペット。

最初はGoogleのGeocodeサービスを使う予定だったのですが、地図を表示しないでGeocodeサービスだけ利用するのは規約違反になるらしいので却下。

<a href="https://developers.google.com/maps/documentation/geocoding/?hl=ja">Google Geocoding API</a>

<blockquote>Geocoding API は Google マップ上の結果表示と組み合わせる場合にのみ使用できます。地図に表示せずにジオコーディングの結果だけを利用することは禁止されています。</blockquote>

YahooのWeb APIの利用制限には、回数以外の記述がないのでわからないけれど、もしかすると地図を表示せずに変換にだけ使うのはこっちもだめかも。

<a href="http://developer.yahoo.co.jp/appendix/rate.html">利用制限について</a>

怒られたら消します。

<pre class="lang:js decode:true " >var request = require('request');

var geocodeURI = 'http://geo.search.olp.yahooapis.jp/OpenLocalPlatform/V1/geoCoder?';
var address = process.argv[2];
if(!address){
    console.log('Not Found address')
    return ;
}
geocodeURI += &quot;&amp;appid=&quot; + &quot;アプリケーションID&quot;; //Yahooデベロッパーネットワークで取得
geocodeURI += &quot;&amp;output=json&quot;;
geocodeURI += &quot;&amp;query=&quot; +encodeURI(address.toString(&quot;utf8&quot;));

console.log(geocodeURI);

request(geocodeURI, function (error, response, body) {
  if (!error &amp;&amp; response.statusCode == 200) {
    var  json = JSON.parse(body);
    console.log(json)
  }
});</pre> 


実行
<pre class="lang:sh decode:true " >$ node geocode.js 高崎市</pre> 


Yahoo!ジオコーダAPIは、駅やランドマークには対応していないみたい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2749</wp:post_id>
		<wp:post_date>2013-04-17 09:21:03</wp:post_date>
		<wp:post_date_gmt>2013-04-17 00:21:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2749</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js-geocode%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e4%bd%8f%e6%89%80%e2%86%92%e7%b7%af%e5%ba%a6%e7%b5%8c%e5%ba%a6%e5%a4%89%e6%8f%9b%e5%87%a6%e7%90%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370828;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2851;}i:1;a:1:{s:2:"id";i:2670;}i:2;a:1:{s:2:"id";i:2831;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>世界中の公開状態にあるWebcamを一覧表示するサイト</title>
		<link>http://shimz.me/blog/web/2752</link>
		<pubDate>Wed, 17 Apr 2013 09:49:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2752</guid>
		<description></description>
		<content:encoded><![CDATA[
※やはり、問題があったのか、サービスは廃止されたようです。
<hr />

<a href="http://cryptogasm.com/webcams/index.php?">Exposed Webcam Viewer</a> 

<a href="http://cryptogasm.com/webcams/index.php?"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000009-e1366191622370.jpg" alt="WS000009" width="580" height="324" class="aligncenter size-full wp-image-2753" /></a>

Goolge経由で公開状態にあるWebcamを表示。
現時点で8,876台のWebcamが公開状態にあるらしい。

"city:Tokyo"や"country:Japan"などのキーワードで絞り込みが可能。

<a href="http://cryptogasm.com/webcams/faq.php#filter">Exposed Webcam Viewer - FAQ</a>


【関連】
<a href="http://cryptogasm.com/2012/10/all-the-webcams/">All The Webcams</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2752</wp:post_id>
		<wp:post_date>2013-04-17 18:49:25</wp:post_date>
		<wp:post_date_gmt>2013-04-17 09:49:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%96%e7%95%8c%e4%b8%ad%e3%81%ae%e5%85%ac%e9%96%8b%e7%8a%b6%e6%85%8b%e3%81%ab%e3%81%82%e3%82%8bwebcam%e3%82%92%e4%b8%80%e8%a6%a7%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b%e3%82%b5%e3%82%a4%e3%83%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2753]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427364047;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3565;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:4110;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】参照元別の訪問者数をツリー マップで表示する</title>
		<link>http://shimz.me/blog/d3-js/2755</link>
		<pubDate>Fri, 19 Apr 2013 08:00:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2755</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://anond.hatelabo.jp/20130418163746">流行る記事、流行らない記事[追記あり]</a>

これは身につまされます。
体感では、時間をかけたエントリーほどはてブされない気が。
ただ、ブログのジャンルにもよりますが、長い目でみるとソーシャルメディアからの流入より検索エンジンからの流入の方がブログ全体のアクセスアップには貢献してくれたりもするので、気にしすぎない方がいいかもしれません。(たまにはてブされたりすると、一時的にPVが跳ね上がるのでどうしても気になってしまいますけどね)


そこで、参照元別訪問者数の比率を再確認するためにTreeMapを作ってみました。

<a href="http://shimz.me//example/d3js/treemap/01/">訪問者数／新規訪問の割合（TreeMap）</a>




<h2>データセットの作成</h2>
Googleアナリティクス「トラフィック→参照元→すべてのトラフィック」のデータをCSVでエクスポートします。
<a href="http://shimz.me/blog/wp-content/uploads/2013/04/WS000010.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000010-300x122.jpg" alt="WS000010" width="300" height="122" class="alignnone size-medium wp-image-2756" /></a>
エクスポートしたCSVをテキストエディタ等で整形します。

<a href="http://shimz.me//example/d3js/treemap/01/trafficSources.csv">trafficSources.csv(整形済)</a>



<h2>TreeMapとして表示</h2>
D3.jsのTreeMapレイアウトを使用して表示します。
ヘルパー関数として、<a href="http://shimz.me/blog/d3-js/2649">こちらの記事</a>で作成した関数を使用しています。
 
<pre class="lang:js decode:true " >d3.csv('trafficSources.csv', function(csv){
    csv = csv.slice(0, 15); //表示する参照元を15件に絞り込み

    var data = { children:csv }; //csvから取得したデータを全てrootの配下(children)に追加する
    
    var svg = d3.select('svg');  //TreeMapを描画するステージを選択
                        
    //Treemapのboxサイズに対応させる要素を指定
    var retVisits = function(d){ return parseInt(d.Visits) };
    var retNew_Visits = function(d){ return parseInt(d.New_Visits.replace('%', '')) };　//「新規訪問者の割合」は%を削除して数値に変換する

    var w = 1000;   
    var h = 600; 

    var treemap = d3.layout.treemap().size([w, h]); //Treemapレイアウトオブジェクトを作成。Treemapのサイズ(縦横)を指定
    var TreemapData = treemap.value(retVisits).nodes(data); //Visitsの値を基準にTreemap用のデータに変換する

    var boxStyle = { //boxスタイル指定
        x:F('x'),
        y:F('y'),
        width:F('dx'),
        height:F('dy')  
    }
    
    var boxColorStyle = function(d){　//参照元のジャンル別にfillcolorを指定
        var color = "blue";
        switch(d.Source){
            case 'yahoo':
            case 'google.co.jp':
            case 'google':color = 'green';break;
            case 'facebook.com':
            case 'm.facebook.com':
            case 't.co': 
            case 'b.hatena.ne.jp':color = 'red';break;
        }
        return color
    }
    
    
    var boxGroup = svg.selectAll("g") //Boxグループを追加
        .data(TreemapData) 
        .enter()
        .append("g"); 

    var box =  boxGroup.append('rect') //各BoxをBoxグループに追加
        .attr({
            class:F('Source'),
            fill:boxColorStyle, 
            stroke: "black",
            "fill-opacity": 0.5
        })
        .attr(boxStyle)

    var textStyle = { //ラベルスタイル指定
        x:F('x', ' + 5'),
        y:F('y', ' + 20')
    }

    var text = boxGroup.append('text') //ラベル追加
        .attr({
            fill:"white",
            "font-size": 12
        })
        .attr(textStyle)
        .text(F('Source')); //参照元(Source)を表示


    var style1 = function(){ //訪問者数(Visits)を基準としたスタイル
        boxGroup.data(treemap.value(retVisits).nodes(data));
        box.transition().attr(boxStyle).duration(1000);
        text.transition().attr(textStyle).duration(1000);    
    }
    var style2 = function(){ //新規訪問者数の割合(New_Visits)を基準としたスタイル
        boxGroup.data(treemap.value(retNew_Visits).nodes(data));
        box.transition().attr(boxStyle).duration(1000);
        text.transition().attr(textStyle).duration(1000);    
    }

    //ボタンクリックイベントの設定
    d3.select('#Visits_btn').on('click', style1)
    d3.select('#New_Visits_btn').on('click', style2)
});</pre> 

<a href="http://shimz.me//example/d3js/treemap/01/">example</a>


<h2>結果</h2>
訪問者数の多い参照元ほど大きなBOXで表示されます。
赤　＝　はてブ／Twitter／Facebookなどソーシャルメディア
緑　＝　検索エンジン
青　＝　それ以外
<a href="http://shimz.me//example/d3js/treemap/01/">
<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000011.jpg" alt="WS000011" width="590" height="347" class="alignnone size-full wp-image-2758" />
</a>
図にしてみると、数字でみるよりわかりやすい気がしますね。
今回は、直近１ヶ月分のデータを使いましたが、年末あたりに１年間分のデータを使ってもっと細かい内容のツリーマップを作ってみようかと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2755</wp:post_id>
		<wp:post_date>2013-04-19 17:00:48</wp:post_date>
		<wp:post_date_gmt>2013-04-19 08:00:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2755</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2758]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e5%8f%82%e7%85%a7%e5%85%83%e5%88%a5%e3%81%ae%e8%a8%aa%e5%95%8f%e8%80%85%e6%95%b0%e3%82%92%e3%83%84%e3%83%aa%e3%83%bc-%e3%83%9e%e3%83%83%e3%83%97%e3%81%a7%e8%a1%a8%e7%a4%ba]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427403749;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:527;}i:1;a:1:{s:2:"id";i:2614;}i:2;a:1:{s:2:"id";i:3501;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptでの機械学習チュートリアル、他</title>
		<link>http://shimz.me/blog/node-js/2760</link>
		<pubDate>Sun, 21 Apr 2013 02:16:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2760</guid>
		<description></description>
		<content:encoded><![CDATA[気になった記事メモ。

<div class="box">
<a href="http://burakkanber.com/blog/machine-learning-in-other-languages-introduction/" target="_blank">Machine Learning in Javascript: Introduction | Burak Kanber's Blog</a>
K近傍法、K平均法、遺伝的アルゴリズム、単純ベイズ分類器、などのチュートリアル。
</div>

<div class="box">
<a href="http://d.hatena.ne.jp/hecomi/20120619/1340116121" target="_blank">オンライン学習ライブラリ oll の node.js アドオンを作って JavaScript で機械学習させてみた - 凹みTips</a>
使ってみたい。
</div>


<div class="box">
<a href="http://subprotocol.com/verlet-js/?utm_source=feedly" target="_blank">Verlet-js</a>
物理演算ライブラリ
</div>

<div class="box">
<a href="http://jonobr1.github.io/Physics/" target="_blank">Physics for JavaScript</a>
こちらも、物理演算ライブラリ
</div>



<div class="box">
<a href="http://www.dns-lg.com/" target="_blank">DNS-LG - Multilocation DNS Looking Glass</a>
DNSの名前解決を行い、JSONで返してくれるAPI
</div>

<div class="box">
<a href="http://maplacejs.com/" target="_blank">Maplace.js - A small Google Maps Javascript helper.</a>
Google Map APIのヘルパーライブラリ
</div>


<div class="box">
<a href="http://darsa.in/fpsmeter/?utm_source=feedly" target="_blank">FPSMeter</a>
FPS計測
</div>


&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2760</wp:post_id>
		<wp:post_date>2013-04-21 11:16:31</wp:post_date>
		<wp:post_date_gmt>2013-04-21 02:16:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%a7%e3%81%ae%e6%a9%9f%e6%a2%b0%e5%ad%a6%e7%bf%92%e3%83%81%e3%83%a5%e3%83%bc%e3%83%88%e3%83%aa%e3%82%a2%e3%83%ab%e3%80%81%e4%bb%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427398482;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3757;}i:1;a:1:{s:2:"id";i:2841;}i:2;a:1:{s:2:"id";i:3556;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>エンジニアが正しく「I love you」と伝えるための遺伝的アルゴリズム(殺伐)</title>
		<link>http://shimz.me/blog/javascript/2762</link>
		<pubDate>Tue, 23 Apr 2013 08:54:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2762</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.naturalselection2.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/natural-selection-2-e1366706722976.jpg" alt="natural-selection-2" width="590" height="295" class="alignnone size-full wp-image-2763" /></a>

「<a href="http://www.atmarkit.co.jp/ait/articles/1304/19/news114.html">エンジニアが正しく「好き」と伝えるための実装法</a>」という記事が話題だったので、乗っかってみました。

内気なエンジニアのために「I love you」と言ってくれるプログラムを遺伝的アルゴリズムで作成します。


【参考】
<a href="http://bit.ly/10a6YPc">Machine Learning: Introduction to Genetic Algorithms</a>


<h2>遺伝的アルゴリズムとは？</h2>
<blockquote>この国はすっかりダメになってしまいました。
 だから、偉い人達は相談して、この法律をつくりました。
 「バトル・ロワイアル」
 そこで今日はみなさんに、ちょっと殺し合いをしてもらいます。
 最後の一人になるまでです。</blockquote>
↑これに"交配"と"突然変異"の仕組みが含まれれば遺伝的アルゴリズムです。
ニコニコ大百科にさらに<a href="http://dic.nicovideo.jp/a/%E9%81%BA%E4%BC%9D%E7%9A%84%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0">わかりやすい例</a>が掲載されています。
<blockquote>少年少女を100人ずつ用意します。
一生懸命歌っていただきます。
歌の上手い上位5人ずつを残して残りは抹殺します。
互いに交配して彼らの子供を男女100人ずつ用意します。
2〜4を何回も繰り返します。
どっかで停止し、その時一番うまかった一組を残して抹殺します。
残った2人が鏡音リン・レンです。
なんだってー！？
- <a href="http://dic.nicovideo.jp/b/a/%E9%81%BA%E4%BC%9D%E7%9A%84%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/1-#3">本掲示板>>3</a>より</blockquote>
とりあえず、なんとなく仕組みが分かったところでやってみましょう。



<h2>「I love you」に辿りつくまでの流れ</h2>
まず、２０人の個体を用意します。
<ol>
	<li>個体それぞれに文字を書かせます。</li>
	<li>文字の内容が「I love you」に近い順に並べます。</li>
	<li>上位２名が子作りして、子供を二人生みます。</li>
	<li>下位２名を処分して、生まれた子供と入れ替えます。</li>
	<li>ランダムに選んだ個体の文字を一部変化させます(突然変異)</li>
</ol>
上記１〜５を「I love you」がちゃんと書ける個体が生まれるまで続けます。


<h2>サンプル</h2>
<script type="text/javascript" src="http://jsdo.it/blogparts/tt03/js?width=465&height=496&view=screenshot"></script>


<h2>コード</h2>
<a href="http://burakkanber.com/blog/machine-learning-genetic-algorithms-part-1-javascript/" target="_blank">Machine Learning: Introduction to Genetic Algorithms</a>に掲載されているコードにコメント付け加えただけなので、詳しくは先の記事を読んでください。
 
<pre class="lang:js decode:true " >var Gene = function(code) { //個体
    if (code) this.code = code;
    this.cost = 9999;
};
Gene.prototype.code = ''; // 遺伝情報

Gene.prototype.calcCost = function(compareTo) { //コスト計算
    var total = 0;
    for (i = 0; i &lt; this.code.length; i++) {
        total += (this.code.charCodeAt(i) - compareTo.charCodeAt(i)) * (this.code.charCodeAt(i) - compareTo.charCodeAt(i)); //一文字ずつUnicodeコード値の差を計算
    }
    this.cost = total;
};

Gene.prototype.random = function(length) { //ランダムな遺伝子を作成する
    while (length--) {
        this.code += String.fromCharCode(Math.floor(Math.random() * 255));
        //fromCharCodeメソッドは0x41, 0x42, 0x43のような文字コード列を &quot;ABC&quot; のような文字列に変換して返します
    }
};

Gene.prototype.mate = function(gene) { //交叉
    var pivot = Math.round(this.code.length / 2) - 1; //交叉点(中心)取得
    
    //子作り（一点交叉）
    var child1 = this.code.substr(0, pivot) + gene.code.substr(pivot); 
    var child2 = gene.code.substr(0, pivot) + this.code.substr(pivot);

    return [new Gene(child1), new Gene(child2)]; //生誕
};

Gene.prototype.mutate = function(chance) { //突然変異
    if (Math.random() &gt; chance) return; //変異できずにバイバイ

    var index = Math.floor(Math.random() * this.code.length); //変異するインデックスを決定(ランダム)
    var upOrDown = Math.random() &lt;= 0.5 ? -1 : 1; //1 or -1  //増やすか減らすか決定
    var newChar = String.fromCharCode(this.code.charCodeAt(index) + upOrDown); //キャラクターコードを増減
    var newString = ''; //新しい遺伝情報
    for (i = 0; i &lt; this.code.length; i++) {
        if (i == index) newString += newChar; //変異させたキャラクターコードを挿入
        else newString += this.code[i];
    }

    this.code = newString; //遺伝情報を上書き

};






var Population = function(goal, size) { //群れ　
    this.members = []; //個体を入れとく箱
    this.goal = goal; //目指すゴール
    this.generationNumber = 0; //世代数
    while (size--) {
        var gene = new Gene(); //sizeの数だけ個体を用意する
        gene.random(this.goal.length); //ゴールの長さを元に染色体をランダムに作成
        this.members.push(gene); //群れに追加
    }
};

Population.prototype.sort = function() { //コストを基準にソート
    this.members.sort(function(a, b) {
        return a.cost - b.cost;
    });
}

Population.prototype.generation = function() { //世代処理
    for (var i = 0; i &lt; this.members.length; i++) {
        this.members[i].calcCost(this.goal); //コスト計算

    }

    this.sort(); //群れをソート
    this.display(); //画面出力
    
    var children = this.members[0].mate(this.members[1]); //上位２名で交叉
    
    //取捨選択
    this.members.splice(this.members.length - 2, 2, children[0], children[1]); //群れのなかから順位の低い２名が死亡。子供２人と入れ替え。

    
    for (var i = 0; i &lt; this.members.length; i++) {
        this.members[i].mutate(0.5); //突然変異
        this.members[i].calcCost(this.goal); //コスト計算
        if (this.members[i].code == this.goal) { //ゴールに辿りついたら終了
            this.sort();
            this.display();
            return true;
        }
    }
    
    this.generationNumber++; //世代カウント

    var scope = this;
    
    setTimeout(function() {
        scope.generation(); //次の世代へ
    }, 20);
    
};

Population.prototype.display = function() { //画面出力
    document.body.innerHTML = '';
    document.body.innerHTML += (&quot;&lt;h2&gt;Generation: &quot; + this.generationNumber + &quot;&lt;/h2&gt;&quot;);
    document.body.innerHTML += (&quot;&lt;ul&gt;&quot;);
    for (var i = 0; i &lt; this.members.length; i++) {
        document.body.innerHTML += (&quot;&lt;li&gt;&quot; + this.members[i].code + &quot; (&quot; + this.members[i].cost + &quot;)&quot;);
    }
    document.body.innerHTML += (&quot;&lt;/ul&gt;&quot;);
};

var population = new Population(&quot;I love you&quot;, 20);
population.generation();</pre> 

多大な犠牲を払って作成した「I love you」なら、きっと思いも伝わるはず！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2762</wp:post_id>
		<wp:post_date>2013-04-23 17:54:31</wp:post_date>
		<wp:post_date_gmt>2013-04-23 08:54:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2762</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2763]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%8c%e6%ad%a3%e3%81%97%e3%81%8f%e3%80%8ci-love-you%e3%80%8d%e3%81%a8%e4%bc%9d%e3%81%88%e3%82%8b%e3%81%9f%e3%82%81%e3%81%ae%e9%81%ba%e4%bc%9d%e7%9a%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427266892;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3783;}i:1;a:1:{s:2:"id";i:3501;}i:2;a:1:{s:2:"id";i:1133;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>１ページに複数のH1タグがあるとBingに怒られる。</title>
		<link>http://shimz.me/blog/analytics/2764</link>
		<pubDate>Wed, 24 Apr 2013 01:08:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2764</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000013.jpg" alt="Bing Web Master Tool" width="590" height="414" class="alignnone size-full wp-image-2765" />


Google以外のSEO対策もしないとなーと思い、<a href="http://www.bing.com/toolbox/webmaster/">Bingウェブマスターツール</a>を使ってみた。

診断ツールのSEOアナライザで自分のブログを見てみたら重要度「高」のエラーが多発。

エラーメッセージは、

「ページに複数の&lt;h1&gt;タグが存在しています」

……だめなのか。

このブログで使用しているテーマだと、フロントページの各エントリーのタイトルが&lt;h1&gt;タグで括られているので、どうしても引っかかる。

テーマのソースコードを修正すれば、直すのは簡単なんだけど……W3C準じているとはいえ厳しいなぁBING。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2764</wp:post_id>
		<wp:post_date>2013-04-24 10:08:52</wp:post_date>
		<wp:post_date_gmt>2013-04-24 01:08:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%ef%bc%91%e3%83%9a%e3%83%bc%e3%82%b8%e3%81%ab%e8%a4%87%e6%95%b0%e3%81%aeh1%e3%82%bf%e3%82%b0%e3%81%8c%e3%81%82%e3%82%8b%e3%81%a8bing%e3%81%ab%e6%80%92%e3%82%89%e3%82%8c%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2765]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427139151;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3306;}i:1;a:1:{s:2:"id";i:2969;}i:2;a:1:{s:2:"id";i:3861;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>統計学を勉強するのにつかえるeラーニングサイト</title>
		<link>http://shimz.me/blog/other/2767</link>
		<pubDate>Thu, 25 Apr 2013 02:21:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2767</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/statistics.jpg" alt="statistics" width="400" height="300" class="aligncenter size-full wp-image-2768" />

データを弄っていたりすると「統計についてもっと知識があれば、このデータをもっと活用できるのはないか？」と思ったりします。
最近なにかと話題ですものね「統計学」
とはいえ独学ではなかなか学のが難しかったりするので、統計について学べるeラーニング講座をさがしてみました。



<a href="http://www.stats-guild.com/shopping/products/list.php" target="_blank">StatsGuild Inc.　統計解析、データマイニング、データ分析のeラーニング / コース一覧</a>
Rコマンダーを使った統計解析についてのeラーニング。値段も手ごろなので試してみたい。

<a href="http://www.ex-waseda.jp/opencollege/elearning_schedule.html" target="_blank">早稲田大学エクステンションセンター　eラーニング講座一覧</a>
「やさしくたのしい統計学」「やさしくたのしい統計学[相関分析編]」という講座を利用できる。

<a href="http://www.nhk.or.jp/kokokoza/index.html" target="_blank">NHK高校講座</a>
とりあえず基本から学び直すならここが良いかも。「数学Ⅰ」の３学期に「第5章　データの分析」の授業がある。

<a href="http://weblearningplaza.jst.go.jp/" target="_blank">Ｗｅｂラーニングプラザ 技術者 eラーニング （独）科学技術振興機構　無料</a>
統計とは直接関係ないけれど「データ構造とアルゴリズムコース」が良さげ。


<a href="http://www.ouj.ac.jp/hp/kamoku/H25/kyouyou/B/kiso/s_1234048.html" target="_blank">放送大学 授業科目案内 身近な統計（'12）</a>
eラーニングではないですが、放送大学にも統計学の講座がいくつかあるようですね。

<a href="http://matome.naver.jp/odai/2135883023685089601" target="_blank">オープンデータのまとめ </a>
データが必要な方はこちらをどうぞ。


【他、参考サイト】
<a href="http://matome.naver.jp/odai/2134521035124482601" target="_blank">次の10年で一番熱い学問は統計学！統計学を勉強する上で参考になるサイト・書籍まとめ</a>
<a href="http://www.anlyznews.com/2012/01/7.html" target="_blank">統計学を勉強するときに知っておきたい7つのポイント</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2767</wp:post_id>
		<wp:post_date>2013-04-25 11:21:13</wp:post_date>
		<wp:post_date_gmt>2013-04-25 02:21:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2767</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2768]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%b5%b1%e8%a8%88%e5%ad%a6%e3%82%92%e5%8b%89%e5%bc%b7%e3%81%99%e3%82%8b%e3%81%ae%e3%81%ab%e3%81%a4%e3%81%8b%e3%81%88%e3%82%8be%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0%e3%82%b5%e3%82%a4%e3%83%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370782;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2826;}i:1;a:1:{s:2:"id";i:3562;}i:2;a:1:{s:2:"id";i:3451;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[ただの流行じゃない！間違いなく将来有望なデータサイエンティストという仕事 【求人もすごい】| らふらく^^]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://laugh-raku.com/archives/2395</wp:comment_author_url>
			<wp:comment_author_IP>120.136.14.19</wp:comment_author_IP>
			<wp:comment_date>2013-10-26 11:40:31</wp:comment_date>
			<wp:comment_date_gmt>2013-10-26 02:40:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] また、統計学を勉強するときに知っておきたい10ポイントでも共通して書いてあった事が、実際にデータ解析をしながら勉強すると学習効率が上がるとの事です。習うより慣れろという事ですね。 ちなみに、この２つが入門書としてオススメだそうです。 他にも、学習には統計学を勉強するのにつかえるeラーニングサイトの参照サイトが役に立つので、ぜひご覧下さい。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1382785361.9055950641632080078125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Facebookページを作ってみたけれど……</title>
		<link>http://shimz.me/blog/other/2769</link>
		<pubDate>Thu, 25 Apr 2013 04:46:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2769</guid>
		<description></description>
		<content:encoded><![CDATA[Likeboxというウィジェットを付けるにはFacebookページを作らないとならないらしく、とりあえず作ってみたものの……使い道がさっぱりわからない orz 

仕方がないので「RSS Graffiti」というアプリを使ってブログの新着エントリーをポストしてみたけれど、アイキャッチ画像が表示されない。

う〜ん、はじめてみたものの、使いこなすのは難しそうだなぁ。

ちなみに、Likeboxってのは↓これ
<iframe src="//www.facebook.com/plugins/likebox.php?href=http%3A%2F%2Fwww.facebook.com%2FGunmaGisGeek&amp;width=250&amp;height=290&amp;show_faces=true&amp;colorscheme=light&amp;stream=false&amp;border_color&amp;header=true&amp;appId=106329816175854" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:250px; height:290px;" allowTransparency="true" ></iframe>

【参考】
<a href="http://amsstudio.jp/news/2012/03/facebooklike-box.html" target="_blank">Facebook　Like Boxの作成・設置方法</a>
<a href="http://nex.fm/rss-graffiti2/" target="_blank">RSS Graffiti 2.0 の使い方 #Facebookアプリ </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2769</wp:post_id>
		<wp:post_date>2013-04-25 13:46:09</wp:post_date>
		<wp:post_date_gmt>2013-04-25 04:46:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebook%e3%83%9a%e3%83%bc%e3%82%b8%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%81%91%e3%82%8c%e3%81%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426966589;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:715;}i:1;a:1:{s:2:"id";i:3009;}i:2;a:1:{s:2:"id";i:1874;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】世界の主要20言語　使用人口グラフ(バブルチャート)</title>
		<link>http://shimz.me/blog/d3-js/2770</link>
		<pubDate>Fri, 26 Apr 2013 00:16:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2770</guid>
		<description></description>
		<content:encoded><![CDATA[クリックで使用国数順にも。
<a href="http://shimz.me/example/d3js/bubble/"><img class="aligncenter size-full wp-image-2771" alt="世界の主要20言語　使用人口／使用国数" src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000014.jpg" width="726" height="788" /></a>

<a href="http://shimz.me/example/d3js/bubble/">example</a>

データは<a href="http://www.ethnologue.com/" target="_blank">Ethnologue</a>の<a href="http://www.ethnologue.com/statistics/size" target="_blank">Summary by language size</a>よりいただきました。
<a href="http://shimz.me/example/d3js/bubble/Language.csv">Language.csv</a>


<h2>バブルチャート表示</h2>
バブルチャートを作成するのに<a href="https://github.com/mbostock/d3/wiki/Pack-Layout">Pack Layout</a>を使用しています。
ヘルパー関数として、<a href="http://shimz.me/blog/d3-js/2649">こちら</a>の記事で作成した関数を使用しています。
 
<pre class="lang:js decode:true " >d3.svg('Language.csv', function(csv){
    var w = 800;
    var h = 800;

    var svg = d3.select('svg');

    var data = { //csvデータを一つのchidrenとしてデータセットを作成
        children:csv
    };

    //各要素のattrの内容（変数にしておくとアップデートを行うときに便利)
    var circleAttr = {
        cx: F('x'),
        cy: F('y'),
        r: F('r')
    };
    var labelAttr = {
        x: F('x'),
        y: F('y')
    };
    var countAttr = {
        x: F('x'),
        y: F('y', ' + 20')
    };

    var pack = d3.layout.pack().size([w,h]);  //バブルチャートで使用するpackレイアウトオブジェクトを作成

    var retSpeakers  = function(d){ return d.Speakers };   //Speakersの値を返す関数
    var reTotalCountries = function(d){ return d.TotalCountries };　//TotalCountriesの値を返す関数

    var circleGroup = svg.selectAll("g")
	.data(pack.value(retSpeakers).nodes(data)) //データセットからspeakersの値を元にレイアウトを作成する
	.enter()
	.append("g")
	.filter(function(d){
	    return d.Speakers &gt; 0; //speakersの値が無い要素(root)は描画しない
	}) ;

    var circle = circleGroup.append('circle') //各サークル作成
	.attr({
	    class:F('name'),
	    "fill-opacity":0.8,
	    "stroke-width":1,
	    fill: function(d){return (d.LangName==='日本語') ? "red" : " blue " ; },  //日本だけ赤く塗る
	    stroke:function(d){return "white";},
	})
	.attr(circleAttr)

    var label = circleGroup.append('text') //ラベル(名称)作成
        .attr({
            fill: "white",
            "font-size": "12px",
            "text-anchor": "middle",
            "alignment-baseline": "middle"
        })
        .attr(labelAttr)
        .text(F('LangName'))

    var count = circleGroup.append('text') //ラベル(数値)作成
        .attr({
            fill: "white",
            "font-size": "12px",
            "text-anchor": "middle",
            "alignment-baseline": "middle",
        })
        .attr(countAttr)
        .text(F('Speakers', " / 1000000000 + '億人'")) //デフォルトは使用人口を表示

    var title =  svg.append('text') //タイトル
        .attr({
            fill:'black',
            'font-size':'24',
            x: 40,
            y: 100
        })
        .text('Speakers')

    var style1 = function() { //使用人口表示
        circleGroup.data(pack.value(retSpeakers).nodes(data));
        circle.transition().attr(circleAttr).duration(1000);
        label.transition().attr(labelAttr).duration(1000);
        count.transition().attr(countAttr).text(F('Speakers', " / 1000000000 + '億人'")).duration(1000);
        title.text('Speakers')
    }
    var style2 = function() { //使用国数表示
        circleGroup.data(pack.value(reTotalCountries).nodes(data));
        circle.transition().attr(circleAttr).duration(1000);
        label.transition().attr(labelAttr).duration(1000);
        count.transition().attr(countAttr).text(F('TotalCountries', "  + 'ヶ国'")).duration(1000);
        title.text('Total Countries')
    }

    d3.select('body').on('click', toggle(style2, style1) ); //クリックでスタイル切り替え
});</pre> 
<a href="http://shimz.me/example/d3js/bubble/">example</a>


<h2>ちょっとだけ解説</h2>
<pre class="lang:js decode:true " >var pack = d3.layout.pack().size([w,h]);
pack.value(retSpeakers).nodes(data);
console.log(pack.value(retSpeakers).nodes(data));
</pre> 
packオブジェクトは、表示するステージのサイズ(縦横)を指定してデータセットを渡すと、ステージ内に収まるように値のスケールを調整しx,y,r値を付加して返します。
r値に対応させるデータ項目はvalueメソッドで指定することができます。
circleを使用したグラフを作成するのに非常に便利なオブジェクトです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2770</wp:post_id>
		<wp:post_date>2013-04-26 09:16:33</wp:post_date>
		<wp:post_date_gmt>2013-04-26 00:16:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2770</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2771]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e4%b8%96%e7%95%8c%e3%81%ae%e4%b8%bb%e8%a6%8120%e8%a8%80%e8%aa%9e%e3%80%80%e4%bd%bf%e7%94%a8%e4%ba%ba%e5%8f%a3%e3%82%b0%e3%83%a9%e3%83%95%e3%83%90%e3%83%96%e3%83%ab%e3%83%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427302178;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2785;}i:1;a:1:{s:2:"id";i:2755;}i:2;a:1:{s:2:"id";i:3319;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ</title>
		<link>http://shimz.me/blog/d3-js/2772</link>
		<pubDate>Sat, 27 Apr 2013 00:15:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2772</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/1137473491-8964-e1366998237539.jpg" alt="Data visualization" width="590" height="419" class="aligncenter size-full wp-image-2773" data-url="http://www.photorack.net/index.php?action=showpic&cat=89&pic=17099"/>

「<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>」も大分量が増えてきて、初めてD3.jsを学ぶという人にはどこから手をつけて良いものか解りづらくなってきました。

そこで、ゴールデンウィーク中に<a href="http://shimz.me/blog/d3-js/862">D3.js</a>を学んでみたいという方に、いくつか厳選してお勧めしてみたいと思います。


<h3>スライドを眺める</h3>
まずはD3.jsがどんなライブラリなのか把握しましょう。
・<a href="http://kt3k.github.io/d3intro/#/" target="_blank">about d3.js</a>


<h3>チュートリアルを学ぶ</h3>
とりあえず分量・内容的に下記のチュートリアルがお勧めです。
・<a href="http://ja.d3js.info/alignedleft/tutorials/d3/" target="_blank">D3 チュートリアル｜スコット・マレイ｜alignedleft</a>

余裕があっていろんなレイアウトのグラフを描いてみたいなら、下記サイトを。
・<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_20.htm" target="_blank">svg要素の基本的な使い方まとめ</a>


<h3>コード共有サイトを使って実践</h3>
チュートリアルを手軽に試すなら、コード共有サイトを利用するのが楽チンです。
<a href="http://jsdo.it/_shimizu/fqlp">jsdo.it</a>, <a href="http://jsfiddle.net/_shimizu/Q5Jag/1/">jsfiddle</a>, <a href="http://tributary.io/inlet/5468836">Tributary</a> にテンプレート的なものを作ってみたのでForkするなどして使ってみてください。

<script type="text/javascript" src="http://jsdo.it/blogparts/fqlp/js?width=465&height=496&view=javascript"></script>

<iframe width="100%" height="300" src="http://jsfiddle.net/_shimizu/Q5Jag/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<a href="http://tributary.io/inlet/5468836" target="_blank">Tributary | D3.js Template</a>


<h3>動画で学ぶ</h3>
以下は<a href="http://tributary.io/">Tributary</a>を使ったD3.jsのライブコーディング動画です。
英語のコンテンツですが、下記動画は観ているだけでも楽しめるのでお勧めです。
・<a href="http://enjalot.github.io/dot-enter/" target="_blank">dot enter</a>
・<a href="http://enjalot.github.io/dot-append/" target="_blank">dot append</a>


<a href="http://dotinstall.com/lessons/basic_d3js" target="_blank">D3.js入門 (全17回) - プログラミングならドットインストール</a>
プログラミング独学者の強い味方「ドットインストール」にD3.jsの講座が追加されています。


<h2>2014年追記</h2>

<h3>参考書で学ぶ</h3>
オライリーよりD3の入門書として最適な「インタラクティブ・データビジュアライゼーション」が発売されました。適度なボリュームで連休中に読むには最適の参考書です。興味ある方は是非。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51BarZiCJnL._SL160_.jpg" alt="インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.04.30</div></div><div class="amazlet-detail">Scott Murray <br />オライリージャパン <br />売り上げランキング: 8,746<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<a href="http://shimz.me/blog/d3-js/3378">「インタラクティブ・データビジュアライゼーション」D3.jsのイチオシ参考書が出版されます</a>
<a href="http://shimz.me/blog/d3-js/3425">【D3.js】デザイナーにお勧め「インタラクティブ・データビジュアライゼーション」感想</a>

<h3>その他、まとめ</h3>
<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>
<a href="http://matome.naver.jp/odai/2138966193538794601">D3.js プラグインまとめ</a>
<a href="http://matome.naver.jp/odai/2138966107937611601">D3.js Wrapper Library</a>


<h3>D3に興味が湧いたら</h3>
他のD3関連記事もどうぞ。
<a href="http://shimz.me/blog/category/d3-js">D3関連記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2772</wp:post_id>
		<wp:post_date>2013-04-27 09:15:22</wp:post_date>
		<wp:post_date_gmt>2013-04-27 00:15:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2772</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2773]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%b4%e3%83%bc%e3%83%ab%e3%83%87%e3%83%b3%e3%82%a6%e3%82%a3%e3%83%bc%e3%82%af%e4%b8%ad%e3%81%abd3-js%e3%82%92%e5%ad%a6%e3%81%b3%e3%81%9f%e3%81%84%e6%96%b9%e3%81%ab%e3%81%8a%e5%8b%a7%e3%82%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427294410;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3356;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:3279;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[2013/04/30 HTML5 勧告候補にmain要素が追加 – 本日のHTML5とか最新情報 | OpenWeb]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://bit.ly/Ya0Xpj</wp:comment_author_url>
			<wp:comment_author_IP>210.172.144.31</wp:comment_author_IP>
			<wp:comment_date>2013-04-30 10:40:16</wp:comment_date>
			<wp:comment_date_gmt>2013-04-30 01:40:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367289563.9375588893890380859375;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367286016.2741219997406005859375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>359</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 23:02:42</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 14:02:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414541678.33487606048583984375;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414504962.3062460422515869140625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】 データビジュアライゼーション事例</title>
		<link>http://shimz.me/blog/d3-js/2775</link>
		<pubDate>Sun, 28 Apr 2013 11:33:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2775</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.btrax.com/jp/2013/01/17/data-design-d3/">New York Times</a>や<a href="http://artzub.com/ghv/" target="_blank">GitHub Visualizer</a>などの可視化で使用されているD3.jsですが「気になったデータビジュアライズ作品のソースを覗いてみたらD3.jsで作成されていた」という事が最近増えてきました。

最近見つけた中で、「これは凄い！」と感嘆させられた作品を３つほど紹介します。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/d3130428-0001.png" alt="d3130428-0001" width="590" height="373" class="alignnone size-full wp-image-2777" />
<a href="http://www.visualizing.org/sprint/global-development-sprint" target="_blank">World Bank Global Development Sprint | visualizing.org</a>



<img src="http://shimz.me/blog/wp-content/uploads/2013/04/d3130428-0002.png" alt="d3130428-0002" width="590" height="376" class="alignnone size-full wp-image-2778" />
<a href="http://opendata.nikkei.co.jp/article/kakei-chosa-2005-2012/#did=1.1.1&year=2012" target="_blank">オープンデータで「食の日本地図」　家計調査（2005 - 2012年）より:オープンデータ情報ポータル</a>


<img src="http://shimz.me/blog/wp-content/uploads/2013/04/d3130428-0003.png" alt="d3130428-0003" width="590" height="330" class="alignnone size-full wp-image-2779" />
<a href="http://drones.pitchinteractive.com/" target="_blank">Out of Sight, Out of Mind: A visualization of drone strikes in Pakistan since 2004</a>


【追記】
まとめサイトを作ってみました。
<a href="http://matome.naver.jp/odai/2140496004771647801">D3.js 事例 - NAVER まとめ</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2775</wp:post_id>
		<wp:post_date>2013-04-28 20:33:34</wp:post_date>
		<wp:post_date_gmt>2013-04-28 11:33:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2775</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2777]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e4%ba%8b%e4%be%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427376394;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3620;}i:1;a:1:{s:2:"id";i:4095;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Codea]iPadでiPadアプリが作成できるiPadアプリがまた一つ増えました。</title>
		<link>http://shimz.me/blog/programming/2781</link>
		<pubDate>Sun, 28 Apr 2013 23:59:23 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2781</guid>
		<description></description>
		<content:encoded><![CDATA[タイトルがゲシュタルト崩壊しそう……

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/codaexport.png" alt="codea" width="590" height="443" class="alignnone size-full wp-image-2782" />

以前、iPad上でプログラミング・実行でき、作成したスクリプトをXcodeのプロジェクトファイルを使うことで実際にアプリとしてビルドできる「ScriptKit」を紹介しました。

<a href="http://shimz.me/blog/iphoneipad/2730" target="_blank">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>

このScriptKitのビルド機能がcodeaのフォーラムで話題になっていて「もしや？」と思っていたのですが。

なんと、<a href="https://itunes.apple.com/us/app/codify/id439571171?mt=8&at=10lMp5">codea</a>も作成したプログラムをXcodeのプロジェクトとしてexportする機能を付けてきました！

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/codeaexport2.png" alt="codeaexport2" width="590" height="787" class="alignnone size-full wp-image-2783" />

ScriptKitはまだまだベータ版といった感じでしたが、codeaはすでに日本語にも対応しているのでかなり本格的なアプリが作成できそうです。

今後はこういったiPadでプロトタイプを作成しXcodeでビルドするexport機能を持った開発系アプリが増えて行くのかもしれません。


<h2>Codeaおさらい</h2>
<a href="https://itunes.apple.com/us/app/codify/id439571171?mt=8&at=10lMp5">Codea</a>はiPad上でゲームやメディアアート作品などを作成することができるプログラミング環境です。
<iframe width="560" height="315" src="http://www.youtube.com/embed/gTuzcgf_NyA" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2781</wp:post_id>
		<wp:post_date>2013-04-29 08:59:23</wp:post_date>
		<wp:post_date_gmt>2013-04-28 23:59:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2781</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2782]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[codeaipad%e3%81%a7ipad%e3%82%a2%e3%83%97%e3%83%aa%e3%81%8c%e4%bd%9c%e6%88%90%e3%81%a7%e3%81%8d%e3%82%8bipad%e3%82%a2%e3%83%97%e3%83%aa%e3%81%8c%e3%81%be%e3%81%9f%e4%b8%80%e3%81%a4%e5%a2%97%e3%81%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427365885;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2730;}i:1;a:1:{s:2:"id";i:3144;}i:2;a:1:{s:2:"id";i:1812;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】選択されたデータ範囲のグラフを表示する(d3.svg.brush)</title>
		<link>http://shimz.me/blog/d3-js/2785</link>
		<pubDate>Tue, 30 Apr 2013 02:36:21 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2785</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/brushing/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000015.jpg" alt="d3.svg.brush" width="590" height="361" class="aligncenter size-full wp-image-2786" /></a>

下位のグラフで選択された範囲を上位のグラフで拡大表示します。
複雑なことをやっているように見えますが、D3.jsでは比較的簡単に実装することができます。

<a href="http://shimz.me/example/d3js/brushing/01/index.html">example</a>

<h2>サンプルコード</h2>
データ範囲の選択機能を追加するために<a href="https://github.com/mbostock/d3/wiki/SVG-Controls#wiki-brush">d3.svg.brush()</a>を使用しています。
ヘルパー関数として、<a href="http://shimz.me/blog/d3-js/2649">こちら</a>の記事で作成した関数を使用しています。
 
<pre class="lang:js decode:true " >
d3.csv("access.csv", function(data){
    var parseDate = d3.time.format("%Y/%m/%d").parse; 

    //データセット型変換
      data.forEach(function(d) {
        d.date = parseDate(d.date);
        d.access = parseInt(d.access);
      });

    var dateExtent = d3.extent( data.map( F('date') ) ); //dateの最小値・最大値取得
    var accessMax =  d3.max( data.map( F('access') ) ); //accessの最大値取得

    //上位グラフ用、margin, scale, axis設定
    var margin = {top: 10, right: 10, bottom: 100, left: 40};
    var width = 960 - margin.left - margin.right;
    var height = 500 - margin.top - margin.bottom;
    var xScale = d3.time.scale()
      .domain(dateExtent)    
      .range([0, width]);
    var yScale = d3.scale.linear()
    .domain([0, accessMax])
    .range([height, 0]);
    var xAxis = d3.svg.axis().scale(xScale).orient("bottom");
    var yAxis = d3.svg.axis().scale(yScale).orient("left");

    //下位グラフ用、margin, scale, axis設定
    var margin2 = {top: 430, right: 10, bottom: 20, left: 40}; 
    var height2 = 500 - margin2.top - margin2.bottom;     
    var x2Scale = d3.time.scale()
      .domain(xScale.domain())
      .range([0, width]);  
    var y2Scale = d3.scale.linear()
      .domain(yScale.domain())
      .range([height2, 0]);    
    var xAxis2 = d3.svg.axis().scale(x2Scale).orient("bottom"); 
    

    //上位グラフareaオブジェクト
    var area = d3.svg.area()
        .interpolate("monotone")
        .x(F('date', xScale))
        .y0(height)
        .y1(F('access', yScale));

    //下位グラフareaオブジェクト    
    var area2 = d3.svg.area()
        .interpolate("monotone")
        .x(F('date', x2Scale))
        .y0(height2)
        .y1(F('access', y2Scale));
  
    //ステージ作成
    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom);
    
    //フォーカス時の上位グラフの表示位置調整のためにクリップパスを作成
    svg.append("defs").append("clipPath")
        .attr("id", "clip")
        .append("rect")
        .attr("width", width)
        .attr("height", height);
  
  
    
    var focus = svg.append("g") //上位グラフグループ作成
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
    var context = svg.append("g") //下位グラフグループ作成
        .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");
    
       
      focus.append("path")
          .datum(data)
          .attr("clip-path", "url(#clip)") //クリップパスを適用
          .attr("d", area);
        
      focus.append("g")  //x目盛軸
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);
    
      focus.append("g") //y目盛軸
          .attr("class", "y axis")
          .call(yAxis);
 
 
      context.append("path") //下位グラフ
          .datum(data)
          .attr("d", area2);

      context.append("g") //下位x目盛軸
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height2 + ")")
          .call(xAxis2);
 
 
    /*
     *brushは透明なrectをグループ上設置しマウスイベントを取得する。
     *設置したrect上ではドラッグで範囲選択が可能
     *範囲が選択されている状態でbrush.extent()メソッドを実行するとその範囲のデータ値を返す
     */
    
     var brush = d3.svg.brush() //brushオブジェクト作成
        .x(x2Scale) //x軸を選択可能範囲に指定
        .on("brush", brushed);
    
      context.append("g") //brushグループを作成
        .attr("class", "x brush")
        .call(brush)
        .selectAll("rect")
        .attr("y", -6)
        .attr("height", height2 + 7);

    
    function brushed() {
      console.log( brush.extent());
      xScale.domain(brush.empty() ? x2Scale.domain() : brush.extent()); //選択されたデータセットの範囲をxScaleのdomainに反映
      focus.select("path").attr("d", area); //上位グラフアップデート
      focus.select(".x.axis").call(xAxis); //上位x軸アップデート
    }

});
</pre> 
 

<a href="http://shimz.me//example/d3js/brushing/">example</a>

<h2>ちょっとだけ解説</h2>
<pre class="lang:js decode:true " >var brush = d3.svg.brush() //brushオブジェクト作成
    .x(x2Scale) //x軸を選択可能範囲に指定
    .on("brush", brushed);
</pre> 
  
brushオブジェクトは、グラフ上にマウスドラッグで範囲選択を行う機能を提供します。
選択対象はxメソッド、yメソッドにscaleオブジェクトを渡すことで設定します。
(xメソッドだけだと横軸のみ、x,y両メソッドにスケールが設定されている場合は縦横の選択が可能になります)
brushイベントは選択時に呼ばれます。

 
<pre class="lang:js decode:true " >function brushed() {
	//選択されたデータセットの範囲をxScaleのdomainに反映
	xScale.domain(brush.empty() ? x2Scale.domain() : brush.extent()); 
	focus.select("path").attr("d", area); //上位グラフアップデート
	focus.select(".x.axis").call(xAxis); //上位x軸アップデート
}
</pre> 


brushイベントによって呼ばれたコールバックの中では、brush.extent()メソッドによって選択されたデータ値を取得し、その値でxScaleのドメインを更新します。
xScaleが適用されている上位グラフと上位x軸(xaxis)のアップデートを行うことで、下位グラフで選択された範囲のデータを上位グラフ上で表示されます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2785</wp:post_id>
		<wp:post_date>2013-04-30 11:36:21</wp:post_date>
		<wp:post_date_gmt>2013-04-30 02:36:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2785</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2786]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e9%81%b8%e6%8a%9e%e3%81%95%e3%82%8c%e3%81%9f%e3%83%87%e3%83%bc%e3%82%bf%e7%af%84%e5%9b%b2%e3%81%ae%e3%82%b0%e3%83%a9%e3%83%95%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8bd3-sv]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427393499;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3319;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:2755;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>オープンデータまで待てない人の、スクレーパー共有サイト(ScraperWiki)</title>
		<link>http://shimz.me/blog/other/2787</link>
		<pubDate>Wed, 01 May 2013 03:16:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2787</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://scraperwiki.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki.jpg" alt="scraperwiki" width="560" height="500" class="alignnone size-full wp-image-2791" /></a>

Webページからプログラムを使って情報を取り出すことを<a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0">Webスクレイピング</a>、プログラムの名前をスクレイパーと呼びます。
(Webクローリング、クローラーと呼ぶ場合も)

<a href="https://scraperwiki.com/">ScraperWiki</a>は、ブラウザ上でスクレイパーを記述しデータを取得・保存することができるWebサービスです。
作成したスクレイパーコードや保存したデータは、他のユーザーと共有したり一般に公開することができます。


<a href="http://blog.scraperwiki.com/2012/01/06/scraperwiki%E3%82%92%E3%81%9F%E3%82%81%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86/" target="_blank">ScraperWikiをためしてみよう | ScraperWiki Data Blog</a>


<h2>スクレイパーの作成画面</h2>
PHP,Python,rubyを使ってスクレイパーを記述することができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki1.jpg" alt="scraperwiki1" width="590" height="411" class="border size-full wp-image-2788" />


<h2>スクレイパーの自動実行</h2>
作成したスクレイパーを定期的に自動実行するよう設定できます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki2.jpg" alt="scraperwiki2" width="454" height="200" class="alignnone size-full wp-image-2789" />


<h2>取得したデータの公開</h2>
スクレイパーによって取得したデータは、CSVやJSONファイルとしてダウンロードすることができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki3.jpg" alt="scraperwiki3" width="590" height="226" class="alignnone size-full wp-image-2790" />
また、「Explorer with AP」を利用すればWeb APIを使ってJSONデータを取得することもできます。


<a href="https://scraperwiki.com/profiles/_shimizu/" target="_blank">Profile Details: _shimizu | ScraperWiki</a>

&nbsp;
&nbsp;
【参考】
<a href="http://d.hatena.ne.jp/uasi/20110603/1307098299" target="_blank">スクレイピングするなら ScraperWiki 使うといいよ - ヤルキデナイズドだった</a>
<a href="http://d.hatena.ne.jp/Mariyudu/20110903/1315037137" target="_blank">ScraperWiki を使って勝手 RSS フィードしてみた - 旧・私と私の猫の他は誰でも隠し事を持っている</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2787</wp:post_id>
		<wp:post_date>2013-05-01 12:16:49</wp:post_date>
		<wp:post_date_gmt>2013-05-01 03:16:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2787</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2791]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%81%be%e3%81%a7%e5%be%85%e3%81%a6%e3%81%aa%e3%81%84%e4%ba%ba%e3%81%ae%e3%80%81%e3%82%b9%e3%82%af%e3%83%ac%e3%83%bc%e3%83%91%e3%83%bc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427226280;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3195;}i:1;a:1:{s:2:"id";i:972;}i:2;a:1:{s:2:"id";i:1443;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[dataseries.js]テスト用のダミーデータセットを生成するJavaScriptライブラリ</title>
		<link>http://shimz.me/blog/javascript/2792</link>
		<pubDate>Thu, 02 May 2013 01:36:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2792</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/libs/dataseries/examples/functions.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/dataseries.jpg" alt="dataseries.js" width="590" height="370" class="alignnone size-full wp-image-2793" /></a>

<a href="http://metmajer.github.io/dataseries.js/">dataseries.js</a>

dataseries.jsは、さまざまなダミーデータを生成することができるジェネレイターライブラリです。
データビジュアライゼーションのプログラムで適当なダミーデータが必要なときに便利です。


<h2>サンプル</h2>
&nbsp;
<strong>配列の生成</strong>
 
<pre class="lang:js decode:true " >ds.range(2);
// =&gt; [0, 1, 2]

ds.range(-2, 2);
// =&gt; [-2, -1, 0, 1, 2]

ds.range(0, 2, 0.5);
// =&gt; [0, 0.5, 1, 1.5, 2]
</pre> 

&nbsp;
<strong>関数からデータセットを生成</strong>
 
<pre class="lang:js decode:true " >ds.generators.f(ds.functions.linear, { a: 2, b: 1 })
  .inputs(ds.range(2))
  .values();
// f(x) = 2·x + 1 for x in [0, 1, 2] =&gt; [1, 3, 5]

ds.generators.f(ds.functions.exp, { a: 2 })
  .inputs(ds.range(2))
  .values();
// f(x) = 2ˣ for x in [0, 1, 2] =&gt; [1, 2, 4]</pre> 

&nbsp;
<strong>X,Y値を持つオブジェクト(point)配列の生成</strong>
<pre class="lang:js decode:true " >ds.generators.f(ds.functions.exp, { a: 2 })
    .inputs(ds.range(3))
    .transform(ds.transforms.point)
    .values();
// =&gt; [ {x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 4}, {x: 3, y: 8} ]
</pre> 

&nbsp;
<strong>Dateオブジェクトを持つ配列の生成</strong>
 <pre class="lang:js decode:true " >ds.generators.f(ds.functions.exp, { a: 2 })
    .inputs(ds.range(3))
    .time(new Date(2012, 0, 1), ds.time.DAY)
    .transform(ds.transforms.point)
    .values();
// =&gt; [ {x: new Date(2012, 0, 1), y: 1}, {x: new Date(2012, 0, 2), y: 2}, {x: new Date(2012, 0, 3), y: 4}, {x: new Date(2012, 0, 4), y: 8} ]
</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2792</wp:post_id>
		<wp:post_date>2013-05-02 10:36:11</wp:post_date>
		<wp:post_date_gmt>2013-05-02 01:36:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2792</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2793]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[dataseries-js%e3%83%86%e3%82%b9%e3%83%88%e7%94%a8%e3%81%ae%e3%83%80%e3%83%9f%e3%83%bc%e3%83%87%e3%83%bc%e3%82%bf%e3%82%bb%e3%83%83%e3%83%88%e3%82%92%e7%94%9f%e6%88%90%e3%81%99%e3%82%8bjavascript]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426888410;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2840;}i:1;a:1:{s:2:"id";i:2979;}i:2;a:1:{s:2:"id";i:3501;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】グラフと地図を連動させる</title>
		<link>http://shimz.me/blog/d3-js/2797</link>
		<pubDate>Sat, 04 May 2013 06:46:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2797</guid>
		<description></description>
		<content:encoded><![CDATA[散布図上でドラッグすると、選択した範囲の都道府県に色が付きます。
<a href="http://shimz.me/example/d3js/geo_example/geo8/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/jpanmap20140221.jpg" alt="jpanmap20140221" width="590" height="409" class="aligncenter size-full wp-image-3403" /></a>

<a href="http://shimz.me/blog/d3-js/2785">d3.svg.brush</a>を使って、散布図と地図を連動させるサンプルを作成しました。


<a href="http://shimz.me/example/d3js/geo_example/geo8/">example</a>


<h2>データセットの作成</h2>
有効求人倍率と充足率の情報は「<a href="http://www.e-stat.go.jp/SG1/estat/List.do?bid=000001046052&cycode=0">社会生活統計指標</a>」より。
都道府県の地図データは以下よりいただきました。
<a href="http://itochiriback.seesaa.net/article/245436179.html">都道府県色塗り用shapeファイル（英語表記）</a>

社会生活統計指標からダウンロードした「労働」統計表をExcel上で編集してcsvに。
作成したcsvと都道府県色塗り用shapeファイルを<a href="http://www.qgis.org/">Quantum GIS</a>に読み込み結合。(結合の方法は以下を)
<a href="https://sites.google.com/site/qgismemo/040-bian-ji/shu-xingdetanicsvmatahadbffairuwo-jie-heshitai" target="_blank">属性データにCSVまたはDBFファイルを結合したい</a>

結合したデータをgeojsonで出力し、さらにtopojsonに変換します。
topojsonへの変換は「<a href="http://shimz.me/blog/d3-js/2351">TopoJSONを使う</a>」を参照してください。
出来上がったデータセットは以下。

<a href="http://shimz.me/example/d3js/geo_example/geo8/todofuken.topojson">todofuken.topojson</a>


<h2>サンプルコード</h2>
<pre class="lang:js decode:true " >
d3.json(&quot;todofuken.topojson&quot;, function(json) {
  d3main(json);
});


function d3main(json){
    var plotsize = 320;　//散布図の縦横サイズ
    var baseColor = &quot;#fef4f4&quot;; //地図、circleのベースカラー
  
    //塗り分けカラーの設定    
    var colorList = [&quot;#ce6dbd&quot;, &quot;#f7b6d2&quot;, &quot;#8ca252&quot;, &quot;#ff7f0e&quot;, &quot;#de9ed6&quot;, &quot;#d62728&quot;, &quot;#e377c2&quot;, &quot;#e7ba52&quot;, &quot;#2ca02c&quot;, &quot;#e377c2&quot;, &quot;#f7b6d2&quot;, &quot;#c7c7c7&quot;, &quot;#ffbb78&quot;, &quot;#e7cb94&quot;, &quot;#dbdb8d&quot;, &quot;#8c564b&quot;, &quot;#b5cf6b&quot;, &quot;#843c39&quot;, &quot;#7b4173&quot;, &quot;#aec7e8&quot;, &quot;#ffbb78&quot;, &quot;#8c564b&quot;, &quot;#bd9e39&quot;, &quot;#dbdb8d&quot;, &quot;#c5b0d5&quot;, &quot;#7f7f7f&quot;, &quot;#9edae5&quot;, &quot;#c49c94&quot;, &quot;#c49c94&quot;, &quot;#393b79&quot;, &quot;#9467bd&quot;, &quot;#5254a3&quot;, &quot;#a55194&quot;, &quot;#637939&quot;, &quot;#17becf&quot;, &quot;#cedb9c&quot;, &quot;#1f77b4&quot;, &quot;#1f77b4&quot;, &quot;#9467bd&quot;, &quot;#ff9896&quot;, &quot;#ff7f0e&quot;, &quot;#9c9ede&quot;, &quot;#ad494a&quot;, &quot;#ff9896&quot;, &quot;#98df8a&quot;, &quot;#17becf&quot;, &quot;#7f7f7f&quot;, &quot;#bcbd22&quot;, &quot;#98df8a&quot;, &quot;#bcbd22&quot;, &quot;#c5b0d5&quot;, &quot;#2ca02c&quot;, &quot;#8c6d31&quot;, &quot;#aec7e8&quot;, &quot;#6b6ecf&quot;, &quot;#d6616b&quot;, &quot;#e7969c&quot;, &quot;#c7c7c7&quot;, &quot;#d62728&quot;, &quot;#9edae5&quot;];
	
	//カラースケール
    var colorScale = d3.scale.ordinal().domain([1,47]).range(colorList); 
  
    //dataSetの準備
    var geodata = topojson.object(json, json.objects.todofuken).geometries; //topojosnデータ
    //var geodata = json.features; //geojsonを使う場合はこちら

    //データセットの型変換  
    geodata.forEach(function(d) {
        d.properties.jobs_ratio = parseFloat(d.properties.jobs_ratio);
        d.properties.fullness_rate = parseFloat(d.properties.fullness_rate);
    });
  
    //有効求人倍率の最大値取得
    var jobs_ratioMax = d3.max(geodata, function(d){
        return d.properties.jobs_ratio;
    });

    //充足率の最大値取得  
    var fullness_rateMax = d3.max(geodata, function(d){
        return d.properties.fullness_rate;
    });

    //scale関数(正規化)生成  
    var xScale = d3.scale.linear().domain([0, fullness_rateMax+1]).range([0, plotsize]);
    var yScale = d3.scale.linear().domain([jobs_ratioMax+0.05,  0]).range([0, plotsize]);
  
    //axis関数(目盛り)の生成    
    var xAxis = d3.svg.axis().scale(xScale).orient('bottom');
    var yAxis = d3.svg.axis().scale(yScale).orient('left');


    //地図投影法設定  
    var projection = d3.geo
        .mercator()		//投影法の指定
        .scale(1500)	//スケール（ズーム）の指定
        .translate([600,350]) //表示位置調整 x,y
        .center([139.0032936, 36.3219088]); //中心の座標を指定

    //geoデータ→svg path変換関数生成
    var path = d3.geo.path().projection(projection);
  
    //表示ステージ
    var svg = d3.select(&quot;svg&quot;);

    //mapを作成するグループ
    var mapGroup = svg.select('#map');
  
    //map表示
    var map = mapGroup.append(&quot;svg:g&quot;)
        .selectAll(&quot;path&quot;)
        .data(geodata)
        .enter()
        .append(&quot;svg:path&quot;)
        .attr('class', function(d){ return d.properties.ObjName } )
        .attr({
          &quot;d&quot;: function(d){ return path(d)},
          &quot;fill&quot;: baseColor,
          &quot;fill-opacity&quot;: 1,
          &quot;stroke&quot;: &quot;black&quot;
        })
        .on('mouseover', function(){
            d3.selectAll( &quot;.&quot;+d3.select(this).attr('class') ) //マウスオーバーしたエリアと同じclass名の要素を選択
            .attr(&quot;fill&quot;, &quot;red&quot;);
        })
        .on('mouseout', function(){
            d3.selectAll( &quot;.&quot;+d3.select(this).attr('class') )
            .attr(&quot;fill&quot;, baseColor); //バグあり　あとで直す
        });
    
    
    
    //散布図を作成するグループ
    var plotGroup = svg.select('#plot').attr(&quot;transform&quot;, &quot;translate(&quot; + [100, 10] + &quot;)&quot;);

        
    /*
     *circleより下のレイヤーにbrushを表示したいので先に作成する
     *circleの上にbrushを表示すると、ツールチップを表示するイベントが取得できなくなるため。
     */	 
    //brashイベントのコールバック
    var brushed = function() {
        var select = brush.extent();
        var rightBotom = select[0];
        var leftTop = select[1];
        circle.attr(&quot;fill&quot;, fillFnc);      
        map.attr(&quot;fill&quot;,fillFnc);
     
        //選択範囲内を色塗り 
        function fillFnc(d,i){
            if(
               d.properties.fullness_rate &gt; rightBotom[0]
               &amp;&amp;  d.properties.jobs_ratio &gt; rightBotom[1]
               &amp;&amp; d.properties.fullness_rate &lt; leftTop[0]
               &amp;&amp;  d.properties.jobs_ratio &lt; leftTop[1]
               )  return colorScale(d.properties.jis);
            return baseColor;
        }
    }	 
	 
    var brush = d3.svg.brush() //brushオブジェクト作成
        .x(xScale) //x軸を選択可能範囲に指定
        .y(yScale)
        .on(&quot;brush&quot;, brushed);
    
    var brushFGroup = plotGroup.append(&quot;g&quot;) //brushグループを作成
        .attr(&quot;class&quot;, &quot;brush&quot;)
        .call(brush) //brushオブジェクトをグループに適用
        .selectAll(&quot;rect&quot;)
        


        
    //circleを作成するグループ
    var circlegroup = plotGroup.append('g');
    
    //circle表示
    var circle = circlegroup.selectAll('circle')
        .data(geodata)
        .enter()
        .append('circle')
        .attr('class', function(d){ return &quot;tipsy &quot; + d.properties.ObjName } )
        .attr({
            r:5,
            cx:function(d){ return  xScale( d.properties.fullness_rate )},
            cy:function(d){ return yScale( d.properties.jobs_ratio )},
            fill: baseColor
        })
     
     //ツールチップを表示するためtitle要素を追加 
    var tooltip = circle.append('title').text(function(d){ return d.properties.pref});  

    
     //x目盛軸表示
    var xAxisLine = plotGroup.append(&quot;g&quot;) 
        .attr(&quot;class&quot;, &quot;x axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(0,&quot; + plotsize + &quot;)&quot;)
        .call(xAxis);
    
    //x目盛軸タイトル表示
    var xAxisTitle = xAxisLine.append('text')
        .attr({
            y:40,
            x:Math.floor(plotsize/2)-30
        })
        .text('充足率（％）')  
    
    //y目盛軸
    var yAxisLine = plotGroup.append(&quot;g&quot;) 
        .attr(&quot;class&quot;, &quot;y axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(0,&quot; + 0 + &quot;)&quot;)
        .call(yAxis);
    
    //y目盛軸タイトル表示
    var yAxisTitle = yAxisLine.append('text')
        .attr({
            &quot;transform&quot;:'rotate(-90 -60, 0) translate(-240)' 
        })
        .text('有効求人倍率（％）')           
     

 
}</pre> 

<a href="http://shimz.me/example/d3js/geo_example/geo8/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2797</wp:post_id>
		<wp:post_date>2013-05-04 15:46:05</wp:post_date>
		<wp:post_date_gmt>2013-05-04 06:46:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2797</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2798]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[使いこなせるようになってきたかも。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e3%82%b0%e3%83%a9%e3%83%95%e3%81%a8%e5%9c%b0%e5%9b%b3%e3%82%92%e9%80%a3%e5%8b%95%e3%81%95%e3%81%9b%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373759;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:2379;}i:2;a:1:{s:2:"id";i:3087;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[統計データをどうビジネスに活かすか？発達するデータ表示技術とその活用方法 | glovix]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://glovix.wordpress.com/2013/05/31/statistics/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.105</wp:comment_author_IP>
			<wp:comment_date>2013-05-31 09:29:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-31 00:29:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 【参考】散布図と地図の連携の例 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369960161.5071389675140380859375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>358</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 22:52:23</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 13:52:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【D3.js】グラフと地図を連動させる | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414541678.338923931121826171875;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414504343.423799991607666015625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】地図上にボロノイ図を描く</title>
		<link>http://shimz.me/blog/d3-js/2817</link>
		<pubDate>Mon, 06 May 2013 08:02:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2817</guid>
		<description></description>
		<content:encoded><![CDATA[各黒い点(母点)がガソリンスタンドの位置です。
<a href="http://shimz.me/example/d3js/geo_example/geo10/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/test000012.jpg" alt="D3.js Voronoi Map" width="590" height="390" class="alignnone size-full wp-image-2818" /></a>

<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-P07.html">国土数値情報　燃料給油所データ(点)</a>を使って、高崎市の地図上にボロノイ図を書いてみました。

<a href="http://shimz.me/example/d3js/geo_example/geo10/">example</a>

【参考】
<a href="http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/voronoi-diagram/voronoi-diagram.html">ボロノイ図とは　</a>



<h2>サンプルコード</h2>
<pre class="lang:js decode:true " >d3.json(&quot;takasaki.topojson&quot;, function(json) {
	var svg = d3.select(&quot;svg&quot;);

	var geodata = topojson.object(json, json.objects.takasaki).geometries;
	//var geodata = json.features;

	projection = d3.geo
		.mercator()		//投影法の指定
		.scale(90000)	//スケール（ズーム）の指定
		.translate([500,300])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	path = d3.geo.path().projection(projection);　//投影

	//地図表示
	var map =  svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;map&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: &quot;#99ff99&quot;,
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		});
	
	//燃料給油所データ読み込み
	d3.json('point.geojson', function(json){
		//cellを表示するグループを作成
		var cellgroup = svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;cells&quot;); 

		var pointdata = json.features;
		var positions = [];

		pointdata.forEach(function(d) {		
			positions.push(projection(d.geometry.coordinates)); //位置情報→ピクセル
		});
		
		//ボロノイ変換関数
		var polygons = d3.geom.voronoi(positions); 
		
		//ポイントデータをバインディング
		var cell = cellgroup.selectAll(&quot;g&quot;)
			.data(pointdata)
			.enter()
			.append(&quot;svg:g&quot;);
		
		//境界表示
		cell.append(&quot;svg:path&quot;)
			  .attr(&quot;class&quot;, &quot;cell&quot;)
			  .attr({
				&quot;d&quot;:function(d, i) { return &quot;M&quot; + polygons[i].join(&quot;L&quot;) + &quot;Z&quot;},
				stroke:&quot;#43676b&quot;,
				fill:&quot;none&quot;
			})
		
		//母点表示
		cell.append(&quot;svg:circle&quot;)
		  .attr({
			  &quot;cx&quot;:function(d, i) { return positions[i][0]; },
			  &quot;cy&quot;:function(d, i) { return positions[i][1]; },
			  &quot;r&quot;:2,
			  fill:&quot;#1f3134&quot;
		  });
	});
});</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2817</wp:post_id>
		<wp:post_date>2013-05-06 17:02:11</wp:post_date>
		<wp:post_date_gmt>2013-05-06 08:02:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2817</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2818]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ab%e3%83%9c%e3%83%ad%e3%83%8e%e3%82%a4%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387192;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2877;}i:1;a:1:{s:2:"id";i:2881;}i:2;a:1:{s:2:"id";i:2797;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google Map上にボロノイ図を描く</title>
		<link>http://shimz.me/blog/d3-js/2819</link>
		<pubDate>Mon, 06 May 2013 23:59:04 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2819</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo11/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/gmapVoronoi.jpg" alt="D3.js GoogleMap Voronoi Diagram" width="590" height="390" class="alignnone size-full wp-image-2821" /></a>

<a href="http://shimz.me/blog/d3-js/2817">前の記事</a>では、ガソリンスタンドの位置情報を用いて高崎市の地図上にボロノイ図を表示しました。
今回は、同じデータを使ってGoogle Map上にボロノイ図を描き、パン／ズームにも対応してみました。

<a href="http://shimz.me/example/d3js/geo_example/geo11/">example</a>

D3.jsを使えば地図上にボロノイ図を書くのも比較的簡単に行えます。
医療機関データなどを使ってボロノイ図を描いてみても面白いかもしれません。


<h2>サンプルコード</h2>
<pre class="lang:js decode:true " >d3.json('point.geojson', function(pointjson){
	main(pointjson); 
});

function main(pointjson) {
        
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
		zoom: 11,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		center: new google.maps.LatLng(36.322356, 139.013057),       
	});

		
	var overlay = new google.maps.OverlayView(); //OverLayオブジェクトの作成

	//オーバレイ追加
	overlay.onAdd = function () {

		var layer = d3.select(this.getPanes().overlayLayer).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;SvgOverlay&quot;);
		var svg = layer.append(&quot;svg&quot;);
		var svgoverlay = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions&quot;);
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection();

		//Google Mapの投影法設定
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}
		
			
			
		//再描画時に呼ばれるコールバック    
		overlay.draw = function () {


			//母点位置情報
			var pointdata = pointjson.features;
			
			//ピクセルポジション情報
			var positions = [];

			pointdata.forEach(function(d) {		
				positions.push(googleMapProjection(d.geometry.coordinates)); //位置情報→ピクセル
			});
	
			//ボロノイ変換関数
			var polygons = d3.geom.voronoi(positions);
			
			var pathAttr = {
				&quot;d&quot;:function(d, i) { return &quot;M&quot; + polygons[i].join(&quot;L&quot;) + &quot;Z&quot;},
				stroke:&quot;red&quot;,
				fill:&quot;none&quot;			
			};

			//境界表示
			svgoverlay.selectAll(&quot;path&quot;)
				.data(pointdata)
				.attr(pathAttr)
				.enter()
				.append(&quot;svg:path&quot;)
				.attr(&quot;class&quot;, &quot;cell&quot;)
				.attr(pathAttr)
				
			var circleAttr = {
				    &quot;cx&quot;:function(d, i) { return positions[i][0]; },
				    &quot;cy&quot;:function(d, i) { return positions[i][1]; },
				    &quot;r&quot;:2,
				    fill:&quot;red&quot;			
			}
	
			//母点表示
			svgoverlay.selectAll(&quot;circle&quot;)
				.data(pointdata)
				.attr(circleAttr)
				.enter()
				.append(&quot;svg:circle&quot;)
				.attr(circleAttr);
	  
		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);
	
		
};</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2819</wp:post_id>
		<wp:post_date>2013-05-07 08:59:04</wp:post_date>
		<wp:post_date_gmt>2013-05-06 23:59:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2819</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2821]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91google-map%e4%b8%8a%e3%81%ab%e3%83%9c%e3%83%ad%e3%83%8e%e3%82%a4%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388248;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3984;}i:1;a:1:{s:2:"id";i:3617;}i:2;a:1:{s:2:"id";i:2877;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Excelを買った。参考書も買った。</title>
		<link>http://shimz.me/blog/other/2826</link>
		<pubDate>Thu, 09 May 2013 03:31:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2826</guid>
		<description></description>
		<content:encoded><![CDATA[Excel2013、初めて触りましたが……わりと良いですね。
<a href="http://shimz.me/blog/wp-content/uploads/2013/05/Microsoft_Excel_2013_icon.png"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/Microsoft_Excel_2013_icon.png" alt="Microsoft_Excel_2013" width="256" height="256" class="alignnone size-full wp-image-2828" /></a>

仕事ではよく使うけれど、個人的に買ったのは初めてかもしれない。

単に公開されているデータを可視化するだけじゃなく、あるていどデータを分析できるスキルを身に着けたいなと思い、<a href="http://www.r-project.org/">R</a>とか<a href="https://code.google.com/p/pythonxy/">Python(X,y)</a>とかいろいろ検討した結果、「とりあえず、まずはExcelちゃんと使えるようになろう」という結論に至りました。

以下のサイトや書籍を参考に、勉強を始めてみます。


<h2>参考サイト</h2>
<a href="http://office.microsoft.com/ja-jp/support/FX102832586.aspx" target="_blank">Excel 2013 を使う - Office.com</a>
<a href="http://excelstatistics.mathlab.info/index.html" target="_blank">エクセル(Excel)統計解析入門</a>
<a href="http://quality-control.sakura.ne.jp/excel-toukei/excel-toukei-kouza.htm" target="_blank">Excel統計手法　ＷＥＢ講座（ｅ－Learning）</a>


<h2>参考書</h2>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4785631775&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
基本操作からグラフの作成、統計処理まで一通り学ぶのに良さげだったので購入。

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4274065707&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<a href="http://blog.livedoor.jp/fairypot/archives/51594779.html">"Googleの中の人"お墨付き</a>の統計入門書！


<h2>動画</h2>
<iframe width="480" height="360" src="http://www.youtube.com/embed/4YG_WWZYqUs" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2826</wp:post_id>
		<wp:post_date>2013-05-09 12:31:58</wp:post_date>
		<wp:post_date_gmt>2013-05-09 03:31:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2826</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2828]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[excel%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%80%82%e5%8f%82%e8%80%83%e8%b3%87%e6%96%99%e3%82%82%e8%b2%b7%e3%81%a3%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427329028;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3853;}i:1;a:1:{s:2:"id";i:3228;}i:2;a:1:{s:2:"id";i:3156;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】OpenLayers上にD3.jsで作成したSVGをオーバーレイ</title>
		<link>http://shimz.me/blog/d3-js/2831</link>
		<pubDate>Fri, 10 May 2013 03:04:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2831</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo12/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/d3.jsopenlayers.jpg" alt="D3.js Openlayers" width="590" height="306" class="alignnone size-full wp-image-2833" /></a>

出来た……けど、理解できてない orz
<a href="http://openlayers.org/">OpenLayers</a>ライブラリを使って<a href="http://www.openstreetmap.org/">Open Street Map</a>を表示し、その上にD3.jsで作成したSVG(グンマー)を表示しています。
正直、「表示できた！」というだけでちゃんと理解できていません。
特にextentの値が何を示しているのかが……分からん。


<a href="http://shimz.me/example/d3js/geo_example/geo12/">example</a>


<h2>サンプルコード</h2>
 
<pre class="lang:js decode:true " >d3.json(&quot;gunma.geojson&quot;, function (geoData) {
    main(geoData);
});


function main(geoData) {

    //表示する地図の最大空間範囲と地図スクロール範囲？
    var extent = [
        -20037508.34, -20037508.34,
        20037508.34, 20037508.34
    ];

    
   
    
    var map = new OpenLayers.Map('map', {
        numZoomLevels: 20,
//      projection: new OpenLayers.Projection(&quot;EPSG:900913&quot;), // 地図の投影(真球メルカトル投影)
        projection: new OpenLayers.Projection(&quot;EPSG:3857&quot;), // 地図の投影(真球メルカトル投影)
        displayProjection: new OpenLayers.Projection(&quot;EPSG: 4326&quot;),  // 等経緯度投影を定義
        maxExtent: extent, //最大の空間範囲
        restrictedExtent: extent,　//地図スクロール範囲
        controls: [
            new OpenLayers.Control.Navigation(),
            new OpenLayers.Control.Zoom(),
            new OpenLayers.Control.ScaleLine(),
            new OpenLayers.Control.LayerSwitcher(),
            new OpenLayers.Control.MousePosition(),
            new OpenLayers.Control.KeyboardDefaults()
        ]
    });


    //open streat map レイヤを指定
    var ol_wms = new OpenLayers.Layer.OSM();

    //OpenStreetMapレイヤーを追加
    map.addLayers([ol_wms]);

    //初期位置指定
    map.setCenter(new OpenLayers.LonLat(139.0032936, 36.3219088).transform(&quot;EPSG:4326&quot;, &quot;EPSG:900913&quot;), 8);

    //svgを表示するオーバーレイオブジェクトを作成
    var overlay = new OpenLayers.Layer.Vector(&quot;states&quot;);

    // 地図にオーバーレイを追加する際のコンテナを作成
    overlay.afterAdd = function () {
        //ベクターレイヤーのdivエレメントを取得
        var div = d3.selectAll(&quot;#&quot; + overlay.div.id);
        //既存のsvgレイヤを削除して新たなsvg要素を追加
        div.selectAll(&quot;svg&quot;).remove();
        var svg = div.append(&quot;svg&quot;);

        g = svg.append(&quot;g&quot;);

         //地図の左下と右上の緯度経度取得
        var bounds = d3.geo.bounds(geoData);

         //緯度経度-&gt;パスジェネレーター関数作成
        var path = d3.geo.path().projection(project);

        //geojsonデータからpathを作成
        var feature = g.selectAll(&quot;path&quot;)
                .data(geoData.features)
                .enter()
                .append(&quot;path&quot;);
                
        //MapにMove Event登録
        map.events.register(&quot;moveend&quot;, map, update); 

        update();

        function update() {
            var bottomLeft = project(bounds[0]); //地図左下緯度経度→ピクセル
            var topRight = project(bounds[1]);//地図右上緯度経度→ピクセル
            console.log(topRight)

            //svgのサイズを更新
            svg.attr(&quot;width&quot;, topRight[0] - bottomLeft[0])
                .attr(&quot;height&quot;, bottomLeft[1] - topRight[1])
                .style(&quot;margin-left&quot;, bottomLeft[0] + &quot;px&quot;)
                .style(&quot;margin-top&quot;, topRight[1] + &quot;px&quot;);

            g.attr(&quot;transform&quot;, &quot;translate(&quot; + -bottomLeft[0] + &quot;,&quot; + -topRight[1] + &quot;)&quot;);

            //描画したsvgのアップデート
            feature.attr(&quot;d&quot;, path);
        }

        //位置情報→ピクセル変換
        function project(x) {
                var point = map.getViewPortPxFromLonLat(new OpenLayers.LonLat(x[0], x[1]).transform(&quot;EPSG:4326&quot;, &quot;EPSG:900913&quot;));
                return [point.x, point.y];
        }
    }

    map.addLayer(overlay);
 
}
</pre> 

<a href="http://shimz.me/example/d3js/geo_example/geo12/">example</a>


【追記】
「EPSG:900913」はなし崩しに使われていて正式には「EPSG:3857」を使った方がよいということを教えていただいたので修正。
（調べてみたところ、<a href="http://wiki.openstreetmap.org/wiki/EPSG:3857#Codes">いろいろな経緯</a>を経て「EPSG:3857」に収まったようです)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2831</wp:post_id>
		<wp:post_date>2013-05-10 12:04:05</wp:post_date>
		<wp:post_date_gmt>2013-05-10 03:04:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2831</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2833]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91openlayers%e4%b8%8a%e3%81%abd3-js%e3%81%a7%e4%bd%9c%e6%88%90%e3%81%97%e3%81%9fsvg%e3%82%92%e3%82%aa%e3%83%bc%e3%83%90%e3%83%bc%e3%83%ac%e3%82%a4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427361478;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3147;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:2877;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Mapを使って水彩画風／モノクロームの地図を表示する</title>
		<link>http://shimz.me/blog/google-map-api/2838</link>
		<pubDate>Tue, 14 May 2013 09:09:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2838</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/stamen/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/test000013.jpg" alt="Google Map 水彩画風" width="590" height="339" class="alignnone size-full wp-image-2839" /></a>

クリエイティブ・コモンズライセンスで配布されているマップタイルを使用して水彩画風の地図を表示します。

配布元は以下。
<a href="http://maps.stamen.com/">http://maps.stamen.com/</a>

Google Map API以外の<a href="http://openlayers.org/">OpenLayers</a>や<a href="http://leafletjs.com/">Leaflet</a>などの地図表示ライブラリでも使用することができます。



<h2>DEMO</h2>

<strong>水彩画風</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/stamen/index.html"></iframe>
<a href="http://shimz.me/example/gmapv3/stamen/index.html" target="_blank">Full Size</a>

<strong>モノクロ</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/stamen/index2.html"></iframe>
<a href="http://shimz.me/example/gmapv3/stamen/index2.html" target="_blank">Full Size</a>


<h2>サンプルコード</h2>
Google Map APIでの水彩画風地図表示サンプル
 
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Google Maps モノクロ&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.stamen.com/js/tile.stamen.js?v1.2.1&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	function initialize() {
            var layer = &quot;watercolor&quot;; //レイヤー指定　watercolor:水彩画風、toner:モノクロ
            var map = new google.maps.Map(document.getElementById(&quot;map_canvas&quot;), {
                center: new google.maps.LatLng(36.322356, 139.013057),
                zoom: 5,
                mapTypeId: layer,
                mapTypeControlOptions: {
                    mapTypeIds: [layer]
                }
            });
            map.mapTypes.set(layer, new google.maps.StamenMapType(layer));
	}
        

	google.maps.event.addDomListener(window, &quot;load&quot;, initialize);
&lt;/script&gt;
&lt;style type=&quot;text/css&quot;&gt;
html, body{
    margin: 0px;
    padding: 0px;
}
html, body, #map_canvas {
	width: 100%;
	height: 100%;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div id=&quot;map_canvas&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2838</wp:post_id>
		<wp:post_date>2013-05-14 18:09:22</wp:post_date>
		<wp:post_date_gmt>2013-05-14 09:09:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2838</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2839]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-map%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e6%b0%b4%e5%bd%a9%e7%94%bb%e9%a2%a8%ef%bc%8f%e3%83%a2%e3%83%8e%e3%82%af%e3%83%ad%e3%83%bc%e3%83%a0%e3%81%ae%e5%9c%b0%e5%9b%b3%e3%82%92%e8%a1%a8%e7%a4%ba]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427403321;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2841;}i:1;a:1:{s:2:"id";i:2151;}i:2;a:1:{s:2:"id";i:3747;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]便利な配列操作ライブラリVodevil.js</title>
		<link>http://shimz.me/blog/node-js/2840</link>
		<pubDate>Thu, 16 May 2013 04:25:53 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2840</guid>
		<description></description>
		<content:encoded><![CDATA[配列の結合や切り出しなどが簡単に行えます。
<a href="http://vodevil.herokuapp.com/" target="_blank">Vodevil node.js module</a>

<h2>インストール</h2>
 
<pre class="lang:sh decode:true " >$ npm install vodevil
</pre> 

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >var vodevil = require('vodevil');

//vodevil.range 配列を生成する１
vodevil.range( 5 ) //=&gt; [0, 1, 2, 3, 4, 5]
vodevil.range( 2, 5 ) //=&gt; [2, 3, 4, 5]
vodevil.range( '..5' ) //=&gt; [0, 1, 2, 3, 4, 5]
vodevil.range( '2..5' ) //=&gt; [2, 3, 4, 5]
vodevil.range( 'b..f' ) //=&gt; ['b', 'c', 'd', 'e', 'f']
vodevil.range( '..c' ) //=&gt; ['a', 'b', 'c']
vodevil.range( 'A..C' ) //=&gt; ['A', 'B', 'C']

//vodevil.bang 配列を生成する２
vodevil.bang( '', 2 ) //=&gt; ['', '']
vodevil.bang( 'doug', 5 ) //=&gt; ['doug', 'doug', 'doug', 'doug', 'doug']
vodevil.bang( null, 2 ) //=&gt; [null, null]
vodevil.bang( undefined, 2 ) //=&gt; [undefined, undefined]

//vodevil.clean nullやundefined、他特定の値を配列から消去する
vodevil.clean( [undefined, 'doug', 'john'] ) //=&gt; ['doug', 'john']
vodevil.clean( [null, 'doug', 'john'] ) //=&gt; ['doug', 'john']
vodevil.clean( [ 100, 'doug', 'john'], 100 ) //=&gt; ['doug', 'john']

//vodevil.union 配列を結合する
vodevil.union( [1, 2, 3], [4, 5, 6] ) //=&gt; [1, 2, 3, 4, 5, 6]
vodevil.union( 'ab', ['c', 'd'] ) //=&gt; ['a', 'b', 'c', 'd']
vodevil.union( ['a', 'b'], 'cd' ) //=&gt; ['a', 'b', 'c', 'd']

//vodevil.intersect 配列に反復処理を行う
vodevil.intersect( [1, 2, 3, 4, 5], function ( x ) { return x*2; }) //=&gt; [2, 4, 6, 8, 10]
vodevil.intersect( [1, 2, 3], function ( item, index, array ) { console.log( x ); } ) //=&gt; []
vodevil.intersect( [1, 2, 3, 4, 5], function ( x ) { return x 2; }, ':2' ) //=&gt; [2, 4, 6]
vodevil.intersect( [1, 2, 3, 4, 5, 6], function ( x ) { return x*2 }, '2::' ) //=&gt; [6, 4, 2]

//vodevil.sail 配列を切り出す
vodevil.sail( [1, 2, 3, 4, 5], '2:' ) //=&gt; [3, 4, 5]
vodevil.sail( [1, 2, 3, 4, 5], '2::' ) //=&gt; [3, 2, 1]
vodevil.sail( [1, 2, 3, 4, 5, 6], '2:3' ) //=&gt; [3, 4]

//vodevil.flush 入れ子になった値を平坦にする
vodevil.flush( [1, [2, [3, [4, [5, [6, [7, [8, [9, [0]]]]]]]]]] ) //=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
</pre> 


<h2>クライアントサイド(ブラウザ)で使用</h2>
ブラウザでもvodevil.jsをscriptタグで読み込めば使用することができます。
(vodevil.setメソッドは使用できません)

vodevil.jsソースコードの以下(最後の行)をコメントアウトする
<pre class="lang:js decode:true " >
//exports.core = Vodevil;
</pre> 

後は普通に読み込むだけ。
 
<pre class="lang:xhtml decode:true " >&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;script src=&quot;vodevil.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
console.log( Vodevil.range( '..5' ) );

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2840</wp:post_id>
		<wp:post_date>2013-05-16 13:25:53</wp:post_date>
		<wp:post_date_gmt>2013-05-16 04:25:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2840</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js%e4%be%bf%e5%88%a9%e3%81%aa%e9%85%8d%e5%88%97%e6%93%8d%e4%bd%9c%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aavodevil-js]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427282794;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3501;}i:1;a:1:{s:2:"id";i:2792;}i:2;a:1:{s:2:"id";i:3015;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Mapの新しいビジュアルをAPIで使用する</title>
		<link>http://shimz.me/blog/google-map-api/2841</link>
		<pubDate>Thu, 16 May 2013 04:54:56 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2841</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2013/05/new.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/new.jpg" alt="new" width="300" height="319" class="aligncenter size-full wp-image-2842" /></a>

Google Map APIで新しい地図の外観を指定できるようになりました。


<hr />

※　新ビジュアルに完全に切り替わったため、旧ビジュアルの地図は表示できなくなりました。

<hr />


<strong>旧ビジュアル(現在はみれません)</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/01/"></iframe>
<a href="http://shimz.me/example/gmapv3/01/" target="_blank">Full Size</a>

<strong>新ビジュアル</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/new_visual/"></iframe>
<a href="http://shimz.me/example/gmapv3/new_visual/" target="_blank">Full Size</a>


新しいビジュアルを使いたいときはURLパラメーターに「&visual_refresh=true」つけてGoogle Map Apiライブラリを読みこみ「google.maps.visualRefresh=true」を実行します。


<h2>サンプル</h2>
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Google Maps API New visual&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;visual_refresh=true&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	function initialize() {
		google.maps.visualRefresh=true;
		var mapDiv = document.getElementById(&quot;map_canvas&quot;);
		var mapCanvas = new google.maps.Map(mapDiv, {
			center : new google.maps.LatLng(36.322356, 139.013057),
			zoom : 15,
			mapTypeId : google.maps.MapTypeId.ROADMAP
		});
	}
	google.maps.event.addDomListener(window, &quot;load&quot;, initialize);
&lt;/script&gt;
&lt;style type=&quot;text/css&quot;&gt;
html, body{
    margin: 0px;
    padding: 0px;
}
html, body, #map_canvas {
	width: 100%;
	height: 100%;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div id=&quot;map_canvas&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2841</wp:post_id>
		<wp:post_date>2013-05-16 13:54:56</wp:post_date>
		<wp:post_date_gmt>2013-05-16 04:54:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2841</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2842]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-map%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e5%a4%96%e8%a6%b3%e3%82%92api%e3%81%a7%e4%bd%bf%e7%94%a8%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427292380;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3793;}i:1;a:1:{s:2:"id";i:2865;}i:2;a:1:{s:2:"id";i:3445;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Javascript]関数のカリー化と部分適用</title>
		<link>http://shimz.me/blog/javascript/2843</link>
		<pubDate>Sat, 18 May 2013 01:29:46 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2843</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/05/curryphoto.jpg" alt="curryphoto" width="590" height="393" class="aligncenter size-full wp-image-2844" />

<a href="http://matome.naver.jp/odai/2133495802300247001" target="_blank">関数のカリー化 (currying)と部分適用 - NAVER まとめ</a>

関数の部分適用とカリー化の違いが、なかなか理解できずにいたのですが非常にわかりやすく解説されていた記事を見つけました。

<a href="http://benalman.com/news/2010/09/partial-application-in-javascript/" target="_blank">Ben Alman » Partial application in JavaScript?</a>

サンプルコードが分かりやすくてたすかります。
しかし、動作の違いは分かったもののまだ言葉ではうまく説明できません。
ちゃんと理解するのはなかな難しいですね。

<strong>サンプル</strong>
<script type="text/javascript" src="http://jsdo.it/blogparts/bayf/js?width=465&height=496&view=javascript"></script>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2843</wp:post_id>
		<wp:post_date>2013-05-18 10:29:46</wp:post_date>
		<wp:post_date_gmt>2013-05-18 01:29:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%ae%e3%82%ab%e3%83%aa%e3%83%bc%e5%8c%96%e3%81%a8%e9%96%a2%e6%95%b0%e3%81%ae%e9%83%a8%e5%88%86%e9%81%a9%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2844]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427151472;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3662;}i:1;a:1:{s:2:"id";i:3080;}i:2;a:1:{s:2:"id";i:2854;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>d3.js Living Code</title>
		<link>http://shimz.me/blog/d3-js/2846</link>
		<pubDate>Mon, 20 May 2013 02:13:16 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2846</guid>
		<description></description>
		<content:encoded><![CDATA[週末にちょっと作ってみました。
<a href="http://shimz.me/example/d3js/LivingCode/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/livingcode.png" alt="D3 living code" width="590" height="380" class="aligncenter size-full wp-image-2848" /></a>

昔懐かしいコンソール画面風のcanvasにD3.jsのコードが自動的に記述され、一行ごとに実行されていきます。
IE ver10と最新版のchrome、Firefoxで動作確認しています。

<a href="http://shimz.me/example/d3js/LivingCode/">example</a>

参考
<a href="http://js1k.com/2013-spring/details/1387">Living Code</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2846</wp:post_id>
		<wp:post_date>2013-05-20 11:13:16</wp:post_date>
		<wp:post_date_gmt>2013-05-20 02:13:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-living-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2848]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426900558;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4095;}i:1;a:1:{s:2:"id";i:3688;}i:2;a:1:{s:2:"id";i:3645;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>カリー化関数を利用して非同期処理を整理する</title>
		<link>http://shimz.me/blog/javascript/2851</link>
		<pubDate>Wed, 22 May 2013 11:04:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2851</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/javascript/2843">カリー化関数</a>を使うと、複雑になりがちな非同期処理のコールバックを比較的シンプルに記述できます。
 
<pre class="lang:js decode:true " >//非同期処理
var  GetJSON = function(fn) {
	$.ajax({
		url:'json.php',
		dataType:'json',
		success:function(json){
		  fn(json);
		}                
	});
}

//束縛
var getJson =  curry(GetJSON ,function(d){
	console.log(d)
});

//実行
getJson();
</pre> 


<h2>サンプル１</h2>
<script type="text/javascript" src="http://jsdo.it/blogparts/7gbo/js?width=465&height=496&view=javascript"></script>


<h2>サンプル２</h2>
Google Map Apiを使っての地図作成では、
<ul>
<li>geocodeで緯度経度取得→地図移動→XHR→地図上にマーカー表示</li>
<li>位置情報取得→地図移動→XHR→地図上にマーカー表示</li>
</ul>
上記の処理をよく行いますが、「geocode」「位置情報取得」「XHRでのデータの取得」などは基本"非同期"の処理のためコールバックが入れ子になって複雑になりがちです。
そんなときは、curryを使って非同期処理のコールバックをまとめるとシンプルに整理できたりします。

実際にsampleを作ってみました。

位置情報を取得して周辺500m内の車椅子可のお店を表示する地図です。（位置情報が使えない場合は住所で検索してください）
<a href="http://shimz.me/example/gmapv3/gurunavi/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/gurunavi.jpg" alt="gurunavi" width="590" height="327" class="aligncenter size-full wp-image-2852" /></a>

<a href="http://shimz.me/example/gmapv3/gurunavi/index.html">sample</a>

↓ curryを使うことで非同期処理をこんな感じに書けます。詳しい内容はリンク先のソースを参照してください。
 
<pre class="lang:js decode:true " >//json取得時のコールバックを束縛
var getJson =  curry(GetJSON ,function(d){
	Markers.setMember(getLatLong(d), getContent(d));　//マーカーをセット
}) ;

//geocode 検索時のコールバックを束縛
var searchAddress = curry(SearchAddress,  function(d){
	panTo(d);                      //地図移動
	Markers.deleteAllMarkers();    //マーカーを全削除  
	getJson([d.lat(), d.lng()]) ;  //json取得
});    

//位置情報取得時のコールバックを束縛
var getCurrentPosition = curry(GetCurrentPosition, function(d){
	panTo(d);                     //地図移動
	Markers.deleteAllMarkers();   //マーカーを全削除  
	getJson([d.lat(), d.lng()]) ; //json取得
});

 //住所検索ボタン、イベント設定  
$('#search').click(function(){
	searchAddress(document.getElementById('address').value);　//geocodeで検索
});

//現在位置取得ボタン、イベント設定
$('#getCurrentPosition').click(function(){
	getCurrentPosition(); //位置情報取得
});
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2851</wp:post_id>
		<wp:post_date>2013-05-22 20:04:03</wp:post_date>
		<wp:post_date_gmt>2013-05-22 11:04:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2851</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2852]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%ab%e3%83%aa%e3%83%bc%e5%8c%96%e9%96%a2%e6%95%b0%e3%82%92%e5%88%a9%e7%94%a8%e3%81%97%e3%81%a6%e9%9d%9e%e5%90%8c%e6%9c%9f%e5%87%a6%e7%90%86%e3%82%92%e6%95%b4%e7%90%86%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427289394;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3753;}i:1;a:1:{s:2:"id";i:3824;}i:2;a:1:{s:2:"id";i:2854;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>住所ドリルダウン検索(ADDRAjax)ライブラリとGoogle Maps APIをカリーで。</title>
		<link>http://shimz.me/blog/javascript/2854</link>
		<pubDate>Fri, 24 May 2013 10:39:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2854</guid>
		<description></description>
		<content:encoded><![CDATA[おいしいカリーのつくりかた勉強中。

<a href="http://shimz.me/example/gmapv3/ADDRAjaxGmap/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/addrajxGmap.jpg" alt="addrajxGmap" width="589" height="365" class="border aligncenter size-full wp-image-2855" /></a>

Google Geocodeは住所を与えればだいたい正確な緯度経度を返してくれるのですが、たまに微妙にズレている時もあって、入力画面等で正確な緯度経度を入力してほしい時に困ることがあります。
自分の場合、そんな時は、以下のようなUIを作ることが多いです。

<ul>	<li>住所をドリルダウンで選択してもらう。</li>
	<li>位置がずれていたらGoogle Mapのマーカーをドラッグして微調整してもらう。</li>
</ul>

しかし、これも<a href="http://shimz.me/blog/javascript/2851">昨日の記事</a>と同じで非同期処理がからむためコードが複雑になりがちだったので、カリー化をつかってなるべく宣言的に書けるよう整理してみました。

<a href="http://shimz.me/example/gmapv3/ADDRAjaxGmap/index.html">example</a>
Github:<a href="https://github.com/shimizu/ADDRAjaxGmap">ADDRAjaxGmap</a>

「カリー化や関数合成って、実際のコーディングでどうやって使っていったらいいのか？」と疑問に思っていたのですが、多少使い方が分かってきたような気がします。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2854</wp:post_id>
		<wp:post_date>2013-05-24 19:39:05</wp:post_date>
		<wp:post_date_gmt>2013-05-24 10:39:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%8f%e6%89%80%e3%83%89%e3%83%aa%e3%83%ab%e3%83%80%e3%82%a6%e3%83%b3%e6%a4%9c%e7%b4%a2addrajax%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%81%a8google-maps-api%e3%82%92%e3%82%ab%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2855]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427076051;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2670;}i:1;a:1:{s:2:"id";i:3406;}i:2;a:1:{s:2:"id";i:3614;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最近気になっているもの（Javascriptで関数型プログラミング等)まとめ</title>
		<link>http://shimz.me/blog/javascript/2856</link>
		<pubDate>Tue, 28 May 2013 03:21:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2856</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/05/book20130528.jpg" alt="book20130528" width="590" height="443" class="aligncenter size-full wp-image-2857" />

最近ちょっと仕事モードで、仕事と関係ない事をやる余裕があまりありません。記事も手抜きモードです。

以下、最近気になっているものをまとめてみました。

<strong>■ フレームワーク</strong>
<a href="http://knockoutjs.com/">Knockout.js</a>

<a href="http://backbonejs.org/">Backbone.js</a>とか<a href="http://angularjs.org/">Angular.js</a>とかいろいろある中で、Knockout.jsがわりと軽くて自分の好みに近いようなので、とりあえずコレを今後勉強しようかなと。(まぁ、ぶっちゃけ自分が関わる範囲ではjQueryで十分だったりもしますが orz)


<strong>■ テストフレームワーク</strong>
<a href="http://pivotal.github.io/jasmine/">jasmine</a>
なるべく個人的なプロジェクトでもテスト書く習慣を付けたいのでテストフレームワークを調べてます。とりあえず、調べた中ではjasmineが使い勝手が良さそうでした。下記記事によるとKnockout.jsとの相性もいいらしいので、一石二鳥っぽいし。
<a href="http://www.softfinity.com/blog/the-battle-of-modern-javascript-frameworks-part-ii-knockout-js/">The Battle of Modern Javascript Frameworks: Part II – Knockout.js</a>

<strong>■ 関数型プログラミング in Javascript</strong>
<a href="https://gist.github.com/ympbyc/5564146">Functional JavaScript</a>
<a href="http://slid.es/gsklee/functional-programming-in-5-minutes">Functional Programming in 5 Minutes</a>
<a href="http://cjohansen.no/talks/2012/sdc-functional">Pure, functional JavaScript</a>
<a href="http://msdn.microsoft.com/en-us/magazine/gg575560.aspx">Partial Application in JavaScript</a>

多分、「大規模なフロントエンドを複数人で開発する」とかだとまた違うのかもしれませんが、自分のようにほぼ一人で開発することが多い場合には関数型プログラミングの手法を取り入れられれば生産性がかなり向上できるのではないか？　と思い最近学習の必要性を感じています。
あとは……とりあえず調べていて面白いので。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2856</wp:post_id>
		<wp:post_date>2013-05-28 12:21:10</wp:post_date>
		<wp:post_date_gmt>2013-05-28 03:21:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9c%80%e8%bf%91%e6%b0%97%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%82%8b%e3%82%82%e3%81%ae%ef%bc%88javascript%e3%81%a7%e9%96%a2%e6%95%b0%e5%9e%8b%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2857]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427402130;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3698;}i:1;a:1:{s:2:"id";i:3362;}i:2;a:1:{s:2:"id";i:500;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プログラミング学習の新しいかたち？！チャットをしながらライブコーディングや共同プログラミングができるCodePen Pro</title>
		<link>http://shimz.me/blog/web/2860</link>
		<pubDate>Fri, 31 May 2013 00:53:08 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2860</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codepen.io/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/codepen.jpg" alt="codepen" width="590" height="418" class="aligncenter size-full wp-image-2861" /></a>

CodePenはCSS+HTML+JavaScriptで作成したコードを公開し共有(Fork)できるサービスです。
日本でいうところの<a href="http://jsdo.it/">jsdo.it</a>に似たサイトですね。
Githubのアカウントでログインし、作成したコードをGithubにアップロードすることができ、SlimやSass、CoffeeScriptなどを利用してコーディングすることもできるのでフロントエンドの開発環境としても便利なサービスです。
日々、海外のエンジニアの凄い作品がアップロードされていて見ているだけで勉強になり楽しめます。

基本、無料で使うことができるCodePenですが、<strong>月額9ドル</strong>の有料版「<a href="http://codepen.io/pro/">Pro</a>」に申し込むと「PROFESSOR MODE」や「COLLAB MODE」などを利用することができます。
(Pro版では、shareメニューに多くの機能が追加されます)
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/codepen1.jpg" alt="codepen1" width="549" height="462" class="size-full wp-image-2862" />



<h2>PROFESSOR MODE</h2>
ライブコーディングを配信できる機能です。
コードを入力すると同じ画面を見ている他ユーザーのブラウザに、入力した内容や出力結果がリアルタイムに反映されます。
(入力画面のタブの切換えや読み込むライブラリの設定などの操作もリアルタイムで反映されるので、受信側からすると本当に自動的にコードが書き込まれて行くように見えます）

<img src="http://shimz.me/blog/wp-content/uploads/2013/05/codepen2-th.jpg" alt="codepen2-th" width="590" height="319" class="size-full wp-image-2864" />

「PROFESSOR MODE」はライブコーディングを配信するだけですが、「COLLAB MODE」では複数人で同時にコードを編集することができます。
これらの機能を使えば、リモートでプログラミングの授業をおこなったり、離れた場所にいるもの同士でもペアプログラミングなどが可能になります。
詳しいに人に「ちょっと、ここのところが解らないんだけど？」とか「もっと良い書き方が無いかな？」と質問するのに便利ですし、オンライン上で勉強会のようなことも出来るかもしれません。
利用者が増えれば、<a href="http://dotinstall.com/">ドットインストール</a>などの動画コンテンツとはまた違ったプログラミング学習の助けになるのではないかと期待しています。


<iframe width="560" height="315" src="http://www.youtube.com/embed/oRHlvtvfILY" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2860</wp:post_id>
		<wp:post_date>2013-05-31 09:53:08</wp:post_date>
		<wp:post_date_gmt>2013-05-31 00:53:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2860</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2861]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[コラボしたい。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e5%ad%a6%e7%bf%92%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e3%81%8b%e3%81%9f%e3%81%a1%ef%bc%9f%ef%bc%81%e3%83%81%e3%83%a3%e3%83%83%e3%83%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372102;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2952;}i:1;a:1:{s:2:"id";i:3035;}i:2;a:1:{s:2:"id";i:2730;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[GMaps API v3] geometryライブラリを使って距離や面積を測る。</title>
		<link>http://shimz.me/blog/map/2865</link>
		<pubDate>Sat, 01 Jun 2013 09:25:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2865</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/geometry/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/Gmap_geometry.jpg" alt="Gmap_geometry" width="590" height="355" class="alignnone size-full wp-image-2866" /></a>

<a href="http://shimz.me/example/gmapv3/geometry/">example</a>

Google Maps APIのgeometryライブラリを使用すると、地図上の地点間の距離や面積を簡単に取得することができます。



<h2>サンプルコード</h2>
geometryライブラリを使用する際はGoogle Maps APIの読み込み時に「libraries=geometry」を付けて読み込みます。
 
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;http://maps.googleapis.com/maps/api/js?v=3.6&amp;sensor=false&amp;libraries=geometry&quot;&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >google.maps.event.addDomListener(window, &quot;load&quot;, initialize);


function initialize() {
    google.maps.visualRefresh=true;　//Google map新スタイルを使用
    
    //Mapオブジェクトを作成
    var mapDiv = document.getElementById(&quot;map_canvas&quot;);
    var mapObj = new google.maps.Map(mapDiv, {
        center : new google.maps.LatLng(36.322356, 139.013057),
        zoom : 15,
        mapTypeId : google.maps.MapTypeId.ROADMAP,
        draggableCursor: &quot;crosshair&quot; 
    });

    // マーカー・ライン・ポリゴン情報を保管するオブジェクト
    var measure = {
        mvcLine: new google.maps.MVCArray(),
        mvcPolygon: new google.maps.MVCArray(),
        mvcMarkers: new google.maps.MVCArray(),
        line: null,
        polygon: null
    };

    //地図にクリックイベントを設定
    google.maps.event.addListener(mapObj, &quot;click&quot;, function(evt) {
            //地図クリック時にマーカー、ライン、ポリゴンを追加
            measureAdd(evt.latLng);
    });


    //マーカー、ライン、ポリゴンを追加する
    function measureAdd(latLng) {
        //新規マーカー作成
        var marker = new google.maps.Marker({
            map: mapObj,
            position: latLng,
            draggable: true,
            raiseOnDrag: false,
            title: &quot;ドラッグで移動できます&quot;
        });

        //ライン情報を追加
        measure.mvcLine.push(latLng);
        //ポリゴン情報を追加
        measure.mvcPolygon.push(latLng);
        //マーカー情報を追加
        measure.mvcMarkers.push(marker);

        //ラインの頂点の数を更新
        var latLngIndex = measure.mvcLine.getLength() - 1;

        //マーカードラッグイベント設定、ドラッグされたらライン情報・ポリゴン情報を更新する
        google.maps.event.addListener(marker, &quot;drag&quot;, function(evt) {
                measure.mvcLine.setAt(latLngIndex, evt.latLng);
                measure.mvcPolygon.setAt(latLngIndex, evt.latLng);
        });

        //マーカードラッグ終了後イベント設定、マーカーのドラッグ・移動が終わったら距離・面積の計算を行う
        google.maps.event.addListener(marker, &quot;dragend&quot;, function() {
            if (measure.mvcLine.getLength() &gt; 1) {
                 measureCalc();
            }
        });

        // ラインの頂点が１以上ある場合
        if (measure.mvcLine.getLength() &gt; 1) {
            // ラインが作成されていなければ作成する
            if (!measure.line) {
                measure.line = new google.maps.Polyline({
                    map: mapObj,
                    clickable: false,
                    strokeColor: &quot;#FF0000&quot;,
                    strokeOpacity: 1,
                    strokeWeight: 3,
                    path:measure. mvcLine
                });
            }

            // ラインの頂点が２つ以上ある場合
            if (measure.mvcPolygon.getLength() &gt; 2) {
                // ポリゴンが作成されていなければ作成する
                if (!measure.polygon) {
                    measure.polygon = new google.maps.Polygon({
                        clickable: false,
                        map: mapObj,
                        fillOpacity: 0.25,
                        strokeOpacity: 0,
                        paths: measure.mvcPolygon
                    });
                }
            }
        }

        // ラインの頂点の数が１以上の時は距離と面積を計算する
        if (measure.mvcLine.getLength() &gt; 1) {
            measureCalc();
        }
    }
	
	//距離・面積の計算
    function measureCalc() {
        // geometryライブラリ使用して距離を計算する
        var length = google.maps.geometry.spherical.computeLength(measure.line.getPath());
        jQuery(&quot;#distance&quot;).text(length.toFixed(1))

        // ラインの頂点が２つ以上ある場合は面積を計算する
        if (measure.mvcPolygon.getLength() &gt; 2) {
            var area = google.maps.geometry.spherical.computeArea(measure.polygon.getPath());
            jQuery(&quot;#area&quot;).text(area.toFixed(1));
        }
    }

    //マーカー・ライン・ポリゴンのリセット
    function measureReset() {
        // ポリゴンが作成されているならばnullをセット
        if (measure.polygon) {
            measure.polygon.setMap(null);
            measure.polygon = null;
        }
        // ラインが作成されているならばnullをセット
        if (measure.line) {
            measure.line.setMap(null);
            measure.line = null
        }

        //MVCArraysのライン・ポリゴン情報をクリア
        measure.mvcLine.clear();
        measure.mvcPolygon.clear();

        // マーカーを削除する
        measure.mvcMarkers.forEach(function(elem, index) {
            elem.setMap(null);
        });
        measure.mvcMarkers.clear();

        jQuery(&quot;#distance,#area&quot;).text(0);
    }
    
    //リセットボタンにイベントを設置
    $('#reset').click(measureReset);
}</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2865</wp:post_id>
		<wp:post_date>2013-06-01 18:25:28</wp:post_date>
		<wp:post_date_gmt>2013-06-01 09:25:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2865</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2866]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gmaps-api-v3-geometry%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e8%b7%9d%e9%9b%a2%e3%82%84%e9%9d%a2%e7%a9%8d%e3%82%92%e6%b8%ac%e3%82%8b%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427254712;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2841;}i:1;a:1:{s:2:"id";i:2838;}i:2;a:1:{s:2:"id";i:2656;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebGLを利用して3Dな地図を作成できるライブラリ「Cesium」</title>
		<link>http://shimz.me/blog/map/2867</link>
		<pubDate>Tue, 04 Jun 2013 05:31:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2867</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/cesium/02/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/HelloWorld.png" alt="HelloWorld" width="467" height="452" class="aligncenter size-full wp-image-2868" /></a>


<a href="http://cesium.agi.com/">Cesium</a> はApache 2.0ライセンスの下、オープンソースとして作成された3D地図作成ライブラリです。
ハードウェアアクセラレーショングラフィックスにWebGLを使用しており、クロスプラットフォーム、クロスブラウザで、動的なデータ可視化を行うのに利用することができます。
公式サイトのデモなどを見ると、その性能の高さを感じることができます。
(以下スクリーンショット、公式サイトより）


<img src="http://shimz.me/blog/wp-content/uploads/2013/06/OneApiThreeViews.png" alt="OneApiThreeViews" width="590" height="355" class="alignnone size-full wp-image-2869" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/KoreaLaunch.png" alt="KoreaLaunch" width="590" height="393" class="alignnone size-full wp-image-2870" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/Terrain.png" alt="Terrain" width="590" height="393" class="alignnone size-full wp-image-2871" />

ほんの少しだけ触ってみました。

<h2>サンプルコード</h2>
ぐんまちゃんを群馬に貼り付けてみました。
 
<pre class="lang:js decode:true " >//セシウムウィジェットを作成
var widget = new Cesium.CesiumWidget('cesiumContainer');

//イメージレイヤーを取得
var layers = widget.centralBody.getImageryLayers();
//イメージレイヤにぐんまちゃん画像を貼り付け
layers.addImageryProvider(new Cesium.SingleTileImageryProvider({
    url : 'gunmachan.jpg',
    extent : new Cesium.Extent(
            Cesium.Math.toRadians(139.0032936),
            Cesium.Math.toRadians(36.3219088),
            Cesium.Math.toRadians(139.0634281),
            Cesium.Math.toRadians(36.3894816)
        )
}));

//アニメーション設定    
function flyToExtent() {
      var scene = widget.scene; 
     var west = Cesium.Math.toRadians(139.91093183215332);
     var south = Cesium.Math.toRadians(35.73934085382143);
     var east = Cesium.Math.toRadians(138.26298261340332);
     var north = Cesium.Math.toRadians(37.06566045805025);

     var extent = new Cesium.Extent(west, south, east, north);
     
     var flight = Cesium.CameraFlightPath.createAnimationExtent(scene.getFrameState(), {
         destination : extent
     });
     scene.getAnimations().add(flight);      
 }</pre> 

<a href="http://shimz.me/example/cesium/02/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2867</wp:post_id>
		<wp:post_date>2013-06-04 14:31:48</wp:post_date>
		<wp:post_date_gmt>2013-06-04 05:31:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2867</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cesium"><![CDATA[Cesium]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2868]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[webgl%e3%82%92%e5%88%a9%e7%94%a8%e3%81%97%e3%81%a63d%e3%81%aa%e5%9c%b0%e5%9b%b3%e3%82%92%e4%bd%9c%e6%88%90%e3%81%a7%e3%81%8d%e3%82%8b%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%80%8ccesium]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378699;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3134;}i:1;a:1:{s:2:"id";i:2379;}i:2;a:1:{s:2:"id";i:4152;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iphoneに搭載されているセンサー(GPS位置情報、ジャイロセンサー、電子コンパス、加速度センサー)の情報を取得</title>
		<link>http://shimz.me/blog/javascript/2872</link>
		<pubDate>Thu, 06 Jun 2013 01:23:04 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2872</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/06/mobileapi-e1370481850258.jpg" alt="mobileapi" width="588" height="327" class="aligncenter size-full wp-image-2873" />

現時点における、モバイルデバイスの各センサーから情報を取得する方法を確認してみました。
iPhone4sでしか試していません。

<a href="http://shimz.me/example/mobileAPI/all/">example</a>
(iphone,ipadでアクセスしてください)


<h2>サンプルコード</h2>
 
<pre class="lang:js decode:true " >//位置情報取得
 window.onload = function(){
    navigator.geolocation.watchPosition(update); //現在位置情報を定期的に監視

    // navigator.geolocation.getCurrentPosition(); //現在位置情報を取得
    // navigator.geolocation.clearWatch(); //watchPosition()での監視を中止
}
function update(position){
    //下記すべての情報が取得できるわけでは無い
    var lat = position.coords.latitude; //緯度
    var lng = position.coords.longitude; //経度
    var alt = position.coords.altiude; //高度
    var acc = position.coords.accuracy; //緯度経度の誤差
    var alc = position.coords.altiudeAccuracy; //高度の誤差
    var hed = position.coords.heading; //方角
    var spe = position.coords.speed; //スピード

    var html =&quot;&quot;;
        html += &quot;緯度:&quot; + lat + &quot;&lt;br&gt;&quot;;
        html += &quot;経度:&quot; + lng + &quot;&lt;br&gt;&quot;;
        html += &quot;高度:&quot; + alt + &quot;&lt;br&gt;&quot;;
        html += &quot;緯度経度誤差:&quot; + acc + &quot;&lt;br&gt;&quot;;
        html += &quot;高度誤差:&quot; + alc + &quot;&lt;br&gt;&quot;;
        html += &quot;方角:&quot; + hed + &quot;&lt;br&gt;&quot;;
        html += &quot;速度:&quot; + spe + &quot;&lt;br&gt;&quot;;
        
    document.getElementById(&quot;geolocation&quot;).innerHTML = html;
}

//デジタルコンパス情報取得&amp;ジャイロセンサー情報
window.addEventListener(&quot;deviceorientation&quot;, function(evt){
    //デジタルコンパス情報取得
    var ch = evt.webkitCompassHeading;
    var chAcc = evt.webkitCompassAccuracy;
    var html =&quot;&quot;;
        html += &quot;方角：&quot;+ch
        html += &quot;　誤差：&quot;+chAcc;
    document.getElementById(&quot;compass&quot;).innerHTML = html;
    
    //ジャイロセンサー情報取得
    var alpha = evt.alpha;   // z-axis
    var beta = evt.beta;     // x-axis
    var gamma = evt.gamma;   // y-axis
    var html =&quot;&quot;;
        html += 'Z回転(alpha):' + alpha + &quot;&lt;br&gt;&quot;;
        html += &quot;X回転(beta):&quot; + beta + &quot;&lt;br&gt;&quot;;
        html += &quot;Y回転(gumma):&quot; + gamma;
    document.getElementById(&quot;gyroscope&quot;).innerHTML = html;
    
}, false);

//加速度センサー情報取得
window.addEventListener(&quot;devicemotion&quot;, function(evt){

   //加速度
   var x = evt.acceleration.x;
   var y = evt.acceleration.y;
   var z = evt.acceleration.z;


   //傾き
   var xg = evt.accelerationIncludingGravity.x; //左右
   var yg = evt.accelerationIncludingGravity.y; //上下
   var zg = evt.accelerationIncludingGravity.z; //前後

   //回転値
   var a = evt.rotationRate.alpha; //z方向
   var b = evt.rotationRate.beta; //x方向
   var g = evt.rotationRate.gamma; // y方向

    var html =&quot;&quot;;
        html  += &quot;x:&quot;+x+&quot;&lt;br&gt;&quot;;
        html += &quot;y:&quot;+y+&quot;&lt;br&gt;&quot;;
        html += &quot;z:&quot;+z+&quot;&lt;br&gt;&quot;;
        
        html += &quot;傾きx:&quot;+xg+&quot;&lt;br&gt;&quot;;
        html += &quot;傾きy:&quot;+yg+&quot;&lt;br&gt;&quot;;
        html += &quot;傾きz:&quot;+zg+&quot;&lt;br&gt;&quot;;
        
        html += &quot;alpha(z):&quot;+a+&quot;&lt;br&gt;&quot;;
        html += &quot;beta(x):&quot;+b+&quot;&lt;br&gt;&quot;;
        html += &quot;gamma(y):&quot;+g+&quot;&lt;br&gt;&quot;;

   document.getElementById(&quot;rotation&quot;).innerHTML = html;

}, true); </pre> 

javascriptでデバイスのセンサーにアクセスできるようになるなんて……良い時代ですね。
"一般人がGPSを搭載したデバイスを肌身離さず持ち歩いている"なんてことも今までにはなかったことで、WebGISとかと組み合わせたらきっと面白いことができる気がします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2872</wp:post_id>
		<wp:post_date>2013-06-06 10:23:04</wp:post_date>
		<wp:post_date_gmt>2013-06-06 01:23:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2872</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2873]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[iphone%e3%81%ab%e6%90%ad%e8%bc%89%e3%81%95%e3%82%8c%e3%81%a6%e3%81%84%e3%82%8b%e3%82%bb%e3%83%b3%e3%82%b5%e3%83%bcgps%e4%bd%8d%e7%bd%ae%e6%83%85%e5%a0%b1%e3%80%81%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427380530;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2851;}i:1;a:1:{s:2:"id";i:3601;}i:2;a:1:{s:2:"id";i:2831;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>電子書籍が普及しないのは図書館のせいじゃないよ。</title>
		<link>http://shimz.me/blog/other/2876</link>
		<pubDate>Thu, 06 Jun 2013 11:05:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2876</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.insightnow.jp/article/7735" target="_blank">電子書籍の仇敵は図書館 :: INSIGHT NOW!</a>

図書館のせいにするのはあまりに勝手が過ぎるんじゃないでしょうかね。



『なれる！SE』という小説があります。
別名「SE残酷物語」
ライトノベルでありながらシステムエンジニアの過酷な日常を(多少盛っている部分は否めませんが)リアルに描画することで、一部業界人のトラウマを心地よく刺激した人気作品です。
一時期はKindleストアのラノベ・ベストセラーランキングを総なめにしたほどです。

<a href="http://lunaticprophet.org/archives/13693" target="_blank">Amazon・Kindleストアのライトノベル・ベストセラーを『なれる！SE』が席巻！＆BLベストセラー</a>

紙の本では、現在９巻まで発刊されているのですが、kindleストアには７巻までしかありません。

とくに８巻はすでに紙で発売されてから半年経とうしていますが、いまだにKindleストアに並びません。

2012年に発売された本ですら電子書籍化するのに半年もかかるのか……と天を仰ぎたくなりますが、実は角川の電子書籍プラットフォームBOOKWALKERでは８巻がすでに発売されていたりします。

「先行販売」という位置づけだそうですよ。

紙の売上を守るために電子書籍の発売を遅らせ、さらに自社プラットフォームの付加価値を高めるために他プラットフォームへの配信を遅らせているわけですね。

「それがビジネスってもんだ」と言われれば返す言葉もありませんが、その行為にどれほどの効果があるんでしょうか。

だったら、初めからKindleに配信しなきゃいいのに。

プラットフォームばかり乱立させて何がしたいのか。

まだまだ普及の進んでいない国内の電子書籍市場で、チマチマした足の引っ張り合いしながらどっちつかずで中途半端な態度ばかりとっているので、出版業界の電子書籍にたいする「やる気」がいまいち信用できないんですよ。

「本も雑誌も売れなくなってどんどん書店が減っていく中で新たな市場を作らなきゃならないことは分かっているんだけど、電子書籍が爆発的に普及しちゃって紙の書籍が売れなくなるとそれも困るしプラットフォームも独占したい、でもリスクは取りたくない……どうしよう？と思ってたらとうとうKindleが来ちゃった！」

という、腰も覚悟も座ってない感じを消費者に見透かされているんじゃないでしょうか。

【余談】
とりあず、本を買う側からしたら「買いたい本を、とっとと買えるようにしてくれ」というのが一番の願いです。
あと国内のプラットフォームはせめて２・３個に収束させて欲しいし、それができないなら主要なプラットフォームには同じタイミングでコンテンツを配信してほしいです。発売を遅らせるとかで消費者に不便を押し付けたところでプラットフォームを乗り換えさせる効果など期待できませんし、付加価値を付けたいなら独占販売にして「他では出しません」とちゃんと言ってほしいですね。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2876</wp:post_id>
		<wp:post_date>2013-06-06 20:05:05</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:05:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9b%bb%e5%ad%90%e6%9b%b8%e7%b1%8d%e3%81%8c%e6%99%ae%e5%8f%8a%e3%81%97%e3%81%aa%e3%81%84%e3%81%ae%e3%81%af%e5%9b%b3%e6%9b%b8%e9%a4%a8%e3%81%ae%e3%81%9b%e3%81%84%e3%81%98%e3%82%83%e3%81%aa%e3%81%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426959020;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2594;}i:1;a:1:{s:2:"id";i:4122;}i:2;a:1:{s:2:"id";i:3228;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上に四分木を描く</title>
		<link>http://shimz.me/blog/d3-js/2877</link>
		<pubDate>Fri, 07 Jun 2013 06:35:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2877</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo13/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/test000009.jpg" alt="test000009" width="590" height="393" class="aligncenter size-full wp-image-2878" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo13/">example</a>

以前、<a href="http://shimz.me/blog/d3-js/2819">地図上にボロノイ図を描いてみました</a>が、今回は四分木を描いてみました。
データは前回同様、高崎市のガソリンスタンド位置情報を使用しています。

<a href="http://ja.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E6%9C%A8">Wikipedia:四分木</a>



<h2>サンプルコード</h2>
<pre class="lang:js decode:true " >d3.json(&quot;takasaki.topojson&quot;, function(json) {
	var widht = 900;	
	var svg = d3.select(&quot;svg&quot;);

	var geodata = topojson.object(json, json.objects.takasaki).geometries;

	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(90000)	//スケール（ズーム）の指定
		.translate([500,300])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//投影

	//地図表示
	var map =  svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;map&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: &quot;#99ff99&quot;,
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		});

	//燃料給油所データ読み込み
	d3.json('point.geojson', function(json){
		//母点位置情報
		var pointdata = json.features;
	
		//ピクセルポジション情報
		var positions = [];
		pointdata.forEach(function(d) {
			var point = projection(d.geometry.coordinates);//位置情報→ピクセル
			positions.push({x:point[0], y:point[1]}); 
		});
		
		//母点表示
		svg.selectAll(&quot;circle&quot;)
			.data(positions)
			.enter()
			.append(&quot;circle&quot;)
			.attr({
				&quot;cx&quot;:function(d, i) { return d.x; },
				&quot;cy&quot;:function(d, i) { return d.y; },
				&quot;r&quot;:2,
				fill:&quot;#1f3134&quot;
			});
				
		// 四分木生成
		var quadtree = d3.geom.quadtree(positions, 0, widht);
		
		//領域描画
		svg.selectAll(&quot;rect&quot;)
		.data(nodes(quadtree))
		.enter().append(&quot;svg:rect&quot;)
		.attr({
			&quot;x&quot;: function(d) { return d.x; },
			&quot;y&quot;: function(d) { return d.y; },
			&quot;width&quot;: function(d) { return d.width; },
			&quot;height&quot;: function(d) { return d.height; },
		});
		
		//四分木→ 矩形データの配列に変換。
		function nodes(quadtree) {
			var nodes = [];
			quadtree.visit(function(node, x1, y1, x2, y2) {
				nodes.push({x: x1, y: y1, width: x2 - x1, height: y2 - y1});
			});
			return nodes;
		}
		
		
	});

});</pre> 



<h2>Google Map上でも描いてみた</h2>
一応、表示はできましたが拡大していくと四分木の表示がおかしくなります。
原因不明 orz

<a href="http://shimz.me/example/d3js/geo_example/geo14/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/test000010.jpg" alt="test000010" width="590" height="389" class="aligncenter size-full wp-image-2879" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo14/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2877</wp:post_id>
		<wp:post_date>2013-06-07 15:35:05</wp:post_date>
		<wp:post_date_gmt>2013-06-07 06:35:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2877</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2878]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ab%e5%9b%9b%e5%88%86%e6%9c%a8%e3%82%92%e6%8f%8f%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427304145;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2817;}i:1;a:1:{s:2:"id";i:3548;}i:2;a:1:{s:2:"id";i:2881;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上にHexbin(六角形)を表示する</title>
		<link>http://shimz.me/blog/d3-js/2881</link>
		<pubDate>Tue, 11 Jun 2013 04:00:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2881</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo15/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/d3hexbin.jpg" alt="d3.js map hexbin" width="590" height="518" class="alignnone size-full wp-image-2882" /></a>
地図上に表示するポイントが多くなるとゴチャゴチャして見難くなります。
「そんな時は六角形にまとめて表示すると見やすくなるよ！」と聞いたのでやってみました。


国土数値情報サイトがらいただいた<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A30b.html">竜巻等の突風（点）情報</a>を表示しています。竜巻等の突風の多いエリア程、色が濃く表示されます。
<a href="http://shimz.me/example/d3js/geo_example/geo15/">example</a>


<h2>サンプルコード</h2>
D3.jsと一緒にHexbinプラグインを読み込んでください。
 
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://d3js.org/d3.hexbin.v0.min.js&quot;&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >window.onload = function(){
	日本地図データの読み込み
	d3.json(&quot;japan.topojson&quot;, function(json) {
		d3main(json);
	});
}

function d3main(json){
	var width = 1200;
	var height = 1200;
	
	var svg = d3.select(&quot;svg&quot;);

	//topojson読み込み
	var geodata = topojson.object(json, json.objects.japan).geometries;


	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(3000)	//スケール（ズーム）の指定
		.translate([600,700])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//投影

	//地図表示
	var map =  svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;map&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: &quot;white&quot;,
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		});

	//竜巻・突風データ読み込み
	d3.json('tatsumaki.geojson', function(json){
		//母点位置情報
		var pointdata = json.features;
	
		//ピクセルポジション情報
		var positions = [];
		pointdata.forEach(function(d) {
			var point = projection(d.geometry.coordinates);//位置情報→ピクセル
			positions.push([point[0], point[1]]); 
		});
		
		//竜巻・突風ポイント生成(初期・非表示)		
		var circle = svg.selectAll(&quot;circle&quot;)
			.data(positions)
			.enter()
			.append(&quot;circle&quot;)
			.attr({
				&quot;cx&quot;:function(d, i) { return d[0]; },
				&quot;cy&quot;:function(d, i) { return d[1]; },
				&quot;r&quot;:2,
				fill:&quot;red&quot;,
				&quot;fill-opacity&quot;:0
			});
	
		//六角形を塗るカラースケールを作成
		var hexColor = d3.scale.linear()
			.domain([0, 20])
			.range([&quot;pink&quot;, &quot;red&quot;])
			.interpolate(d3.interpolateLab);
		
		//hex生成関数	
		var hexbin = d3.hexbin()
			.size([900, 600])
			.radius(10);
			
		//hex生成
		svg.append(&quot;g&quot;)
			.selectAll(&quot;.hexagon&quot;)
			.data(hexbin(positions)) //positionsデータからhexデータを生成
			.enter()
			.append(&quot;path&quot;)
			.attr(&quot;class&quot;, &quot;hexagon&quot;)
			.attr({
				&quot;d&quot;: hexbin.hexagon(),
				&quot;transform&quot;: function(d) { return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;; },
				&quot;stroke&quot;: &quot;white&quot;,
				&quot;fill&quot;:function(d) { return hexColor(d.length); }, //六角形内の基点の数によって色の濃度を調整
				&quot;opacity&quot;: .5
			});

		//ポイントの表示・非表示設定
		d3.select(&quot;#btn&quot;).on('click', toggle(
				function(){ circle.attr(&quot;fill-opacity&quot;, 1)},
				function(){ circle.attr(&quot;fill-opacity&quot;, 0)}
			)
		)
	});

}</pre> 



<h2>散布図 Hex表示</h2>
Hex表示のみのサンプルです。
<script type="text/javascript" src="http://jsdo.it/blogparts/yqSk/js?width=465&height=496&view=screenshot"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2881</wp:post_id>
		<wp:post_date>2013-06-11 13:00:09</wp:post_date>
		<wp:post_date_gmt>2013-06-11 04:00:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2881</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2882]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%abhexbin%e5%85%ad%e8%a7%92%e5%bd%a2%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427246866;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:3489;}i:2;a:1:{s:2:"id";i:3517;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>242</wp:comment_id>
			<wp:comment_author><![CDATA[Dynamic Hexbin （動的六角分配) | Daily D3]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://daily.d3js.info/?p=529</wp:comment_author_url>
			<wp:comment_author_IP>133.242.175.19</wp:comment_author_IP>
			<wp:comment_date>2013-12-08 23:50:53</wp:comment_date>
			<wp:comment_date_gmt>2013-12-08 14:50:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] GUNMA GIS GEEK &#8211; 【D3.js】地図上にHexbin(六角形)を表示する [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386547788.7738869190216064453125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386514253.36042499542236328125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>「地理空間データ分析」買ってみた。</title>
		<link>http://shimz.me/blog/book/2884</link>
		<pubDate>Wed, 12 Jun 2013 06:41:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2884</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.amazon.co.jp/gp/product/432001927X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=432001927X&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=432001927X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=432001927X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
購入。
うむ、わからん。
ちょっと買うのが早すぎた。Rと統計の勉強しないと。
でも、「何がわからないのか」が分かったのでよしとする。
地理空間データの分析というのは具体的に何をやればいいのかというイメージがおぼろげながらもつかめたのはありがたい。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2884</wp:post_id>
		<wp:post_date>2013-06-12 15:41:19</wp:post_date>
		<wp:post_date_gmt>2013-06-12 06:41:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e5%9c%b0%e7%90%86%e7%a9%ba%e9%96%93%e3%83%87%e3%83%bc%e3%82%bf%e5%88%86%e6%9e%90%e3%80%8d%e8%b2%b7%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2885]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426772028;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2321;}i:1;a:1:{s:2:"id";i:3853;}i:2;a:1:{s:2:"id";i:3228;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プログラミング教育はプログラマーの育成を目的としなくていい</title>
		<link>http://shimz.me/blog/programming/2886</link>
		<pubDate>Thu, 13 Jun 2013 01:53:23 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2886</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.rubyist.net/~matz/20130612.html">ちょっと待った！小中学校でのプログラミング教育</a>

小中学校でのプログラミング教育については賛否両論あるみたいですね。

個人的には賛成です。

美術の授業は子供を絵描きやアーティストとして育てるために行われるわけでは無いし、音楽の授業も別に世の中に音楽家を増やす目的で行われているものでもないのだから、プログラミングの授業だって別に将来の優秀なプログラマーを育てることを目的としなくてもいいはずです。

むしろプログラミングというものを理解してもらうことを目的とすればいいのではないかと思います。

だからグループ制作とかやるといいんじゃないでしょうか。
採点方法は簡単に"期日に間に合うかどうか"で決めるとして。
途中で「先生、良い事思いつちゃったぞ。みんな○○を追加してみよう！」と突然仕様の変更や追加が起こるというイベントが発生するとより面白いかもしれません。

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/DeathMarch.jpg" alt="DeathMarch" width="350" height="350" class="aligncenter size-full wp-image-2890" />

プログラミングでは頭数の多いグループより、「優秀な奴が一人いるグループの方が少人数でも圧倒的に早くクオリティの高いものが出来上がる」という認識を多くの生徒が持ってくれるだけでも、将来その子供たちが<strong>プログラマーを雇う側</strong>になったときに役に立つはずです。
（日頃隅っこに追いやられがちなパソコン少年も、この授業の時だけは輝けるわけです)
「自分のパソコンでは動いたんです！」とか「○○君のプログラムを追加したら動かなくなったんだから、間に合わなくなったのは僕たちの所為じゃありません！」みたいな微笑ましいやり取りが小中学校で見れることを期待しています。


いずれ子供たちが大人になった時に、
「このスケジュールでは期日に間に合いません」
「なに！？　じゃぁ、あと何人プログラマーがいればいいんだ。１０人か？　２０人か？　今すぐ派遣会社に連絡しろ！」
というようなやりとりが少しでも減るならば、プログラミング教育はある意味成功といえるのではないでしょうか。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2886</wp:post_id>
		<wp:post_date>2013-06-13 10:53:23</wp:post_date>
		<wp:post_date_gmt>2013-06-13 01:53:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e6%95%99%e8%82%b2%e3%81%af%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9e%e3%83%bc%e3%81%ae%e8%82%b2%e6%88%90%e3%82%92%e7%9b%ae%e7%9a%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427150253;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3726;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:2860;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Fabric.js]SVGをcanvasに転写する</title>
		<link>http://shimz.me/blog/d3-js/2892</link>
		<pubDate>Tue, 18 Jun 2013 10:24:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2892</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://fabricjs.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/fablic.jpg" alt="fablic" width="493" height="470" class="aligncenter size-full wp-image-2893" /></a>

<a href="http://fabricjs.com/">Fabric.js</a>は、canvasを操作するためのJavascriptライブラリです。
同様のライブラリは多数ありますがFabricの特徴は、内部にSVGパーサーを持ちsvgからcanvasへのインポートおよびcanvasからsvgへのエクスポートを行う機能があります。

 
<pre class="lang:js decode:true " title="SVG要素をcanvasへ転写する" >//canvas要素の取得
var canvas = new fabric.Canvas('canvas');
canvas.setWidth(300);
canvas.setHeight(300);

//SVG要素取得
var SVGstring = document.getElementById('wrapSVG').innerHTML;  

//SVGをcanvasへ転写
fabric.loadSVGFromString(SVGstring , function(objects, options) {
	options.top = 0;
	options.left = 0;
	var svgGroups = fabric.util.groupSVGElements(objects, options);
	canvas.add(svgGroups).renderAll();
});</pre> 



注意点としては、svg要素のサイズとcanvas要素のサイズをそろえないと正しいサイズで転写されません。

<h2>D3.js & Fabric.js</h2>
<a href="http://shimz.me/example/d3js/fabric/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/d3_fablic-e1371550956952.jpg" alt="d3_fablic" width="561" height="539" class="aligncenter size-full wp-image-2894" /></a>

Fabric.jsとD3.jsを組み合わせることで、D3.jsで作成した地図(SVG)をcanvasへ転写することもできます。

<pre class="lang:js decode:true " title="D3 &amp; Fabric" >var path, map, xy;
xy = d3.geo
	.mercator()		//投影法の指定
	.scale(12000)	//スケール（ズーム）の指定
	.center([139.0032936, 36.3219088]); //中心の座標を指定


path = d3.geo.path().projection(xy);　//投影

map = d3.select(&quot;svg&quot;); //地図用のステージ(SVGタグ)を作成


var gunma = d3.json(&quot;gunma.geojson&quot;, function(json) {
	map.append(&quot;svg:g&quot;)
		.attr(&quot;class&quot;, &quot;gunma&quot;)
		.selectAll(&quot;path&quot;)
		.data(json.features)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr(&quot;d&quot;, path)  //dataに投影法を適応
		.attr(&quot;fill-opacity&quot;, 1)
		.attr(&quot;fill&quot;, &quot;green&quot;)
		.attr(&quot;stroke&quot;, &quot;#222&quot;)
		.attr(&quot;transform&quot;, &quot;translate (&quot; +[-350 ,-50] + &quot;)&quot;)

	canvasDraw();		
});


//fabric.jsを使ってcanvasに転写
function canvasDraw(){
	var canvas = new fabric.Canvas('canvas');
	canvas.setWidth(300);
	canvas.setHeight(300);
		
	var SVGstring = document.getElementById('wrapSVG').innerHTML;  //SVG取得
	fabric.loadSVGFromString(SVGstring , function(objects, options) {
		options.top = 0;
		options.left = 0;
		var svgGroups = fabric.util.groupSVGElements(objects, options);

		canvas.add(svgGroups).renderAll();
	});
}</pre> 



<a href="http://shimz.me/example/d3js/fabric/01/">example</a>


動的に作成したグラフ(SVG)をキャンバスに転写しdata URI schemeとして出力すれば、グラフを画像としてダウンロードする機能なども比較的簡単に作成できます。


……ただ、<a href="http://shimz.me/example/d3js/fabric/02/">axis(目盛り)の転写</a>がいまのところ上手くいきません。　orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2892</wp:post_id>
		<wp:post_date>2013-06-18 19:24:33</wp:post_date>
		<wp:post_date_gmt>2013-06-18 10:24:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2892</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2893]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fabric-jssvg%e3%82%92canvas%e3%81%ab%e8%bb%a2%e5%86%99%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372706;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2406;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:2831;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsで再利用可能なコードの書き方を教えてくれる参考書</title>
		<link>http://shimz.me/blog/d3-js/2898</link>
		<pubDate>Mon, 24 Jun 2013 00:49:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2898</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bleedingedgepress.com/our-books/developing-a-d3-js-edge/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/d3_cover.png" alt="d3_cover" width="160" height="256" class="aligncenter size-full wp-image-2899" /></a>

<a href="http://bleedingedgepress.com/our-books/developing-a-d3-js-edge/">Developing a D3.js Edge</a>

D3.jsを取り扱った参考書としては、「<a href="http://www.amazon.co.jp/gp/product/B008FPJST6/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B008FPJST6&linkCode=as2&tag=toriaezu04b-22">Getting Started with D3</a>（<a href="http://www.oreilly.co.jp/books/9784873115979/">D3をはじめよう</a>）」や「<a href="http://www.amazon.co.jp/gp/product/B00BSG68UQ/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B00BSG68UQ&linkCode=as2&tag=toriaezu04b-22">Interactive Data Visualization for the Web</a>」、「<a href="https://leanpub.com/D3-Tips-and-Tricks">D3 Tips and Tricks</a>」などがありますが、「<a href="http://bleedingedgepress.com/our-books/developing-a-d3-js-edge/">Developing a D3.js Edge</a>」は、一連の参考書より深く踏み込んだ内容となっています。

本書の概要は以下となります。

<ul>
	<li>再利用可能なD3プラグインの作成</li>
	<li><a href="http://pivotal.github.io/jasmine/">Jasmine</a>を用いてのユニットテストやTDD/BDD</li>
	<li><a href="http://square.github.io/crossfilter/">Crossfilter.js</a>とD3.jsの連動</li>
	<li>アプリケーションへ<a href="http://shimz.me/blog/d3-js/2785">ブラッシング</a>を組み込む</li>
	<li>地図APIの作成</li>
</ul>


最終的に以下のような、円形のヒストグラム図と地図が連動するビジュアライゼーションを再利用可能なプラグイン(オリジナルなグラフレイアウト)として作成します。

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/dde_example.png" alt="dde_example" width="590" height="270" class="aligncenter size-full wp-image-2900" />

現時点で$14.95(約1460円)とちょっとお値段はりますが、D3についてより高度な内容を扱った参考書を必要としているなら、手にとってみてはいかがでしょう。(公式サイトでサンプルをダウンロードできます)


英語じゃ読めない？……大丈夫。本文が何言っているかわからなくてもコードを見れは何やっているかは分かりますし、最終手段としてepubファイルの拡張子をzipに変更して解凍し、出てきたxhtmlファイルをGoogle web翻訳に渡せば大体のところは読めますよ！ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2898</wp:post_id>
		<wp:post_date>2013-06-24 09:49:57</wp:post_date>
		<wp:post_date_gmt>2013-06-24 00:49:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%81%a7%e5%86%8d%e5%88%a9%e7%94%a8%e5%8f%af%e8%83%bd%e3%81%aa%e3%82%b3%e3%83%bc%e3%83%89%e3%81%ae%e6%9b%b8%e3%81%8d%e6%96%b9%e3%82%92%e6%95%99%e3%81%88%e3%81%a6%e3%81%8f%e3%82%8c%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2899]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427287842;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2772;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:3698;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】D3 Arrays sample</title>
		<link>http://shimz.me/blog/d3-js/2902</link>
		<pubDate>Wed, 26 Jun 2013 06:05:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2902</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/mbostock/d3/wiki/Arrays">D3 Arrays</a>

D3には、配列を操作するのに非常に便利な関数がたくさんあります。
一つ一つ取り上げて説明するのは難しいので、jsdoitにサンプルを作ってみました。

<script type="text/javascript" src="http://jsdo.it/blogparts/yR6z/js?width=465&height=496&view=javascript"></script>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2902</wp:post_id>
		<wp:post_date>2013-06-26 15:05:01</wp:post_date>
		<wp:post_date_gmt>2013-06-26 06:05:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91d3-arrays-sample</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426532636;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1599;}i:1;a:1:{s:2:"id";i:3709;}i:2;a:1:{s:2:"id";i:2892;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【アクセスアップ】月間ユニークユーザー数が１万を超えたので解析してみる</title>
		<link>http://shimz.me/blog/analytics/2903</link>
		<pubDate>Thu, 27 Jun 2013 01:15:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2903</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306071.jpg" alt="ga201306071" width="590" height="281" class="aligncenter size-full wp-image-2904" />

特定の記事がバズったり、沢山はてブされたりしたときに一時的に１万ユーザーを超えることはあったのですが、おかげさまで平均的に月間UU数が１万を超えるようになりました。

以前、<a href="http://shimz.me/blog/analytics/2194">月間PVが1万を超えた際に１度記事にした</a>のですが、いい節目なので改めてアクセスを解析してみようと思います。



<h2>参照元</h2>
<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306072.jpg" alt="参照元グラフ" width="590" height="263" class="aligncenter size-full wp-image-2905" />
相変わらず約半数以上がGoogleからの流入となってます。
まさにGoogle依存。ペンギンアップデートやパンダアップデートに怯える日々です。
以前の記事にした時との違いは参照元第４位に「zenback.itmedia.co.jp」が上がってきているところですかね。
「zenbackキーワーズ」からの流入は瞬発力こそないものの、長期にわたりコンスタントにアクセスを流してくれているようです。



<h2>検索キーワード</h2>
サマリーを確認してみるかぎり際立って流入数の多いビックキーワードはなく、小さなキーワードでちょこちょこアクセスを稼いでいるという感じです。
ウェブマスターツールの「検索クエリ」をみてみるとクリック率が高い記事の傾向は、「javascriptライブラリ紹介記事」「エディタ紹介記事」「iPhone/iPadアプリ紹介記事」で、何らかの紹介記事や入門的な記事への流入数が多いです。
最近はD3.jsの記事ばかり書いているわけですが、残念ながらD3.js関連の記事はあまり検索からの流入はありません orz
かといってアクセスアップのために「紹介記事」ばかり書くというのは、もともと「学習日記」としてブログを始めた意味がなくなってしまうので、痛し痒しというところですね。



<h2>ソーシャルメディア</h2>
<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306073.jpg" alt="ソーシャルメディアからの流入数" width="588" height="338" class="aligncenter size-full wp-image-2906" />
とりあえず「Twitter」が１位。ただ、ソーシャルメディアからの流入自体が少ないのであまり大きな差はありません。
「はてブ」は爆発的にアクセス数が増えますがどうしても一時的なもので終わってしまうので、通常時のアクセスは「Facebook」の方が上位に来ています。
Facebookからの流入ってあまり目に入ることが無いので実感がわかず、この結果は意外でした。



<h2>アフェリエイト</h2>
<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306074.jpg" alt="アフェリエイト　見積もり収益" width="396" height="85" class="aligncenter size-full wp-image-2907" />
月約2000円といったところです。まぁ、儲かりませんな。
さくらクラウドの料金が月額2,980円なので、とりあえずサーバー代を相殺できるぐらいを目標としようと思います。


<h2>総括</h2>
全体としてGoogle依存傾向は変わらず。
最近は、YahooやBingなど他検索エンジンからの流入を増やせないものかと試行錯誤してみたのですが、まったく効果出ずでした。
正直この２つ検索エンジンに対しては何をすればいいのか皆目見当もつかない状態なんですが、Googleばかりに依存しているのも問題なのでしばらくジタバタしてみるつもりです。
この辺のノウハウは、いずれ業務でも活かせるかもしれませんしね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2903</wp:post_id>
		<wp:post_date>2013-06-27 10:15:10</wp:post_date>
		<wp:post_date_gmt>2013-06-27 01:15:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2903</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2904]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e3%82%a2%e3%83%83%e3%83%97%e3%80%91%e6%9c%88%e9%96%93%e3%83%a6%e3%83%8b%e3%83%bc%e3%82%af%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc%e6%95%b0%e3%81%8c%ef%bc%91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427393246;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2194;}i:1;a:1:{s:2:"id";i:3230;}i:2;a:1:{s:2:"id";i:3624;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーション失敗</title>
		<link>http://shimz.me/blog/d3-js/2909</link>
		<pubDate>Mon, 01 Jul 2013 02:24:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2909</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>目的を頭に置き続けましょう。それが試金石となり、導きの光となります。円形のレイアウトという誘惑の言葉や、追加データの誘惑に、「できるのだから」とささやく偽預言者に惑わされそうになったら、目的を思い出しましょう。これらは旅の障害です。
<br>
<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・データビジュアライゼーション</a>
</blockquote>

目的も計画もないまま、なんとなく手に入ったデータを「とりあえず、できそうだから」とやってみた結果、見事に失敗したデータ可視化作品が以下となります。

<a href="http://shimz.me/example/d3js/geo_example2/geo1/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/DATAmiss.jpg" alt="可視化失敗例" width="590" height="462" class="aligncenter size-full wp-image-2910" /></a>

とても見づらく、何も伝わらない。
当初は47都道府県を色分けしようとして失敗し、カテゴリー(業種)毎に28色に色分けしてみましたが……だめですね。
地図とグラフのつながりが非常に分かりずらい。
マウスオーバーした際に、対象となるグラフと地図の色を変えるなどしてつながりを表示することもできますが、それだとそもそも色分けした意味もないわけで……。
作っているうちに、よくわかんなくなってきたのでとりあえず辞めました。

そろそろ単に「ライブラリが使えます」というポジションから抜け出して、ちゃんとしたデータ可視化作品を作ってみたいなと思ったのですが、ここにきて最大のハードルが現われました。
絶望的なほどにデザインのセンスが無い orz
困った。


&nbsp;
&nbsp;
<a href="http://www.oreilly.co.jp/books/9784873115429/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/Designing_Data_Visualizations.gif" alt="Designing_Data_Visualizations" width="145" height="186" class="size-full wp-image-2911" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2909</wp:post_id>
		<wp:post_date>2013-07-01 11:24:26</wp:post_date>
		<wp:post_date_gmt>2013-07-01 02:24:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e5%a4%b1%e6%95%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2910]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426188687;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3564;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:2918;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上に都市と都市を結ぶ線を引く</title>
		<link>http://shimz.me/blog/d3-js/2913</link>
		<pubDate>Tue, 02 Jul 2013 03:58:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2913</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/line/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/geoline.jpg" alt="geoline" width="590" height="315" class="aligncenter size-full wp-image-2914" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/line/">example</a>

都市と都市を結ぶ線を引くサンプルです。
地図をY軸方向に回転などさせてみました。


<h2>サンプルコード</h2>
基本的には d3.geo.path().projection で作成したパスジェネレーターにgeoJSON形式にした都市の緯度経度を渡してあげれば、あとはいつも通りsvgのpathを使ってラインを生成するだけです。
地図を回転させたりしても各要素のd属性をアップデートするだけで再計算し描画してくれるので便利です。
 
<pre class="lang:js decode:true " >d3.json(&quot;conuntries.topojson&quot;, function(json) {
	d3main(json);
});


function d3main(json){
	var width = 960;
	var height = 480;
	
	var svg = d3.select(&quot;svg&quot;)
	.attr(&quot;width&quot;, width)
	.attr(&quot;height&quot;, height);

	//投影法設定
	var projection = d3.geo.equirectangular()
	.scale(153)
	.translate([width / 2, height / 2])
	.rotate([-180,0,0])
	.precision(.1);

	//パスジェネレーター
	var path = d3.geo.path().projection(projection);

	//グリッド情報ジェネレーター
	var graticule = d3.geo.graticule();

	//グリッド線追加    
	var grid = svg.append(&quot;path&quot;)
		.datum(graticule)
		.attr({
			&quot;class&quot;: &quot;graticule&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;none&quot;,
			&quot;stroke&quot;: &quot;#777&quot;,
			&quot;stroke-width&quot;: &quot;.5px&quot;,
			&quot;stroke-opacity&quot;: .5
		});

	//国土追加  
	var land = svg.insert(&quot;path&quot;, &quot;.graticule&quot;)
		.datum(topojson.object(json, json.objects.conuntries))
		.attr({
			&quot;class&quot;: &quot;land&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;green&quot;	    
		});
    
	//国境線追加
	var boundary = svg.insert(&quot;path&quot;, &quot;.graticule&quot;)
		.datum(topojson.object(json, json.objects.conuntries, function(a, b) { return a !== b; }))
		.attr({
			&quot;class&quot;: &quot;boundary&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;none&quot;,
			&quot;stroke&quot;: &quot;white&quot;,
			&quot;stroke-width&quot;: .5
		});

	//都市　位置情報
	var pointdata = {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [
		[139.69170639999993, 35.6894875], //東京
		[-122.41941550000001, 37.7749295], //サンフランシスコ
		[149.1242241, -35.30823549999999], //キャンベラ
		[77.22496000000001, 28.635308], //ニューデリー
		[-47.92916980000001,  -15.7801482], //ブラジリア
		[116.40752599999996,  39.90403], //北京
	]}
    
	//都市間ライン追加
	var line = svg.selectAll(&quot;.line&quot;)
		.data([pointdata])
		.enter()
		.append(&quot;path&quot;)
		.attr({
			&quot;class&quot;:&quot;line&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;none&quot;,
			&quot;stroke&quot;: &quot;red&quot;,
			&quot;stroke-width&quot;: 1.5
		});

	//都市ポイント追加	    
	var point = svg.selectAll(&quot;.point&quot;)
		.data(pointdata.coordinates)
		.enter()
		.append(&quot;circle&quot;)
		.attr({
			&quot;cx&quot;:function(d) { return projection(d)[0]; },
			&quot;cy&quot;:function(d) { return projection(d)[1]; },
			&quot;r&quot;:6,
			&quot;fill&quot;:&quot;red&quot;,
			&quot;fill-opacity&quot;:1
		});

	/***Y軸回転させる***************************************/
	rotateY=0;
	setInterval(function(){
		//projection 更新
		rotateY++;
		if (rotateY &gt;= 360) rotateY=0
		projection.rotate([-180,rotateY,0]);

		//各要素を更新
		grid.attr(&quot;d&quot;, path);
		land.attr(&quot;d&quot;, path);
		boundary.attr(&quot;d&quot;, path);
		line.attr(&quot;d&quot;, path);		
		point.attr({
			&quot;cx&quot;:function(d) {  return projection(d)[0]; },
			&quot;cy&quot;:function(d) { return projection(d)[1]; },
		})
	},100);	
	  
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2913</wp:post_id>
		<wp:post_date>2013-07-02 12:58:02</wp:post_date>
		<wp:post_date_gmt>2013-07-02 03:58:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2913</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2914]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ab%e9%83%bd%e5%b8%82%e3%81%a8%e9%83%bd%e5%b8%82%e3%82%92%e7%b5%90%e3%81%b6%e7%b7%9a%e3%82%92%e5%bc%95%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427333169;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2993;}i:1;a:1:{s:2:"id";i:2930;}i:2;a:1:{s:2:"id";i:3489;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>福岡市 防犯危険箇所ヒートマップ</title>
		<link>http://shimz.me/blog/d3-js/2916</link>
		<pubDate>Wed, 03 Jul 2013 00:52:45 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2916</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/fukuoka/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/fukuokajiken.jpg" alt="fukuokajiken" width="590" height="270" class="aligncenter size-full wp-image-2917" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/fukuoka/">example</a>


「ビッグデータ・オープンデータの活用アイデアコンテスト」用に福岡市がサンプルデータを公開していたので、その中の「防犯危険箇所(犯罪発生箇所など)」データを使ってGoogle Map上にヒートマップを作成してみました。

<a href="http://www.city.fukuoka.lg.jp/soki/joho/shisei/BDODkyougikai_sampledata.html">福岡市サンプルデータサイト</a>

また、同時に公開されている「警察署・交番」データの位置情報を元にボロノイ図を作成し防犯危険箇所ヒートマップの上に重ねてエリアを分割しています。
サンプルでは一部分のデータしかありませんが、もう少し広範囲の実データが公開されれば、なにか面白い分析とかができそうな気もします。
やっぱり、位置情報を含んだデータは弄っていて面白いですね。


【関連】
<a href="http://shimz.me/blog/d3-js/3178">福岡市のオープンデータを使用して交通危険個所マップを作成しました。 </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2916</wp:post_id>
		<wp:post_date>2013-07-03 09:52:45</wp:post_date>
		<wp:post_date_gmt>2013-07-03 00:52:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2916</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2917]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%a6%8f%e5%b2%a1%e5%b8%82-%e9%98%b2%e7%8a%af%e5%8d%b1%e9%99%ba%e7%ae%87%e6%89%80%e3%83%92%e3%83%bc%e3%83%88%e3%83%9e%e3%83%83%e3%83%97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373219;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:3463;}i:2;a:1:{s:2:"id";i:3202;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーションとインフォグラフィックの違い</title>
		<link>http://shimz.me/blog/other/2918</link>
		<pubDate>Thu, 04 Jul 2013 04:04:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2918</guid>
		<description></description>
		<content:encoded><![CDATA[あくまで、自分の中での区分です。

<img src="http://shimz.me/blog/wp-content/uploads/2013/07/infograh_datavis.jpg" alt="infograh_datavis" width="590" height="166" class="aligncenter border size-full wp-image-2919" />

データビジュアライゼーションとインフォグラフィックはよく混同されがちです。
この二つについて明確な定義があるわけではないみたいで、「<a href="http://datavis.tumblr.com/">We Love Datavis</a>」でも、データビジュアライゼーションとインフォグラフィックが混同されて掲載されています。
そこで、データビジュアライゼーションとインフォグラフィックの違いについて考えてみました。

&nbsp;
<h2>なにが違うのか</h2>

「<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・データビジュアライゼーション</a>」の中では以下のように分類されています。


<blockquote>
<strong>インフォグラフィック</strong>
<ul>
	<li>手作業で書かれている(そのため、情報を独自に処理する)。</li>
	<li>手元にあるデータに特有である(そのため、別のデータを使用して再作成するのが容易ではない)。</li>
	<li>美的な要素に富む(目を引き興味を維持するために作成される協力なビジュアルコンテンツである)。</li>
	<li>比較的データが貧弱である(情報のひとつひとつをそれぞれ手作業で表現しなければならないため)。</li>
</ul>


<strong>データビジュアライゼーション</strong>
<ul>
	<li>アルゴリズムにより描かれる(カスタムな作風を持つ場合もあるが、大部分はコンピュータ化された方法の力を借りて描かれる)。</li>
	<li>異なるデータを使用して再生成することが容易である(同じ形が、似た次元や特徴を持つ異なるデータセットを表示するために再利用される可能性がある)。</li>
	<li>美的な要素に乏しい(データが飾られていない)。</li>
	<li>比較的データの量が多い(インフォグラフィックと対照的に大量のデータを受け取り使用可能)。</li>
</ul>
</blockquote>

また、データビジュアライゼーションは以下３つに分類されると説明されています。
<blockquote>
<ul>
	<li><strong>探索的データビジュアライゼーション</strong><br>データセット内のパターン、傾向、副次的問題を発見するためのデータビジュアライゼーション。探索的ビジュアライゼーションには通常、すでにわかっているストーリーは存在しません。</li>

	<li><strong>説明的データビジュアライゼーション</strong><br>情報や考え方を伝えるために使用するデータのビジュアライゼーション。説明的ビジュアライゼーションは通常送り手が意図する特定の「ストーリー」や情報を持っています。</li>

	<li><strong>探索的説明的(ハイブリッド)データビジュアライゼーション</strong><br>上記二つの混合。整理・監修されたデータセットを伴いながらも、受け手の側に何らかの探索を許します。受け手がいくつかのパラメータを選択し制約をかけ、それによってデータセットが提供すべきヒントを自分自身で発見できるようにします。</li>
</ul>
</blockquote>

ただ、個人的には制作方法の違いでこの二つを区分けするのは違和感を感じます。
むしろ分類としては、説明的ビジュアライゼーションをさらに先鋭化していった先にインフォグラフィックがあるのではないかと思うのです。
データビジュアライゼーションの主役はあくまで「データ」ですが説明のためにいろいろそぎ落としていく過程で主客転倒が起こり「ストーリー」が主役になったものがインフォグラフィックなのではないかと。

そして、もっとも大きな違いは「<strong>優れたインフォグラフィックは静的なコンテンツ以外にはなりえない</strong>」ことだと思います。

伝えたい「ストーリー」に注力し、不要なものを削り取ってより分かり易い作品を作るとなれば、動的にビジュアルが変化したりインタラクティブな要素などはむしろ邪魔なものでしかありません。(補足：いくつかの静的なインフォグラフィックを組み合わせた動画などはありえると思います）
目に入ってきた瞬間に製作者の意図(ストーリー)が伝わる、それが優れたインフォグラフィックであるとするならばデータはストーリーを伝えるための付属物でしかなく、そこがデータビジュアライゼーションとの違いになるのだと思います。

データを主役にするか、ストーリーを主役にするか、目的に合わせてデータビジュアライゼーションで表現するかインフォグラフィックで表現するかを選択する必要があるのでしょう。

&nbsp;
<h2>結論</h2>
「データ」を伝えるために作るのがデータビジュアライゼーション
「ストーリー」を伝えるために作るのがインフォグラフィック

&nbsp;
<h2>余談</h2>
たとえば「危険な地域」というデータを伝えたいときにはデータビジュアライゼーションで、「この地域はこんなにも危険だ」というストーリーを伝えたいならばインフォグラフィックで表現するというのが適切な使い分けなのかなと。
データビジュアライゼーションでもストーリーを伝えることとはできるわけですが、分かり易さやインパクトでは優れたインフォグラフィックには及ばない、という違いがあるような気がします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2918</wp:post_id>
		<wp:post_date>2013-07-04 13:04:27</wp:post_date>
		<wp:post_date_gmt>2013-07-04 04:04:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2918</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%a8%e3%82%a4%e3%83%b3%e3%83%95%e3%82%a9%e3%82%b0%e3%83%a9%e3%83%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385465;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3587;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:3286;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>378</wp:comment_id>
			<wp:comment_author><![CDATA[●電子書籍の流通と利用の円滑化に関する実証実験報告書 | 詩想舎の情報note]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://societyzero.wordpress.com/2013/07/05/00-212/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.82.170</wp:comment_author_IP>
			<wp:comment_date>2015-01-10 22:17:49</wp:comment_date>
			<wp:comment_date_gmt>2015-01-10 13:17:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ●データビジュアライゼーションとインフォグラフィックの違い http://shimz.me/blog/other/2918 「データビジュアライゼーションの主役はあくまで「データ」ですが、説明のためにいろいろそ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420895869.4005300998687744140625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420990611.2552230358123779296875;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>[windows 8アプリ]プレゼンテーション用のスライドも作成できるMarkdown Editor「md」がシンプル便利</title>
		<link>http://shimz.me/blog/editor/2920</link>
		<pubDate>Fri, 05 Jul 2013 00:50:12 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2920</guid>
		<description></description>
		<content:encoded><![CDATA[正確には「スライド表示ができる」だけれども。
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md2.png" alt="md2" width="590" height="332" class="aligncenter size-full wp-image-2921" />

windows8アプリのMarkdown Editor「md」をインストールしてみたところ、とても便利だったので紹介します。
とくにwindow8タブレットを使っている方にお勧めです。

<a href="http://apps.microsoft.com/windows/ja-jp/app/markdown-editor/2f8e8415-12f2-477f-b270-a85374de1e4c">Markdown Editor「md」</a>

&nbsp;
<strong>・シンプルなMarkdown Edoitor</strong>
左がエディタエリア、右側がプレビューエリアになります。
書いた文章が即座にプレビューに反映されます。
window8タブレットは横幅の比率が大きいのでエディタ／プレビューエリアで２分割されてもちょうど良い感じです。
ベーシックなmarkdownのシンタックスに加えgithub flavorシンタックスも使用できます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md1.png" alt="md1" width="590" height="332" class="alignnone size-full wp-image-2922" />

<strong>・スライド(プレゼンテーション)機能</strong>
書いた内容を即座にスライドとして表示できます。
これが非常に便利。
タブレットでささっと書き上げて即プレゼン、なんてことができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md3.png" alt="md3" width="590" height="332" class="alignnone size-full wp-image-2923" />


<strong>・gistへのアップロード機能</strong>
作成したファイルをgistへアップロードして保存できます。

&nbsp;
シンプルなMarkdown Editorを探しているなら、ぜひ一度使ってみてください。


デスクトップと画面を分割して使ったりもできるよ！
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md4.png" alt="md4" width="590" height="332" class="alignnone size-full wp-image-2924" />

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2920</wp:post_id>
		<wp:post_date>2013-07-05 09:50:12</wp:post_date>
		<wp:post_date_gmt>2013-07-05 00:50:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>window8%e3%81%aemarkdown-editor%e3%80%8cmd%e3%80%8d%e3%81%8c%e3%82%b7%e3%83%b3%e3%83%97%e3%83%ab%e4%be%bf%e5%88%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2922]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388074;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3485;}i:1;a:1:{s:2:"id";i:3096;}i:2;a:1:{s:2:"id";i:1561;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ブラウザにデータを保存したいときに便利な「store.js」</title>
		<link>http://shimz.me/blog/javascript/2928</link>
		<pubDate>Tue, 09 Jul 2013 04:28:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2928</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/marcuswestin/store.js/">store.js</a>

「最新閲覧履歴」機能などを作成するのに便利なライブラリです。
ブラウザ側にデータを保存するには、Cookieを使ったりlocalStorageを使用するなど様々な方法がありますがどれも一長一短で、ブラウザによっては実装されていなかったりといろいろ面倒です。
store.jsはその辺をよきに計らってくれて、また対応ブラウザが多いので手軽に使用することができます。

使い方は非常にシンプルです。
store.jsを読み込んで、あとはset,get,removeメソッドを使ってデータを操作します。

 
<pre class="lang:js decode:true " >store.set('username', 'hogehoge'); //データ登録
store.get('username'); //データ取得
store.remove('username'); //データ削除
</pre> 

オブジェクトや配列も保存することができます。
 
<pre class="lang:js decode:true " >store.set('user', { name: 'marcus', likes: 'javascript' }); //オブジェクトの保存
store.set('tags', ['javascript', 'localStorage', 'store.js']); //配列の保存
</pre> 

<a href="http://shimz.me/libs/store.js/example/test1.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2928</wp:post_id>
		<wp:post_date>2013-07-09 13:28:25</wp:post_date>
		<wp:post_date_gmt>2013-07-09 04:28:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2928</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e3%81%ab%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e4%bf%9d%e5%ad%98%e3%81%97%e3%81%9f%e3%81%84%e3%81%a8%e3%81%8d%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%aa%e3%80%8cstore-js]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378675;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:862;}i:1;a:1:{s:2:"id";i:2619;}i:2;a:1:{s:2:"id";i:1443;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】タイムゾーンマップを作成しました。</title>
		<link>http://shimz.me/blog/d3-js/2930</link>
		<pubDate>Thu, 11 Jul 2013 00:24:12 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2930</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/timezones/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/timezonemap.jpg" alt="timezonemap" width="590" height="357" class="aligncenter size-full wp-image-2931" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/timezones/">example</a>

タイムゾーン情報を含んだKMLデータを公開してくれている方がいたので、そちらを利用させてもらってタイムゾーンマップを作成してみました。
標準時に対する時差がプラスになるかマイナスになるかで色分けしてみましたが、グラデーションで表現するより、もっとはっきり色分けした方が分かり易かったかもしれません。あと、表示されるまでちょっと時間がかかります。

<a href="https://groups.google.com/forum/#!msg/kml-support-getting-started/9kTmmb8MZE8/WAmB11LMutIJ">タイムゾーンデータ</a>

データセット作成の手順は以下となります。
<ol>
	<li>上記KMLをQuantum GISに読み込み。</li>
	<li>データサイズが大きかったのでジオメトリツールを使って簡素化しました。</li>
	<li>GeoJSONに変換してエクスポート。</li>
	<li>さらにGeoJSONをTopoJSONに変換。</li>
</ol>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
 
<pre class="lang:js decode:true " >d3.json(&quot;timezones.topojson&quot;, function(json) {
	d3main(json);
});


function d3main(json){
	var width = 960;
	var height = 600;
	
	var svg = d3.select(&quot;svg&quot;)
		.attr(&quot;width&quot;, width)
		.attr(&quot;height&quot;, height);
	
	var mapGroup = svg.append('g')
		.attr(&quot;transform&quot;, &quot;translate (&quot; + [0, 100] + &quot;)&quot; );

	//投影法設定
	var projection = d3.geo.equirectangular()
		.scale(153)
		.rotate([0,0,0])
		.precision(.1);

	//パスジェネレーター
	var path = d3.geo.path().projection(projection);

	//カラースケール
	var landColor = d3.scale.linear().domain([-10,   0,  11]).range([&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;]);

	//地図追加  
	var map =  mapGroup.append(&quot;svg:g&quot;)
		.selectAll(&quot;path&quot;)
		.data(topojson.object(json, json.objects.timezones).geometries)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: function(d){
				return landColor(parseFloat(d.properties.Name.match(/.\d{1,2}|0/)[0]) ); //Nameプロパティから数値だけ抜き出して適用
				},
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		})
		.append('title')
		.text(function(d){ return d.properties.Name});
		
	//ラベル用マージン
	var lableMargin = {
		left:50,
		top:50
	}

	//ラベル作成    
	var rectSize = 10;
	var rect = svg.selectAll('rect')
	.data(d3.range(-10, 10))
	.enter()
	.append('rect')
	.attr({
		x:function(d, i){ return i * rectSize + lableMargin.left},
		y:lableMargin.top,
		width:rectSize,
		height:rectSize,
		fill:function(d){ return landColor(d) }
	});
		
	var xAxis = d3.svg.axis().scale( d3.scale.linear().domain([-10, 10]).range([0, 20*rectSize])).tickValues([-10, 0, 10]);

	var AxisGroup = svg.append('g')
	.attr({
		class:&quot;axis&quot;,
		transform:&quot;translate (&quot; + [lableMargin.left, lableMargin.top+rectSize+2] + &quot;)&quot;
	})
	.call(xAxis);
}</pre> 


【余談】
ロシアって同じ国のなかでも、東と西で５時間も時差があるんですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2930</wp:post_id>
		<wp:post_date>2013-07-11 09:24:12</wp:post_date>
		<wp:post_date_gmt>2013-07-11 00:24:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2930</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2931]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%82%bf%e3%82%a4%e3%83%a0%e3%82%be%e3%83%bc%e3%83%b3%e3%83%9e%e3%83%83%e3%83%97%e3%82%92%e4%bd%9c%e6%88%90%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426756420;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3659;}i:1;a:1:{s:2:"id";i:3984;}i:2;a:1:{s:2:"id";i:3087;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>agatsuma.survive 03(git会)に参加しました。</title>
		<link>http://shimz.me/blog/other/2933</link>
		<pubDate>Sun, 14 Jul 2013 11:02:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2933</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://atnd.org/events/40434">agatsuma.survive#03(git会)</a>

git会参加してきました。

一人で作業をしているとどうしてもバージョン管理などがいい加減になり、「とりあえずDropBoxに突っ込んどけばいいかなー。差分とれるし、簡易webサーバーにもなるし」みたいな感じで済ませてしまうことが多く、たまにgithubなどを使ってもバックアップを上げるぐらいにしかつかっておらず、おまけに殆どGUI(GitHub for Windows)を使うぐらいだったので、そろそろちゃんとコマンド覚えたいと思っていた所なので助かりました。

全体としては、普段からCUIを使い慣れているエンジニアの方と、あまりCUIに慣れていないデザーナーの方が混在していたのでセミナーの進め方や時間配分が難しそうでしたね。最後の方はどうしても駆け足になってしまいました。

私個人としては、実際に手を動かして作業すると解りやすく、また色々な方のgitやgithubの活用の方法を聞けたのがとても勉強になりました。
個人で勉強していても"活用のしかた"というのはなかなか理解するのが大変で、こういったイベントで話が聞けるのは大変助かります。

まぁ、とはいってもこういうのは最終的には慣れなので、今後は「githubに上げるほどのものでもないよなー」なんて思わず、とりあえず書いたコードはなるべく練習もかねてgithubにアップしてこうかと思います。
とりあえず、忘れないうちに一つ上げてみました。

<a href="https://github.com/shimizu/SimpleWebServer">shimizu/SimpleWebServer</a>

あとは、ひたすら継続あるのみですかね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2933</wp:post_id>
		<wp:post_date>2013-07-14 20:02:49</wp:post_date>
		<wp:post_date_gmt>2013-07-14 11:02:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2933</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3815]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[agatsuma-survive03git%e4%bc%9a%e3%81%ab%e8%a1%8c%e3%81%a3%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425755599;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3066;}i:1;a:1:{s:2:"id";i:2609;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>難しすぎて理解できなかった参考書を無駄にしないためのライフハック</title>
		<link>http://shimz.me/blog/other/2935</link>
		<pubDate>Mon, 15 Jul 2013 10:18:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2935</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/07/1137814689-10936a.jpg" alt="1137814689-10936a" width="480" height="356" class="aligncenter size-full wp-image-2937" />

<a href="http://bugrammer.hateblo.jp/entry/2013/07/14/222458">本を読むコツとしての「わからないところは飛ばす」</a>

本の読み方って人それぞれ違って面白いですね。

私もよく背伸びをして難しい参考書を買ってみたものの、内容の８割も理解できずに「何のために買ったのか……」と思うことが多々あります。

そんな時、買った本を無駄にしないために行うことがあります。それは……

<blockquote>本のタイトルと目次をメモってEvernoteに入れる</blockquote>

これだけです。
とにかく、目次だけ頭に入れておく。
その後に、わからない部分は読み飛ばしたり、ざっと眺めて読書を終わります。

こうしておくと内容は理解できずとも、頭の中にポインタだけ記録され他の学習をしているときに「あれっ？　これってあの本に書いてあったことと関係あるんじゃないかな？」とか引っかてくることがあるんです。

そういう引っかかりを何度か体験しているうちに、パズルがガチッと組み合うように結びついて「なんか今分かった気がする！　今読めば理解できるかも！」という時期が来たりすることが結構あります。

この感覚うまく説明できなくてあんまり共感してもらえなかったりするんですが、もし、興味があったら試してみてください。

(でも技術書とか以外ではこの方法あんまり役に立たないかもしれません)

【余談】
メモの保存先はEvernoteでなくてもいいのですが、Chromeの<a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=ja">Evernoteエクステンション</a>を入れておくとGoogleで検索したときにメモが引っかかってきたりして便利です。
暇な時間に、ため込んだ目次メモを読み返すとさらに効果が高いような気がします。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2935</wp:post_id>
		<wp:post_date>2013-07-15 19:18:19</wp:post_date>
		<wp:post_date_gmt>2013-07-15 10:18:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9b%a3%e3%81%97%e3%81%99%e3%81%8e%e3%81%a6%e7%90%86%e8%a7%a3%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e5%8f%82%e8%80%83%e6%9b%b8%e3%82%92%e7%84%a1%e9%a7%84%e3%81%ab%e3%81%97%e3%81%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427409189;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:643;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:3039;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsの最新情報と解説記事を配信「Daily D3」</title>
		<link>http://shimz.me/blog/web/2938</link>
		<pubDate>Tue, 16 Jul 2013 00:22:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2938</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://daily.d3js.info/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/dailyd3.jpg" alt="dailyd3" width="590" height="307" class="aligncenter size-full wp-image-2939" /></a>

<a href="http://daily.d3js.info/">Daily D3</a>


D3公式サイトや多数の海外ドキュメントなどの翻訳を手掛けていらっしゃる<a href="https://twitter.com/FoD5">@FoD5</a>さんが、D3の最新情報と解説記事を配信するニュースサイトを開始されました。

日本語ドキュメントが少ない中、FoD5さんが翻訳された<a href="http://ja.d3js.info/">D3 wiki日本語版</a>や、<a href="http://ja.d3js.info/alignedleft/tutorials/d3/">スコット・マレイ氏のチュートリアル日本語版</a>は、D3を勉強する際に私も読ませていただき大変参考にさせていただきました。

D3は海外では注目度の高いプロダクトなのですが、日本ではまだまだ知名度が高いとは言えず、D3に関する最新の話題も海外サイトが中心で日本語で情報収集できるサイトはなかなかありません。
それでも最近ではD3に興味を持ってくださるユーザーもちょっとづつ増えてきてはいるみたいなので、是非「Daily D3」でD3の最新情報をチェック！してください。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2938</wp:post_id>
		<wp:post_date>2013-07-16 09:22:47</wp:post_date>
		<wp:post_date_gmt>2013-07-16 00:22:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%81%ae%e6%9c%80%e6%96%b0%e6%83%85%e5%a0%b1%e3%81%a8%e8%a7%a3%e8%aa%ac%e8%a8%98%e4%ba%8b%e3%82%92%e9%85%8d%e4%bf%a1%e3%80%8cdaily-d3%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2939]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427254759;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2977;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:4073;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】サイズの大きなファイルを可視化する（ツリーマップ）</title>
		<link>http://shimz.me/blog/d3-js/2942</link>
		<pubDate>Wed, 17 Jul 2013 02:10:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2942</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/treemap/02/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/filelisttreemap.jpg" alt="filelisttreemap" width="582" height="300" class="aligncenter border size-full wp-image-2946" /></a>

<a href="http://shimz.me/example/d3js/treemap/02/">example</a>

以前、<a href="http://shimz.me/blog/d3-js/2755">アクセス流入元をツリーマップで表示してみた</a>ことがあるのですが、今回はファイルリストを可視化してみました。ファイルサイズに比例してブロックが表示されます。ツールチップで実際のファイル名が表示されます。
サイズの大きいファイルは、殆どが地理情報ファイル(geojson)でした。


<h2>データセットの作成</h2>
ぶっちゃけデータを作成するのが一番メンドウです。
D3のtreemapレイアウトを使用するには、データセットを以下の形式のオブジェクトにする必要があります。
<pre class="lang:js decode:true " >{
	name:'root',
	children:[
		name:'child-dir1'
		'hoge1.txt',
		'hoge2.txt',
		children:[
			name:'child-dir2',
			'hello1.txt',
			'hello2.txt'
		]
	},
	'file1.txt',
	'file2.txt'
}</pre> 

手動で作成するのは大変なのでファイル一覧を出力するスクリプトをnode.jsで書きました。

<a href="http://shimz.me/blog/node-js/2944">ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する</a>

上記スクリプトをサーバーの普段サンプルコードを置いているディレクトリで実行して出力したものが下記のデータセットとなります。

<a href="http://shimz.me/example/d3js/treemap/02/files.json">files.json</a>

このデータ形式(オブジェクト)は、D3の様々なレイアウトで使用されるので変換スクリプトを作っておくとデータセットの作成が楽になります。


<h2>ツリーマップの表示</h2>
<a href="http://shimz.me/blog/d3-js/2755">前回行った内容</a>と特に変わりがないのでポイントだけ。

表示するサイズ(width,height)を指定してtreemapジェネレーターオブジェクトを作成します。
<pre class="lang:js decode:true " >var treemap = d3.layout.treemap().size([w, h]);
</pre> 

作成したデータセット(json)を読み込み、treemapジェネレーターに渡します。valueメソッドでブロックのサイズを決定するデータ要素を指定し、nodesメソッドでデータセットを読み込みます。
<pre class="lang:js decode:true " >d3.json('files.json', function(data){
	var treemapData = treemap.value(function(d){  return d.size}　).nodes(data);
	console.log(treemapData);
});
</pre> 

treemapジェネレーターの戻り値は、元のデータセットにx(x座標)、y(y座標)、dx(幅)、dy(高さ)プロパティが付加されたものが返ります。
後はこのデータを使用してrect要素を描画するとツリーマップが表示されます。


&nbsp;
&nbsp;
 【余談】
データ数が多いとラベルが重なって見難くなります。今回は2MB以下のファイルはラベルを表示しないことで回避しました。
もっと、上手い見せ方ができると良いのですが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2942</wp:post_id>
		<wp:post_date>2013-07-17 11:10:38</wp:post_date>
		<wp:post_date_gmt>2013-07-17 02:10:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2942</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2946]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e3%82%b5%e3%82%a4%e3%82%ba%e3%81%ae%e5%a4%a7%e3%81%8d%e3%81%aa%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e5%8f%af%e8%a6%96%e5%8c%96%e3%81%99%e3%82%8b%ef%bc%88%e3%83%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427339804;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2711;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:2944;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する</title>
		<link>http://shimz.me/blog/node-js/2944</link>
		<pubDate>Tue, 16 Jul 2013 12:27:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2944</guid>
		<description></description>
		<content:encoded><![CDATA[node.jsを使ってカレントディレクトリ以下を再帰的にたどりファイル一覧を出力します。（引数で対象となるディレクトリを指定できます）
ファイル名と共にファイルサイズも出力しています。
<a href="https://gist.github.com/shimizu/7bd8c02c3d49492d1350">shimizu / filelist2json.js</a>

<pre class="lang:js decode:true " title="filelist2json.js" >var fs = require(&quot;fs&quot;)
	, path = require(&quot;path&quot;)
	, dir = process.argv[2] || '.'; //引数が無いときはカレントディレクトリを対象とする


var walk = function(p, callback){
	var results = [];
		
	fs.readdir(p, function (err, files) {
		if (err) throw err;

		var pending = files.length;	
		if (!pending) return callback(null, results); //全てのファイル取得が終わったらコールバックを呼び出す
		
		files.map(function (file) { //リスト取得
			return path.join(p, file);
		}).filter(function (file) {
			if(fs.statSync(file).isDirectory()) walk(file, function(err, res) { //ディレクトリだったら再帰
				results.push({name:path.basename(file), children:res}); //子ディレクトリをchildrenインデックス配下に保存
				if (!--pending) callback(null, results);
			 });
			return fs.statSync(file).isFile();
		}).forEach(function (file) { //ファイル名を保存
			var stat = fs.statSync(file);
			results.push({file:path.basename(file), size:stat.size});
			if (!--pending) callback(null, results);
		});
		
	});
}

walk(dir, function(err, results) {
	if (err) throw err;
	var data = {name:'root', children:results};
	console.log(JSON.stringify(data)); //一覧出力
});</pre> 


実行
<pre class="lang:sh decode:true " >$ node filelist2json &gt; data.json</pre> 

出力内容は以下のようになります。
<pre class="lang:js decode:true " >{
	name:'root',
	children:[
		name:'child_dir1'
		{file:'hoge1.txt', size:1111},
		{file:'hoge2.txt', size:2222},
		children:[
			name:'child_dir2',
			{file:'hello1.txt', size:3333},
			{file:'hello2.txt', size:4444}
		]
	},
	{file:'file1.txt', size:88888},
	{file:'file2.txt', size:33333}
}</pre> 


D3.jsに渡して使うために書いたスクリプトなのでちょっと特殊な形で出力しています。

上記データを基に作ったもの
<a href="http://shimz.me/blog/d3-js/2942">サイズの大きなファイルを可視化する（ツリーマップ）</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2944</wp:post_id>
		<wp:post_date>2013-07-16 21:27:13</wp:post_date>
		<wp:post_date_gmt>2013-07-16 12:27:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2944</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[node-js%e3%83%87%e3%82%a3%e3%83%ac%e3%82%af%e3%83%88%e3%83%aa%e3%82%92%e5%86%8d%e5%b8%b0%e7%9a%84%e3%81%ab%e3%81%9f%e3%81%a9%e3%81%a3%e3%81%a6%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e4%b8%80%e8%a6%a7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427376386;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2690;}i:1;a:1:{s:2:"id";i:4123;}i:2;a:1:{s:2:"id";i:3753;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【node.js+D3.js】サーバーサイドD3</title>
		<link>http://shimz.me/blog/node-js/2949</link>
		<pubDate>Thu, 18 Jul 2013 01:09:41 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2949</guid>
		<description></description>
		<content:encoded><![CDATA[D3にはnode.js用のモジュールがあるのでサーバーサイドで使用するのも簡単です。npmからインストールできます。
 
<pre class="lang:sh decode:true " >$ npm install d3
</pre> 

残念なことにwindowsではjake(JavaScript build tool)がうまくインストールされないらしくビルドの途中でエラーを吐いてとまります。


<h2>サンプルコード</h2>
内部ではjsdomを使ってDOM操作を行っています。基本的にはフロントエンドでD3を使用するのと変わりません。
 
<pre class="lang:js decode:true " title="testd3.js" >var d3 = require(&quot;d3&quot;);
var svg = d3.select(&quot;body&quot;)
	.append(&quot;svg&quot;)
	.attr({
		&quot;xmlns&quot;: &quot;http://www.w3.org/2000/svg&quot;,
		&quot;width&quot;: 750,
		&quot;height&quot;: 750
	});
  
  svg.append('circle')
	.attr({
		cx:100,
		cy:100,
		r:80,
		fill:'red'
	})
  

console.log(d3.select('body').node().innerHTML); //JSDOMから出力</pre> 


使い方
<pre class="lang:sh decode:true " >$ node testd3.js &gt; test.svg
</pre> 

下記SVGファイルが作成されます
<pre class="lang:xhtml decode:true " >&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;750&quot; height=&quot;750&quot;&gt;
&lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;80&quot; fill=&quot;red&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
</pre> 

D3の強力なGeo Projections機能などを使ってサーバーサイドで地図やグラフを生成し出力することができます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2949</wp:post_id>
		<wp:post_date>2013-07-18 10:09:41</wp:post_date>
		<wp:post_date_gmt>2013-07-18 01:09:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2949</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90node-jsd3-js%e3%80%91%e3%82%b5%e3%83%bc%e3%83%90%e3%83%bc%e3%82%b5%e3%82%a4%e3%83%89d3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427393797;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:3567;}i:2;a:1:{s:2:"id";i:3841;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>モダンなWeb開発環境としてのCodePen</title>
		<link>http://shimz.me/blog/web/2952</link>
		<pubDate>Sun, 21 Jul 2013 12:49:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2952</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codepen.io/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/Made-For-Codepen.png" alt="Made-For-Codepen" width="358" height="179" class="aligncenter size-full wp-image-2953" /></a>

<a href="http://codepen.io/">CodePen</a>

普段は愚直にHTMLやCSS、Javascriptを書いているわけですが、できることならもっとモダンな開発環境に慣れたいと思ってます。
しかし、習得コストというものはあるわけで……もっと、気軽に手を出せたらいいなーと思っていたところ、Web上でHTML+CSS+Javascriptで作品を作成できるCodePenでCoffeeScriptなどが使えること知りました（遅い）
Githubのアカウントで利用できるので、興味あるかたは学習用に使ってみてはいかがでしょう。

<strong>CodePenエディタ画面</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepen1.png" alt="codepen1" width="590" height="279" class="aligncenter size-full wp-image-2954" />


<strong>HTML編集タブ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepenHTML.png" alt="codepenHTML" width="455" height="299" class="size-full wp-image-2955" />
HTML以外の、<a href="https://github.com/uniba/hamldoc_ja">Haml</a>,<a href="http://blog.2310.net/archives/6">Markdown</a>,<a href="https://github.com/yterajima/slim/blob/README_ja/README.md">Slim</a>などのテンプレート言語使ってコードを記述できます。

<strong>CSS編集タブ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepenCSS.png" alt="codepenCSS" width="455" height="299" class="size-full wp-image-2956" />
<a href="http://less-ja.studiomohawk.com/">LESS</a>,<a href="http://hail2u.net/documents/sass-tutorial.html">SCSS</a>,<a href="http://hail2u.net/documents/sass-tutorial.html">Sass</a>などのCSSメタ言語を利用できます。

<strong>Javascript編集タブ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepenJS.png" alt="codepenJS" width="455" height="299" class="size-full wp-image-2957" />
CoffeeScriptが使えます。他、著名なライブラリや外部<a href="https://sites.google.com/site/sappariwiki/coffeescript">Javascript</a>ファイルを読み込むことができます。

作成したコードはgist.githubに保存できます。

【関連】
<a href="http://shimz.me/blog/web/2860">プログラミング学習の新しいかたち？！チャットをしながらライブコーディングや共同プログラミングができるCodePen Pro</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2952</wp:post_id>
		<wp:post_date>2013-07-21 21:49:33</wp:post_date>
		<wp:post_date_gmt>2013-07-21 12:49:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%a2%e3%83%80%e3%83%b3%e3%81%aaweb%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%e3%81%a8%e3%81%97%e3%81%a6%e3%81%aecodepen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2953]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427386048;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2860;}i:1;a:1:{s:2:"id";i:3035;}i:2;a:1:{s:2:"id";i:3144;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】今まで作成したexampleをGitHubに公開しました。</title>
		<link>http://shimz.me/blog/d3-js/2958</link>
		<pubDate>Mon, 22 Jul 2013 04:00:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2958</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/07/Octocat.jpg" alt="Octocat" width="300" height="249" class="aligncenter size-full wp-image-2959" />

<a href="https://github.com/shimizu/d3example">shimizu/d3example</a>

「せっかく、<a href="http://shimz.me/blog/other/2933">勉強会</a>にも行ったことだし積極的にgitを使っていこう！」第二弾。とりあえず、いままで作成したD3のサンプルコードをgithubに上げてみました。
アップロードするにあたって、多少コードを整理したりしてみたのですが、初めの頃に書いたコードとか割と乱雑なものが混じってます。
なお、d3.csvやd3.jsonで外部ファイルを読み込んでるコードはローカルではブラウザのセキュリティ機能によって実行できません。
webサーバー上で実行してください。

無いときは↓をどうぞ。
<a href="https://github.com/shimizu/SimpleWebServer">SimpleWebServer</a>

【余談】
さくらクラウドからだとSSH使わんとアップロードできないみたいだったので、下記記事を参考にさせていただきました。

<a href="http://design1.chu.jp/setucocms-pjt/?p=580">初心者Git日記その五～GitHubにSSH公開鍵登録～
</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2958</wp:post_id>
		<wp:post_date>2013-07-22 13:00:02</wp:post_date>
		<wp:post_date_gmt>2013-07-22 04:00:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e4%bb%8a%e3%81%be%e3%81%a7%e4%bd%9c%e6%88%90%e3%81%97%e3%81%9fexample%e3%82%92github%e3%81%ab%e5%85%ac%e9%96%8b%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2959]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427292478;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3113;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3864;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】NHKの参議院選挙サイトで使用されていた謎グラフ(Chord graph)的なものを作ってみる。</title>
		<link>http://shimz.me/blog/d3-js/2960</link>
		<pubDate>Tue, 23 Jul 2013 01:55:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2960</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/Chord/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/chordgraph.jpg" alt="chordgraph" width="500" height="492" class="aligncenter size-full wp-image-2961" /></a>

<a href="http://shimz.me/example/d3js/Chord/">example</a>

上記のような図を「Chord graph(コードグラフ)」というらしいです。日本語に直すと弦グラフですかね？D3.jsにはChordレイアウトが用意されているので作成するのは比較的簡単です。頑張れば<a href="http://www3.nhk.or.jp/senkyo/#">NHKの参議院選挙サイト</a>で使われていたカッコイイ！グラフも作れるかもしれません。

<a href="http://shimz.me/blog/wp-content/uploads/2013/07/test000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/test000002-150x150.jpg" alt="test000002" width="150" height="150" class="aligncenter size-thumbnail wp-image-2962" /></a>


<h2>サンプルコード</h2>
 
<pre class="lang:js decode:true " >var svg = d3.select(&quot;svg&quot;)

//データセットの作成
dataLength = 12; 
var data = d3.range(dataLength).map(function() {
	return d3.range(dataLength).map(function(){ return Math.floor(Math.random() *dataLength) })
});
//console.log(data);

//カラースケール
var color = d3.scale.category20();

//chordジェネレータ生成
var chord = d3.layout.chord()
	.padding(0.1)//データ束間の隙間
	.matrix(data);

//chord全体
var chordGroup = svg.append('g')
	.attr(&quot;transform&quot;, &quot;translate(&quot;+[400, 400]+&quot;)&quot; );

//外円
chordGroup.selectAll(&quot;path.groups&quot;)
	.data(chord.groups)
	.enter()
	.append(&quot;path&quot;)
	.attr({
		&quot;fill&quot;: function(d) { return color(d.index); },
		&quot;stroke&quot;: function(d) { return color(d.index); },
		&quot;d&quot;: d3.svg.arc().innerRadius(350).outerRadius(400),
	});


//データ間のリンク
chordGroup.selectAll(&quot;path.chord&quot;)
	.data(chord.chords)
	.enter()
	.append(&quot;path&quot;)
	.attr({
		&quot;fill&quot;: function(d) { return color(d.source.index); },
		&quot;d&quot;: d3.svg.chord().radius(400),
		&quot;opacity&quot;: 0.5
	})
	.on('mouseover', function(){
		d3.select(this).attr({
			'fill': &quot;red&quot;,
			&quot;opacity&quot;: 1
		});
	})
	.on('mouseout', function(){
		d3.select(this).attr({
			'fill':  function(d) { return color(d.source.index); },
			&quot;opacity&quot;: 0.5
		});
	});
</pre> 

「データの関連性や相関関係を表すのに適した図」らしいのですが……ぶっちゃけこのレイアウトってそんなに見やすくはないと思うんですよねー。

<blockquote>目的を頭に置き続けましょう。それが試金石となり、導きの光となります。<strong>円形のレイアウトという誘惑</strong>の言葉や、追加データの誘惑に、「できるのだから」とささやく偽預言者に惑わされそうになったら、目的を思い出しましょう。これらは旅の障害です。
<br>
<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・データビジュアライゼーション</a>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2960</wp:post_id>
		<wp:post_date>2013-07-23 10:55:32</wp:post_date>
		<wp:post_date_gmt>2013-07-23 01:55:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2960</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2961]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91nhk%e3%81%ae%e5%8f%82%e8%ad%b0%e9%99%a2%e9%81%b8%e6%8c%99%e3%82%b5%e3%82%a4%e3%83%88%e3%81%a7%e4%bd%bf%e7%94%a8%e3%81%95%e3%82%8c%e3%81%a6%e3%81%84%e3%81%9f%e8%ac%8e%e3%82%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427106333;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2785;}i:1;a:1:{s:2:"id";i:2701;}i:2;a:1:{s:2:"id";i:3733;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsとjQueryのセレクションメソッドの違い</title>
		<link>http://shimz.me/blog/d3-js/2963</link>
		<pubDate>Wed, 24 Jul 2013 02:36:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2963</guid>
		<description></description>
		<content:encoded><![CDATA[本日は小ネタ。
D3.jsのセレクションは、ほぼjQueryのセレクションと似た動作をしますが一部違う部分もあります。
jQueryのセレクションメソッドは基本this(選択した要素のjQueryオブジェクト)を戻り値として返しますが、D3ではappendメソッドを使用した場合、追加された要素のD3セレクションオブジェクトが戻り値となります。

 
<pre class="lang:js decode:true " title="D3例" >d3.select('body').append('div').append('h1')
</pre> 
上記スクリプトの実行結果は以下となります。
 
<pre class="lang:xhtml decode:true " title="D3実行例" >&lt;body&gt;
	&lt;div&gt;
		&lt;h1&gt;&lt;/h1&gt;
	&lt;/div&gt;
&lt;/body&gt;
</pre> 

jQueryで無理やり似た構文を書いた場合の実行結果は以下となります。
 
<pre class="lang:js decode:true " title="jQuery例1" >$(&quot;body&quot;).append(&quot;&lt;div&gt;&lt;/div&gt;&quot;).append('&lt;h1&gt;&lt;/h1&gt;')
</pre> 

 
<pre class="lang:xhtml decode:true " title="jQuery実行結果1" >&lt;body&gt;
	&lt;div&gt;&lt;/div&gt;
	&lt;h1&gt;&lt;/h1&gt;
&lt;/body&gt;
</pre> 


jQueryではセレクション後のメソッドチェーンは、基本メソッドの戻り値が変わることなくセレクタで選択した要素に対して適用される(ここではbody要素)のでD3とは動作が異なります。
D3と同じ結果を求めるには、jQueryでは以下のように入れ子にする必要があります。
<pre class="lang:js decode:true " title="jQuery例2" >$(&quot;body&quot;).append( $('&lt;div&gt;').append( $('&lt;h1&gt;') ) )
</pre> 

<pre class="lang:xhtml decode:true " title="jQuery実行結果2" >&lt;body&gt;
	&lt;div&gt;
		&lt;h1&gt;&lt;/h1&gt;
	&lt;/div&gt;
&lt;/body&gt;
</pre> 


&nbsp;
&nbsp;
<h2>詳細</h2>
<hr></hr>
d3セレクションのstyleメソッドやattrメソッドで要素を操作する場合、メソッドチェーンの途中で要素が追加(append)されるとその後に実行されるstyleメソッド等の適用先が変わるので注意が必要です。
<pre class="lang:js decode:true " >d3.select('body') //body要素を選択
	.style('background-color', 'black') //body要素にスタイルを適用
	.append('div') //div要素を追加、divセレクションを返す。
	.style('background-color', 'blue') //div要素にスタイルを適用
	.append('h1') //h1要素を追加、h1セレクションを返す
	.style('background-color', 'red') //h1要素にスタイルを適用
</pre> 


また、最終的な戻り値も最後にappendされた要素のセレクションオブジェクトになるので注意してください。
 
<pre class="lang:js decode:true " >var elm = d3.select('body')
	.append('div')
	.append('h1');

elm.style('color', 'white'); // h1要素にstyleが適用される
</pre> 


<strong>D3ではメソッドチェーンで実行されるメソッドの順番がかなり重要です</strong>。(jQueryではあまり気にしなくてもよい)
ちゃんと説明できた気がしませんが、D3のこの仕様は非常に重要なので覚えておくとD3への理解が進むと思います。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2963</wp:post_id>
		<wp:post_date>2013-07-24 11:36:38</wp:post_date>
		<wp:post_date_gmt>2013-07-24 02:36:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2963</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e3%81%a8jquery%e3%81%ae%e3%82%bb%e3%83%ac%e3%82%af%e3%82%b7%e3%83%a7%e3%83%b3%e3%83%a1%e3%82%bd%e3%83%83%e3%83%89%e3%81%ae%e9%81%95%e3%81%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427323143;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2619;}i:1;a:1:{s:2:"id";i:3307;}i:2;a:1:{s:2:"id";i:3295;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>フレームワークの中身に興味がわいたら、この本がお勧め(しかも、今なら無料)</title>
		<link>http://shimz.me/blog/book/2964</link>
		<pubDate>Wed, 24 Jul 2013 04:12:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2964</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.sumyapp.com/2013/07/no-recommend-rails/">今すぐ辞めて欲しい、「Ruby on Rails勉強してます」「CakePHP勉強してます」 | つい全力ツッコミしてしまうエンジニアCEOのブログ | sumyapp</a>

「上から学ぶべきか。下から学ぶべきか。」見解の分かれるところなんでしょうけどね。
個人的には、上から学ぶ方がモチベーションは維持しやすい気はします。必要になったら下のレイヤーの事を学ぶというのも、まっとうな学習法で「今すぐ辞めろ」と糾弾するほどの事ではないかなーと。
ただ、初学者が特定のフレームワークにあまりに依存してしまって、そっから一歩も出ていかないということだとそれはそれで問題であることは確かなんですけどね。


もし、フレームワークの内側を知りたくなったら下記の本がおすすめです。

<a href="http://www.amazon.co.jp/gp/product/4797341815/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797341815&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4797341815&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4797341815" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

タイトルからは分かりませんが、「フレームワークを使ってWebアプリを作ろう！」という本ではなくて「Webアプリケーションフレームワークを自作しよう！」という内容の参考書です。
本書の中ではテンプレートエンジン、アプリケーションサーバやO/RマッパーなどをPythonを使って自作します。
それぞれ、シンプルな作りなので実用的か？といわれれば疑問ですが、いわゆるWebアプリケーションフレームワークというものの内側を勉強するとっかかりとしては非常に為になる参考書だと思うのでお勧めです。

作者さんが無料で公開されているので下記で読むことができます。

<a href="https://lindoc.jp/docs/1163">みんなのPython Webアプリ編</a>
(2007年に出版された本なので、使用しているpythonのバージョンがちょっと古いので注意が必要です)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2964</wp:post_id>
		<wp:post_date>2013-07-24 13:12:59</wp:post_date>
		<wp:post_date_gmt>2013-07-24 04:12:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%83%af%e3%83%bc%e3%82%af%e3%81%ae%e4%b8%ad%e8%ba%ab%e3%81%ab%e8%88%88%e5%91%b3%e3%81%8c%e3%82%8f%e3%81%84%e3%81%9f%e3%82%89%e3%80%81%e3%81%93%e3%81%ae%e6%9c%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2965]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427392494;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3306;}i:1;a:1:{s:2:"id";i:3211;}i:2;a:1:{s:2:"id";i:3170;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPressもくもく勉強会@群馬 #1に参加してきました。</title>
		<link>http://shimz.me/blog/other/2969</link>
		<pubDate>Fri, 26 Jul 2013 00:51:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2969</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/07/wordpress-logo.jpg" alt="wordpress-logo" width="300" height="186" class="aligncenter size-full wp-image-2971" />

<a href="http://atnd.org/events/41212">WordPressもくもく勉強会@群馬 #1</a>

群馬のコワーキングスペース「<a href="http://atnd.org/events/41212">SOMETHIN' ELSE</a>」にて催されたもくもく会に参加してきました。
もくもく会というのは、その名の通り有志で集まって黙々とコードを書いたり勉強したりというイベントです。

<a href="http://mokumokukai.tumblr.com/">もくもく会ポータル</a>

「黙々と勉強するのに、なぜ、わざわざ集まる必要が？」と思われるかもしれませんが、一人での作業や独学ではモチベーションを保つのが難しかったり、自宅だとダラダラしてしまって「とりあえずニコ動でもみるかな」と私のように自制心の無いまま時間を無駄にしてしまうタイプの人間には「一つの場所で皆が黙々と勉強している」という空気感がありがたかったりします。
まぁ、ようするに「大人の自習室」ですね。
もともとコワーキングスペースというもの自体が「一人で作業していると煮詰まってくるよね(誤用)」というところから始まったようなもので、「学習」にたいする適度なプレッシャーがないとなかなか捗らないという方は参加してみてはいかがでしょう。

私も今後、積極的に参加していきたいと思います。

ところで、今回のテーマは「Wordpress」だったのですが、無理矢理D3.jsに結びつけてWordpressからエクスポートしたブログ記事データをGithub風カレンダーとして表示するページを作成しました(強引)

<a href="http://shimz.me/example/WPcalendar/">WPcalendar</a>

Githubのカレンダー自体がD3.jsで作られているので、<a href="http://bl.ocks.org/mbostock/4063318">サンプルコード</a>を元にコピペを駆使して作ってみましたが、それなりに似た感じに出来上がったかな？と。

一部、記事タイトルがツールチップに納まりきらなかったり、下の方に行くとツールチップがウインドからはみ出て見づらかったりとまだまだ未完成ですが、詳しい内容については後日、記事に書こうと思います。

(ぶっちゃけ、javascriptよりcssを調整する方が難しかった……)

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2969</wp:post_id>
		<wp:post_date>2013-07-26 09:51:28</wp:post_date>
		<wp:post_date_gmt>2013-07-26 00:51:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress%e3%82%82%e3%81%8f%e3%82%82%e3%81%8f%e5%8b%89%e5%bc%b7%e4%bc%9a%e7%be%a4%e9%a6%ac-1%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2971]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426143767;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2990;}i:1;a:1:{s:2:"id";i:3633;}i:2;a:1:{s:2:"id";i:3861;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js + node.js】 ブログのデータをGithub風のカレンダーに表示する</title>
		<link>http://shimz.me/blog/node-js/2975</link>
		<pubDate>Fri, 26 Jul 2013 02:52:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2975</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/WPcalendar/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/wpcalendar.png" alt="wpcalendar" width="590" height="388" class="aligncenter size-full wp-image-2972" /></a>

<a href="http://shimz.me/example/WPcalendar/">example</a>

<a href="http://shimz.me/blog/other/2969">WordPressもくもく勉強会@群馬 #1</a>で作成したものです。
<a href="http://bl.ocks.org/mbostock/4063318">サンプルコード</a>が公開されているのでそれを元に作成しました。

Githubのカレンダー表示機能はD3.jsで作成されているのですが、そのBlog版のようなものです。
↓これ
<a href="https://github.com/shimizu"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/githubcalenar.jpg" alt="githubcalenar" width="400" height="106" class="border size-full wp-image-2976" /></a>

色がついているセルが記事を描いた日、同じ日に書いた記事が多いほど濃い緑色で表示されるようになってます。
セルにマウスオーバーすると記事のタイトルが表示されクリックするとその日のブログ記事へ飛びます。

カレンダーにしてみると、ブログ記事を頑張って書いた月とそうでもない月が一瞥できてなかなか面白いですね。


<h2>データセットの作成</h2>
Wordpressのダッシュボードから「ツール→エクスポート」を選択し、投稿記事をエクスポートします。
エクスポートしたxmlファイルをnode.jsを使ってjsonに変換しました。
変換スクリプトは、以前<a href="http://shimz.me/blog/node-js/2643">RSSリーダーを作った</a>際のコードを利用。
(XMLのパースにfeedparserモジュールを使ってます)
 <pre class="lang:js decode:true title:wpxml2json.js" >var FeedParser = require('feedparser')
  , fs = require('fs');

if(!process.argv[2])  throw 'Not File Found!';
var file = process.argv[2];
var data={
    url:&quot;&quot;,
    title:&quot;&quot;,
    item:[]
};

fs.createReadStream(file)
    .on('error', function (error) {
        console.error(error);
    })
    .pipe(new FeedParser())
    .on('error', function (error) {
        console.error(error);
    })
    .on('meta', function (meta) {
        data.url = meta.link;
        data.title= meta.title
    })
    .on('readable', function() {
        var stream = this, item;
        stream.end = output;
        while (item = stream.read()) {
             data.item.push({title:item.title, url:item.link, date:item[&quot;wp:post_date&quot;][&quot;#&quot;]});
        }
    });

function output(){
    console.log(JSON.stringify(data));
}</pre> 


下記を実行してjsonファイルを作成します。
<pre class="lang:sh decode:true " >$ node wpxml2json.js [wp file]  &gt;  wp.json</pre> 

このデータを使ってカレンダーを表示します。


<h2>カレンダー表示</h2>
基本、上記サンプルコードをちょっと弄っただけという。
<pre class="lang:js decode:true " title="index.html" >d3.json('wp.json', function(json){
    d3main(json);
});


function d3main(json) {
    var width = 960;
    var height = 136;
    var cellSize = 17; // セルのサイズ指定
    
    //日付カラー
    var color = d3.scale.linear().domain([1, 5]).range([&quot;#aae272&quot;, &quot;#2b470e&quot;]);

    

    //string→dateオブジェクト変換関数
    var day = d3.time.format(&quot;%w&quot;);
    var week = d3.time.format(&quot;%U&quot;);
    var format = d3.time.format(&quot;%Y-%m-%d&quot;);
    
    var blogURL = json.url;
    //タイトルにリンク追加
    d3.select('h1').append('a').attr('href', blogURL).text(json.title);
    
    
    
    //データ整形	
   var data = d3.nest()
	.key(function(d) { return d.date.split(' ')[0]; }) //dateをkeyにネスト(時間は切り落とす)
	.map(json.item);    

    //表示年の最小値と最大値を取得
    var tmp = d3.keys(data);
    var minYear = d3.min(tmp, function(d){  return +d.split('-')[0]　} );
    var maxYear = d3.max(tmp, function(d){  return +d.split('-')[0]　} );
    
    //カレンダーの数(年毎)だけsvgタグを生成
    var svg = d3.select(&quot;#stage&quot;).selectAll(&quot;svg&quot;)
	    .data(d3.range(minYear, maxYear+1)) 
	    .enter()
	    .append(&quot;svg&quot;)
	    .attr(&quot;width&quot;, width)
	    .attr(&quot;height&quot;, height)
	    .append(&quot;g&quot;)
	    .attr(&quot;transform&quot;, &quot;translate(&quot; + ((width - cellSize * 53) / 2) + &quot;,&quot; + (height - cellSize * 7 - 1) + &quot;)&quot;); //カレンダ―位置指定
    
        //年タイトル 生成 
    svg.append(&quot;text&quot;)
	    .attr(&quot;transform&quot;, &quot;translate(-6,&quot; + cellSize * 3.5 + &quot;)rotate(-90)&quot;)
	    .style(&quot;text-anchor&quot;, &quot;middle&quot;)
	    .text(function(d) { return d; });


    //日付セル生成
    var cell = svg.selectAll(&quot;.day&quot;) 
	    .data(function(d) { return  d3.time.days(new Date(d, 0, 1), new Date(d + 1, 0, 1));})
	    .enter()
	    .append(&quot;rect&quot;)
	    .attr({
		    &quot;class&quot;: &quot;day&quot;,
		    &quot;width&quot;: cellSize,
		    &quot;height&quot;: cellSize,
		    &quot;x&quot;: function(d) { return week(d) * cellSize; },
		    &quot;y&quot;: function(d) { return day(d) * cellSize; },
		    &quot;fill&quot;: &quot;#fff&quot;,
		    &quot;stroke&quot;: &quot;#ccc&quot;
	})
	.datum(format);
    

	//データにもと付きセルをカラーリング
	cell.filter(function(d) { return d in data; }) //データが存在するかチェック
		.attr(&quot;fill&quot;, function(d){
		    return color(data[d].length); // データが存在するセルに色付け
		})
		.on(&quot;mouseover&quot;, function(){
			return tooltip.style(&quot;visibility&quot;, &quot;visible&quot;);
		})
		.on(&quot;mousemove&quot;, function(d){
			var titles = &quot;&quot;;
			data[d].forEach(function(d){ titles += &quot;&lt;li&gt;&quot;+d.title+&quot;&lt;/li&gt;&quot; });
			
			return tooltip
				.style(&quot;top&quot;, (d3.event.pageY+30)+&quot;px&quot;)
				.style(&quot;left&quot;,(d3.event.pageX-90)+&quot;px&quot;)
				.html(d + &quot;: &lt;br&gt;&lt;ul&gt;&quot; + titles + &quot;&lt;/ul&gt;&quot;);
				
				
		})
		.on(&quot;mouseout&quot;, function(){
		    return tooltip.style(&quot;visibility&quot;, &quot;hidden&quot;);
		})
                .on('click', function(d){
		    window.open(blogURL+'/date/'+d.replace(/-/g,'/'));
		})


                
                
    //月境界pathジェネレーター
    var monthPath = function(t0) {
            var t1 = new Date(t0.getFullYear(), t0.getMonth() + 1, 0),
                    d0 = +day(t0), w0 = +week(t0),
                    d1 = +day(t1), w1 = +week(t1);
            //console.log(&quot;d0:&quot;+d0+&quot;/d1:&quot;+d1+&quot;/w0:&quot;+w0+&quot;/w1&quot;+w1);
            var path = &quot;M&quot; + (w0 + 1) * cellSize + &quot;,&quot; + d0 * cellSize
                    + &quot;H&quot; + w0 * cellSize + &quot;V&quot; + 7 * cellSize
                    + &quot;H&quot; + w1 * cellSize + &quot;V&quot; + (d1 + 1) * cellSize
                    + &quot;H&quot; + (w1 + 1) * cellSize + &quot;V&quot; + 0
                    + &quot;H&quot; + (w0 + 1) * cellSize + &quot;Z&quot;;
            //console.log(path); 
            return path;
    }
    
    //日付セルを月毎にpathで分類
    svg.selectAll(&quot;.month&quot;)
	    .data(function(d) {
		 return d3.time.months(new Date(d, 0, 1), new Date(d + 1, 0, 1));
	    })
	    .enter()
	    .append(&quot;path&quot;)
	    .attr({
		    &quot;class&quot;: &quot;month&quot;,
		    &quot;d&quot;: monthPath,
		    &quot;fill&quot;: &quot;none&quot;,
		    &quot;stroke&quot;: &quot;#000&quot;,
		    &quot;stroke-width&quot;: &quot;2px&quot;
	    });


    //ツールチップ要素作成	
    var tooltip = d3.select(&quot;body&quot;)
	    .append('div')
	    .attr('class', 'arrow_box')
	    .style(&quot;position&quot;, &quot;absolute&quot;)
	    .style(&quot;z-index&quot;, &quot;10&quot;)
	    .style(&quot;visibility&quot;, &quot;hidden&quot;)
	    .text(&quot;a simple tooltip&quot;);	

    //ステージをセンタリング
    var windowWidth = document.body.clientWidth;
    
    if(windowWidth&gt;width) d3.select('#stage').style('margin-left', Math.floor((windowWidth-width)/2)+'px');</pre> 


一番込み入っているのが、日付セルを月ごとにPathで区切る処理(月境界pathジェネレーター)なのですが、ここら辺はサンプルコードから丸写しです。
ツールチップの吹き出し表示は下記、CSS吹き出しジェネレーターで作成しました。

<a href="http://cssarrowplease.com/">cssarrowplease</a>

下方の吹き出しが見づらかったり、日付のセルにマウスオーバーするとdocumetnのサイズがおかしくなったり、一番最後の記事データにnullが入っていたりとバグだらけでまったく完成してないんですが、もくもく会の成果発表では素知らぬ顔して「できました」と報告してきました（＾＾；）

【余談】
今回はGithubを使ってカレンダーを作成しながら細かくコミットを区切り、あとからコミットログを確認した際に作成過程が分かるようにってのを狙ったのですが、途中pushするのを忘れたり、最後の方でコミットのメッセージを考えるのが面倒になりすべて「fix」で済ますなど残念な結果となりました。……もうちょっと、ちゃんと使えるようになりたい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2975</wp:post_id>
		<wp:post_date>2013-07-26 11:52:13</wp:post_date>
		<wp:post_date_gmt>2013-07-26 02:52:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2975</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2972]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js-node-js%e3%80%91-%e3%83%96%e3%83%ad%e3%82%b0%e3%81%ae%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92github%e9%a2%a8%e3%81%ae%e3%82%ab%e3%83%ac%e3%83%b3%e3%83%80%e3%83%bc%e3%81%ab%e8%a1%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427409471;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3841;}i:1;a:1:{s:2:"id";i:2755;}i:2;a:1:{s:2:"id";i:3548;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsはなぜ人気があるのか？　そして、なぜ難しいのか？</title>
		<link>http://shimz.me/blog/d3-js/2977</link>
		<pubDate>Wed, 31 Jul 2013 10:05:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2977</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://d3js.org/"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/d3-e1352947701212-300x143.jpg" alt="d3" width="300" height="143" class="aligncenter size-medium wp-image-890" /></a>

日本ではまだまだ知名度の低い<a href="http://d3js.org/">D3.js</a>ですが、海外ではGithubの<a href="https://github.com/popular/starred">人気レポジトリランキング</a>で上位(現在7位)に上がるなど非常に注目度の高いライブラリです。
JavaScriptには他にも多数のChartライブラリが存在しているのですが、その中でなぜD3がこんなにも注目されているのか？　その理由を考えてみました。


<h2>結論</h2>
なんかスッゲー長くなったので先に結論を書いておきます。
<ul>
	<li>他のChartライブラリより柔軟性が高い</li>
	<li>コードが簡潔に書ける</li>
	<li>JavaScriptの面白さを味わえる</li>
	<li>理解が進む程に惹かれる設計の妙</li>
</ul>

以上。以下、詳細。


<h2>柔軟性</h2>
データをグラフとして表示するには、データを画面上の座標に変換しなければなりません。散布図として表示するためにはデータの値を画面上のXY座標変換する必要がありますし、円グラフとして表示するには値の割合からそれぞれの内角の角度などを求めないと図として表示することができないわけです。
多くのChartライブラリはこれらデータを図(グラフィック)として表示する際のメンドクサイ計算をライブラリ内で行い、同時に実際に図として描画するところまでをサポートしてくれます。しかし、<strong>D3はデータを基に座標系に変換するなどの計算は行ってくれますが、実際に図を描画する機能はありません。</strong>
たとえばD3のツリーマップレイアウト関数は、データセットを渡すとツリーマップを表示するのに必要な計算を行いその結果(各ブロックのXY座標やブロックの幅・高さなど)をデータセットに付加して返します。しかし、実際にツリーマップを描画する処理は製作者が自身でコードに記述する必要があります。

<a href="http://shimz.me/blog/d3-js/2942"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/filelisttreemap-300x154.jpg" alt="filelisttreemap" width="300" height="154" class="aligncenter size-medium wp-image-2946" /></a>

これは一見不親切なように思えますが、Chartライブラリが提供するグラフのテンプレートデザインをカスタマイズするだけでは足りず、自ら凝ったデータビジュアライゼーションを作成したい製作者にとっては描画する方法を自由に選択できる利点となります。
上記のツリーマップレイアウトにしても、図を描画するために必要な情報(画面上の座標や各ブロックの大きさ)などはD3が計算してくれるので、あとはその情報を元にDIVタグとCSSで作成しても良いですし、インラインSVGのrect要素を使って描画することもできます。
Three.jsと連動させWebGLでグラフを描画するなんてこともできます。
この柔軟性の高さが、他ChartライブラリよりD3が抜きんでて注目されている理由の一つとなっています。
最近では他Chartライブラリとは一線を画す、よりコアな機能を提供するライブラリとしてD3を「データビジュアライゼーション・エンジン」と紹介している記事もみかけます。


<h2>簡潔</h2>
D3の名称は「Data-Driven Documents(データ駆動ドキュメント)」の頭文字をとったものなのですが、その名の通りデータとドキュメント(DOM)を結びつける独特なセレクション機能がD3の中心となっています。このセレクション機能を使うことで図形を描画する処理を「宣言的」に記述することができるのがD3の大きな特徴です。
たとえば、下記グラフは散布図と地図を描画しその２つを連動させるという多少複雑な処理を行っています。

<a href="http://shimz.me/blog/d3-js/2797"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/plotmap-300x194.jpg" alt="plotmap" width="300" height="194" class="aligncenter size-medium wp-image-2798" /></a>

<a href="http://shimz.me/blog/d3-js/2797">リンク先の記事</a>に掲載したコードを見ていただくと分かるのですが、殆どが「var 変数 = d3.〜」というコードで占められています。
一部にif文を用いた条件分岐を記述していますが、データセットを扱うときに頻出しがちなループ文(for)などが一切ありません。
このように、<strong>D3のセレクション機能を使うことでデータセットに対する反復処理を記述する必要がなくなる</strong>ため、複雑なデータビジュアライゼーションを作成する際でもコードの簡潔さを保つことができます。
この「Data-Driven Documents(データ駆動ドキュメント)」という設計思想や宣言的に簡潔に記述できる特徴が、D3が多くのユーザーに支持され注目される最大の理由だと思います。


<h2>その他</h2>
<strong>D3はJavaScriptの関数型言語としての側面を最大限に活用して作成されているライブラリです</strong>。
そのためD3のサンプルコードなどを眺めているとJavaScriptのプログラム言語としての面白や柔軟さが如実に感じられて、それもまたD3の人気に繋がっている気がします。
D3を使っていると「こんな風に複雑な処理を簡潔に記述する方法があるのかー」といろんな発見があって楽しく、D3への理解が進むほど「なんて上手く設計されているんだ！　awesome!」みたなテンションになってくるのですね。この辺りはデータビジュアライゼーションに興味がない方でも、JavaScriptの勉強に役に立つと思うので是非一度使ってみて欲しいと思います。

D3の人気の秘密は他にも、地理情報の処理機能が豊富(あまり他のライブラリには無い機能)とか、強力なスポンサーが付いているとか、ライブラリの作者自ら大量のサンプルを公開しているとか、ドキュメントやリファレンス、チュートリアルが豊富(ただし、ほとんど英語)などがあります。


<h2>なぜD3は難しいのか</h2>
これまでD3が注目される理由を述べてきましたが、実はこれらの要素が同時に初めてD3を触る人に「難しい」と感じさせる要因となっています。
ちょっと手持ちのデータをグラフとして表示したいという人にとっては、テンプレートがなくグラフの描画処理を自身で実装しなければならないD3は難しく感じるでしょうし、なによりD3の独特なセレクション機能は斬新な仕組であるゆえに理解するまでに結構時間がかかります。
<strong>D3はあくまで「複雑なデータビジュアライゼーションでも簡潔に記述することができるライブラリ」であって、「グラフを簡単に表示できるライブラリ」では無い</strong>ので注意が必要です。

しかし、ある程度の山を越え理解が進んでくると思いのほか自分の描きたい図を描くことができて楽しくなってくるので、興味があればぜひ一度触ってみてください。


【関連】
<a href="http://shimz.me/blog/d3-js/862">データビジュアライゼーション「d3.js」</a>
<a href="http://shimz.me/blog/d3-js/2772">ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2977</wp:post_id>
		<wp:post_date>2013-07-31 19:05:35</wp:post_date>
		<wp:post_date_gmt>2013-07-31 10:05:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2977</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e3%81%af%e3%81%aa%e3%81%9c%e4%ba%ba%e6%b0%97%e3%81%8c%e3%81%82%e3%82%8b%e3%81%ae%e3%81%8b%ef%bc%9f%e3%80%80%e3%81%9d%e3%81%97%e3%81%a6%e3%80%81%e3%81%aa%e3%81%9c%e9%9b%a3%e3%81%97%e3%81%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427379514;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3362;}i:1;a:1:{s:2:"id";i:2942;}i:2;a:1:{s:2:"id";i:3307;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>357</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 22:32:50</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 13:32:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] D3.jsはなぜ人気があるのか？ そして、なぜ難しいのか？ | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414503170.3246810436248779296875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414541678.342545986175537109375;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Javascriptでフロー図や組織図、UML図などを簡単に表示できるライブラリ「JointJS」</title>
		<link>http://shimz.me/blog/javascript/2979</link>
		<pubDate>Mon, 05 Aug 2013 00:51:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2979</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.jointjs.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/jointjsdemo.jpg" alt="jointjsdemo" width="590" height="286" class="aligncenter size-full wp-image-2980" /></a>

<a href="http://www.jointjs.com/">JointJS</a>

Microsoft Visioを使って作成するようなタイプの図(ダイアグラム)ですね。
D3.jsを使って作成することもできますが、jointJSの方が用途に特化されている分簡単に作成することができます。
サクッと組織図やフローチャートなどを作成したいときに便利です。



<h2>サンプル</h2>
<a href="http://shimz.me/libs/jointjs/example/01.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/jointjsexample01.jpg" alt="jointjsexample01" width="560" height="148" class="aligncenter border size-full wp-image-2981" /></a>
作成する図のタイプによってはプラグインを読み込む必要があります。
 
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;../joint.js&quot;&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >//graphモデルの生成
var graph = new joint.dia.Graph;

//paper(グラフを表示するステージ)の生成
var paper = new joint.dia.Paper({
    el: $('#myholder'),
    width: 600,
    height: 200,
    model: graph
});


/*
 *  shape生成
 */

//rectシェイプオブジェクトの生成
var rect = new joint.shapes.basic.Rect({
    position: { x: 100, y: 30 },
    size: { width: 100, height: 30 },
    attrs: { rect: { fill: 'blue' }, text: { text: 'my box', fill: 'white' } }
});

//rectシェイプの属性を設定
rect.attr({
    rect: { fill: '#2C3E50', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' },
    text: {
        text: 'my label', fill: '#3498DB',
        'font-size': 18, 'font-weight': 'bold', 'font-variant': 'small-caps', 'text-transform': 'capitalize'
    }
});

//rectオブジェクトからクローン(rect2)を生成
var rect2 = rect.clone();
//rect2の位置を設定
rect2.translate(300,50);



/*
 * link生成
 */

 //linkオブジェクトの生成
var link = new joint.dia.Link({
    source: { id: rect.id },
    target: { id: rect2.id },
	attrs: {}  //attrs用の空オブジェクト。これが無いとlink.attrでエラーがでる
});

//link属性の設定
link.attr({
    '.connection': { stroke: 'blue' },
    '.marker-source': { fill: 'red', d: 'M 10 0 L 0 5 L 10 10 z' },
    '.marker-target': { fill: 'yellow', d: 'M 10 0 L 0 5 L 10 10 z' }
}); 

//折点の設定
link.set('vertices', [{ x: 300, y: 60 }, { x: 400, y: 60 }, { x: 400, y: 20 }]);
//線を滑らかにする
link.set('smooth', true);

//rectとlinkをグラフに追加する
graph.addCells([rect, rect2, link]);</pre> 

<a href="http://shimz.me/libs/jointjs/example/01.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2979</wp:post_id>
		<wp:post_date>2013-08-05 09:51:32</wp:post_date>
		<wp:post_date_gmt>2013-08-05 00:51:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2979</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="jointjs"><![CDATA[jointJS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2980]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%a7%e3%83%95%e3%83%ad%e3%83%bc%e5%9b%b3%e3%82%84%e7%b5%84%e7%b9%94%e5%9b%b3%e3%80%81uml%e5%9b%b3%e3%81%aa%e3%81%a9%e3%82%92%e7%b0%a1%e5%8d%98%e3%81%ab%e8%a1%a8%e7%a4%ba%e3%81%a7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369375;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3617;}i:1;a:1:{s:2:"id";i:2960;}i:2;a:1:{s:2:"id";i:3501;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IPアドレスから位置情報を取得できるWebサービス「IPInfoDB.com」</title>
		<link>http://shimz.me/blog/web/2983</link>
		<pubDate>Tue, 06 Aug 2013 01:51:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2983</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ipinfodb.com/index.php"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/ipinfodblogo.gif" alt="ipinfodblogo" width="250" height="73" class="aligncenter size-full wp-image-2985" /></a>

<a href="http://www.ipinfodb.com/index.php">IPInfoDB.com</a>

IPアドレスを入力すると位置情報を返してくれます。精度はイマイチ。
Web APiが提供されているので、Javascriptから利用することもできます。

<h2>サンプル</h2>
<pre class="lang:xhtml decode:true " >
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;ipInfoDB API Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;ipInfoDB API Test&lt;/h1&gt;
ip add &lt;input id=&quot;ip&quot; type='text' value=&quot;173.194.38.112&quot; /&gt;
&lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;get&quot; /&gt;
&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    var ipinfodb = 'http://api.ipinfodb.com/v3/ip-city/';
    $('#btn').click(function(){
        $.ajax({
            url:ipinfodb,
            data:{
                key:&lt;your_api_key&gt;,
                ip:$(&quot;#ip&quot;).val(),
                format:&quot;json&quot;
            },
            dataType:'jsonp',
            success:function(json){
                $(&quot;#result&quot;).html(&quot;&quot;);
                for (var key in json){
                    $(&quot;#result&quot;).append(key+ &quot;/&quot;+ json[key]+&quot;&lt;br&gt;&quot;);
                }
            }
        
        });
        
    })

&lt;/script&gt;


&lt;/body&gt;
&lt;/html&gt;</pre> 


<a href="http://shimz.me/example/ipinfodb/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2983</wp:post_id>
		<wp:post_date>2013-08-06 10:51:43</wp:post_date>
		<wp:post_date_gmt>2013-08-06 01:51:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2983</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[ip%e3%82%a2%e3%83%89%e3%83%ac%e3%82%b9%e3%81%8b%e3%82%89%e4%bd%8d%e7%bd%ae%e6%83%85%e5%a0%b1%e3%82%92%e5%8f%96%e5%be%97%e3%81%a7%e3%81%8d%e3%82%8bweb%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%80%8cipinfo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427381214;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1167;}i:1;a:1:{s:2:"id";i:2601;}i:2;a:1:{s:2:"id";i:3753;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsの勉強会を（群馬で）やります。</title>
		<link>http://shimz.me/blog/d3-js/2990</link>
		<pubDate>Sat, 10 Aug 2013 01:01:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2990</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2012/06/d3-e1352947701212.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/d3-e1352947701212.jpg" alt="d3" width="1352" height="645" class="aligncenter size-full wp-image-890" /></a>

人に教えることで、自分自身の理解も進むかなと。
詳細はAtndにて。

<a href="http://atnd.org/events/42411">D3勉強会#0</a>

ナンバリングが０番になっているのは「準備会」的な意味づけです。
なにしろ勉強会を主催するのを初めてなので、とりあえず近場(群馬＠高崎)で一回やってみよう！と平日夜開催となっております。
かなりのぐだぐだっぷり、とっちらかりが予想されます、ご了承ください。
なれてきたら土曜日など参加しやすい曜日にも開催したいなと考えています。
「D3」に限定していますが、ゆくゆくはD3のみならず他のChartライブラリや広い意味でデータビジュアライゼーションについてや「GIS(地理情報システム」なども扱っていきたいなと思います。

まぁ、需要があればですけども。

勉強会の内容ですが、「D3を使って棒グラフを作成する過程を実際にライブコーディングしながら１行づつ解説していく」という形式で行う予定です。
自身の経験から、これが一番解りやすいかなと。

D3は「急峻な学習曲線」を描くライブラリとして知られています。
ようするに、入り口のハードルがやたら高いけど慣れると使いやすいライブラリだということですね。

ライブラリの作者さんが大量のexampleを作成されていることもあって、サンプルコードには事欠かないのですが、サンプルコードというのはどれほど簡単なものでも「完成後のコード」です。

そのため、いざ自分でオリジナルのグラフを描こうとすると、初めのうちはD3のコードの組み立て方みたいなものがわからず手が止まってしまったりします。

私は「<a href="http://enjalot.github.io/dot-enter/">dot enter</a>」や「<a href="http://enjalot.github.io/dot-append/">dot appoed</a>」のVideoチュートリアルを見ることで最初のハードルを越えられたました。

その経験から、今回このような形式で勉強会を行おうことにしました。

「だったら、上記のVideoチュートリアル見ればいいんじゃね？」という話なんですが、"解説が日本語である"というのが一応の利点です。
（<a href="http://dotinstall.com/lessons/basic_d3js">ドットインストール</a>があるんじゃん…）

まぁ、なれないライブコーディングなので途中で「うっ動かねぇ…」みたいなこともあるかもしれませんが、そのときは「D3でのデバッグノウハウ」的な内容に急遽変更するかもしれませんｗ

とりあえず、勉強会を行うことで少しでもデータビジュアライゼーションに興味を持ってもらい、datavis仲間が増えるといいなぁーと考えています。

勉強会の冒頭で少し説明する予定ですが、データビジュアライゼーションというと「結局のところグラフを表示するだけなんでしょ」と思われるかもしれませんが、データ視覚化技術は「問題を発見するためのツール」として「エンジニアの武器」となる技術だと考えています。

「ビックデータ」とか「オープンデータ」とか、データ活用に注目が集まる現在において身に着けておくと便利な技術だと思うので、興味がある方は是非ご参加いただき、「データをHackする楽しみ」について語り合いましょう！




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2990</wp:post_id>
		<wp:post_date>2013-08-10 10:01:02</wp:post_date>
		<wp:post_date_gmt>2013-08-10 01:01:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%81%ae%e5%8b%89%e5%bc%b7%e4%bc%9a%e3%82%92%e3%82%84%e3%82%8a%e3%81%be%e3%81%99%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308996;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3066;}i:1;a:1:{s:2:"id";i:3333;}i:2;a:1:{s:2:"id";i:3113;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 地図上のルートに沿ってアニメーション</title>
		<link>http://shimz.me/blog/d3-js/2993</link>
		<pubDate>Tue, 13 Aug 2013 00:50:14 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2993</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/geo3/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/maplineanimation.jpg" alt="maplineanimation" width="590" height="469" class="aligncenter size-full wp-image-2994" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/geo3/index.html">example</a>

<a href="http://shimz.me/blog/d3-js/2913">以前の記事</a>で、地図上の２点を結ぶ線を引く方法を掲載しましたが、今回はその引いた線上に沿ってcircleをアニメーションさせるサンプルです。


<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >
d3.json("gunma.topojson", function(json) {
	d3main(json);
});
 
 
function d3main(json){
	var width = 960;
	var height = 960;
    
	var svg = d3.select("svg")
		.attr("width", width)
		.attr("height", height);
 
	//投影法設定
	var projection = d3.geo
		.mercator()        //投影法の指定
		.scale(40000)    //スケール（ズーム）の指定
		.translate([width/2,height/2])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	//パスジェネレーター
	var path = d3.geo.path().projection(projection);


	//地図追加  
	var land = svg.insert("path", ".graticule")
		.datum(topojson.object(json, json.objects.gunma))
		.attr({
			"class": "land",
			"d": path,
			"fill": "green",
			"opacity": 0.5
		});

	//境線追加
	var boundary = svg.insert("path", ".graticule")
		.datum(topojson.object(json, json.objects.gunma, function(a, b) { return a !== b; }))
		.attr({
			"class": "boundary",
			"d": path,
			"fill": "none",
			"stroke": "white",
			"stroke-width": .5
		});
 
	//ポイント位置情報
	var pointdata = {"type": "LineString", "coordinates": [
		[139.013057, 36.322356], //高崎
		[139.073177, 36.383191], //前橋
		[139.19382500000006, 36.32668100000001], //太田
		[139.0441608,36.6460769], //沼田
		[138.6388879,36.5314431], //吾妻
		[138.59605290000002,36.6207784], //草津
		[139.13282479999998,36.8052796], //武尊山
		[139.33068750000007,36.4054907] //桐生市
	]}

	//ポイント間ライン追加
	var line = svg.selectAll(".line")
		.data([pointdata])
		.enter()
		.append("path")
		.attr({
			"class":"line",
			"d": path,
			"fill": "none",
			"stroke": "black",
			"stroke-width": 1.5
		});

	//ポイント追加        
	var point = svg.selectAll(".point")
		.data(pointdata.coordinates)
		.enter()
		.append("circle")
		.attr({
			"cx":function(d) { return projection(d)[0]; },
			"cy":function(d) { return projection(d)[1]; },
			"r":4,
			"fill":"black",
			"fill-opacity":1
		});


	//path情報取得
	var pathNode = d3.selectAll('.line').node();　//ターゲットパス指定
	var pathLength = pathNode.getTotalLength(); 

	//アニメーションcircle追加    
	var circle = svg.append("circle")
		.attr({
			r: 10,
			fill: 'red',
			transform: function () {
			var p = pathNode.getPointAtLength(0)
				return "translate(" + [p.x, p.y] + ")";
			}
		});

	//アニメーション実行
	circle.transition()
		.duration(5000)
		.ease("linear")
		.attrTween("transform", function (d, i) {
			return function (t) {
				var p = pathNode.getPointAtLength(pathLength*t);
				return "translate(" + [p.x, p.y] + ")";
			}
		});

}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2993</wp:post_id>
		<wp:post_date>2013-08-13 09:50:14</wp:post_date>
		<wp:post_date_gmt>2013-08-13 00:50:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2993</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2994]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91-%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ae%e3%83%ab%e3%83%bc%e3%83%88%e3%81%ab%e6%b2%bf%e3%81%a3%e3%81%a6%e3%82%a2%e3%83%8b%e3%83%a1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427401833;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2913;}i:1;a:1:{s:2:"id";i:2351;}i:2;a:1:{s:2:"id";i:2881;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptで距離計算など地理情報処理を行うライブラリ「Geolib」</title>
		<link>http://shimz.me/blog/node-js/2995</link>
		<pubDate>Wed, 14 Aug 2013 01:37:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2995</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/08/geolib-e1376444094697.jpg" alt="geolib" width="590" height="234" class="aligncenter border size-full wp-image-2996" />

緯度経度のデータから、２点間の距離を求めたり、中心点の算出などが行えるライブラリです。

<a href="https://github.com/manuelbieh/Geolib">Geolib</a>

100%pureJavascriptで書かれているので、node.jsでもフロントエンドでも使用できます。

node.jsでのインストール方法は以下。
 
<pre class="lang:js decode:true " >npm install geolib
</pre> 



<h2>サンプル</h2>
群馬の地理に詳しくないとよくわからないサンプル。
 
<pre class="lang:js decode:true " >var geolib = require('geolib');

//２点間の距離を求める
var distance = geolib.getDistance(
    {latitude: 36.322356, longitude: 139.013057},	//高崎駅
    {latitude: 36.383191, longitude: 139.073177}	//前橋駅
);
console.log(distance+&quot;m&quot;); //-&gt;8642m



//コンバート
console.log(geolib.convertUnit('km', distance) + &quot;km&quot;); //-&gt;8.642km
console.log(geolib.convertUnit('mi', distance) + &quot;mi&quot;); //-&gt;5.3699マイル
console.log(geolib.convertUnit('ft', distance) + &quot;ft&quot;); //-&gt;28353.0184フィート



//中心点を求める
var center = geolib.getCenter([
    {latitude: 36.322356, longitude: 139.013057},	//高崎駅
    {latitude: 36.383191, longitude: 139.073177},	//前橋駅
    {latitude: 36.41107600000001, longitude: 139.333037},	//桐生駅
    {latitude: 36.294066, longitude: 139.378734},	//太田駅
    {latitude: 36.250183, longitude: 139.08331599999997},	//藤岡駅
	
]);
console.log(center); //-&gt;{ latitude: '36.330630', longitude: '139.195896', distance: 37.373 }



//含まれるかの判定
var isInside1 = geolib.isPointInside(
    {latitude: 36.32668100000001, longitude: 139.19382500000006},	//伊勢崎駅
    [
        {latitude: 36.322356, longitude: 139.013057},	//高崎駅
        {latitude: 36.383191, longitude: 139.073177},	//前橋駅
        {latitude: 36.41107600000001, longitude: 139.333037},	//桐生駅
        {latitude: 36.294066, longitude: 139.378734},	//太田駅
        {latitude: 36.250183, longitude: 139.08331599999997},	//藤岡駅
    ]
); 
console.log(isInside1); //-&gt;True

var isInside2 = geolib.isPointInside(
    {latitude: 36.490693, longitude: 139.00841100000002},	//渋川駅
    [
        {latitude: 36.322356, longitude: 139.013057},	//高崎駅
        {latitude: 36.383191, longitude: 139.073177},	//前橋駅
        {latitude: 36.41107600000001, longitude: 139.333037},	//桐生駅
        {latitude: 36.294066, longitude: 139.378734},	//太田駅
        {latitude: 36.250183, longitude: 139.08331599999997},	//藤岡駅
    ]
); 
console.log(isInside2); //-&gt;False



//円内に含まれるかの判定
var inCircle = geolib.isPointInCircle(
    {latitude: 36.322356, longitude: 139.013057},	//高崎駅 //判別対象
    {latitude: 36.383191, longitude: 139.073177},	//前橋駅 //circleの中心点
    10000 //半径(m)
);
console.log(inCircle); //-&gt;True



//距離が近い順に並べ替え
var distanceList = geolib.orderByDistance(
    {latitude: 36.322356, longitude: 139.013057},	//高崎駅
	[
		{latitude: 36.383191, longitude: 139.073177},	//前橋駅
		{latitude: 36.41107600000001, longitude: 139.333037},	//桐生駅
		{latitude: 36.294066, longitude: 139.378734},	//太田駅
		{latitude: 36.250183, longitude: 139.08331599999997},	//藤岡駅
	]
);
console.log(distanceList);
/* -&gt;
[ { key: '0',
    latitude: 36.383191,	//前橋駅
    longitude: 139.073177
    distance: 8642 },
  { key: '3',
    latitude: 36.250183,	//藤岡駅
    longitude: 139.083315
    distance: 10197 },
  { key: '1',
    latitude: 36.41107600	//桐生駅
    longitude: 139.333037
    distance: 30357 },
  { key: '2',
    latitude: 36.294066,	//太田駅
    longitude: 139.378734
    distance: 32992 } ]
*/



//一番近いポイントを抽出
var near = geolib.findNearest(
    {latitude: 36.322356, longitude: 139.013057},	//高崎駅
	[
		{latitude: 36.383191, longitude: 139.073177},	//前橋駅
		{latitude: 36.41107600000001, longitude: 139.333037},	//桐生駅
		{latitude: 36.294066, longitude: 139.378734},	//太田駅
		{latitude: 36.250183, longitude: 139.08331599999997},	//藤岡駅
	]
);
console.log(near); //-&gt; { key: '0', latitude: 36.383191, longitude: 139.073177, distance: 8642 } //前橋駅</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2995</wp:post_id>
		<wp:post_date>2013-08-14 10:37:32</wp:post_date>
		<wp:post_date_gmt>2013-08-14 01:37:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-2995</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2996]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%a7%e8%b7%9d%e9%9b%a2%e8%a8%88%e7%ae%97%e3%81%aa%e3%81%a9%e5%9c%b0%e7%90%86%e6%83%85%e5%a0%b1%e5%87%a6%e7%90%86%e3%82%92%e8%a1%8c%e3%81%86%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427383586;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4152;}i:1;a:1:{s:2:"id";i:4155;}i:2;a:1:{s:2:"id";i:2749;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「風立ちぬ」と煙草と「パンナム」と「マッドメン」</title>
		<link>http://shimz.me/blog/other/3000</link>
		<pubDate>Fri, 16 Aug 2013 06:34:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3000</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/08/smoking.jpg" alt="smoking" width="325" height="205" class="aligncenter size-full wp-image-3002" />
Photo courtesy of <a href="http://wallpoper.com/images/00/38/70/52/smoking-colorful_00387052.jpg">smoking-colorful_00387052.jpg</a>

「風立ちぬ」の喫煙描画の是非が話題となっていますね。
「現代の倫理観では好ましくないが、当時は当たり前に行われていた」事を物語のなかで描くべきかどうかという問題ですが、海外ドラマの中にこの問題に対してまったく正反対のアプローチを行った作品があります。

一つは「MADMEN マッドメン」です。
<iframe width="560" height="315" src="//www.youtube.com/embed/qkWPK4i8Z7o" frameborder="0" allowfullscreen></iframe>
1960年代のニューヨークの広告業界を描いたテレビドラマです。
この作品、とにかく登場人物たちが男女問わずタバコを吸いまくります。仕事場でもプカプカ。会議中もみんなでプカプカ。飲みに行ってはプカプカ。
なにしろ第一話の題名が「煙が目にしみる(Smoke Gets in Your Eyes)」ですしね。
とにかくリアルに1960年代のアメリカを描画するのが作品のテーマらしく、喫煙のみならず、その当時行われていた女性蔑視や日常的なセクハラ、人種差別などが赤裸々に描かれます。ドラマの中に登場する企業名も実在のものをバンバン使ってます。
可能な限り正確に当時の様子を描くことを選択した作品です。


別のアプローチで作られたドラマが「PAN AM／パンナム」です。
<iframe width="560" height="315" src="//www.youtube.com/embed/7oY6jTRvWH0" frameborder="0" allowfullscreen></iframe>
こちらは「マッドメン」と同じく1960年代のアメリカを舞台に、パンアメリカン航空のスチュワーデスとパイロットを描いたドラマです。
当時はまだキャビンアテンダントではなくスチュワーデスだったんですね。
マッドメンと同じ時代を舞台にしているのですが、こちらにはほとんど喫煙シーンが出てきません。
航空機内も当時は喫煙できるような時代だったはずなんですが、お客さんでも喫煙している描画はありません。
また人種差別においても多少あるものの、あまり深いところまでは描かれません。
まぁ、もともとポップな感じがウリのドラマなので、そんなにシリアスなテーマを持ち込むのも難しいのでしょう。
三丁目の夕日みたいなもんですね。
また、「マッドメン」がケーブルテレビでの放映だったのに対して、「パンナム」は民放での放映なのでわりと放送コードが厳しめだったらしです。
その辺の事情は以下を。

<a href="http://www.cinematoday.jp/page/N0034417">60年代が舞台の新ドラマ「パンナム」　喫煙と人種問題は正直に描けず</a>


で、まったく違うアプローチをとった２作品なわけですが、どっちが正しいのか？っては難しいですね。作品のカラーにもよりますし。

ただ、マッドメンのように当時の姿をありのまま描く作品は必要だと思います。綺麗な部分にだけ光を当てて、あとはまるでなかったかのように描いてしまうってのも悪くはないんですが、そんな作品ばかりになると違う意味で勘違いする人が出てくるんじゃないかと。
三丁目の夕日観て、あれが当時の日本の姿だと思いこんじゃう人結構いそうですし。
そうなってくると、描かないことの悪影響というものも無視できない問題なのではないかと思います。

とりあえず、２作品とも面白いのでお勧めです。

【余談】
「風立ちぬ」みてきました。
わりと面白かったです。
オタクで"だめんず"な主人公と、だめんずうぉ〜か〜なヒロインとの、駄目駄目なんだけど角度によっては美しく見えなくもないラブストーリーって感じが結構好みでした。
画面はやたら綺麗なのに、なんかところどころ退廃的な含みがあってよろしいｗ
まぁ、清廉潔白な恋愛劇なんて見てても面白くないですしね。

ところで、宮崎監督と煙草と言えば「紅の豚」が公開された当時、映画雑誌の「CUT」でのロングインタビュー記事で記者の「宮崎監督にとってのかっこいい、とは何ですか？」という質問への解答が印象にのこっています。
宮崎監督は以下のように答えています。（ちょっとうろ覚え）

「ポルコは煙草に火をつけて、つけたマッチを川に捨てるんです。かっこいい、なんてのはくだらないことなんです」

こんな感じで答えていました。
「こじらせっぷりが、一周回ってスゲーなー」と嬉しくなったのを覚えてます。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3000</wp:post_id>
		<wp:post_date>2013-08-16 15:34:34</wp:post_date>
		<wp:post_date_gmt>2013-08-16 06:34:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e9%a2%a8%e7%ab%8b%e3%81%a1%e3%81%ac%e3%80%8d%e3%81%a8%e7%85%99%e8%8d%89%e3%81%a8%e3%80%8c%e3%83%91%e3%83%b3%e3%83%8a%e3%83%a0%e3%80%8d%e3%81%a8%e3%80%8c%e3%83%9e%e3%83%83%e3%83%89%e3%83%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3002]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427408162;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3111;}i:1;a:1:{s:2:"id";i:3068;}i:2;a:1:{s:2:"id";i:3780;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ホワイトハッカーが笑われすぎている</title>
		<link>http://shimz.me/blog/other/3004</link>
		<pubDate>Wed, 21 Aug 2013 02:48:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3004</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/08/esifklct.jpg" alt="esifklct" width="400" height="300" class="aligncenter size-full wp-image-3005" />

<a href="http://togetter.com/li/551870">NEWS ZERO(8/20)「増加するサイバー犯罪　守る技術を学ぶ若者たち」の反応まとめ</a>

「ホワイトハッカーｗｗｗｗｗなｗｗｗにｗｗｗそｗｗｗれｗｗｗ」とあまりに嘲笑されているのが、可哀想に感じたので。

まぁ、単語の響きが面白いというのはわからなくもないのですけど。
中には「マスコミがまたおかしな単語を作り出してるぜー」みたいな反応もありましたが、それはたぶん誤解です。一応「ホワイトハッカー」という呼称はいままでもわりと使われてきた用語です。

海外だと「ホワイトハット(白帽子) ハッカー」「ブラックハット(黒帽子)　ハッカー」なんて分け方もしますね。「Black Hat」というそのまんまなタイトルのセキュリティイベントが毎年開催されています。

でもいちばん、よく使われるのは「ハッカー」と「クラッカー」という分類で、「ハッカーとクラッカーは違う」とかよく言われます。
上記のまとめなどをみると<strong>この分類だけが唯一"正しい正解"だと思っている方も多い</strong>ようで、それ以外の分類を口にすると「わかってない、にわか乙ｗｗｗｗ」みたいな扱いになってしまうみたいですが。

ぶっちゃけこういう分類、個人的には嫌いなんですけど。

まぁ、お仕事の上では必要な分類ではあります。

インターネット以前や黎明期などまだ法律が整備されいなかった頃に、好奇心片手に結構無茶やっていた若者達(ハッカー)が、大人になってお仕事をするようになると「良い者」と「悪い者」を分けてお客さんに説明しないとならなくなって、「ハッカーとクラッカーは違う」とか「ホワイトハッカーとブラックハッカー」みたいな分類が生み出されました。ようするに大人の事情というやつです。

そもそもHackという単語に良いイメージなんかなかったのです。
Hackは「叩き切る」とか「切り裂く」という意味ですが、同時に「雑な」とか「小狡い」などのイメージを持つ単語です。

「Hack job」なら「雇われ仕事」とか「やっつけ仕事」とかそんな意味になりますし、「literary hack」だと「平凡でつまらない作家」とう意味になります。それが、いつの間にかIT業界では「Hack」や「Hacker」という単語が誇り高く語られるように変化しました。ここら辺は「geek」なんかと同様です。(MITで行われていた<a href="http://web.mit.edu/sloanjapan/101/school/hack.htm">ハック</a>が、用語のイメージを決定づけた面があります)

かつてハッカーと呼ばれたエンジニアは、若いころに結構やんちゃしている人が多いのですが、時代や法律の変化もあり「あんな悪質な奴らと自分は違う」みたいな分け方をしないとお仕事に支障がでるので、良いハッカーと悪いハッカーを分ける必要が生まれました。
(「ウォズの魔法使い」だって若かりしころは、電話のタダがけ機とか作って売り歩いていたりしたのです。)

そんな中で生まれてきたものなので、「ハッカーとクラッカー」という分類もわりといい加減というか曖昧なものですし、「ホワイトハッカーとブラックハッカー」という分類も別に間違いというわけでもないのです。

【余談】
その他、技術力の高いエンジニアを「Wizard(魔術師)」とか「Guru(指導者)」と言ったりします。
指輪物語やゲド戦記などの影響が強いらしいですが、最近だと「ninja(忍者)」なんてのも見ます。
リアルで口にするとちょっと恥ずかしい系の用語ですね。
全体的に「中二病」っぽいのは、ハッカー文化というのがようするに「コンピューター少年たちの文化」を引きづっているからなんでしょう。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3004</wp:post_id>
		<wp:post_date>2013-08-21 11:48:59</wp:post_date>
		<wp:post_date_gmt>2013-08-21 02:48:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%9b%e3%83%af%e3%82%a4%e3%83%88%e3%83%8f%e3%83%83%e3%82%ab%e3%83%bc%e3%81%8c%e7%ac%91%e3%82%8f%e3%82%8c%e3%81%99%e3%81%8e%e3%81%a6%e3%81%84%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3005]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426689284;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3222;}i:1;a:1:{s:2:"id";i:3237;}i:2;a:1:{s:2:"id";i:1899;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SVG入門リンクまとめ(自分用)</title>
		<link>http://shimz.me/blog/svg/3007</link>
		<pubDate>Thu, 22 Aug 2013 03:37:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3007</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/08/500px-Ghostscript_Tiger.jpg" alt="500px-Ghostscript_Tiger" width="300" height="300" class="aligncenter size-full wp-image-3008" />

D3.jsでは<a href="http://ja.wikipedia.org/wiki/%E3%83%AB%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%89%E3%83%BB%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB">ルック・アンド・フィール</a>を描画するのにSVGがよく使われます。
D3で作成するデータビュジュアライゼーションの表現力を高めるためにはSVGに関する知識を増やすのが一番の近道です。
そこで最近SVGについての勉強を始めたのですが、せっかくなので、ひとまず自分的に勉強になったな～というサイトのリンクを貼り付けておきます。


<h2>SVG入門リンク</h2>

・<a href="http://www.hcn.zaq.ne.jp/___/SVG11-2nd/">SVG 1.1 仕様 （第２版） 日本語訳</a>
　ここに全てが……でもいきなりここから始めるのは難しいかも。

・<a href="http://www.atmarkit.co.jp/fwcr/design/index/index_webgraphic.html">連載インデックス「Webグラフィックをハックする」 - ＠IT</a>
　第２回・第３回の記事でSVGが特集されてます。サンプルなども豊富で分かり易いです。

・<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo.htm">svg要素の基本的な使い方まとめ</a>
　SVGに関する解説やチュートリアルが充実したサイト。Raphaël、D3.js、sieなどのライブラリに関しても勉強になります。

・<a href="https://developer.mozilla.org/ja/docs/Web/SVG/Tutorial">チュートリアル - SVG | MDN</a>
　mozilla公式サイトのSVG解説ページ

・<a href="http://dotinstall.com/lessons/basic_svg">SVG入門 (全14回)</a>
　ドットインストールのSVG講座


<strong>他、ツール類</strong>
・<a href="http://svg-edit.googlecode.com/svn-history/r1771/trunk/editor/svg-editor.html">SVG-edit</a>
　ブラウザ上でSVGを作成できるグラフィックエディタ

・<a href="http://ie.microsoft.com/testdrive/graphics/svggradientbackgroundmaker/">IE10 Test Drive Demo: SVG Gradient Background Maker</a>
　グラデーション作成ジェネレーター]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3007</wp:post_id>
		<wp:post_date>2013-08-22 12:37:02</wp:post_date>
		<wp:post_date_gmt>2013-08-22 03:37:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3007</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="svg"><![CDATA[SVG]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3008]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[svg%e5%85%a5%e9%96%80%e3%83%aa%e3%83%b3%e3%82%af%e3%81%be%e3%81%a8%e3%82%81%e8%87%aa%e5%88%86%e7%94%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427394168;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3564;}i:1;a:1:{s:2:"id";i:2949;}i:2;a:1:{s:2:"id";i:2321;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ボタンやロゴ、バナーなどをサクッと作れる「Art Text 」がWindows 8でも使える！(感涙)</title>
		<link>http://shimz.me/blog/other/3009</link>
		<pubDate>Fri, 23 Aug 2013 00:36:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3009</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://apps.microsoft.com/windows/ja-jp/app/art-text/9b78399e-06b1-498e-ba88-6894fc417dd5"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/win8arttext.jpg" alt="Art Text preview" width="590" height="332" class="aligncenter size-full wp-image-3010" /></a>

<a href="http://apps.microsoft.com/windows/ja-jp/app/art-text/9b78399e-06b1-498e-ba88-6894fc417dd5">Art Text</a>

Mac Book Airをメインマシンにしていた時に非常にお世話になった「Art Text」。そのあまりの使いやすさに、一時期浮かれて<a href="http://shimz.me/works/01/#arttext">こんなページ</a>まで作ってしまったのですが、その「Art Text」がWindows8アプリとしてリリースされていると知って狂喜乱舞しております。

なんとなく、「Art Text windows8」でググってみてよかった！

アプリを見つけにくいのがWindows8アプリストアの欠点ですね、あれ何とかしてほしい。


で、「Art Text」ですが、ロゴやボタンなどの素材を簡単な操作で作成できるアプリケーションです。
実際にどんなものかは下記動画を見ていただくのが早いでしょう。

windows8版のプレビュー
<iframe width="560" height="315" src="//www.youtube.com/embed/QGwAYMdIFF4" frameborder="0" allowfullscreen></iframe>

Mac版のプレビュー
<iframe width="560" height="315" src="//www.youtube.com/embed/elBH_X2MAOA" frameborder="0" allowfullscreen></iframe>

もちろん、本職の方には到底及ばないものですが、それでも「Art Text2」を使うことでかなりそれっぽい素材を作成できたりするのでお勧めです。

個人的にアップデートが続いて行って欲しいアプリNo.1なので、興味のあるかたは是非ご購入を！

値段も750円とお手頃ですので。

参考
<a href="http://morizyun.github.io/blog/art-text2-mac-app-design/">Art Text2はエンジニアのためのボタン・ファビコン作成ツールだ！</a>


【余談】
とりあえず、Facebookページのヘッダ画像を「Art Text」で作成してみました。
<a href="http://www.facebook.com/GunmaGisGeek">GunmaGisGeek Page</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3009</wp:post_id>
		<wp:post_date>2013-08-23 09:36:50</wp:post_date>
		<wp:post_date_gmt>2013-08-23 00:36:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%9c%e3%82%bf%e3%83%b3%e3%82%84%e3%83%ad%e3%82%b4%e3%80%81%e3%83%90%e3%83%8a%e3%83%bc%e3%81%aa%e3%81%a9%e3%82%92%e3%82%b5%e3%82%af%e3%83%83%e3%81%a8%e4%bd%9c%e3%82%8c%e3%82%8b%e3%80%8cart-text</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3010]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427164728;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:3771;}i:2;a:1:{s:2:"id";i:3096;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptの楽しい(?)ところの解説</title>
		<link>http://shimz.me/blog/javascript/3015</link>
		<pubDate>Tue, 27 Aug 2013 00:25:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3015</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/08/iluvjavascript.jpg" alt="iluvjavascript" width="545" height="233" class="aligncenter size-full wp-image-3016" />

Qiitaに「<a href="http://qiita.com/_shimizu/items/e12e45c772cd0d859a02">JavaScriptの楽しい(?)ところ</a>」という記事を投稿したので、その内容をちょっとだけ解説してみます。
JavaScriptの奇奇怪怪な仕様については理解できている自信がないので、嘘書いているかもしれません。


<h2>配列の添え字</h2>
 
<pre class="lang:js decode:true " >var a = [&quot;hello&quot;, &quot;world&quot;, &quot;hoge&quot;];
a[0] //-&gt;&quot;hello&quot;
a[&quot;0&quot;] //-&gt;&quot;hello&quot;
</pre> 

Javascriptの配列では添え字を数値で指定しても文字で指定しても同じ値が返ってきます。
添え字の加算や文字結合などもできます。
 
<pre class="lang:js decode:true " >var a = [&quot;zero&quot;,&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;, &quot;eight&quot;, &quot;nine&quot;, &quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;]

a[1+1] //-&gt; &quot;two&quot;
a[&quot;1&quot;+&quot;1&quot;] //-&gt;&quot;eleven&quot;
</pre> 

JavaScriptではオブジェクトもある意味連想配列なので、メソッドも配列の添え字として呼び出せます。
 
<pre class="lang:js decode:true " >[&quot;hello&quot;, &quot;world&quot;, &quot;hoge&quot;].pop() //-&gt;&quot;hoge&quot;
[&quot;hello&quot;, &quot;world&quot;, &quot;hoge&quot;]['pop']() //-&gt;&quot;hoge&quot;
</pre> 

不思議ですね。


<h2>valueOfメソッド</h2>
 
<pre class="lang:js decode:true " >var a = {};
a.valueOf = function(){ alert('valueOfメッソドが呼ばれたよ！')}
a + 1 //-&gt;alert実行
</pre> 

valueOfメソッドは、オブジェクトの暗黙の型変換が行われる際によびだされます。
その特性を使って、暗黙の型変換を抑制するテクニックもあるそうです。
実用的かどうかはわかりませんが……
 
<pre class="lang:js decode:true " >var obj = {}
&quot;test&quot; + obj //-&gt; &quot;test[object Object]&quot;
var fnc = function(){}
&quot;test&quot; + fnc //-&gt; &quot;testfunction (){}&quot;

//暗黙の型変換を抑制
Object.prototype.valueOf = function () {
    throw new Error('型が違ってるよ！');
};

&quot;test&quot; + obj //-&gt; Uncaught Error: 型が違ってるよ！ 
&quot;test&quot; + fnc //-&gt; Uncaught Error: 型が違ってるよ！ 
</pre> 

評価されるたびにランダムで値を返す配列というわけのわからないものもつくってみました。
 
<pre class="lang:js decode:true " >var a = [&quot;hello&quot;, &quot;world&quot;, &quot;hoge&quot;, &quot;xxx&quot;, &quot;test&quot;, &quot;boo&quot;];
var b = {};
b.valueOf = function(){ return  Math.floor(Math.random() * 5) }
a[b+0]
//-&gt;&quot;world&quot;
a[b+0]
//-&gt;&quot;test&quot;
a[b+0]
//-&gt;&quot;xxx&quot;
a[b+0]
//-&gt;&quot;test&quot;
</pre> 

Qiitaのコメント欄で教えていただいたのですが、toStringメソッドを上書きする方がきれいに書けます。
 
<pre class="lang:js decode:true " >var a = [&quot;hello&quot;, &quot;world&quot;, &quot;hoge&quot;, &quot;xxx&quot;, &quot;test&quot;, &quot;boo&quot;];
var b = {};
b.toString = function(){return ~~(Math.random() * 5); };
a[b]
//-&gt;&quot;world&quot;
</pre> 

配列の添え字にオブジェクトを指定するとtoStringが呼ばれるみたいです。知らなかった。JavaScript奥が深い……


<h2>添え字で三項演算子</h2>

添え字の中で三項演算子も使えます。
 
<pre class="lang:js decode:true " >a = [&quot;aaa&quot;, &quot;bbb&quot; , &quot;ccc&quot;, &quot;ddd&quot;];
flag = true;
a[flag ? 'shift' : 'pop']();
//-&gt;&quot;aaa&quot;

flag = false;
a[flag ? 'shift' : 'pop']();
//-&gt;&quot;ddd&quot;
</pre> 

添え字でメソッドの呼び出しができるので、三項演算子と組み合わせて使うことができます。
使いどころがわかりませんが……

JavaScriptってホント楽しいですね!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3015</wp:post_id>
		<wp:post_date>2013-08-27 09:25:44</wp:post_date>
		<wp:post_date_gmt>2013-08-27 00:25:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3016]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%ae%e6%a5%bd%e3%81%97%e3%81%84%e3%81%a8%e3%81%93%e3%82%8d%e3%81%ae%e8%a7%a3%e8%aa%ac]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426264022;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3783;}i:1;a:1:{s:2:"id";i:3501;}i:2;a:1:{s:2:"id";i:3902;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「SVG Crowbar」表示されているインラインSVG要素を抜き出してSVGファイルとして保存するブックマークレット</title>
		<link>http://shimz.me/blog/javascript/3017</link>
		<pubDate>Wed, 28 Aug 2013 02:54:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3017</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/08/test000006.jpg" alt="test000006" width="558" height="352" class="aligncenter size-full wp-image-3018" />

<a href="http://nytimes.github.io/svg-crowbar/">SVG Crowbar</a>

HTMLドキュメントの中に埋め込まれているSVG要素を抜き出してダウンロードするブックマークレットです。
保存したsvgファイルはAdobe Illustratorや<a href="http://inkscape.org/?lang=ja">Inkscape</a>などで編集することができます。
D3.jsやJointJSで作成したグラフや地図などをダウンロードして編集したり画像に変換したりするときに便利です。

<a href="http://shimz.me/example/d3js/SVG_Crowbar/index.html">example</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3017</wp:post_id>
		<wp:post_date>2013-08-28 11:54:22</wp:post_date>
		<wp:post_date_gmt>2013-08-28 02:54:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8csvg-crowbar%e3%80%8d%e8%a1%a8%e7%a4%ba%e3%81%95%e3%82%8c%e3%81%a6%e3%81%84%e3%82%8b%e3%82%a4%e3%83%b3%e3%83%a9%e3%82%a4%e3%83%b3svg%e8%a6%81%e7%b4%a0%e3%82%92%e6%8a%9c%e3%81%8d%e5%87%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3018]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378807;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2575;}i:1;a:1:{s:2:"id";i:2331;}i:2;a:1:{s:2:"id";i:3564;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】MapBoxから取得した地図画像(ラスタタイル)をSVGのClipPathでくり抜く</title>
		<link>http://shimz.me/blog/d3-js/3019</link>
		<pubDate>Thu, 29 Aug 2013 02:09:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3019</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_template/geoTile1/"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/d3geotilsep1-e1377741398217.jpg" alt="d3geotilsep1" width="590" height="407" class="aligncenter size-full wp-image-3021" /></a>

<a href="http://shimz.me/example/d3js/geo_template/geoTile1/">example</a>

<a href="http://www.mapbox.com/">MapBox</a>から取得した地図画像をtopojsonで読み込んだ日本地図(svg:path)でくり抜きます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/08/d3geotilsep4.jpg" alt="d3geotilsep4" width="649" height="204" class="alignleft size-full wp-image-3023" />



<h2>サンプル</h2>
D3ライブラリのほかにtopojsonプラグインと、d3.geo.tileプラグインを読み込みます。
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://d3js.org/d3.geo.tile.v0.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://d3js.org/topojson.v1.min.js&quot;&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >d3.json(&quot;japan.topojson&quot;, function(topology) {
	d3main(topology);
});


function d3main(topology){

	var svg = d3.select(&quot;svg&quot;);


	var projection = d3.geo.mercator()
		.center([141.15448379999998,39.702053])
		.scale(1300);

	//パスジェネレーター
	var path = d3.geo.path().projection(projection);

	//参照用のdefs要素を追加
	 var defs = svg.append(&quot;defs&quot;);

	//defs要素内に日本地図のpathを記述
	var land = defs.append(&quot;path&quot;)
	.datum(topojson.feature(topology, topology.objects.japan))
	.attr({
		&quot;id&quot;: &quot;land&quot;,
		&quot;d&quot;: path
	});

	//日本地図のパスをclipPathとして登録
	var clipPath = defs.append(&quot;clipPath&quot;)
	.attr(&quot;id&quot;, &quot;clip&quot;)
	.append(&quot;use&quot;)
	.attr(&quot;xlink:href&quot;, &quot;#land&quot;);
	
	
	//タイル座標生成関数
	 var tile  = d3.geo.tile()
	.scale(projection.scale() * 2 * Math.PI)
	.translate(projection([0, 0]))
	.zoomDelta((window.devicePixelRatio || 1) - .5);

	//タイル座標データ生成
	var tiles = tile();


	//ラスタタイルを追加するグーループを生成
	var img  =    svg.append(&quot;g&quot;)
	.attr({
		&quot;clip-path&quot;: &quot;url(#clip)&quot;, //クリップパスを指定
		&quot;transform&quot;: &quot;translate(&quot;+[0, 0]+&quot;)&quot;
	});

	//ラスタタイルをimage要素として追加
	img.selectAll(&quot;image&quot;)
	.data(tiles) //タイル座標データを指定
	.enter()
	.append(&quot;image&quot;)
	.attr({
		&quot;xlink:href&quot;: function(d){
			return &quot;http://&quot; + [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;][Math.random() * 4 | 0] + &quot;.tiles.mapbox.com/v3/mapbox.natural-earth-2/&quot; + d[2] + &quot;/&quot; + d[0] + &quot;/&quot; + d[1] + &quot;.png&quot;; 
		},
		&quot;width&quot;: Math.round(tiles.scale),
		&quot;height&quot;: Math.round(tiles.scale),
		&quot;x&quot;: function(d) { return Math.round((d[0] + tiles.translate[0]) * tiles.scale); },
		&quot;y&quot;: function(d) { return Math.round((d[1] + tiles.translate[1]) * tiles.scale); }
	});
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3019</wp:post_id>
		<wp:post_date>2013-08-29 11:09:44</wp:post_date>
		<wp:post_date_gmt>2013-08-29 02:09:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3019</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3020]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91mapbox%e3%81%8b%e3%82%89%e5%8f%96%e5%be%97%e3%81%97%e3%81%9f%e5%9c%b0%e5%9b%b3%e7%94%bb%e5%83%8f%e3%83%a9%e3%82%b9%e3%82%bf%e3%82%bf%e3%82%a4%e3%83%ab%e3%82%92svg%e3%81%aeclip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427316831;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:2881;}i:2;a:1:{s:2:"id";i:3029;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】ベクター地図のパン／ズーム＆移動</title>
		<link>http://shimz.me/blog/d3-js/3025</link>
		<pubDate>Fri, 30 Aug 2013 01:30:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3025</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_template/zoom/"><img src="http://shimz.me/blog/wp-content/uploads/2013/08/mapzoom130830.jpg" alt="mapzoom130830" width="590" height="600" class="alignleft size-full wp-image-3028" /></a>

<a href="http://shimz.me/example/d3js/geo_template/zoom/">example</a>

D3.jsで表示した地図のパン／ズーム＆移動サンプルです。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >d3.json(&quot;japan.topojson&quot;, function(json) {
    d3main(json);
});


function d3main(json){
    var scale = 1500;
    var geodata = topojson.object(json, json.objects.japan).geometries;

    projection = d3.geo
        .mercator()		//投影法の指定
        .scale(scale)	//スケール（ズーム）の指定
        .translate([300,350])
        .center([139.0032936, 36.3219088]); //中心の座標を指定

    var path = d3.geo.path().projection(projection);　//投影

    var svg = d3.select(&quot;svg&quot;);

    //地図を描画
    var map =  svg.append(&quot;svg:g&quot;)
        .selectAll(&quot;path&quot;)
        .data(geodata)
        .enter()
        .append(&quot;svg:path&quot;)
        .attr({
            &quot;d&quot;: D(path),
            &quot;fill&quot;: &quot;green&quot;,
            &quot;fill-opacity&quot;: 0.5,
            &quot;stroke&quot;: &quot;black&quot;
        });
        
    //ズームイベント設定    
    var zoom = d3.behavior.zoom().on('zoom', function(){
       projection.scale(scale * d3.event.scale);       
       map.attr('d', path)       
    });
    svg.call(zoom);

    //ドラッグイベント設定
    drag = d3.behavior.drag().on('drag', function(){
       var tl = projection.translate();
       projection.translate([tl[0] + d3.event.dx, tl[1] + d3.event.dy]);
       map.attr('d', path);
    });
    svg.call(drag);
        
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3025</wp:post_id>
		<wp:post_date>2013-08-30 10:30:57</wp:post_date>
		<wp:post_date_gmt>2013-08-30 01:30:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3025</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3028]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e3%81%ae%e3%83%91%e3%83%b3%ef%bc%8f%e3%82%ba%e3%83%bc%e3%83%a0%ef%bc%86%e7%a7%bb%e5%8b%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427404697;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3060;}i:1;a:1:{s:2:"id";i:2817;}i:2;a:1:{s:2:"id";i:2881;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】ラスター地図のパン／ズーム＆移動</title>
		<link>http://shimz.me/blog/d3-js/3029</link>
		<pubDate>Mon, 02 Sep 2013 00:12:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3029</guid>
		<description></description>
		<content:encoded><![CDATA[<strong><a href="http://www.openstreetmap.org/">OpenStreetMap</a></strong>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/geo_template/geoTile_OSM/"></iframe>

TMS(Tile Map Service)から地図画像(ラスター)を取得し、SVGのimage要素として並べます。
マウスホイールでパン／ズーム、ドラッグで移動します。


<h2>サンプル</h2>
D3.jsと、d3.geo.tileプラグインを使用します。
 
<pre class="lang:xhtml decode:true " >
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://d3js.org/d3.geo.tile.v0.min.js&quot;&gt;&lt;/script&gt;
</pre> 

 
<pre class="lang:js mark:49-51 decode:true " >var width = Math.max(960, window.innerWidth);
var height = Math.max(500, window.innerHeight);

//タイル座標取得ジェネレイター
var tile = d3.geo.tile().size([width, height]);

//ズームレベルの範囲
var minZoomLevel = 14;
var maxZoomLevel = 24;

//投影法の設定
var projection = d3.geo.mercator()
    .scale((1 &lt;&lt; minZoomLevel) / 2 / Math.PI) // 初期scale 2607.5945...
    .translate([width / 2, height / 2]);

 //初期表示座標
var center = projection([139.3555791,34.7500396]);


//svg要素の取得
var svg = d3.select(&quot;svg&quot;)
    .attr({
	&quot;width&quot;: width,
	&quot;height&quot;: height
    });

//地図画像用グループ
var raster = svg.append(&quot;g&quot;);

//zoom時に呼ばれるコールバック関数
var zoomed = function() {
    //タイル位置情報生成
    var tiles = tile
	.scale(zoom.scale())
	.translate(zoom.translate())
	(); // tile()、関数実行のため
     
    //タイル位置情報を束縛   
    var image = raster
	.attr(&quot;transform&quot;, &quot;scale(&quot; + tiles.scale + &quot;)translate(&quot; + tiles.translate + &quot;)&quot;)
	.selectAll(&quot;image&quot;).data(tiles, function(d) { return d; });

    //必要なくなった地図画像を削除
    image.exit().remove();
    
    //新たな地図画像を追加
    image.enter().append(&quot;image&quot;)
	.attr(&quot;xlink:href&quot;, function(d) {
	    return &quot;http://&quot; + [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;][Math.random() * 3 | 0] +
	    &quot;.tile.openstreetmap.org/&quot; +
	    d[2] + &quot;/&quot; + d[0] + &quot;/&quot; + d[1] + &quot;.png&quot;;
	})
	.attr({
	    &quot;width&quot;: 1,
	    &quot;height&quot;: 1,
	    &quot;x&quot;: function(d) { return d[0]; },
	    &quot;y&quot;: function(d) { return d[1]; }
	})

}

//ズームビヘイビア生成
var zoom = d3.behavior.zoom()
    .scale(projection.scale() * 2 * Math.PI)
    .scaleExtent([1 &lt;&lt; minZoomLevel, 1 &lt;&lt; maxZoomLevel])
    .translate([width - center[0], height - center[1]])
    .on(&quot;zoom&quot;, zoomed);

    //projectionを一応初期する
    projection
    .scale(1 / 2 / Math.PI)
    .translate([0, 0]);

    //ズームビヘイビアをsvg要素に束縛
    svg.call(zoom);
    zoomed(); //初回だけ実行</pre> 

ハイライトしている50行付近がTMSの画像を読み込んでいる部分です。ここを変更することで他のTMSから地図画像を取得することもできます。

<hr></hr>

<strong><a href="http://www.mapquest.com/">MapQuest</a></strong>
 <pre class="start-line:49 lang:js decode:true " >return &quot;http://otile1.mqcdn.com/tiles/1.0.0/osm/&quot;+
	d[2] + &quot;/&quot; + d[0] + &quot;/&quot; + d[1] + &quot;.png&quot;;
</pre> 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/geo_template/geoTile_MapQuest/"></iframe>


<strong><a href="http://www.mapbox.com/">Mapbox</a></strong>
 <pre class="start-line:49 lang:js decode:true " >return &quot;http://&quot; + [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;][Math.random() * 4 | 0] +
	&quot;.tiles.mapbox.com/v3/examples.map-vyofok3q/&quot; +
	d[2] + &quot;/&quot; + d[0] + &quot;/&quot; + d[1] + &quot;.png&quot;;
</pre> 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/geo_template/geoTile_Mapbox/"></iframe>


<strong><a href="http://maps.stamen.com/#watercolor/12/37.7706/-122.3782">stamen</a></strong>
<pre class="start-line:49 lang:js decode:true " >return &quot;http://tile.stamen.com/toner/&quot;+
	d[2] + &quot;/&quot; + d[0] + &quot;/&quot; + d[1] + &quot;.png&quot;;
</pre> 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/geo_template/geoTile_stamen/"></iframe>


<strong><a href="http://cloudmade.com/">CloudMade</a></strong>
<pre class="start-line:49 lang:js decode:true " >return &quot;http://&quot;+ [&quot;a.&quot;, &quot;b.&quot;, &quot;c.&quot;][Math.random() * 3 | 0]+&quot;tile.cloudmade.com&quot;
	+ &quot;/1a1b06b230af4efdbb989ea99e9841af&quot; // http://cloudmade.com/register
	+ &quot;/999/256/&quot;+d[2]+&quot;/&quot;+d[0]+&quot;/&quot;+d[1]+&quot;.png&quot;;
</pre> 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/geo_template/geoTile_CloudMade/"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3029</wp:post_id>
		<wp:post_date>2013-09-02 09:12:34</wp:post_date>
		<wp:post_date_gmt>2013-09-02 00:12:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3029</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3032]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e3%83%a9%e3%82%b9%e3%82%bf%e3%83%bc%e5%9c%b0%e5%9b%b3%e3%81%ae%e3%83%91%e3%83%b3%ef%bc%8f%e3%82%ba%e3%83%bc%e3%83%a0%ef%bc%86%e7%a7%bb%e5%8b%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427396517;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3134;}i:1;a:1:{s:2:"id";i:3019;}i:2;a:1:{s:2:"id";i:3489;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsの勉強会を行いました。</title>
		<link>http://shimz.me/blog/d3-js/3035</link>
		<pubDate>Wed, 04 Sep 2013 02:42:23 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3035</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/06/d3-e1352947701212.jpg" alt="d3" width="1352" height="645" class="aligncenter size-full wp-image-890" />

<a href="http://shimz.me/blog/d3-js/2990">D3.js勉強会＠群馬</a>、無事開催いたしました。

何しろ初めて勉強会というものを主催するので、「あれが動かなかったらどうしよう！　こんなことが起きたらどうしよう！」といろいろ気を回し、何かハプニングが起きたときに対応できるようにとかなり時間的な余裕が持てるように構成してみたわけですが、実際に蓋をあけてみたら特に大きなハプニング等は起きず、結果時間に対して内容のボリュームが全然足らないという…… orz

もうすこしネタを用意しておくべきでした、とても反省しております。

それでも一応は、D3.jsというライブラリの特性というか、非常に基本的な部分は多少伝わったのではないかと思ってはおります。
そして、D3でグラフを作るのって結構大変だというところも（汗）

D3を使ってグラフを作るのは、描画するプログラムを一つ一つ自分の手で積み上げていくような作業が必要になるわけで、そこが楽しいと同時に大変なところなのですが、いくつかプロパティを設定してデータセットを食わせてあげれば、綺麗なグラフがバン！と表示されるようなチャートライブラリでは味わえない、ハンドメイドな手触り感といった面白さが少しでも伝わったら幸いです。

今回、個人的なテーマとして「<a href="http://codepen.io/">CodePen</a>のプロフェッサーモードを使ってみる」というのがあったのですが、こちらは問題なく動作し「かなり使える！」という確信が得られました。

リモートでチャットしながらのライブコーティングやペアプログラミングなども行えそうなので、今後活用していきたいなと思っています。

勉強会にご参加いただいた皆様、ありがとございました。



<h2>補足資料</h2>

今回の勉強会でD3の説明のために作成した棒グラフのコードです。
CodePenのアカウント(Githubアカウント)があればForkして自由に編集できます。
勉強会内では説明しきれなかったAxis(目盛り)をcssで装飾するコードを書き足しています。
<p data-height="300" data-theme-id="467" data-slug-hash="Kzlmo" data-user="shimizu" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/shimizu/pen/Kzlmo'>D3 Basick Barchart</a> by shimizu masayuki (<a href='http://codepen.io/shimizu'>@shimizu</a>) on <a href='http://codepen.io'>CodePen</a></p>
<script async src="http://codepen.io/assets/embed/ei.js"></script>


以下は、今回の勉強会内で説明したD3のセレクション機能やスケール機能について、過去に書いたブログ記事です。

<a href="http://shimz.me/blog/d3-js/862">データビジュアライゼーション「d3.js」</a>
ウチのブログで始めて書いたD3の紹介記事です。

<a href="http://shimz.me/blog/d3-js/2619">超基本！ コンソールでselect,data,enterメソッドを理解する。</a>
D3の独特なセレクション機能についての説明です。今回の勉強会では説明しきれなかった部分の補足になります。

<a href="http://shimz.me/blog/d3-js/2020">値の正規化(d3.scale)</a>
こちらも今回の勉強会ではほんのさわり程度にしか説明できなかったD3のスケール機能についての説明記事です。

<a href="http://shimz.me/blog/node-js/2949">【node.js+D3.js】サーバーサイドD3</a>
勉強会の中で話題に上がったサーバーサイドでのD3.jsの使用方法です。


<a href="http://jsdo.it/_shimizu">http://jsdo.it/_shimizu</a>
<a href="http://codepen.io/shimizu">http://codepen.io/shimizu</a>
codepenを使い始めたのは最近で、以前はjsdo.itの方にD3.jsのサンプル含めいろいろ書き散らかしていました。
jsdo.itの「Portfloio」や「Codes」の中に、ブログの方には載せていないD3を使ったサンプルなどもあるので、よかったら見てみてください。



<h2>CodePen関連</h2>
<a href="http://shimz.me/blog/web/2952">モダンなWeb開発環境としてのCodePen</a>
今回、勉強会で使用したサービスCodePenについての記事です。

<a href="http://shimz.me/blog/web/2860">プログラミング学習の新しいかたち？！チャットをしながらライブコーディングや共同プログラミングができるCodePen Pro</a>
CodePenのリモート環境でライブコーディングやコラボレーションなどが行える機能につての紹介記事です。



<h2>その他、関連記事</h2>
<a href="http://shimz.me/blog/d3-js/2977">D3.jsはなぜ人気があるのか？　そして、なぜ難しいのか？ </a>
D3の特徴について、もうすこし詳しく書いた記事です。

<a href="http://shimz.me/blog/other/2918">データビジュアライゼーションとインフォグラフィックの違い</a>
勉強会内でデータビジュアライゼーションについてプレゼン的なこと行いましたが、その内容に関連した記事です。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3035</wp:post_id>
		<wp:post_date>2013-09-04 11:42:23</wp:post_date>
		<wp:post_date_gmt>2013-09-04 02:42:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3035</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e3%81%ae%e5%8b%89%e5%bc%b7%e4%bc%9a%e3%82%92%e8%a1%8c%e3%81%84%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426825149;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2969;}i:1;a:1:{s:2:"id";i:3720;}i:2;a:1:{s:2:"id";i:3688;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>高崎市のビリオンダラーグラムつくってみた</title>
		<link>http://shimz.me/blog/d3-js/3037</link>
		<pubDate>Thu, 05 Sep 2013 05:59:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3037</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/takasaki/budget/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/09/takasakibudget25.jpg" alt="takasakibudget25" width="590" height="265" class="aligncenter size-full wp-image-3038" /></a>

<a href="http://shimz.me/datavis/gunma/takasaki/budget/index.html">example</a>

<blockquote>
例を見てみましょう。これは「ビリオンダラーグラム」です。この画像は、メディアの伝える何億ドルがどうのというニュースへの苛立ちから生まれました。そういう数字は文脈なしには意味がありません。パイプラインに5千憶ドル。戦争に2百億ドル。ピンときません。分かるための唯一の方法は、可視化と相対化です。それで私はたくさんのデータを様々な情報源から集め、額に応じて四角の大きさを変えて描いてみました。
<div style="text-align:right"><a href="http://www.aoky.net/articles/david_mccandless/the_beauty_of_data_visualization.htm">データビジュアライゼーションの美</a></div>
</blockquote>

習作として高崎市のビリオンダラーグラムをつくってみました。
データは <a href="http://www.city.takasaki.gunma.jp/soshiki/zaisei/yosan/yosann25/25tousyo.htm">高崎市 平成25年度 当初予算資料</a> 発言要旨(PDF) より抜粋。

以前もツリーマップを作っていて思ったのですが、ラベルの表示が難しいですね。特にラベル名が長いときの見せ方が。
今回はrectのサイズ内に収まるラベル名だけを表示し、クリックしてズームした際にだけすべてのラベルを表示するようにしました。

見せ方については、まだまだ工夫が必要なようです。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3037</wp:post_id>
		<wp:post_date>2013-09-05 14:59:49</wp:post_date>
		<wp:post_date_gmt>2013-09-05 05:59:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%ab%98%e5%b4%8e%e5%b8%82%e3%81%ae%e3%83%93%e3%83%aa%e3%82%aa%e3%83%b3%e3%83%80%e3%83%a9%e3%83%bc%e3%82%b0%e3%83%a9%e3%83%a0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3038]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427263144;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3760;}i:1;a:1:{s:2:"id";i:3406;}i:2;a:1:{s:2:"id";i:3283;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript忍者を買った</title>
		<link>http://shimz.me/blog/javascript/3039</link>
		<pubDate>Mon, 09 Sep 2013 00:57:46 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3039</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>誰かが、こう言っているのを、きっと聞いたことがあるだろう。「JavaScriptなんて大嫌いだ」と。賭けてもよいが、おそらく十のうち九は（もっと多いかもしれない）、こういう理由だ。
その人は、JavaScriptを、自分が慣れ親しんでいる、もう一つの言語と同じように使おうとしていて、JavaScriptが、その言語と<strong>違う</strong>という事実に、イラついているだけなのだ。
<div style="text-align:right">JavaScript Ninjaの極意</div>
</blockquote>


<a href="http://www.amazon.co.jp/gp/product/4798128457/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798128457&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4798128457&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4798128457" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

<a href="http://www.amazon.co.jp/gp/product/4798128457/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4798128457&linkCode=as2&tag=toriaezu04b-22">JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4798128457" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

Kindle版が発売されていたので、早速購入しました。
jQueryの作者ジョン・レシグによるJavaScript参考書です。
暇さえあれば、Kindleを開いて読み漁っているわけなんですが、非常に面白く、また分かり易い参考書となっています。
JavaScriptをある程度使いこなすためには、関数型プログラミング(本書の中では関数的と呼ばれている）の手法を活用する必要があるわけですが、「Functional Programming in JavaScript」の入門書として非常に優れている本だと思いました。

個人的には「<a href="http://www.amazon.co.jp/gp/product/4873113911/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4873113911&linkCode=as2&tag=toriaezu04b-22">JavaScript: The Good Parts ―「良いパーツ」によるベストプラクティス</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4873113911" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」とかより、先に読んだ方がその後の理解が早くなるはず。

JavaScriptを触ることがあるプログラマーなら、とりあえず読んでおくべき本かと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3039</wp:post_id>
		<wp:post_date>2013-09-09 09:57:46</wp:post_date>
		<wp:post_date_gmt>2013-09-09 00:57:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e5%bf%8d%e8%80%85%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3040]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427072985;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3045;}i:1;a:1:{s:2:"id";i:3156;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript Ninjaは全てのフロントエンドエンジニアが一度は読んでおくべき本</title>
		<link>http://shimz.me/blog/javascript/3045</link>
		<pubDate>Wed, 11 Sep 2013 04:46:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3045</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.amazon.co.jp/gp/product/4798128457/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798128457&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4798128457&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4798128457" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

<a href="http://www.amazon.co.jp/gp/product/4798128457/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4798128457&linkCode=as2&tag=toriaezu04b-22">JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4798128457" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

引き続き、「JavaScript Ninjaの極意」を読んでおります。

本書にはジョン・レシグがjQueryを作成してく過程で得たであろう各ブラウザの差異や不可思議な仕様についての情報がふんだんに掲載されています。
上忍エンジニアにとっては知っていて当たり前のことなのかもしれませんが、普段jQueryなどブラウザ間の差を埋めるライブラリに頼り切りだった自分には目から鱗な情報ばかりでした。

例えばこんなの。



<blockquote>「フォームに含まれていて、そのform要素から参照されるinput要素」のそれぞれに対応するプロパティを、ブラウザが、そのform要素に追加する。</blockquote>


通常、javaScriptでフォームを送信(submit)とする場合以下のようなコードを書きます。

 
<pre class="lang:js decode:true " >document.getElementByid('form').submit();
</pre> 

しかし、form内にあるinput要素などのid属性やname属性に「submit」という名前を使っていると上記のコードはエラーを起こします。
なぜなら、ブラウザがinput要素のプロパティをform要素に追加するためにsubmitメソッドが上書きされてしまうからだ！

……なにそれ。

以下、サンプル。
 
<pre class="lang:xhtml decode:true " >&lt;form id=&quot;form1&quot;&gt;
    &lt;input type=&quot;text&quot;&gt;&lt;/input&gt;
&lt;/form&gt;

&lt;form id=&quot;form2&quot;&gt;
    &lt;input id=&quot;submit&quot; type=&quot;text&quot;&gt;&lt;/input&gt;
&lt;/form&gt;
</pre> 
 
<pre class="lang:js decode:true " >document.getElementById('form1').submit.toString();
//-&gt; 'function submit() { [native code] }'
document.getElementById('form2').submit.toString()
//-&gt; &quot;[object HTMLInputElement]&quot;  //ホントにsubmitメソッドが上書きされている orz
</pre> 

本当だ……input要素のid属性に「submit」を指定したことによって、form2のsubmitメソッドがinput要素への参照で上書きされてしまいました。
最新のChromeで確認しても同様だったので、この挙動は正式な仕様なんでしょうか？

これは知らないと嵌りそうです。

JavaScript Ninjaにはこんな情報がてんこ盛りです。

というか本書を読んでいると、自分自身でクロスブラウザ開発を行おうという心がズタズタに折れていきますｗ
（特に11章以降は「こんなん、やってられっか」と投げ出したくなるほど、ブラウザ間の差異や挙動についての記述が続きます)

クロスブラウザ対策に必要なのは、まさに忍耐なのだなーと。


ブラウザ間の差異やブラウザが行うおかしな挙動について、ここまでまとまった情報が記載されている書籍はなかなか無いとおもいますので、フロントエンドの開発に携わる方全てにお勧めです。

一通り目を通しておくだけで、フロントエンドの開発時にハマりこんでしまうことが少なくなるんじゃないでしょうか。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3045</wp:post_id>
		<wp:post_date>2013-09-11 13:46:52</wp:post_date>
		<wp:post_date_gmt>2013-09-11 04:46:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3045</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3040]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript-ninja%e3%81%af%e5%85%a8%e3%81%a6%e3%81%ae%e3%83%95%e3%83%ad%e3%83%b3%e3%83%88%e3%82%a8%e3%83%b3%e3%83%89%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%8c%e4%b8%80%e5%ba%a6%e3%81%af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427314905;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3039;}i:1;a:1:{s:2:"id";i:1443;}i:2;a:1:{s:2:"id";i:3564;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptでヘッドトラッキング</title>
		<link>http://shimz.me/blog/javascript/3046</link>
		<pubDate>Mon, 16 Sep 2013 03:36:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3046</guid>
		<description></description>
		<content:encoded><![CDATA[ヘッドトラッキングで地球儀をぐるぐる回すよ！
<a href="http://shimz.me/labo/HeadTracking/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3glob.jpg" alt="d3glob" width="564" height="503" class="aligncenter size-full wp-image-2634" /></a>

<a href="http://shimz.me/labo/HeadTracking/01/">example</a>

<a href="http://gunma-web.org/">Gunma.web #14</a>で発表してきた内容の一つ、Canvasを使ったヘッドトラッキングライブラリを使って作成したデモです。
カメラに対する頭(顔)の位置で、地球儀の回転する方向(X軸)が変わります。
当然のことながらWebカメラがないPCでは動きません。また、Chromeでしか動作確認していません。
上記ページを開くと「Webカメラの使用」の許可／拒否を利かれるので、利用の際は許可を選択してください。
全てクライアントサイドで処理を行うため、サーバー側にデータを送ることはありませんが、気になる人はWebカメラ使用の許可を出す前にソースを調べてください。


<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>

上記ライブラリは、Webカメラからの入力されたデータを解析して顔の位置を検出します。ちなみに、正面でしか検出できません。
また、検出後のトラッキングはエッジと肌の色を元に追跡するようなので、肌の色と背景の色に差があまりないと見失うことが多いです。
また、部屋が暗すぎたりしても駄目。
クライアント端末のスペックによっては、顔座標を検出するまでに結構時間がかかります。
使いどころが難しいライブラリですが、簡単にヘッドトラッキングを実装できるので、試してみると面白いかもしれません。

地球儀自体はD3.jsを使って描画しています。

<a href="http://shimz.me/blog/d3-js/2631">【D3.js】 SVGで地球儀を描く</a>


<h2>サンプル</h2>
headtrackr.jsを読み込みます。
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;../headtrackr.min.js&quot;&gt;&lt;/script&gt;
</pre> 

input用・output用のキャンバスと、webカメラからデータを読み込むためのvideoタグを用意します。
<pre class="lang:xhtml decode:true " >&lt;canvas id='ic' width=&quot;160&quot; height=&quot;120&quot; style=&quot;display:none&quot; &gt;&lt;/canvas&gt;
&lt;video id=&quot;iv&quot; autoplay loop&gt;&lt;/video&gt;
&lt;canvas id='oc' width=&quot;160&quot; height=&quot;120&quot;&gt;&lt;/canvas&gt;
</pre> 


ヘッドトラッキング処理は以下。
 
<pre class="lang:js decode:true " >var svg = d3.select('svg');

var rotateX = 0;

//海　実はただのcircle
svg.append('circle')
    .attr({
	fill:&quot;blue&quot;,
	cx:480,
	cy:250,
	r:245
    });

var	projection = d3.geo.orthographic() //投影法を指定
	.scale(245) //大きさ
	.rotate([rotateX,0,0]) //x,y,z回転
	.clipAngle(90); //表示する角度 180度を指定すると裏側の大陸まで表示される

var 	path = d3.geo.path().projection(projection);


d3.json(&quot;world.topojson&quot;, function(json){ //地図情報の読み込み

    var data = topojson.object(json, json.objects.conuntries); //topojson変換

    svg.append(&quot;svg:g&quot;).attr({&quot;class&quot;:&quot;earth&quot;}); //g要素追加(グループ化)
   
   //地図表示
    map = svg
	.selectAll(&quot;path&quot;)
	.data(data.geometries) 
	.enter()
	.append(&quot;svg:path&quot;)
	.style(&quot;background-color&quot;, &quot;blue&quot;)
	.attr({
	    &quot;class&quot;: &quot;path tip&quot;,
	    &quot;d&quot;:path,
	    &quot;fill-opacity&quot;:1,
	    &quot;fill&quot;:&quot;green&quot;,
	    &quot;stroke&quot;:&quot;#222&quot;,
	    'data-tip':function(d){ return d.properties.sovereignt }
	})
	.on(&quot;mouseover&quot;, function(){
	    d3.select(this).attr(&quot;fill&quot;, &quot;red&quot;);
	})
	.on(&quot;mouseout&quot;, function(){
	    d3.select(this).transition().duration(500).attr(&quot;fill&quot;, &quot;green&quot;);
	});
       
	map.append('title') //ツールチップ追加
	    .text(function(d){ return d.properties.sovereignt });
	
});



/*
 * ここから下がheadtrackr関連の処理
 */
var vi = document.getElementById('iv');
var ci = document.getElementById('ic');
var co = document.getElementById('oc');

// output用キャンバスの位置設定
co.style.position = &quot;absolute&quot;;
co.style.top = '0px';
co.style.zIndex = '999';
co.style.display = 'block';

//コンテクスト取得
var ctx = co.getContext('2d');
ctx.strokeStyle = &quot;red&quot;;

var x = 0;
var y = 0;
var w = 0;
var h = 0;

// headtrackr読み込み
var ht = new headtrackr.Tracker({ui : false});
console.log(ht.init(vi, ci));
//　ヘッドトラッキング開始
ht.start();

//ヘッドトラッキング開始時のイベント
document.addEventListener('headtrackrStatus', 
    function (event) {
	switch (event.status) {
	    case 'no camera': alert('WEBカメラが見つかりません');break;
	    case 'no getUserMedia': alert('getUserMediaがサポートされていないブラウザです');break;
	}    
	d3.select('#HSstatus').text(&quot;status:&quot; + event.status);
    }
);
    
//　フェイストラッキングイベント
document.addEventListener('facetrackingEvent', 
    function (event) {
	d3.select('#FTEheight').text(&quot;height:&quot; + event.height);
	d3.select('#FTEwidth').text(&quot;width:&quot; + event.width);
	d3.select('#FTEangle').text(&quot;angle:&quot; + event.angle);
	d3.select('#FTEx').text(&quot;x:&quot; + event.x);
	d3.select('#FTEy').text(&quot;y:&quot; + event.y);
	d3.select('#FTEy').text(&quot;y:&quot; + event.y);
	d3.select('#FTEconfidence').text(&quot;confidence:&quot; + event.confidence);
	d3.select('#FTEdetection').text(&quot;detection:&quot; + event.detection);
	d3.select('#FTEtime').text(&quot;time:&quot; + event.time);

	//前画面をクリア
	ctx.clearRect(0, 0, 160, 120);

	w = event.width;
	h = event.height;
	x = event.x - w/2;
	y = event.y - h/2;

	//顔の周りに四角を書き出す
	ctx.strokeRect(x, y, w, h);
    }    
);

//　ヘッドトラッキングイベント
document.addEventListener('headtrackingEvent', 
    function (event) {
	d3.select('#HTEx').text(&quot;x:&quot; + event.x);
	d3.select('#HTEy').text(&quot;y:&quot; + event.y);
	d3.select('#HTEz').text(&quot;z:&quot; + event.z);
        
	//地球儀回す処理 
	rotateX = rotateX + ~~event.x * -1;   
	projection.rotate([rotateX, 0, 0]);  //rotateの値を増やして
	path = d3.geo.path().projection(projection);    //path関数をアップデート
	map.attr(&quot;d&quot;, path); //paht関数をmapオブジェクトに適用
      
    }
);</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3046</wp:post_id>
		<wp:post_date>2013-09-16 12:36:09</wp:post_date>
		<wp:post_date_gmt>2013-09-16 03:36:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3046</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2634]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%a7%e3%83%98%e3%83%83%e3%83%89%e3%83%88%e3%83%a9%e3%83%83%e3%82%ad%e3%83%b3%e3%82%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427317408;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3601;}i:1;a:1:{s:2:"id";i:3058;}i:2;a:1:{s:2:"id";i:2701;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[群馬、勉強会：Gunma.web（ web勉強会 in 群馬 ）HTML,Javascript,Ruby,Perl,PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://gunma-web.org/?p=778</wp:comment_author_url>
			<wp:comment_author_IP>49.212.57.210</wp:comment_author_IP>
			<wp:comment_date>2013-09-16 14:37:13</wp:comment_date>
			<wp:comment_date_gmt>2013-09-16 05:37:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 「canvasで遊ぼう！」 @_shimizu さん (5分) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379309833.8128769397735595703125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379388700.7564299106597900390625;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379377547.686173915863037109375;s:7:"message";s:58:"blogadmin がコメントの状態を unapproved に変更";s:5:"event";s:17:"status-unapproved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】データを絞り込むユーザインタフェースとしても使える、パラレルコーディネート図を作成する</title>
		<link>http://shimz.me/blog/d3-js/3053</link>
		<pubDate>Thu, 19 Sep 2013 00:43:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3053</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/parallel_coordinates/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/09/Parallel_Coordinates1.jpg" alt="Parallel_Coordinates1" width="590" height="224" class="aligncenter size-full wp-image-3054" /></a>

<a href="http://shimz.me/example/d3js/parallel_coordinates/01/">example</a>

昨日の「<a href="http://atnd.org/events/43356">オンライン学習部 #0</a>」で作成したグラフです。
下記<a href="http://enjalot.github.io/dot-append/">dot append</a>のチュートリアルビデオをみて作りました。

<iframe src="//player.vimeo.com/video/55190008" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href="http://vimeo.com/55190008">[dot append: 11] parallel coordinates</a> from <a href="http://vimeo.com/user4640702">Ian Johnson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

ファンキーな音楽とともにイケメンなお兄さんがライブコーディングしながらD3.jsのプログラミングを教えてくれます。

パラレルコーディネートは、項目数(次元)の多いデータの概観把握に適したグラフですが、D3.jsを使ってインタラクティブに操作できるグラフとして作成することで、単にデータを可視化するだけでなく、多次元データの絞り込みが行えるユーザインタフェースとして利用できるところが面白いですね。
今回作成した図では、下記のように「年齢は20代で身長は180cm以上でぇ、年収が800万以上の人♪」みたいなちょっとイラっとする(?)絞り込みができるようになってますｗ

<img src="http://shimz.me/blog/wp-content/uploads/2013/09/Parallel_Coordinates2.jpg" alt="Parallel_Coordinates2" width="590" height="222" class="alignnone size-full wp-image-3055" />

時間に余裕があったので、パラレルコーディネート上での絞り込みに連動して、実際のデータを表示するデータテーブルも作成してみました。
いろいろと応用の利きそうす。


<h2>サンプル</h2>
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;../divgrid.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;../d3.parcoords.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../d3.parcoords.css&quot;&gt;
&lt;div id=&quot;example&quot; class=&quot;parcoords&quot; style=&quot;width:360px;height:150px&quot;&gt;&lt;/div&gt;
&lt;br&gt;
&lt;div id=&quot;grid&quot;&gt;&lt;/div&gt;
</pre> 

d3以外に、<a href="https://gist.github.com/syntagmatic/3687826">d3.divgrid.js</a>プラグインと<a href="http://syntagmatic.github.io/parallel-coordinates/">d3.parcoords.js</a>プラグインを読み込みます。
また、パラレルコーディネート図を表示するdiv#example要素と、データテーブルを表示するdiv#grid要素を設置しています。
 
<pre class="lang:js decode:true " >//ランダムデータセット生成
var dataSet = d3.range(180).map(function() {
    return {
	  '年齢': 19 + ~~(Math.random() * 30),
	  '家族':  ~~(Math.random() * 2) + ~~(Math.random() * 2)+ ~~(Math.random() * 3),
	  '身長':160 +  ~~(Math.random() * 30),
	  '体重':40 + ~~(Math.random() * 50),
	  'BMI(％)': 7 + ~~(Math.random() * 10) + ~~(Math.random() * 10)+ ~~(Math.random() * 10)+ ~~(Math.random() * 10),
	  '年収(万円)':300 +  ~~(Math.random() * 600)
      };
});


//パラレルコーディネート用ステージ
var example = d3.select('#example')
    .style({
	width:1200,
	height:400
    });

// カラースケール
var blue_to_brown = d3.scale.linear()
    .domain([300, 799,800, 900])
    .range(['blue', 'blue', 'red', 'red'])
    .interpolate(d3.interpolateLab);

//パラレルコーディネート生成
var pc = d3.parcoords()('#example')
    .data(dataSet)
    .color(function(d) { return blue_to_brown(d['年収(万円)']); })
    .alpha(0.4)
    .composite('lighter')
    .render()
    .ticks(3) 
    .createAxes()
    .brushable(); //絞り込み可能にする

//データテーブル作成
var grid = d3.divgrid();
d3.select('#grid')
  .datum(dataSet.slice(0,10)) //表示件数の指定
  .call(grid)
  .selectAll('.row')
  .on({
      'mouseover': function(d) { pc.highlight([d]) },
      'mouseout': pc.unhighlight
  });
    
// データテーブルの更新
pc.on('brush', function(d) {
  d3.select('#grid')
    .datum(d.slice(0,10))
    .call(grid)
    .selectAll('.row')
    .on({
	'mouseover': function(d) { pc.highlight([d]) },
	'mouseout': pc.unhighlight
    });
});    
</pre> 


d3.parcoords.jsで作成した図は、目盛り以外のlineをcanvas上に描画する仕様になっています。
canvasを使うことによってデータ数が多くなっても比較的重くならないように作られてます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3053</wp:post_id>
		<wp:post_date>2013-09-19 09:43:09</wp:post_date>
		<wp:post_date_gmt>2013-09-19 00:43:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3053</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3054]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e7%b5%9e%e3%82%8a%e8%be%bc%e3%82%80%e3%83%a6%e3%83%bc%e3%82%b6%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%95%e3%82%a7%e3%83%bc%e3%82%b9%e3%81%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427355042;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3073;}i:1;a:1:{s:2:"id";i:2977;}i:2;a:1:{s:2:"id";i:862;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gunma.web #14で発表したスライド「canvasで遊ぼう！」</title>
		<link>http://shimz.me/blog/javascript/3058</link>
		<pubDate>Mon, 23 Sep 2013 02:45:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3058</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/slide/canvas/"><img src="http://shimz.me/blog/wp-content/uploads/2013/09/gunmaweb14.jpg" alt="gunmaweb14" width="590" height="308" class="aligncenter size-full wp-image-3059" /></a>

遅くなりましたが<a href="http://gunma-web.org/">Gunma.web #14</a>で発表したスライドです。

<a href="http://shimz.me/slide/canvas/">「canvasで遊ぼう！」</a>

HTML5のcanvas要素についての発表を行いました。

スライド内で発表したデモについての簡単な説明。
多分、Chromeでしかうごきません。



<strong>・画像処理</strong>
canvasを使ってモノクロのコミック画像に自働的に色を付けます。
コアライブラリとして<a href="http://www.pixastic.com/">Pixastic</a>を使い、そのプラグインとして「autocolor」を作成しました。
参考
<a href="http://shimz.me/blog/pixastic/2534">JavaScriptでフォトレタッチ(画像処理）を行うライブラリ「Pixastic」</a>


<strong>・動画処理</strong>
canvasを15枚ならべて、videoタグから読み込んだ動画のデータをそれぞれ位置をずらして流し込んでいます。
わりと初期の頃に書いたコードなので、いろいろと書き直したいところですが、メンドウなのでそのまま。
canvasを使うと、動画にいろいろな処理を行うことができるので面白いですね。


<strong>・Webカメラ処理</strong>
webカメラから取り込んだデータをcanvas上で処理し顔検出とヘッドトラッキングを行うライブラリを使って地球儀を回しています。
詳しくは以下で。
<a href="http://shimz.me/blog/javascript/3046">JavaScriptでヘッドトラッキング</a>


以上。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3058</wp:post_id>
		<wp:post_date>2013-09-23 11:45:07</wp:post_date>
		<wp:post_date_gmt>2013-09-23 02:45:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3058</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3059]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gunma-web-14%e3%81%a7%e7%99%ba%e8%a1%a8%e3%81%97%e3%81%9f%e3%82%b9%e3%83%a9%e3%82%a4%e3%83%89%e3%80%8ccanvas%e3%81%a7%e9%81%8a%e3%81%bc%e3%81%86%ef%bc%81%e3%80%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427318638;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3528;}i:1;a:1:{s:2:"id";i:2534;}i:2;a:1:{s:2:"id";i:4025;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>212</wp:comment_id>
			<wp:comment_author><![CDATA[群馬、勉強会：Gunma.web（ web勉強会 in 群馬 ）HTML,Javascript,Ruby,Perl,PHP]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://gunma-web.org/?p=778</wp:comment_author_url>
			<wp:comment_author_IP>49.212.57.210</wp:comment_author_IP>
			<wp:comment_date>2013-09-23 21:40:47</wp:comment_date>
			<wp:comment_date_gmt>2013-09-23 12:40:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 「canvasで遊ぼう！」 @_shimizu さん (5分) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379940047.1272718906402587890625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379983551.9913179874420166015625;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】クリックした位置の緯度経度を求める</title>
		<link>http://shimz.me/blog/d3-js/3060</link>
		<pubDate>Tue, 24 Sep 2013 00:45:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3060</guid>
		<description></description>
		<content:encoded><![CDATA[小ネタ。
<a href="http://shimz.me/example/d3js/geo_template/pixel2latlong/"><img src="http://shimz.me/blog/wp-content/uploads/2013/09/pixel2latlong.jpg" alt="pixel2latlong" width="400" height="446" class="aligncenter size-full wp-image-3061" /></a>

<a href="http://shimz.me/example/d3js/geo_template/pixel2latlong/">example</a>


pixel座標と緯度経度の変換を行います。


<h2>サンプル</h2> 
<pre class="lang:js decode:true " >d3.json(&quot;japan.topojson&quot;, function(json) {
	d3main(json);
});

function d3main(json){

	var geodata = topojson.object(json, json.objects.japan).geometries;

	projection = d3.geo
		.mercator()		//投影法の指定
		.scale(1500)	//スケール（ズーム）の指定
		.translate([300,350])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//投影

	var svg = d3.select(&quot;svg&quot;);

	var map =  svg.append(&quot;svg:g&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: D(path),
			&quot;fill&quot;: &quot;green&quot;,
			&quot;fill-opacity&quot;: 0.5,
			&quot;stroke&quot;: &quot;black&quot;
		});
		
	//クリックした位置の緯度経度を取得	
	d3.select(&quot;svg&quot;).on(&quot;mousedown.log&quot;, function() {
		d3.select('.resllut').text(&quot;results:&quot; + projection.invert(d3.mouse(this)));
	});
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3060</wp:post_id>
		<wp:post_date>2013-09-24 09:45:20</wp:post_date>
		<wp:post_date_gmt>2013-09-24 00:45:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3060</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3061]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e3%82%af%e3%83%aa%e3%83%83%e3%82%af%e3%81%97%e3%81%9f%e4%bd%8d%e7%bd%ae%e3%81%ae%e7%b7%af%e5%ba%a6%e7%b5%8c%e5%ba%a6%e3%82%92%e6%b1%82%e3%82%81%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427318582;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3147;}i:1;a:1:{s:2:"id";i:3025;}i:2;a:1:{s:2:"id";i:2817;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>モバイラーにお勧めなWindows8タブレットの思わぬ利点(ACアダプタ)</title>
		<link>http://shimz.me/blog/other/3062</link>
		<pubDate>Thu, 26 Sep 2013 01:05:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3062</guid>
		<description></description>
		<content:encoded><![CDATA[iPadより軽いWindows8(RTじゃないよ！)タブレット
<iframe width="560" height="315" src="//www.youtube.com/embed/z8KIW6rvAmU" frameborder="0" allowfullscreen></iframe>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=toriaezu04b-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00DDJALWM" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

「ASUS VivoTab Smart ME400C」を購入し最近持ち歩いています。
デスクトップアプリもわりとサクサク動いて起動もシャットダウンも早くバッテリーの持ちも良い、なかなかの優良端末だと思います。
その中でも、VivoTabは、USB Micro-B端子を使って充電を行うのですが、これがモバイラーにとってかなり便利。

最近のノートPCは長時間バッテリーが持つので１日くらいならACアダプタが無くても問題ない場合も多いのですが、「もし、大事なときにバッテリーが切れたら…」と不安になって結局セットで持ち歩くことになりがちです。どんなに軽くて薄いノートPCでもACアダプタは結構な荷物になるんですよね。
他にも、携帯用のACアダプタ、モバイルルーター用のACアダプタも……となると結構大変。

しかし、VivoTabだとACアダプタをモバイルルーターと共用できるので、バッグの中がかなりスッキリとします。
自分の場合はさらに<a href="http://www.amazon.co.jp/gp/product/B00CTUMNAO/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00CTUMNAO&linkCode=as2&tag=toriaezu04b-22">Kindle Paperwhite</a>も一緒に持ち歩くことが多いのですが、これら全てが下記のような小さなACアダプタ一つ持ち歩くだけで済みます。

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=toriaezu04b-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00E9PFGF6" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

なにせ、デスクトップPCのUSBポートからでも充電ができますからね、ちょっと感動。

RTでないwindows8マシンを手軽に持ち運びたいノマドな人は検討してみてはいかがでしょう。
（さすがに、ゲームとか動画編集とかをするにはスペック不足だけど）]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3062</wp:post_id>
		<wp:post_date>2013-09-26 10:05:28</wp:post_date>
		<wp:post_date_gmt>2013-09-26 01:05:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%a2%e3%83%90%e3%82%a4%e3%83%a9%e3%83%bc%e3%81%ab%e3%81%8a%e5%8b%a7%e3%82%81%e3%81%aawindows8%e3%82%bf%e3%83%96%e3%83%ac%e3%83%83%e3%83%88%e3%81%ae%e6%80%9d%e3%82%8f%e3%81%ac%e5%88%a9%e7%82%b9ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3063]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372199;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1542;}i:1;a:1:{s:2:"id";i:1031;}i:2;a:1:{s:2:"id";i:3633;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬でゆるふわなJavaScript勉強会を開催します。</title>
		<link>http://shimz.me/blog/javascript/3066</link>
		<pubDate>Fri, 27 Sep 2013 10:18:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3066</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://atnd.org/events/44021"><img src="http://shimz.me/blog/wp-content/uploads/2013/09/test000014_original.jpg" alt="test000014_original" width="500" height="281" class="aligncenter size-full wp-image-3067" /></a>

<a href="http://atnd.org/events/44021">Atnd:JavaScriptゆるふわ勉強会</a>

えぇ、と「<a href="http://shimz.me/blog/d3-js/3035">D3.js勉強会</a>の続きはどうなったんだ？」という話もあるわけですが、こちらはこちらでちゃんと開催する予定です。
できれば次回は参加しやすい休日に開催にしたいなと考えているのですが……なかなか会場が見つからなくて orz
「良いところ知ってるよ！」とか「会場提供するよ！」などありましたら、TwitterかFacebookなどでご連絡いただけると泣いて喜びます。


で、JavaScript勉強会なのですが、ただの勉強会ではありません。
ゆるふわ勉強会です。
かなり、ゆるふわです。


個人的にいくつかの勉強会に参加したり、自分で主催してみて思ったのですが、勉強会のテーマというか"難易度"を定めるのが難しいなぁと。
最近になって、群馬での勉強会が増えて来ましたが、それでもまだまだ一部クラスタによるニッチなイベントであることは否めません。
できるだけすそ野は広げたいわけですが、かといって「行ってみたけれど、簡単なことばかりでガッカリ」というのもできれば避けたい。
どうしても熟練度にはばらつきがでるわけで、話を聞いて「へぇーすごいなー」と思ったりはするけれど、でもそれだけで終わってしまうってことも結構あります。あるいは、「やべぇ、高度すぎて何言ってるか全然ワカンネ」とか、「面白いけど使いどころがないなー」とか。

それはそれで、ちょっともったいないかなと。

そこで「もういっそ、参加者の人それぞれに"聞きたいこと/知りたいこと"を聞いてみる勉強会」ってのはどうかな？と思いついたわけです。
完全に思い付きなのと初めての試みなので、上手くいくかはわかりません。

それでも参加者の方が「一人で勉強していてわからないまま悩んでいたけれど、人に聞けて良かった」と思ってもらえればまぁまぁ成功になるのではないかと。

参加者主体の勉強会を一度やってみたかったと考えて始めたことなので、「なんか時間空いていたので、ちょっと見てみるか」ぐらいのお気楽な感じでご参加ください。

「○○という参考書でJavaScriptを勉強しているんだけど、この章のこの部分の意味が分からないんだよなー」みたいな具体的な内容について聞いていただいても構いませんし、ぶっちゃけ「JavaScriptってなんですか？」といった根本的な疑問でもOKです。

かぎりなく、ゆるくやりたいなと思ってます。

<strong>おまけ</strong>
一応、時間が余った時のことも考えていくつかJavaScriptに関するLTを何本か用意する予定です。
もし、「自分もJavaScriptに関するLTをやりたい」という方がいらっしゃいましたご連絡ください。大歓迎です。
あるいは「ライトニングトークってやったことないので練習したい」でもOKです。











]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3066</wp:post_id>
		<wp:post_date>2013-09-27 19:18:37</wp:post_date>
		<wp:post_date_gmt>2013-09-27 10:18:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%be%a4%e9%a6%ac%e3%81%a7%e3%82%86%e3%82%8b%e3%81%b5%e3%82%8f%e3%81%aajavascript%e5%8b%89%e5%bc%b7%e4%bc%9a%e3%82%92%e9%96%8b%e5%82%ac%e3%81%97%e3%81%be%e3%81%99%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3067]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427336834;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3333;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:3156;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「サウンド・オブ・ノイズ」</title>
		<link>http://shimz.me/blog/movie/3068</link>
		<pubDate>Sat, 28 Sep 2013 09:46:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3068</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="//www.youtube.com/embed/Vu3GI_gjLtg" frameborder="0" allowfullscreen></iframe>

<a href="http://www.son-movie.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/09/soundofnoise.jpg" alt="soundofnoise" width="314" height="450" class="alignnone size-full wp-image-3069" /></a>

<blockquote>突如街に現れた謎の6人組。彼らはあらゆるものを楽器に見立て、とんでもない場所で音楽を作り上げる音楽テロリストだった！彼らを追うのは、有名音楽一家に生まれながらも、音痴で音楽嫌いの警官、アマデウス。街中に貼り出された４つのテロ予告。アマデウスは、ある事件の現場に取り残されたメトロノームを手掛かりに捜査を開始するが・・・。果たして、彼らの目的とは？そして、アマデウスはテロを阻止できるのか？
</blockquote>



シネマテークたかさきで上映されていたので観てきたのですが……ずいぶんと罪作りな映画でした。
少々ネタバレがあるので、嫌な人はここから先は見ないでください。


&nbsp;
&nbsp;
多分、この映画に興味を持つタイプの人が、あらすじやトレーラーを見たときに予想するストーリとはだいぶ違った作品です。
いわゆる「サウンドテロ」的な行為を描いた映画というは過去いくつかあり多くの場合主人公たちが奏でる音楽が、抑圧された"ある層(クラスタ)"を代表しサウンドテロを行う集団がクラスタの代弁者として描かれるのが基本となります。
たとえば、「<a href="http://www.amazon.co.jp/gp/product/B00005GBK2/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00005GBK2&linkCode=as2&tag=toriaezu04b-22">今夜はトーク・ハード</a>」という映画では、厳格な高校に通う優等生の主人公が夜な夜な違法電波を使って謎のDJとして海賊放送を行い、彼がかける音楽がやがて抑圧された若者たちの象徴のようになっていきます。違法行為でありながら、抑圧されたクラスタからの支持を得ていく過程が描かれることで、視聴者もその行為に共感しエンディングに向かうにつれボルテージが上りカタルシスが生まれることになるわけです。

しかし、「サウンド・オブ・ノイズ」では、その支持を得ていく過程のようなものが全く描かれません。
映画の中に、この奇妙なサウンドテロ集団に共感する人達がまったく存在しないのです。
その結果どうなるか？　視聴者の目には彼らが「はた迷惑な自称アーティスト集団」にしか映りません。
しかも、彼らの演奏自体もラストに向かって尻窄みになります。
この作品のなかで彼らは計４回の「演奏」を行うわけですが、回を重ねるごとにあまり魅力の感じられないものになっていきます。
第三楽章の演奏などかなりグダグダで、見てる側からすると「やっぱり重機で演奏するって無理ありすぎじゃね？」と感じさせれられます。
しかも、映画の中では彼らの音楽や行為に共感したり熱狂する人達の描画が一切ないわけで、そうなるとホント自己陶酔した勘違い集団のようにしか見えず、しかもラストの「演奏」に至ってはやってることのスケールが大きいわりには奏でる音楽はしょぼく、さらにそれをちゃんと聞いている観客も描かれず、高圧電線にぶらさがりながらさほど魅力的とも感じられない音楽を奏でるそのシュールな絵に見ている側は困惑しきりです。

で、問題なのは、これらがおそらくはすべて意図された演出だということです。

つまり、この映画の中で描かれるサウンドテロは、単なる「迷惑行為」としてあえて演出されているようなのです。

ラスト近くで、音痴で音楽嫌いの警官アマデウスが行う"ある行為"も、全ての演奏を終えたサウンドテロ集団のしょっぱい結末も全て意図通りで、この映画が出す結論は極論言ってしまえば「音楽の敗北」です。

まぁ、そういった意味ではタイトルは正しくこの映画を表しているわけですが。

上記のあらすじやトレーラーを見て予想されるシナリオとある意味正反対の結末でカタルシスのようなものもまったくありません。

全編にあふれるドラムやパーカッションの音や、規則正しく刻まれるメトロノームのリズムは心地よいのですが、それだけにラストに近づくにつれ「えぇ、その方向に向かうの！」と視聴者は裏切られることになります。それも、あまり心地いい裏切りではありません。

クールでスタイリッシュで奇妙な後味を残し、ある意味音楽に対して批評的で魅力的な作品ではあるんですが、単純明快なエンターテイメントを期待してしまっていたのでちょっとモヤっとしたものが残りました。

冒頭、車の後部座席にドラムを乗せ、ドラムを叩きながらかっ飛ばすシーンはメトロノームの刻むリズムとエンジン音が重なって最高に格好良くて好きなんですけどね。




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3068</wp:post_id>
		<wp:post_date>2013-09-28 18:46:24</wp:post_date>
		<wp:post_date_gmt>2013-09-28 09:46:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%b5%e3%82%a6%e3%83%b3%e3%83%89%e3%83%bb%e3%82%aa%e3%83%96%e3%83%bb%e3%83%8e%e3%82%a4%e3%82%ba%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3069]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427363888;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1031;}i:1;a:1:{s:2:"id";i:3780;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google ドキュメントのスプレッドシート使ってリストからQRコードを作成する</title>
		<link>http://shimz.me/blog/other/3071</link>
		<pubDate>Tue, 01 Oct 2013 00:59:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3071</guid>
		<description></description>
		<content:encoded><![CDATA[時間がないので小ネタを。

<iframe width="420" height="315" src="//www.youtube.com/embed/sRuObJ538pA" frameborder="0" allowfullscreen></iframe>

Google Docのスプレッドシート使ってQRコードを作成するというテクニックがなかなか便利そうなので紹介。
QRコードの生成はGoogle Chart APIを使い、スプレッドシートの中で画像の読み込み関数(=image)を使ってAPIを呼び出している。

<a href="https://docs.google.com/spreadsheet/ccc?key=0ArOQLX5U1kUqdEpsOW85eEx2bmtsY2trYjNZMmtJNHc&amp;usp=sharing"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/googleQR.jpg" alt="googleQR" width="590" height="433" class="alignnone size-full wp-image-3072" /></a>


<h2>サンプル</h2>
A2,B2,C2,D2のセルから値を取得し、QRコードを作成する。
 
<pre class="lang:js decode:true " >=image(&quot;https://chart.googleapis.com/chart?chs=200x200&amp;cht=qr&amp;chl=BEGIN:VCARD%0AN:&quot; &amp; A2 &amp; &quot;%20&quot; &amp; B2 &amp; &quot;%0ATEL;CELL:&quot; &amp; C2 &amp; &quot;%0AEMAIL:&quot; &amp; D2 &amp; &quot;%0AEND:VCARD&quot;)
</pre> 


<a href="https://docs.google.com/spreadsheet/ccc?key=0ArOQLX5U1kUqdEpsOW85eEx2bmtsY2trYjNZMmtJNHc&usp=sharing">sample</a>

csvのリストからQRコードを生成したいときなどに便利。


参考
<a href="http://www.infinity-dimensions.com/blog/archives/google-chart-api-qrcode.html">Google Chart APIでQRコードを生成 - ID-Blogger | Infinity Dimensions</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3071</wp:post_id>
		<wp:post_date>2013-10-01 09:59:44</wp:post_date>
		<wp:post_date_gmt>2013-10-01 00:59:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3071</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3072]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-doc%e3%81%ae%e3%82%b9%e3%83%97%e3%83%ac%e3%83%83%e3%83%89%e3%82%b7%e3%83%bc%e3%83%88%e4%bd%bf%e3%81%a3%e3%81%a6%e3%83%aa%e3%82%b9%e3%83%88%e3%81%8b%e3%82%89qr%e3%82%b3%e3%83%bc%e3%83%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427379554;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2670;}i:1;a:1:{s:2:"id";i:3847;}i:2;a:1:{s:2:"id";i:4063;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】パラレルコーディネート図と地図を連動させる（未完成）</title>
		<link>http://shimz.me/blog/d3-js/3073</link>
		<pubDate>Thu, 03 Oct 2013 01:05:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3073</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/parallel_coordinates/02/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/parallel_coordinates_Google_Map.jpg" alt="parallel_coordinates_Google_Map" width="590" height="250" class="alignnone size-full wp-image-3074" /></a>

<a href="http://shimz.me/example/d3js/parallel_coordinates/02/">example</a>

以前、作成した<a href="http://shimz.me/blog/d3-js/3053">パラレルコーディネート図</a>とGoogle Maps APIを連動させてみました。
具体的には、パラレルコーディネート図でデータの絞り込みを行うとGoogle Map上にマッピングされたデータも連動して絞り込みが行われるようになっているハズ……なんですが、いろいろとバグやら問題やらがあって未完成です。

<strong>問題</strong>
<ul>
	<li>Google Map上にオーバーレイした要素のイベントが取れない</li>
	<li>パラレルコーディネート図の目盛り(madori)の並びがおかしい</li>
</ul>

データを絞り込むUIとして、パラレルコーディネート図はなかなか面白いと思っているので今後もいろいろ勉強していきたいです。

未完ですが、一応Githubに上げました。

<a href="https://github.com/shimizu/d3example/tree/master/parallel_coordinates/02"> d3example / parallel_coordinates / 02 /</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3073</wp:post_id>
		<wp:post_date>2013-10-03 10:05:31</wp:post_date>
		<wp:post_date_gmt>2013-10-03 01:05:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e3%83%91%e3%83%a9%e3%83%ac%e3%83%ab%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%8d%e3%83%bc%e3%83%88%e5%9b%b3%e3%81%a8%e5%9c%b0%e5%9b%b3%e3%82%92%e9%80%a3%e5%8b%95%e3%81%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3074]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395765;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3053;}i:1;a:1:{s:2:"id";i:2575;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ブラウザ上で手軽にデータビジュアライゼーションを作成できるジェネレーター「RAW」</title>
		<link>http://shimz.me/blog/web/3075</link>
		<pubDate>Fri, 04 Oct 2013 00:56:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3075</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://raw.densitydesign.org/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/raw.gif" alt="raw" width="590"  class="alignnone size-full wp-image-3076" /></a>

<a href="http://raw.densitydesign.org/">RAW</a>


Excelなどからデータをコピペして、メニューを選んでいくだけでデータビュジュアライゼーションを作成できるWEBサービスです。
最終的に、SVGファイル、PNGファイル、インラインSVGコードとして出力できます。
サービスはD3.jsを使って作成されていて、D3でよく使われるレイアウト(データの表示の仕方)を利用することができます。
具体的な操作方法は下記の動画を参照してください。

<iframe src="//player.vimeo.com/video/75866661" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href="http://vimeo.com/75866661">Raw - Basic Tutorial</a> from <a href="http://vimeo.com/densitydesign">DensityDesign</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3075</wp:post_id>
		<wp:post_date>2013-10-04 09:56:51</wp:post_date>
		<wp:post_date_gmt>2013-10-04 00:56:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3075</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3304]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e4%b8%8a%e3%81%a7%e6%89%8b%e8%bb%bd%e3%81%ab%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390343;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:3195;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.js（主に地図)の勉強会を行います。</title>
		<link>http://shimz.me/blog/d3-js/3077</link>
		<pubDate>Tue, 08 Oct 2013 01:32:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3077</guid>
		<description></description>
		<content:encoded><![CDATA[会場は例によって群馬です。
<div style="text-align:center"><iframe width="400" height="370" scrolling="no" style="text-align:ceter" src="http://shimz.me/example/d3js/geo_example2/rotate/"></iframe></div>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/WS000000.jpg" alt="WS000000" width="399" height="367" style="display:none" />


10/26(土曜日)にD3.jsの地図表示機能をテーマにした勉強会を行います。

<a href="http://atnd.org/events/44317">D3.js勉強会（地図入門）</a>

D3で地図を表示するのは難しいというよりメンドウなことが多いのですが、その中でも一番厄介なのが、そもそも地理情報のデータセットをどうやって用意するか？　という部分だったります。

その辺を、一連の流れの中で見てもらうことで理解してもらいやすかな？　と。

一応、予定では「各県の人口データを元にしたコロプレスマップの作成」までやりたいなと思ってます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3077</wp:post_id>
		<wp:post_date>2013-10-08 10:32:33</wp:post_date>
		<wp:post_date_gmt>2013-10-08 01:32:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%ef%bc%88%e4%b8%bb%e3%81%ab%e5%9c%b0%e5%9b%b3%e3%81%ae%e5%8b%89%e5%bc%b7%e4%bc%9a%e3%82%92%e8%a1%8c%e3%81%84%e3%81%be%e3%81%99%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3078]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427299185;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3113;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:3333;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Functional JavaScriptを読んでいます。</title>
		<link>http://shimz.me/blog/javascript/3080</link>
		<pubDate>Mon, 14 Oct 2013 00:49:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3080</guid>
		<description></description>
		<content:encoded><![CDATA[翻訳されるまで待てませんでした。
<a href="http://www.amazon.co.jp/gp/product/B00D624AQO/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00D624AQO&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00D624AQO&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=B00D624AQO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />


<a href="http://www.amazon.co.jp/gp/product/B00D624AQO/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00D624AQO&linkCode=as2&tag=toriaezu04b-22">Functional JavaScript: Introducing Functional Programming with Underscore.js</a>



「Functional JavaScript」は<a href="http://underscorejs.org/">Underscore.js</a>というライブラリを使用して、関数型プログラミングのテクニックを用いてJavaScriptのコードを書こう！という参考書です。

FP(Functional Programming)の流儀に沿うことで、安全でテストしやすくまたコード量も減らせて生産性も向上するよ！という趣向らしいです。

まぁでも、学習コストが高くて理解するのがなかなか大変なんですけど。

それでも、最近やっと関数と関数を合成して新たな関数を作成する(関数合成)など、関数型プログラミングの楽しさが理解できてきたような気がします。

勉強がてら、「Functional JavaScript」にあったサンプルを元にCSVをパースするコードを書いてみました。

<a href="http://qiita.com/_shimizu/items/e45f94e7ee8a75a04e50">CSVをパースする</a>

csvを配列に変換する関数と、配列から連想配列を作成する関数を合成して、csvを連想配列に変換する関数を作成するという流れになってます。

関数と関数を合成して新たな関数を作成する過程がパズルみたいで楽しいなと。

FPに関しては、まだまだ理解していないことばかりなので、今後も勉強を続けていきたいなと思います。




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3080</wp:post_id>
		<wp:post_date>2013-10-14 09:49:28</wp:post_date>
		<wp:post_date_gmt>2013-10-14 00:49:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>functional-javascript%e3%82%92%e8%aa%ad%e3%82%93%e3%81%a7%e3%81%84%e3%81%be%e3%81%99%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3081]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426945691;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2856;}i:1;a:1:{s:2:"id";i:3039;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「ググレカス！」と言いたくなったら、グッとこらえて「Let me google that for you」</title>
		<link>http://shimz.me/blog/web/3083</link>
		<pubDate>Tue, 15 Oct 2013 03:34:45 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3083</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://lmgtfy.com/?q=GUNMA+GIS+GEEK"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/test000014.jpg" alt="test000014" width="590" height="258" class="alignnone size-full wp-image-3084 border" /></a>

<a href="http://lmgtfy.com/">Let me google that for you</a>


「そんなことぐらい自分で検索してくれよ」とか「ググレカス！」とか、言いたくなる時ってありますよね。
でも、余計な波風立てるのは、あまり好ましい事ではありません。
いかなる時も、紳士的にスマートに行きたいものです。

そんなときは「Let me google that for you」というサービスを使ってみてはいかがでしょうか。

使い方は至極簡単。
検索させたい言葉を入力してボタンをクリックするとURLが発行されるので、それを送り付けてやるだけです。

あとは、「lmgtfy」が懇切丁寧に検索の仕方を伝えてくれます。



<a href="http://lmgtfy.com/?q=GUNMA+GIS+GEEK">DEMO</a>

ね、簡単でしょ？

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3083</wp:post_id>
		<wp:post_date>2013-10-15 12:34:45</wp:post_date>
		<wp:post_date_gmt>2013-10-15 03:34:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%b0%e3%82%b0%e3%83%ac%e3%82%ab%e3%82%b9%ef%bc%81%e3%80%8d%e3%81%a8%e8%a8%80%e3%81%84%e3%81%9f%e3%81%8f%e3%81%aa%e3%81%a3%e3%81%9f%e3%82%89%e3%80%81%e3%82%b0%e3%83%83%e3%81%a8%e3%81%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3084]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391660;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2609;}i:1;a:1:{s:2:"id";i:3306;}i:2;a:1:{s:2:"id";i:2738;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptのWith文を使っちゃいけない訳</title>
		<link>http://shimz.me/blog/javascript/3085</link>
		<pubDate>Tue, 15 Oct 2013 11:56:53 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3085</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.amazon.co.jp/gp/product/4873113911/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=4873113911&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4873113911&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4873113911" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />


「<a href="http://www.amazon.co.jp/gp/product/4873113911/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4873113911&linkCode=as2&tag=toriaezu04b-22">JavaScript: The Good Parts</a>」の中で「With文使うんじゃねぇよ、ボケ！」と怒られたことは覚えているのだけれど、この前唐突に理由を聞かれて思い出せなかったのでおさらいしておく。

理由：with文の中で該当しないプロパティやメソッドを呼ぶと、プロトタイプをさかのぼって探しに行くから。

<strong>サンプル１</strong>
 
<pre class="lang:js decode:true " >var p3 = &quot;hoge&quot;;

(function(){
	var obj = {
		p1: &quot;Hello&quot;,
		p2: &quot;World&quot;
	}
	
	with(obj){
		console.log(p1);
		console.log(p2);
		console.log(p3); //&lt;- 存在しないはずなんだけど……
	}
})();</pre> 

p3は存在しないはずなんだけど、プロトタイプをさかのぼって外側の変数p3を呼び出しちゃう。
プロパティへの代入や、メソッドの呼び出しを間違えるとさらに悲惨。


<strong>サンプル２</strong>
 
<pre class="lang:js decode:true " >
(function(){
	var btn = document.getElementById('btn');
	var modal = {
		show:function(){ alert('開くよ'); },
		cloze:function(){ alert('閉じるよ') }
	}

	btn.addEventListener('click', function(){
		with(modal){
			show();
			close(); //&lt;- window.close()が呼ばれちゃう。
		}
	})

})();</pre> 

modalオブジェクトのcloseメソッドを呼び出したはずが、タイポしているせいで正しく呼ばれず、プロトタイプをさかのぼって探した結果、最終的にwindow.close()が実行されて、ブラウザウインドが閉じる orz

場合によっては、非常に見つけにくいバグの温床となることがあるので、with文を使うときは重々注意して使いましょう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3085</wp:post_id>
		<wp:post_date>2013-10-15 20:56:53</wp:post_date>
		<wp:post_date_gmt>2013-10-15 11:56:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3085</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3086]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[javascript%e3%81%aewith%e6%96%87%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a1%e3%82%83%e3%81%84%e3%81%91%e3%81%aa%e3%81%84%e8%a8%b3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426693931;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2619;}i:1;a:1:{s:2:"id";i:3103;}i:2;a:1:{s:2:"id";i:3874;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】複数のデータファイルの読み込み(非同期処理)をまとめる</title>
		<link>http://shimz.me/blog/d3-js/3087</link>
		<pubDate>Thu, 17 Oct 2013 04:59:30 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3087</guid>
		<description></description>
		<content:encoded><![CDATA[【追記】　すこし改良しました。
<a href="http://shimz.me/blog/javascript/3376">【D3.js】複数のデータセットの読み込み(改良版)</a>

<hr />
<br />

<img src="http://shimz.me/blog/wp-content/uploads/2013/10/f81fd2e4c52864042852c112ce927ae2.jpg" alt="ダウンロード" width="279" height="180" class="aligncenter size-full wp-image-3088" />


d3で複数のデータファイル(jsonやcsv)を読み込む場合、以下のようにコールバック地獄に陥りやすいです。
 
<pre class="lang:js decode:true " >d3.json('test.json', function(json){
    d3.csv('test1.csv', function(csv1){
        d3.csv('test2.csv', function(csv2){
            d3.csv('test3.csv', function(csv3){
                d3main(json, csv1, csv2, csv3);
            });
        });        
    });
});

function d3main(){
    var data = Array.prototype.slice.call(arguments);
}</pre> 


まぁ、そんなに一度に大量のファイルを読み込むことはそうないんですが、コールバックが入れ子になるのはあまりうれしくないので、データセットをまとめて読み込む関数を作成してみました。
 
<pre class="lang:js decode:true " >function loadDataSet(){
    var urlArray = arguments[0] ;
    var callback = arguments[arguments.length-1]
    if(!Array.isArray(urlArray)) throw 'TypeError: arg1 is not a array!';
    if(typeof callback != &quot;function&quot;)  throw 'TypeError: callback is not a function!';
    if(arguments.length &gt; 2){
        var workinFnArray = Array.prototype.slice.apply(arguments, [1, arguments.length-1]);
    }
    
    var dataStack = [];
    var fnStack = [];
    
    var chain = function(functions) {
      return functions.reduceRight(function (next, curr) {
        return function () {
            if(workinFnArray) workinFnArray.forEach(function(fn){ fn(); });
            curr.apply({next: next}, arguments);
        }
      });
    }
    
    urlArray.forEach(function(url){
        fnStack.push(
            function() {
                var that = this;
                var exte = url.split('.')[url.split('.').length-1];
                var readfile;
                switch(exte){
                    case 'json': case 'geojson': case 'topojson':
                        readfile = d3.json;
                    break;
                    case 'csv':
                        readfile = d3.csv;
                    break;
                    default:
                        throw 'TypeError: ' + exte + ' is not supported';
                    break;                        
                }
                
                return readfile(url,  function(data){
                    dataStack.push(data);
                    that.next();
                });
            }
        )
    });
    
    fnStack.push(function(){    
        callback(dataStack);
    });
    chain(fnStack)(); 
    
}</pre> 



ファイル名(データセット)を収めた配列とコールバックを渡すと、配列の頭からデータを読み込んで最後にコールバックを実行します。
コールバックの引数には、読み込んだデータセットを全てまとめたデータが渡されます。
 
<pre class="lang:js decode:true " >loadDataSet(
    ['test.json','test1.csv', 'test2.csv', 'test3.csv'],
    d3main
);

function d3main(data){
    console.log(data);
}</pre> 


データセットのロード中に「Now Loading…」とか挟みたいときはこんな感じ。
 
<pre class="lang:js decode:true " >loadDataSet(
    ['test.json','test1.csv', 'test2.csv', 'test3.csv'],
    function(){
        document.getElementById('info').innerHTML = 'Now Loading……';
    },
    function(data){
        document.getElementById('info').innerHTML = 'Success!';
        d3main(data);
    }
)

function d3main(data){
    document.getElementById('outputData').innerHTML = JSON.stringify(data);
}</pre> 

<a href="http://shimz.me/example/d3js/loading">Demo</a>

ちゃんとやるなら、<a href="https://github.com/mbostock/queue">queue</a>とか<a href="https://github.com/caolan/async">async.js</a>などを使った方がいいんでしょうけどね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3087</wp:post_id>
		<wp:post_date>2013-10-17 13:59:30</wp:post_date>
		<wp:post_date_gmt>2013-10-17 04:59:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3087</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3088]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91%e8%a4%87%e6%95%b0%e3%81%ae%e3%83%87%e3%83%bc%e3%82%bf%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%81%ae%e8%aa%ad%e3%81%bf%e8%be%bc%e3%81%bf%e9%9d%9e%e5%90%8c%e6%9c%9f%e5%87%a6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390424;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3376;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:2635;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit]JSHint、JSLintを使用する</title>
		<link>http://shimz.me/blog/editor/3091</link>
		<pubDate>Fri, 18 Oct 2013 01:06:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3091</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2013/10/komodosyntaxcheck1.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/komodosyntaxcheck1-300x240.jpg" alt="komodosyntaxcheck1" width="300" height="240" class="aligncenter size-medium wp-image-3092" /></a>

Komodo Editには、標準でJSHintとJSLintが組み込まれているので、設定画面で有効にするだけで、JSHintなどを使ったシンタックスチェックが行えます。

メニューの「Edit」→「Preferences」→「Syntax Checking」を選択。
「Language」の項目でJavaScriptを選択するとJSHintやJSLintを有効にするチェックボックスが表示されるので、チェック。

<a href="http://shimz.me/blog/wp-content/uploads/2013/10/komodosyntaxcheck2.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/komodosyntaxcheck2-300x275.jpg" alt="komodosyntaxcheck2" width="300" height="275" class="size-medium wp-image-3093" /></a>

「Option Wizard」で、出力する警告の選択などを行えば、あとはJavaScriptを書く際に自動的にシンタックスチェックが行われ、Bottom Panelの「Syntax Checking Status」のタブに警告等が出力されます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/10/komodosyntaxcheck3.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/komodosyntaxcheck3-250x300.jpg" alt="komodosyntaxcheck3" width="250" height="300" class="size-medium wp-image-3094" /></a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3091</wp:post_id>
		<wp:post_date>2013-10-18 10:06:57</wp:post_date>
		<wp:post_date_gmt>2013-10-18 01:06:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-editjshint%e3%80%81jslint%e3%82%92%e4%bd%bf%e7%94%a8%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3092]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427309642;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3485;}i:1;a:1:{s:2:"id";i:2519;}i:2;a:1:{s:2:"id";i:148;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadで子供たちにプログラミングの楽しみを！　（キッズプログラミングアプリ６選）</title>
		<link>http://shimz.me/blog/iphoneipad/3096</link>
		<pubDate>Tue, 22 Oct 2013 01:20:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3096</guid>
		<description></description>
		<content:encoded><![CDATA[iPadでプログラミングが学べるアプリケーションを集めてみました。

今回は主に子供でも遊びやすい「<a href="http://scratch.mit.edu/">Scratch</a>」のようなビジュアルプログラミング環境系のアプリと、特定キャラクターを動かすパネルを組み合わせてあそぶパネル系のアプリの２種類を選んでいます。


お勧め
<a href="https://itunes.apple.com/jp/app/catos-hike-programming-logic/id574335479?mt=8&at=10lMp5">Cato&apos;s Hike</a>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/ipad-catoshike.jpg" alt="ipad-catoshike" width="430" height="573" class="aligncenter size-full wp-image-3317" />
パネル系：
チュートリアルがかなり充実していて、ゲーム性が高く飽きません。条件分岐のパネルなどもよく考えられていて直感的に組んでいくことができます。
残念ながら無料版ではチュートリアルとマップエディタで作成したマップでしか遊べず、ゲーム部分は遊べません。
ループや条件分岐などのプログラミングの基本的な仕組みを自然と覚えていける優良アプリです。


<a href="https://itunes.apple.com/jp/app/hopscotch-coding-for-kids/id617098629?mt=8&at=10lMp5">Hopscotch</a>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/ipad-kids-pro5.jpeg" alt="ipad-kids-pro5" width="480" height="360" class="aligncenter size-full wp-image-3101" />
Scratch系：
今回紹介したアプリの中では唯一の日本語に対応しているアプリです。
構文が充実していて、iPadを傾けた場合の処理なども書くことができます。
基本はサンプルコードを参考にプログラミングを行うタイプで、ゲーム性はあまりありません。

<a href="https://itunes.apple.com/jp/app/robocombasic/id566959802?mt=8&at=10lMp5">RoboComBasic</a>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/ipad-kids-pro2.png" alt="ipad-kids-pro2" width="479" height="180" class="aligncenter size-full wp-image-3098" />
パネル系：
かなりリッチな画面でデザインもカッコイイアプリです。
ただ、<a href="http://www.cubesteam.com/Game-RoboComBasic.html">公式サイト</a>のサンプルコードをみると分かりますがプログラムのシンタックスをそのままパネルにしたようなかなり独特な作りで直感的には扱えません。
実際のプログラミングに近い思考が必要とされるので対象年齢は高めです。


<a href="https://itunes.apple.com/jp/app/daisy-the-dinosaur/id490514278?mt=8&at=10lMp5">Daisy the Dinosaur</a>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/ipad-kids-pro3.jpeg" alt="ipad-kids-pro3" width="480" height="360" class="aligncenter size-full wp-image-3099" />
パネル系：
恐竜のキャラクターを動かすのがメインのアプリです。
非常にシンプルな作りで、何も考えずパネルをポンポン置いていくだけで何となく動きます。
直感的に扱えるので遊びやすですが、ゲーム性はなく目的もないので飽きやすいかも。



<a href="https://itunes.apple.com/jp/app/kinescript-visual-programming/id674887500?mt=8&at=10lMp5">KineScript</a>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/ipad-kids-pro4.jpeg" alt="ipad-kids-pro4" width="480" height="360" class="aligncenter size-full wp-image-3100" />
Scratch系：
ほぼ「Scratch」、かなり高機能なビジュアルプログラミング環境でコマンドの種類も豊富なアプリです。
頑張ればかなり凝ったプログラムも記述できる可能性を秘めていますが、いかせんユーザーインターフェイスが全て英語なので子供向きかというと難しいところ。


<a href="https://itunes.apple.com/jp/app/light-bot-lite/id659285751?mt=8&at=10lMp5
">Light-bot LITE</a>
<img src="http://shimz.me/blog/wp-content/uploads/2013/10/ipad-kids-pro6.jpeg" alt="ipad-kids-pro6" width="480" height="270" class="aligncenter size-full wp-image-3102" />
パネル系：
プログラミング環境というよりかはゲームです。パネルの種類が少なく設置できる数も少ないので、限られた中でいかにしてロボットをゴールにたどり着かせるかを考えるというパズル性の高いアプリです。
したがって、条件分岐などのパネルはありあません。


その他
<a href="https://itunes.apple.com/jp/app/dynamic-art-lite-graphical/id599415102?mt=8&at=10lMp5">Dynamic ART Lite</a>
<a href="https://itunes.apple.com/jp/app/touchlogo/id669853708?mt=8&at=10lMp5">TouchLogo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3096</wp:post_id>
		<wp:post_date>2013-10-22 10:20:20</wp:post_date>
		<wp:post_date_gmt>2013-10-22 01:20:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3096</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[ipad%e3%81%a7%e5%ad%90%e4%be%9b%e3%81%9f%e3%81%a1%e3%81%ab%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%ae%e6%a5%bd%e3%81%97%e3%81%bf%e3%82%92%ef%bc%81%e3%82%ad%e3%83%83]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3317]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427364729;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2781;}i:1;a:1:{s:2:"id";i:1812;}i:2;a:1:{s:2:"id";i:3684;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Maps APIで緯度経度を元にプロットしたマーカーの位置がずれる（測地系変換）</title>
		<link>http://shimz.me/blog/map/3103</link>
		<pubDate>Mon, 21 Oct 2013 01:44:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3103</guid>
		<description></description>
		<content:encoded><![CDATA[某社のAPIから取得した物件データの緯度経度を元にGoogle Map上にプロットするだけの簡単なお仕事……と思っていたら物件が川のど真ん中に浮かんでおります。


<img src="http://shimz.me/blog/wp-content/uploads/2013/10/Proj4js.jpg" alt="Proj4js" width="602" height="346" class="aligncenter size-full wp-image-3104" />

完全にズレテーラ。

物件データに記録されている緯度経度がおそらく「日本測地系」いうやつなんだろうなと思いつつ、日本一応確認しておこうかとサポートに連絡したところ「測地系、はぁ？　お前何言ってんの？」ぐらいのリアクションが返ってきたので、仕方がなく適当にいろいろ試して何とかすることに。


とりあえず「EPSG:4301」から「EPSG:4326」に変換すれば上手く行くのではないかと思ってやってみました。

測地系の変換には以下のライブラリを使用します。

<a href="http://trac.osgeo.org/proj4js/">Proj4js</a>

<h2>サンプル</h2>
<pre class="lang:js decode:true " >//日本測地系の宣言
Proj4js.defs['EPSG:4301'] = &quot;+proj=longlat +ellps=bessel +towgs84=-146.336,506.832,680.254,0,0,0,0 + no_defs&quot;;    

//Proj4jsエラー発生時の動作を登録
Proj4js.reportError = function(msg) {console.log(msg);}

//日本測地系から世界測地系への変換関数
function transformJ2W(lon,lat){
    var source = new Proj4js.Proj('EPSG:4301'); 
    var dest = new Proj4js.Proj('EPSG:4326');
    var p = new Proj4js.Point( lon , lat);
    Proj4js.transform(source, dest, p); 
    return p;
}

//日本測地系から世界測地系への変換
var j2w = transformJ2W(long, lat);　//変換
console.log([j2w.y, j2w.x]) //変換した値を出力</pre> 

とりあえず、1000件ほど試してみたところ、まぁ、許容範囲ではないかというところまでズレが直ったので良しとしました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3103</wp:post_id>
		<wp:post_date>2013-10-21 10:44:59</wp:post_date>
		<wp:post_date_gmt>2013-10-21 01:44:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3103</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3104]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-maps-api%e3%81%a7%e7%b7%af%e5%ba%a6%e7%b5%8c%e5%ba%a6%e3%82%92%e5%85%83%e3%81%ab%e3%83%97%e3%83%ad%e3%83%83%e3%83%88%e3%81%97%e3%81%9f%e3%83%9e%e3%83%bc%e3%82%ab%e3%83%bc%e3%81%ae%e4%bd%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369728;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3847;}i:1;a:1:{s:2:"id";i:3789;}i:2;a:1:{s:2:"id";i:2135;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[GMaps API v3] カスタムコントロール内の要素にイベントリスナーを設定できない場合の対応</title>
		<link>http://shimz.me/blog/google-map-api/3108</link>
		<pubDate>Thu, 24 Oct 2013 04:53:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3108</guid>
		<description></description>
		<content:encoded><![CDATA[予想外のところで引っかかったので、とりあえずメモ。

Google Maps APIの仕様をよく理解できていないので、なにか勘違いしているのかもしれないのですが、カスタムコントロールで設置した要素にイベントリスナーを設定できずに困りました。

<pre class="lang:xhtml decode:true " >&lt;body&gt;
    &lt;div id=&quot;map_canvas&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;CustomControl_Block&quot;&gt;
        &lt;input id=&quot;SearchAddress&quot; type=&quot;text&quot; placeholder=&quot;住所を入力してください&quot;&gt;&lt;/input&gt;&lt;button id=&quot;SearchAddressRun&quot;&gt;移動&lt;/button&gt;
    &lt;/div&gt;
&lt;/body&gt;
</pre> 

 
<pre class="lang:js mark:16-18 decode:true " >function initialize() {
    var mapDiv = document.getElementById(&quot;map_canvas&quot;);
    var mapObj = new google.maps.Map(mapDiv, {
            center : new google.maps.LatLng(36.322356, 139.013057),
            zoom : 15,
            mapTypeId : google.maps.MapTypeId.ROADMAP
    });
    
    //カスタムコントロールの設置
    var controlDiv = document.createElement('div');
    var CustomControl_block = document.getElementById(&quot;CustomControl_Block&quot;);
    controlDiv.appendChild(CustomControl_block);
    mapObj.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(controlDiv);

    //このタイミングだとイベントリスナーを設定できない
    document.getElementById(&quot;SearchAddressBtn&quot;).addEventListener('click', function() {
        alert(document.getElementById(&quot;SearchAddress&quot;).value); 
    });
              
}

google.maps.event.addDomListener(window, &quot;load&quot;, initialize); 
</pre> 


これだと、ボタンを押しても何も反応しない orz
どうも、div要素が取得されカスタムコントロールとして配置されるまでの間にgetElementByIdでアクセスできないタイミングがあり、このままではイベントリスナーの設置ができないっぽいです。
とりあえず、カスタムコントロールに指定した要素にアクセスできるようになるまで待ってからイベントリスナーを設置するようにしたら解決しました。
<pre class="lang:js mark:15 decode:true " >    //カスタムコントロールが表示されるまで待つ   
    !(function waiteCustomContorlDisplayed(){
           setTimeout(function(){
               //フォーム要素にアクセスできるかチェック
               if(document.getElementById(&quot;CustomControl_Block&quot;)){
                   
                   //カスタムコントロール要素にアクセスできるようになってからイベントリスナーを設定                
                    document.getElementById(&quot;SearchAddressBtn&quot;).addEventListener(&quot;click&quot;, function(){
                        alert(document.getElementById(&quot;SearchAddress&quot;).value);     
                    });
                   
               }else{
                   waiteCustomContorlDisplayed(); //アクセスできるまでループ
               }
           }, 500);
       })();         
</pre> 


<a href="http://shimz.me/example/gmapv3/CustomControl/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3108</wp:post_id>
		<wp:post_date>2013-10-24 13:53:49</wp:post_date>
		<wp:post_date_gmt>2013-10-24 04:53:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3108</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gmaps-api-v3-%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%a0%e3%82%b3%e3%83%b3%e3%83%88%e3%83%ad%e3%83%bc%e3%83%ab%e5%86%85%e3%81%ae%e8%a6%81%e7%b4%a0%e3%81%ab%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e3%83%aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371437;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3659;}i:1;a:1:{s:2:"id";i:2841;}i:2;a:1:{s:2:"id";i:3753;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>オープデータを公開している都市に色を塗ってみた。</title>
		<link>http://shimz.me/blog/d3-js/3109</link>
		<pubDate>Fri, 25 Oct 2013 10:07:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3109</guid>
		<description></description>
		<content:encoded><![CDATA[はやく真っ赤に(あるいは緑に）日本全体が染まればいいのに。
<a href="http://shimz.me/example/d3js/geo_example2/linkdata/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/opendatamap.jpg" alt="opendatamap" width="590" height="478" class="aligncenter size-full wp-image-3110" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/linkdata/">example </a>

<a href="http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%83%87%E3%83%BC%E3%82%BF">オープンデータ</a>を公開されている自治体に色を塗をぬってみました。

いつか、白い都市の方が少なくなるように願っています。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3109</wp:post_id>
		<wp:post_date>2013-10-25 19:07:52</wp:post_date>
		<wp:post_date_gmt>2013-10-25 10:07:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%aa%e3%83%bc%e3%83%97%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e5%85%ac%e9%96%8b%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e9%83%bd%e5%b8%82%e3%81%ab%e8%89%b2%e3%82%92%e5%a1%97%e3%81%a3%e3%81%a6%e3%81%bf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3110]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427212291;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3463;}i:1;a:1:{s:2:"id";i:3851;}i:2;a:1:{s:2:"id";i:3853;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「ふたりのイームズ」を観てきました</title>
		<link>http://shimz.me/blog/movie/3111</link>
		<pubDate>Mon, 28 Oct 2013 07:01:18 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3111</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="//www.youtube.com/embed/cNyHko7Cag4" frameborder="0" allowfullscreen></iframe>

<blockquote>ポップで温もりのある見た目としっかり身体を支えてくれるような座り心地で、世界中で人気のイームズ・チェア。家具だけでなく、建築、映画など様々なジャンルを手がけ、1940～1960年代に興隆したミッドセンチュリー・モダンというデザインのムーブメントを牽引したチャールズとレイのイームズ夫妻。彼らの映像や手紙、作品、彼らの娘やイームズ・オフィスの代表を務める孫ら家族や関係者へのインタビューを交え、二人の知られざる人物像を追跡するドキュメンタリー。
</blockquote>


ふたりのイームズを観てきました。
「２０世紀アメリカをデザインした」といわれるカリスマ夫婦の軌跡を追ったドキュメンタリーです。

劇中、様々な関係者からの話や、当時の映像からイームズ夫妻の素顔が描かれるのですが、普段デザインにかかわることのない身でも示唆に富む台詞が多く、非常に面白かったです。
チャールズ・イームズの代表作の一つである「Powers of Ten」など約40年前の作品ですが、今見てもそのインパクトは強烈です。この辺はGoogle Earthなどへの影響も見て取れますね。

<iframe width="420" height="315" src="//www.youtube.com/embed/0fKBhvDjuy0" frameborder="0" allowfullscreen></iframe>

その他にも、情報を縦横縦横無尽に繋ぎあせるという今でいうところのハイパーリンクを模したような展示方法を発案するなど(これは早すぎて不評だったらしいですが)、ITに関わる人間が観ても勉強になる内容です。

なにより、イームズオフィスがまさに「クリエイターにとって夢の職場」って感じで、素晴らしすぎて「あんな職場に務めたい」とホント羨ましく感じます。

とにかく、非常に感銘を受けて「イームズ夫妻についてもっと知りたい！」と思い、ひさびさに映画館でパンフレットを購入したぐらい、楽しいドキュメンタリでした。


[余談]
劇中登場する、チャールズ・イームズ残した言葉のなかに「素材と素材を繋ぐ"接続"の部分がデザインの要になる」という台詞があるのですが、これ非常に深い言葉だなぁと。物理的なことだけでなく抽象的な意味で。
「イームズチェア」にしても「Powers of Ten」にしてもシムーレスに繋ぐことがデザインの要となっているわけで、この辺の哲学はAppleなんかにも影響を与えている気がします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3111</wp:post_id>
		<wp:post_date>2013-10-28 16:01:18</wp:post_date>
		<wp:post_date_gmt>2013-10-28 07:01:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%81%b5%e3%81%9f%e3%82%8a%e3%81%ae%e3%82%a4%e3%83%bc%e3%83%a0%e3%82%ba%e3%80%8d%e3%82%92%e8%a6%b3%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3112]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425198177;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2346;}i:1;a:1:{s:2:"id";i:3780;}i:2;a:1:{s:2:"id";i:2590;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.js勉強会（地図入門）を開催しました。</title>
		<link>http://shimz.me/blog/d3-js/3113</link>
		<pubDate>Mon, 28 Oct 2013 02:17:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3113</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/gunmavis/d3mapSample/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/gunmavisd3map.jpg" alt="gunmavisd3map" width="564" height="488" class="aligncenter size-full wp-image-3114" /></a>

<a href="http://shimz.me/gunmavis/d3mapSample/">example</a>

<a href="http://atnd.org/events/44317">D3.js勉強会（地図入門）</a>が無事終了しました。

前回は、ネタ不足で時間が余りましたが、今回はそんなこともなくそれなりに内容のある勉強会になったのではないかと。

逆に時間が足りず伝えきれなかった部分もあるとは思うのですが、目標であった「塗り分け地図(コロプレス図)の作成」まで出来たので良しとしようかなと。

勉強会で使用したスライドとコードを置いておきます。

<a href="http://shimz.me/slide/d3map/d3map1/">D3で地図を描こう！ 1</a>
<a href="http://shimz.me/slide/d3map/d3map2/">D3で地図を描こう！ 2</a>
<a href="https://github.com/shimizu/gunmaviz">サンプルコード</a>


(サンプルコードはローカル環境では動きません。サーバーにアップロードするか、同梱したserver.jsを使用してください)

スライドの方は内容をまとめきれず、口頭で補足・説明した部分も多いので、これだけみてもよくわからないかもしれません。

まぁ、それでも多少参考になれば良いかなぁと。


ひとまず、やりたかったD3 geoに関する勉強会が開催できたので満足です。

次回は何をやるか、いつやるかは全く不明です。

もう一回くらい同じ内容(地図に関して)の勉強会をやってみても良いかなぁーなんてことも考えてます。

まぁ、需要があればですが。


ご参加いただいた皆さん、ありがとうございました！




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3113</wp:post_id>
		<wp:post_date>2013-10-28 11:17:01</wp:post_date>
		<wp:post_date_gmt>2013-10-28 02:17:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e5%8b%89%e5%bc%b7%e4%bc%9a%ef%bc%88%e5%9c%b0%e5%9b%b3%e5%85%a5%e9%96%80%ef%bc%89%e3%82%92%e9%96%8b%e5%82%ac%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3114]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427299189;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2990;}i:1;a:1:{s:2:"id";i:3035;}i:2;a:1:{s:2:"id";i:3333;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinkDataのJSONデータを使いやすくする</title>
		<link>http://shimz.me/blog/javascript/3116</link>
		<pubDate>Tue, 29 Oct 2013 01:18:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3116</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/LinkData/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/linkdataparse.jpg" alt="linkdataparse" width="590" height="421" class="aligncenter size-full wp-image-3117" /></a>

<a href="http://shimz.me/example/d3js/LinkData/">example</a>

「<a href="http://shimz.me/blog/d3-js/3109">オープデータを公開している都市に色を塗ってみた。</a>」の記事で、<a href="http://linkdata.org/">LinkData</a>のデータを使わせてもらったのだけれど、JSONPで取得できるデータの形式がちょっと使いづらい。

<a href="http://linkdata.org/work/rdf1s127i/OPENDATA_Japan_api.html">日本のオープンデータ都市一覧</a>

「Simple Data Format用API」の方で、もっと使いやすいデータが取れるのかと思ったのだけれど、こっちはなんかメタ情報しか取得できないっぽいので、そうでもないみたい。とりあず「RDF/JSON」APIから取得できるデータをパースする関数を作った。

やっつけ仕事なので、他のデータではうまくパースできないかも。


<h2>スニペット</h2>
<pre class="lang:js decode:true " >function parseLD(linkdata){
    var dataSet = [];
    for(key in linkdata[0]){
        var tmp = {};
        tmp['source'] = key;
        for(ckey in linkdata[0][key]){
            var i = ckey.split(&quot;/&quot;)
            i = i[i.length-1].split(&quot;#&quot;);
            tmp[i[i.length-1]] = linkdata[0][key][ckey][0]['value'];
        }
        dataSet.push(tmp);
    }
    
    return dataSet;  
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3116</wp:post_id>
		<wp:post_date>2013-10-29 10:18:28</wp:post_date>
		<wp:post_date_gmt>2013-10-29 01:18:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3116</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3117]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[LinkDataのJSONを使いやすくする http://wp.me/p2Qdzq-Og]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[linkdata%e3%81%aejson%e3%82%92%e4%bd%bf%e3%81%84%e3%82%84%e3%81%99%e3%81%8f%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427178376;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3753;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:2787;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebookでフレンドがどれだけ「いいね！」しているかの視覚化</title>
		<link>http://shimz.me/blog/d3-js/3118</link>
		<pubDate>Wed, 30 Oct 2013 00:52:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3118</guid>
		<description></description>
		<content:encoded><![CDATA[重いです。表示に時間がかかります。クライアントによっては「固まった」と思うほど遅いです。だいたい３０秒から１分くらいで表示されます。
<a href="http://shimz.me/example/d3js/forcelayout/Facebook/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/facebookgoodgrahp.jpg" alt="facebookgoodgrahp" width="590" height="328" class="aligncenter size-full wp-image-3119" /></a>

<a href="http://shimz.me/example/d3js/forcelayout/Facebook/">example</a>
(Chromeで見てください)

赤いサークルがフレンドユーザー。青いサークルがそのフレンドが「いいね！」しているFacebookページ等です。
視覚化してみると、どの人がどれだけ「いいね」しているかや、「いいね」しているページが共通しているユーザーなどあらたな発見がありますね。

Facebookのデータ取得にはサードパーティアプリの「netvizz」を使用しました。

<a href="https://apps.facebook.com/netvizz/">https://apps.facebook.com/netvizz/</a>

netvizzを使用すると自分自身のソーシャルグラフデータを<a href="http://oss.infoscience.co.jp/gephi/gephi.org/users/supported-graph-formats/gdf-format.html">GDF形式</a>でダウンロードできます。

FacebookのソーシャルグラフデータをD3で使用する方法については、下記チュートリアルを参考にしました。

<a href="http://bit.ly/1dG9vx5">Visualizing my Social Graph with d3.js</a>


データの変換処理の詳細は以下。


<a href="http://qiita.com/_shimizu/items/66b997fc8bc477e5efbd">gdf形式のデータをD3のフォースレイアウトで使えるように変換する</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3118</wp:post_id>
		<wp:post_date>2013-10-30 09:52:35</wp:post_date>
		<wp:post_date_gmt>2013-10-30 00:52:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91facebook%e3%81%a7%e3%83%95%e3%83%ac%e3%83%b3%e3%83%89%e3%81%8c%e3%81%a9%e3%82%8c%e3%81%a0%e3%81%91%e3%80%8c%e3%81%84%e3%81%84%e3%81%ad%ef%bc%81%e3%80%8d%e3%81%97%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3119]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427325629;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:3991;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.js本の出版が止まらない(最近出版されたD3参考書)</title>
		<link>http://shimz.me/blog/d3-js/3121</link>
		<pubDate>Thu, 31 Oct 2013 01:00:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3121</guid>
		<description></description>
		<content:encoded><![CDATA[参考書が増えてくると「定番のライブラリ」感が出てきて、なんか安心感があるよね。


<h2>過去紹介した参考書</h2>
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=toriaezu04b-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B008FPJST6" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=toriaezu04b-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00BSG68UQ" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=toriaezu04b-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00DNJ1UMM" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<a href="https://leanpub.com/D3-Tips-and-Tricks"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/d3_tip_and_trinks.png" alt="d3_tip_and_trinks" width="120" height="169" class="alignnone size-full wp-image-3122" /></a>&emsp;<a href="http://www.oreilly.co.jp/books/9784873115979/"><img src="http://shimz.me/blog/wp-content/uploads/2013/10/picture_large978-4-87311-597-9qq.jpeg" alt="picture_large978-4-87311-597-9qq" width="132" height="169" class="alignnone size-full wp-image-3126" /></a>



<h2>最近出版された参考書</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G58JD5E/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51nZTnNB-qL._SL160_.jpg" alt="Data Visualization with D3.js Cookbook" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G58JD5E/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Data Visualization with D3.js Cookbook</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.10.31</div></div><div class="amazlet-detail">Packt Publishing (2013-10-24)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G58JD5E/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
クックブックです。D3の様々なレイアウト機能やGeo(Map)機能などについて幅広く取り扱っています。D3を使って作成するデータビジュアライゼーションの表現の幅を広げたいときに是非。
参考書で扱っているコードは全てGithubに上がってます。デモもこちらから確認できます。
<a href="https://github.com/NickQiZhu/d3-cookbook">Data Visualization with D3 Cookbook Source Code</a>


&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G8YAV06/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41%2B1jBBk5uL._SL160_.jpg" alt="Data Visualization with d3.js" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G8YAV06/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Data Visualization with d3.js</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.10.31</div></div><div class="amazlet-detail">Packt Publishing (2013-10-25)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G8YAV06/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
ベーシックな感じのD3.js入門書。「Getting Started with D3」や「Interactive Data Visualization for the Web」と被る内容もありますが、本書は"D3.jsを使ってSVGを操作すること"について結構深く掘り下げて書かれています。メディアアートっぽいサンプルも多いので「D3で作るグラフをもっとかっこよく装飾したい！」って人にお勧めです。
お手頃価格。

&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EBX4Q2U/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51f5z1vZ7tL._SL160_.jpg" alt="Pro Data Visualization using R and JavaScript" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EBX4Q2U/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Pro Data Visualization using R and JavaScript</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.10.31</div></div><div class="amazlet-detail">Apress (2013-08-04)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EBX4Q2U/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
R言語を用いてデータ分析を行いD3でビジュアライズしよう！という本らしいです。未読。
追記：翻訳本がでました。


<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134996/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51NtzXKGMYL._SL160_.jpg" alt="R&JavaScriptによるデータ解析と視覚化テクニック (Programmers SELECTION)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134996/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">R&JavaScriptによるデータ解析と視覚化テクニック (Programmers SELECTION)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.11.29</div></div><div class="amazlet-detail">Tom Barker トム・バーカー <br />翔泳社 <br />売り上げランキング: 16,891<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798134996/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FF8OK0S/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51yrGlUOugL._SL160_.jpg" alt="Social Data Visualization with HTML5 and JavaScript" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FF8OK0S/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Social Data Visualization with HTML5 and JavaScript</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.10.31</div></div><div class="amazlet-detail">Packt Publishing (2013-09-25)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FF8OK0S/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
ソーシャルサービスのデータをHTMLで可視化しようというテーマの本。
基本的には、OAuthプロトコルの説明とかソーシャルサービスのデータをどうやって取得するかなどの話が中心。可視化する際のライブラリとしてD3.jsやRaphaëlの使い方が掲載されています。


&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G395ON0/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51LU71kBN7L._SL160_.jpg" alt="Practical Data Analysis" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G395ON0/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Practical Data Analysis</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.10.31</div></div><div class="amazlet-detail">Packt Publishing (2013-10-22)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G395ON0/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
どちらかというと「データ分析」が主体で、可視化(Chapter 3)の章でちょこっとD3が出てきます。
データ分析についてはかなり本格的な内容で、統計的手法から機械学習を用いての分析などまで幅広く扱っている参考書。
昨日作った<a href="http://shimz.me/blog/d3-js/3118">Facebookのソーシャルグラフの可視化</a>はこの本の<a href="http://www.packtpub.com/article/visualizing-my-social-graph-with-d3-js">サンプル</a>を見て作りました。



&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EZ226G0/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51oLX1abhKL._SL160_.jpg" alt="HTML5 Data and Services Cookbook" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EZ226G0/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5 Data and Services Cookbook</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.10.31</div></div><div class="amazlet-detail">Packt Publishing (2013-09-03)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EZ226G0/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

HTML5使ってグラフィカルなサービスを作成しようという本らしいです。未読]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3121</wp:post_id>
		<wp:post_date>2013-10-31 10:00:49</wp:post_date>
		<wp:post_date_gmt>2013-10-31 01:00:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3121</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3123]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e6%9c%ac%e3%81%ae%e5%87%ba%e7%89%88%e3%81%8c%e6%ad%a2%e3%81%be%e3%82%89%e3%81%aa%e3%81%84%e6%9c%80%e8%bf%91%e5%87%ba%e7%89%88%e3%81%95%e3%82%8c%e3%81%9fd3%e5%8f%82%e8%80%83%e6%9b%b8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427294132;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2746;}i:1;a:1:{s:2:"id";i:2826;}i:2;a:1:{s:2:"id";i:3062;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ビッグデータやオープンデータの前に、まずはバッドデータと格闘しよう</title>
		<link>http://shimz.me/blog/book/3127</link>
		<pubDate>Fri, 01 Nov 2013 02:08:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3127</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116406/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51WREvWeqbL._SL160_.jpg" alt="バッドデータハンドブック ―データにまつわる問題への19の処方箋" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116406/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">バッドデータハンドブック ―データにまつわる問題への19の処方箋</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.02.17</div></div><div class="amazlet-detail">Q. Ethan McCallum <br />オライリージャパン <br />売り上げランキング: 354,632<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116406/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<blockquote>
「バッドデータ（Bad Data）」のきちんとした定義を決めるのは難しいことです。現場でよく見かける、純粋に技術的な現象だと考える人もいます。たとえば、欠損値、不正なレコード、おかしなファイル形式などです。確かに、これらもバッドデータに含まれますが、実際にはもっと多岐にわたります。時間を食うようなデータもバッドデータです。これはあなたを残業させたり、イライラのもとになります。アクセスできないデータ、あったのに消えてしまったデータ、昨日と今日とで違っているデータ、これらもみなバッドデータです。要するに、バッドデータとは邪魔になるデータのことです。
</blockquote>

バッドデータにまつわるトラブルなどを事例を元に以下に解決したか、また、そもそもバットデータとは何なのかについて書かれた書籍です。
技術的な内容もありますが、むしろバッドデータとどう向き合うのか、エンジニアとしてできることは何なのかというヒントが得られる参考書です。

最近ではビックデータやオープンデータが話題ですが、必要なデータが使いやすい形で手に入るということは殆どありません。
本書では、そんなデータと日々向き合いいくつものバッドデータの壁を乗り越えてきたエンジニアたちの先人の知恵が詰まっています。

特に第11章「最善は善の敵、バッドデータは本当にバッドなのか？」ではシカゴ市のイノベーション＆テクノロジー部局長であるブレット・ゴールドスタインさんが、就任当初「汚れた行政データ」と格闘した経緯が掲載されていてオープンデータクラスタの方にも興味深い内容なのではないかと。

行政データが扱いづらいのは日本もアメリカも元々変わらなかったのですが、それら公的機関の出すバッドデータと対峙してきたエンジニアたちの活躍によってデータがいかに重要かということが理解されていったんだろうなぁと。

11章の中から特に感銘を受けた文章を載せておきます。

<blockquote>汚いデータには理由があります。何もやれることがない場合もありますが、それ以外は間違いなくあなたの責任です。いかなるときも、不完全なデータを投げ出したい誘惑に耐える必要があります。
日々の生活と複雑なエコシステムという現実には、高いエントロピー、すなわち「汚さ」があります。こうした現実にまつわるデータも同じです。それは問題解決から逃れる言い訳にはなりません。代わりに、データサイエンティストとして新しいテクニックを追い求め、それを自分たちの生活にとって重要な問題に適用し続けるモチベーションにすべきなのです。</blockquote>

汚いデータでも、活かす殺すはエンジニア次第ということですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3127</wp:post_id>
		<wp:post_date>2013-11-01 11:08:50</wp:post_date>
		<wp:post_date_gmt>2013-11-01 02:08:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3127</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3128]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390474;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3283;}i:1;a:1:{s:2:"id";i:2909;}i:2;a:1:{s:2:"id";i:4104;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%93%e3%83%83%e3%82%b0%e3%83%87%e3%83%bc%e3%82%bf%e3%82%84%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%81%ae%e5%89%8d%e3%81%ab%e3%80%81%e3%81%be%e3%81%9a%e3%81%af%e3%83%90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>流山市のオープンデータを使ってストーリーマップを作ってみた。</title>
		<link>http://shimz.me/blog/google-map-api/3132</link>
		<pubDate>Fri, 01 Nov 2013 11:37:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3132</guid>
		<description></description>
		<content:encoded><![CDATA[最近、海外のサイトでちらほら見かけるストーリーマップというモノが面白そうだったので作ってみました。

<a href="http://shimz.me/example/gmapv3/storymap/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/storymap1-e1383305720413.png" alt="storymap1" width="585" height="277" class="aligncenter size-full wp-image-3133" /></a>

<a href="http://shimz.me/example/gmapv3/storymap/01/index.html">example</a>

掲載した情報は<a href="http://www.city.nagareyama.chiba.jp/10763/">流山市のオープンデータトライアル</a>で公開されている「桜の名所」データを使わせてもらいました。

「ストーリーマップ」という用語は、色々なクラスタで使用され意味もそれぞれ違ってくるのですが、ここではスクロールイベントをトリガーにして地図操作を行い、ストーリーと地図を連動させるコンテンツです。

最近よくみかけて、オリジナルの地図を使ったものから、Google Maps APIを使ったもの、スクロールとストリートビューが連動したものなど様々なコンテンツが作られているようです。


今回は、とりあえず簡単にGoogle Maps APIと以前紹介したjQueryのプラグイン「<a href="http://shimz.me/blog/jquery/2304">Waypoints.js</a>」を使用しています。

手軽なわりにインパクトもあって、パララックス効果なんかと組み合わせたら色々面白いモノがつくれそうですね。

いわゆる聖地巡礼なんかも、ストーリーマップにしてみたら面白いんじゃないでしょうか。

（群馬県もこういうデータ出してくれれば、色々遊べるのに……）

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3132</wp:post_id>
		<wp:post_date>2013-11-01 20:37:10</wp:post_date>
		<wp:post_date_gmt>2013-11-01 11:37:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3132</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3133]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e6%b5%81%e5%b1%b1%e5%b8%82%e3%81%ae%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%82%b9%e3%83%88%e3%83%bc%e3%83%aa%e3%83%bc%e3%83%9e%e3%83%83]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374931;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3141;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:2670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>地理院地図の地図タイルを使ったD3.js&amp;Cesiumサンプル</title>
		<link>http://shimz.me/blog/d3-js/3134</link>
		<pubDate>Tue, 05 Nov 2013 00:15:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3134</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsで<a href="http://shimz.me/blog/d3-js/3029">ラスター地図のパン／ズーム＆移動</a>の記事を書いた頃は、まだ「電子国土Web.NEXT」だったので、タイル画像を取得するためのリクエストを送るのが非常にメンドウだったのですが、「地理院地図」に代わって一般的なxyz方式でタイル画像を取得できるようになりました。詳細は下記ページで確認できます。

<strong><a href="http://portal.cyberjapan.jp/help/development.html">地理院地図　地理院タイルを用いた開発</a></strong>

だいぶ使いやすくなりましたね。
<a href="http://openlayers.org/">OpenLayers</a>や<a href="http://leafletjs.com/">Leaflet</a>を用いたサンプルは公式サイトに掲載されているので、ここではD3とCesiumを使ったサンプルを載せておきます。



<h2>D3ラスタータイルサンプル</h2>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/geo_template/geoTile_chiriin/"></iframe>
 
<pre class="lang:xhtml decode:true " >&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://d3js.org/d3.geo.tile.v0.min.js&quot;&gt;&lt;/script&gt;
</pre> 
<pre class="lang:js decode:true " >(function(){
	var width = Math.max(960, window.innerWidth);
	var height = Math.max(500, window.innerHeight);

	var tile = d3.geo.tile().size([width, height]);

	var minZoomLevel = 14;
	var maxZoomLevel = 20;

	var projection = d3.geo.mercator()
		.scale((1 &lt;&lt; minZoomLevel) / 2 / Math.PI)
		.translate([width / 2, height / 2]);

	var center = projection([139.3555791,34.7500396]);


	var svg = d3.select(&quot;svg&quot;)
		.attr({
		&quot;width&quot;: width,
		&quot;height&quot;: height
		});

	var raster = svg.append(&quot;g&quot;);

	var zoomed = function() {
		var tiles = tile
		.scale(zoom.scale())
		.translate(zoom.translate())
		();
			
		var image = raster
			.attr(&quot;transform&quot;, &quot;scale(&quot; + tiles.scale + &quot;)translate(&quot; + tiles.translate + &quot;)&quot;)
			.selectAll(&quot;image&quot;).data(tiles, function(d) { return d; });

		image.exit().remove();

		image.enter().append(&quot;image&quot;)
			.attr(&quot;xlink:href&quot;, function(d) {
				return &quot;http://cyberjapandata.gsi.go.jp/xyz/std/&quot;+d[2]+&quot;/&quot;+d[0]+&quot;/&quot;+d[1]+&quot;.png&quot;;
			})
			.attr({
				&quot;width&quot;: 1,
				&quot;height&quot;: 1,
				&quot;x&quot;: function(d) { return d[0]; },
				&quot;y&quot;: function(d) { return d[1]; }
			})

	}

	var zoom = d3.behavior.zoom()
		.scale(projection.scale() * 2 * Math.PI)
		.scaleExtent([1 &lt;&lt; minZoomLevel, 1 &lt;&lt; maxZoomLevel]) //スケールの最小値、最大値指定
		.translate([width - center[0], height - center[1]])
		.on(&quot;zoom&quot;, zoomed);


	projection
		.scale(1 / 2 / Math.PI)
		.translate([0, 0]);

	svg.call(zoom);
	zoomed();

})();</pre> 


まぁ、ラスター地図を表示するなら素直にOpenLayersやLeaflet使った方が良いと思いますが。



<h2>cesium 3D地図サンプル</h2>
※WebGLに対応／有効にしたブラウザでないと見れません。
<iframe width="100%" height="400" scrolling="no" src="http://shimz.me/example/cesium/chiriin/"></iframe>
<pre class="lang:js decode:true " >var widget = new Cesium.CesiumWidget('cesiumContainer', {
	imageryProvider : new Cesium.OpenStreetMapImageryProvider({
		url : 'http://cyberjapandata.gsi.go.jp/xyz/std/', //地理院地図を指定
		credit : '地理院地図'	
	})
});</pre> 

ちょー簡単！
OpenLayersのサイトを見ていたら、OpenLayers 3.0にはCesiumライブラリも含まれるらしいので、今のうちに勉強しておいてもいいかもしれません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3134</wp:post_id>
		<wp:post_date>2013-11-05 09:15:59</wp:post_date>
		<wp:post_date_gmt>2013-11-05 00:15:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3134</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cesium"><![CDATA[Cesium]]></category>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3135]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e5%9c%b0%e7%90%86%e9%99%a2%e5%9c%b0%e5%9b%b3%e3%81%ae%e5%9c%b0%e5%9b%b3%e3%82%bf%e3%82%a4%e3%83%ab%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9fd3-jscesium%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427304003;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3029;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:3019;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsで読み込んだgeoJSONデータをthree.jsを使って3D表示する。</title>
		<link>http://shimz.me/blog/d3-js/3137</link>
		<pubDate>Mon, 11 Nov 2013 07:48:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3137</guid>
		<description></description>
		<content:encoded><![CDATA[マウスでグリグリできる。
<a href="http://shimz.me/example/threejs/02/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/d3threejsjapan.jpg" alt="d3threejsjapan" width="590" height="474" class="aligncenter size-full wp-image-3138" /></a>

<a href="http://shimz.me/example/threejs/02/">example</a>


<h2>サンプル</h2>
<a href="https://github.com/asutherland/d3-threeD">d3-threeD</a>というライブラリを使用しています。
 
<pre class="lang:js decode:true " >d3.json(&quot;japan.geojson&quot;, function(json) {
    d3main(json);
});


function d3main(json) {
    var container;
    var camera, scene, renderer;
    var mesh;
    
    initScene();


    function initScene() {
	container = document.createElement('div');
	document.body.appendChild(container);
	
	//シーンの追加
	scene = new THREE.Scene();
	
	//カメラの設定
	camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);
	camera.position.set(0, 0, 300);
	
	controls = new THREE.TrackballControls( camera );
	
	scene.add(camera);
	
	//ライティングの設定
	var light = new THREE.DirectionalLight(0xffffff, 2);
	light.position.set(1, 1, 1).normalize();
	scene.add(light);
	
	//目印用のキューブを追加
	var geometry = new THREE.CubeGeometry(20, 20, 20);
	var material = new THREE.MeshLambertMaterial({color:0x0000ff})
	mesh = new THREE.Mesh(geometry, material);
	scene.add(mesh);
	
	
	
	//geojsonデータ読み込み
	var geodata = json.features;
	
	//投影法指定
	var mercator = d3.geo.equirectangular();
	
	//path変換関数生成
	var path = d3.geo.path().projection(mercator);
	
	//表示位置調整
	var translate = mercator.translate();
	translate[0] = -2200;
	translate[1] = 550;
	mercator.translate(translate);
	
	//スケール指定
	mercator.scale(900);
	    
	    
	//geoJSON→svg path→three.js mesh変換    
	var countries = [];
	for (i = 0 ; i &lt; geodata.length ; i++) {
	    var geoFeature = geodata[i];
	    var properties = geoFeature.properties;
	    var feature = path(geoFeature);
	
	    //svgパスをthree.jsのmeshに変換
	    var gmesh = transformSVGPathExposed(feature);
	
	    for (j = 0 ; j &lt; gmesh.length ; j++) {
		countries.push({&quot;data&quot;: properties, &quot;mesh&quot;: gmesh[j]});
	    }
	}
	
	//mesh追加
	for (i = 0 ; i &lt; countries.length ; i++) {
	
	    var material = new THREE.MeshPhongMaterial({
		color: Math.floor(Math.random() * 0xFFFFFF), 
		opacity:1
	    });
	    
	    var shape3d = countries[i].mesh.extrude({
		amount: 20,
		bevelEnabled: false
	    });
	    var toAdd = new THREE.Mesh(shape3d, material);
	    toAdd.rotation.x = 60;
	    scene.add(toAdd);
	}
	
	
	//レンダリング
	renderer = new THREE.WebGLRenderer();
	renderer.setSize(window.innerWidth, window.innerHeight);
	
	container.appendChild(renderer.domElement);
	renderer.render(scene, camera);
	    
	animate();
    }

  
    function animate() {
	requestAnimationFrame( animate ); 
	renderer.render( scene, camera ); 
	controls.update();
    }  
  
}
</pre> 


表示位置の調整とかが結構面倒でした。
amountで無理やり厚みを付けているので、あんまり綺麗に表示できてません。
ちゃんと使いこなすには、Three.jsを勉強しないとならないですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3137</wp:post_id>
		<wp:post_date>2013-11-11 16:48:55</wp:post_date>
		<wp:post_date_gmt>2013-11-11 07:48:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3137</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="three-js"><![CDATA[three.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3138]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e3%81%a7%e8%aa%ad%e3%81%bf%e8%be%bc%e3%82%93%e3%81%a0geojson%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92three-js%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a63d%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371458;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3139;}i:1;a:1:{s:2:"id";i:2993;}i:2;a:1:{s:2:"id";i:3025;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js&amp;Three.js】各都道府県の人口に合わせて高さを変えてみた（3D地図）</title>
		<link>http://shimz.me/blog/d3-js/3139</link>
		<pubDate>Tue, 12 Nov 2013 00:31:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3139</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/threejs/03/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/d3threejsjapan2.jpg" alt="d3threejsjapan2" width="590" height="327" class="aligncenter size-full wp-image-3140" /></a>

<a href="http://shimz.me/example/threejs/03/">example</a>

<a href="http://shimz.me/blog/d3-js/3137">昨日の記事</a>の続きです。
各都道府県の人口データを元にMeshの厚みを変えてみました。
人口の多い県ほど高く表示されます。

<h2>サンプル</h2> 
<pre class="lang:js decode:true " >d3.json(&quot;japan.geojson&quot;, function(json) {
    d3main(json);
});


function d3main(json) {
    var container;
    var camera, scene, renderer;
    var mesh;
    
    initScene();


    function initScene() {
	container = document.createElement('div');
	document.body.appendChild(container);
	
	//シーンの追加
	scene = new THREE.Scene();
	
	//カメラの設定
	camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);
	camera.position.set(0, 0, 200);
	
	controls = new THREE.TrackballControls( camera );
	
	scene.add(camera);
	
	//ライティングの設定
	var light = new THREE.DirectionalLight(0xffffff, 2);
	light.position.set(1, -4, 1).normalize();
	scene.add(light);
	
	//geojsonデータ読み込み
	var geodata = json.features;
	
	//投影法指定
	var mercator = d3.geo.equirectangular();
	
	//path変換関数生成
	var path = d3.geo.path().projection(mercator);
	
	//表示位置調整
	var translate = mercator.translate();
	translate[0] = -2200;
	translate[1] = 550;
	mercator.translate(translate);
	
	//スケール指定
	mercator.scale(900);
	    
	var max = d3.max(geodata, function(d){ return +d.properties['jinkou_人口']})
	
	var colorScale = d3.scale.linear().domain([0, max]).range([&quot;#00cc00&quot;, &quot;#cc0000&quot;]);
	var amountScale = d3.scale.linear().domain([0, max]).range([0, 60]);
	
	//geoJSON→svg path→three.js mesh変換    
	var countries = [];
	for (i = 0 ; i &lt; geodata.length ; i++) {
	    var geoFeature = geodata[i];
	    var properties = geoFeature.properties;
	    var feature = path(geoFeature);
	
	    //svgパスをthree.jsのmeshに変換
	    var gmesh = transformSVGPathExposed(feature);
	
	    for (j = 0 ; j &lt; gmesh.length ; j++) {
		countries.push({&quot;data&quot;: properties, &quot;mesh&quot;: gmesh[j]});
	    }
	}
	
	//mesh追加
	for (i = 0 ; i &lt; countries.length ; i++) {
	    var color = colorScale(countries[i].data['jinkou_人口']);
	    var material = new THREE.MeshPhongMaterial({
		color: color,
		opacity:0.9
	    });
	    
	    var amount = ~~(amountScale(countries[i].data['jinkou_人口']));
	    
	    var shape3d = countries[i].mesh.extrude({
		amount: amount,
		bevelEnabled: false
	    });
	    var toAdd = new THREE.Mesh(shape3d, material);
	   toAdd.rotation.x = 60;
	    toAdd.position.z = - ~~(60 - amount);
	    scene.add(toAdd);
	}
	
	
	//レンダリング
	renderer = new THREE.WebGLRenderer();
	renderer.setSize(window.innerWidth, window.innerHeight);
	
	container.appendChild(renderer.domElement);
	renderer.render(scene, camera);
	    
	animate();
    }

  
    function animate() {
	requestAnimationFrame( animate ); 
	renderer.render( scene, camera ); 
	controls.update();
    }  
  
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3139</wp:post_id>
		<wp:post_date>2013-11-12 09:31:35</wp:post_date>
		<wp:post_date_gmt>2013-11-12 00:31:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3139</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="three-js"><![CDATA[three.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3140]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-jsthree-js%e3%80%91%e5%90%84%e9%83%bd%e9%81%93%e5%ba%9c%e7%9c%8c%e3%81%ae%e4%ba%ba%e5%8f%a3%e3%81%ab%e5%90%88%e3%82%8f%e3%81%9b%e3%81%a6%e9%ab%98%e3%81%95%e3%82%92%e5%a4%89%e3%81%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372296;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3137;}i:1;a:1:{s:2:"id";i:3147;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Earthを使ったストーリマップをブラウザ上で作成できるサービス「Tour Builder」</title>
		<link>http://shimz.me/blog/web/3141</link>
		<pubDate>Tue, 12 Nov 2013 02:15:12 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3141</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://tourbuilder.withgoogle.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/tour_builder_screen.jpeg" alt="tour_builder_screen" width="500" height="310" class="aligncenter size-full wp-image-3142" /></a>

<a href="https://tourbuilder.withgoogle.com/">Tour Builder</a>

<a href="http://shimz.me/blog/google-map-api/3132">以前の記事</a>で、流山市のストーリーマップを作成しましたが、このような地図と物語を連動させて見せるコンテンツを誰でも手軽に作成できるストーリーテリングツールがGoogleから提供されています。

MNDRの北米ツアーのストーリーマップなどが公開されています。
<a href="https://tourbuilder.withgoogle.com/builder#play/ahJzfmd3ZWItdG91cmJ1aWxkZXJyDAsSBFRvdXIYh8oEDA">MNDR / Chromeo / The Suzan North American Tour 2011</a>


ストーリーマップを作成する操作画面はこんな感じ。
<img src="http://shimz.me/blog/wp-content/uploads/2013/11/tourbuilderedit.jpg" alt="tourbuilderedit" width="590" height="290" class="aligncenter size-full wp-image-3143" />

ロケーションを追加して、記事を書いていくだけでストーリーマップを作成することができます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3141</wp:post_id>
		<wp:post_date>2013-11-12 11:15:12</wp:post_date>
		<wp:post_date_gmt>2013-11-12 02:15:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-earth%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e3%82%b9%e3%83%88%e3%83%bc%e3%83%aa%e3%83%9e%e3%83%83%e3%83%97%e3%82%92%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e4%b8%8a%e3%81%a7%e4%bd%9c%e6%88%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3142]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427335136;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3457;}i:1;a:1:{s:2:"id";i:2916;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadのプログラミングアプリの決定版になるかも？　iPadアプリが作成できる開発環境「JASIC」が凄い！</title>
		<link>http://shimz.me/blog/iphoneipad/3144</link>
		<pubDate>Thu, 14 Nov 2013 05:25:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3144</guid>
		<description></description>
		<content:encoded><![CDATA[※残念ながら下記アプリは公開停止されてしまったようです。現在はダウンロードできません。

他のアプリをご検討ください。
<a href="http://shimz.me/blog/programming/2781">[Codea]iPadでiPadアプリが作成できるiPadアプリがまた一つ増えました。</a>
<a href="http://shimz.me/blog/iphoneipad/2730">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>
<br />
<hr />
<br />

<a href="https://itunes.apple.com/jp/app/jasic/id647618922?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/jasic1.png" alt="jasic1" width="576" height="384" class="aligncenter size-full wp-image-3145" /></a>

<a href="https://itunes.apple.com/jp/app/jasic/id647618922?mt=8&at=10lMp5">JASIC</a>

今まで「<a href="http://shimz.me/blog/programming/2781">Codea</a>」や「<a href="http://shimz.me/blog/iphoneipad/2730">ScriptKit</a>」など、iPad上でプログラミングを行い、作成したコードをXcodeのプロジェクトファイルとして出力できるアプリを紹介してきましたが、新たに「JASIC」というアプリが出てきました。

これが、なかなか凄い！　まずは下記の紹介動画をどうぞ。

<iframe src="//player.vimeo.com/video/66526721" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href="http://vimeo.com/66526721">JASIC-01</a> from <a href="http://vimeo.com/user18421229">Mohsen Agsen</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

JASICの特徴を並べてみると

ベース言語はみんな大好き(?)JavaScript
入力補完機能などを備えたエディタ
Dropbox、iCloudと連動
有料(100円〜800円)になりますが、リッチなランタイムが付属します。
・ネイティブUIコントロール
・WebGL・GLSLサポート
・SQLiteサポート
・HTTP・OAuthサポート
・iPad/iPhoneのセンサーを利用
・Xcodeプロジェクトとして出力

そして大きな特徴として、高度なデバッグ機能が搭載されています。
・ブレークポイントの設定
・ステップ、ステップイン、ステップアウト実行
・変数のwatch
・コールスタックの表示
・オブジェクトビューアー
・コンソール
などが利用できます。

iPadのプログラミングアプリで、これほどちゃんとしたデバッグ機能を備えたものは今までなかったように思います。

このようにかなり素晴らしいアプリなんですが……残念ことに日本語が使えません。エディタ上で日本語を入力しようとすると、変換を行った瞬間にアプリが落ちます。

まことに残念です。

そんなわけで、完成度ではCodeaには及ばないJASICですが、今後に期待したいアプリです。(いつか日本語にも対応してくれたらいいなぁ)







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3144</wp:post_id>
		<wp:post_date>2013-11-14 14:25:48</wp:post_date>
		<wp:post_date_gmt>2013-11-14 05:25:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3144</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3145]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[ipad%e3%81%ae%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%82%a2%e3%83%97%e3%83%aa%e3%81%ae%e6%b1%ba%e5%ae%9a%e7%89%88%e3%81%ab%e3%81%aa%e3%82%8b%e3%81%8b%e3%82%82%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427363971;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2781;}i:1;a:1:{s:2:"id";i:2730;}i:2;a:1:{s:2:"id";i:1812;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】SVGで作成した都道府県の地形を並べて表示する</title>
		<link>http://shimz.me/blog/d3-js/3147</link>
		<pubDate>Thu, 14 Nov 2013 00:03:16 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3147</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/prefList/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/preflist.jpg" alt="preflist" width="590" height="278" class="aligncenter border size-full wp-image-3148" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/prefList/">example</a>

見たまんまです。
D3.jsでGeoJSONデータを読み込み、svgのPathで地形を描画し並べて表示しています。
ポイントは各都道府県の中心座標を取得しtranslateで中心座標のxyを引くことで、一旦全ての地形の座標を0,0に初期化しているところです。
沖縄県だけ、中心点の座標が上手く取得できず変な場所に表示されています。

<h2>サンプル</h2>
 
<pre class="lang:js mark:26-32 decode:true " >d3.json(&quot;japan.geojson&quot;, function(json) {
	d3main(json);
});


function d3main(json){

	var geodata = json.features;

	projection = d3.geo
	    .mercator()		//投影法の指定
	    .scale(1500)	//スケール（ズーム）の指定
	    .translate([300,350])
	    .center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//投影

	var svg = d3.select(&quot;svg&quot;);	

	var map =  svg.append(&quot;svg:g&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;g&quot;)
		.attr(&quot;transform&quot;, function(d, i){
		    var center = path.centroid(d); //中心点取得
		    var x = ~~center[0]; 
		    var y = ~~center[1];
		    var nx = Math.floor(i%10) * 150 + 100; //並び位置(x軸)
		    var ny = Math.floor(i/10) * 120 + 100; //並び位置(y軸)
		    //中心点分を引いて一度座標をx=0,y=0に戻す。その後nx,nyの位置に表示
		    return &quot;translate(-&quot;+x+&quot;,-&quot;+y+&quot;),translate(&quot;+nx+&quot;,&quot;+ny+&quot;)&quot;;		    
		})
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;green&quot;,
			&quot;fill-opacity&quot;: 0.5,
			&quot;stroke&quot;: &quot;black&quot;
		})
		.append(&quot;title&quot;)
		.text(function(d){ return d.properties.PREF })
}</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3147</wp:post_id>
		<wp:post_date>2013-11-14 09:03:16</wp:post_date>
		<wp:post_date_gmt>2013-11-14 00:03:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3147</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90d3-js%e3%80%91svg%e3%81%a7%e4%bd%9c%e6%88%90%e3%81%97%e3%81%9f%e9%83%bd%e9%81%93%e5%ba%9c%e7%9c%8c%e3%81%ae%e5%9c%b0%e5%bd%a2%e3%82%92%e4%b8%a6%e3%81%b9%e3%81%a6%e8%a1%a8%e7%a4%ba%e3%81%99]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427375843;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3489;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:3025;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>アーリーアダプターとバズワードの関係を図にしてみた。</title>
		<link>http://shimz.me/blog/other/3149</link>
		<pubDate>Fri, 15 Nov 2013 11:30:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3149</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://cacoo.com/">Cacoo</a>の練習に作ってみました。
こういう構図をよく見かけるような気がします。（クリックで拡大）

<a href="http://i2.wp.com/shimz.me/blog/wp-content/uploads/2013/11/buzzword-l.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/buzzword-th.jpg" alt="buzzword-th" width="590" height="548" class="aligncenter size-full wp-image-3153" /></a>

cacoo便利！

【補足】
<a href="http://marketingis.jp/wiki/%E3%82%A4%E3%83%8E%E3%83%99%E3%83%BC%E3%82%BF%E3%83%BC%E7%90%86%E8%AB%96">アーリーアダプター</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3149</wp:post_id>
		<wp:post_date>2013-11-15 20:30:32</wp:post_date>
		<wp:post_date_gmt>2013-11-15 11:30:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%a2%e3%83%bc%e3%83%aa%e3%83%bc%e3%82%a2%e3%83%80%e3%83%97%e3%82%bf%e3%83%bc%e3%81%a8%e3%83%90%e3%82%ba%e3%83%af%e3%83%bc%e3%83%89%e3%81%ae%e9%96%a2%e4%bf%82%e3%82%92%e5%9b%b3%e3%81%ab%e3%81%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426942707;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3714;}i:1;a:1:{s:2:"id";i:3601;}i:2;a:1:{s:2:"id";i:4086;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ゲームをつくろう！もくもく会をやります。</title>
		<link>http://shimz.me/blog/other/3155</link>
		<pubDate>Fri, 15 Nov 2013 13:27:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3155</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://atnd.org/events/45545">ゲームを作ろう！もくもく会#0</a>

今日思いついて、明日やるという突貫イベント。
まぁ、イベントという形をとっていますが、実際には「コワーキングスペース行ってゲームでも作ろうかな」と思いついた。というだけなので、たまたま暇で興味がある方がいらっしゃいましたらご参加ください。

合間合間に時折「ゲームでもつくってみようかなー勉強になるし」と思ったりしてたまに下記の様なものをちょこっと作ってみたりもするのですが、なかなか継続ません。

<script type="text/javascript" src="http://jsdo.it/blogparts/qlDp/js?width=465&height=496&view=play"></script>

そもそも時間も忍耐力も必要となる作業ですし、「他にやらなきゃいけないこともあるしなー」と思って中途半端になりがちです。

でも、年末の土曜３時間ぐらいは、こういう仕事と関係ない学習に費やしても良いんじゃないかと思って初めてみました。
（まぁ、常日頃仕事と関係ないことばかりやっているのですが）

大きな予定でも入らない限りは、来週、再来週もやろうかな？と思っているので、お暇だったら寄って見てやってください。


ちなみに、このぐらいラフな感じで勉強会orもくもく会って開いてもいいらしいので、興味ある方は自分の好きなテーマで開催してみても良いかもしれません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3155</wp:post_id>
		<wp:post_date>2013-11-15 22:27:38</wp:post_date>
		<wp:post_date_gmt>2013-11-15 13:27:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b2%e3%83%bc%e3%83%a0%e3%82%92%e3%81%a4%e3%81%8f%e3%82%8d%e3%81%86%ef%bc%81%e3%82%82%e3%81%8f%e3%82%82%e3%81%8f%e4%bc%9a%e3%82%92%e3%82%84%e3%82%8a%e3%81%be%e3%81%99%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427379913;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3726;}i:1;a:1:{s:2:"id";i:2969;}i:2;a:1:{s:2:"id";i:3066;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>オフラインJavaScript勉強会に参加してきました。</title>
		<link>http://shimz.me/blog/other/3156</link>
		<pubDate>Mon, 18 Nov 2013 01:52:17 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3156</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://twitter.com/vestige_">@vestige_</a>さんにお誘いいただいて、「<a href="http://tkbjs.doorkeeper.jp/events/6786">オフラインJavaScript勉強会</a>」に参加させていただきました．
久々の東京で、ちょっと人の多さに酔いましたがｗ

以下、簡単ですが感想を。


■ <a href="https://twitter.com/azu_re">@azu</a>さんの発表(ASTについて)

<a href="http://efcl.info/2013/1117/res3481/">tkbjsでJavaScript ASTについて発表してきました</a>

JavaScriptソースコードの構文木、JSONで表現されるそうです。
既にJavascriptからASTに変換するパーサーや、逆にASTをJavaScriptコードに変換するジェネレーターがあるそうで、これらを使えばオレオレAltJS言語などを作るのが多少楽になるよーとのことでした。
個人的に、JavaScriptのソースコードをJSONで表現するのが面白いなと。
ASTをD3.jsにデータセットとして渡してあげれば、Treeレイアウトなどを使ってソースコードのビジュアライズとか作成できそうな気がします。
まったくキャッチしていなかった情報だったので、非常に勉強になりました。


■  Effective JavaScript勉強会

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EESW7JQ/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/517tJs%2B%2B%2BnL._SL160_.jpg" alt="Effective JavaScript　JavaScriptを使うときに知っておきたい68の冴えたやり方" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EESW7JQ/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Effective JavaScript　JavaScriptを使うときに知っておきたい68の冴えたやり方</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.11.18</div></div><div class="amazlet-detail">翔泳社 (2013-08-09)<br />売り上げランキング: 4,059<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EESW7JQ/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

Kindleを忘れてしまうという大失態 orz
iPhoneのKindleアプリで何とか参加しました。

一応、発売時に購入し一通り目は通してあったのですが、今回の勉強会のように１行づつちゃんと読み込んでいくと、新たな発見もあり理解も深まりますね。
いわゆる読書会的なものに参加したのは初めてだったのですが、良い経験だったのと同時に自分がいかに読み足りていなかったかを改めて認識しました。

機会があれば、他の参考書の読書会などにも参加してみたいと思います。



 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3156</wp:post_id>
		<wp:post_date>2013-11-18 10:52:17</wp:post_date>
		<wp:post_date_gmt>2013-11-18 01:52:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%aa%e3%83%95%e3%83%a9%e3%82%a4%e3%83%b3javascript%e5%8b%89%e5%bc%b7%e4%bc%9a%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3158]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426953044;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3181;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:2570;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Qiitaソーシャルグラフの視覚化。</title>
		<link>http://shimz.me/blog/d3-js/3161</link>
		<pubDate>Fri, 22 Nov 2013 01:24:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3161</guid>
		<description></description>
		<content:encoded><![CDATA[……失敗かな。

<a href="http://shimz.me/example/d3js/forcelayout/qiita/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/qiitagraph.jpg" alt="qiitagraph" width="590" height="286" class="aligncenter size-full wp-image-3162" /></a>

<a href="http://shimz.me/example/d3js/forcelayout/qiita/">example</a>

各ユーザーのフォローデータはAPIから取得しました。

<a href="http://qiita.com/docs">Qiita API document</a>

関係性(フォローの状態)を Force Layoutにしてみましたが、ぶっちゃけあまり見やすくありません。

分かり易く表示するなら、もっと別の表現を使用した方がよさそうですね。

<h2>サンプル</h2>
pathの先頭に矢印を付けるのと、アイコン画像を丸く切り取るのに、svgのdef要素とclipPath要素を使用しています。
<pre class="lang:xhtml decode:true " >
&lt;svg&gt;
&lt;clipPath id=&quot;cut-off-circle&quot;&gt;
  &lt;circle cx=0 cy=0 r=15 /&gt;
&lt;/clipPath&gt;    
&lt;defs&gt;
    &lt;marker id=&quot;licensing&quot; viewBox=&quot;0 -5 10 10&quot; refX=&quot;15&quot; refY=&quot;-1.5&quot; markerWidth=&quot;6&quot; markerHeight=&quot;6&quot; orient=&quot;auto&quot;&gt;
	&lt;path d=&quot;M0,-5L10,0L0,5&quot;&gt;&lt;/path&gt;
    &lt;/marker&gt;
&lt;/defs&gt;
&lt;/svg&gt;</pre> 
 
<pre class="lang:js decode:true " >d3.json('links.json', function(d){
	var links = d;
	var nodes = {};

	links.forEach(function(link) {  
		link.source = nodes[link.node1] || (nodes[link.node1] = {name: link.node1});
		link.target = nodes[link.node2] || (nodes[link.node2] = {name: link.node2, pref: link.node2_prf});
	});

	nodes['_shimizu']['pref'] = {url_name: &quot;_shimizu&quot;, profile_image_url:&quot;https://si0.twimg.com/profile_images/604833171/twitter_bigger_normal.jpg&quot;};

	var graph = {nodes:nodes, links:links};

	d3draw(graph);
});


function d3draw(graph) {

	var w = 1200;
	var h = 1200;

	var force = d3.layout.force()
		.nodes(d3.values(graph.nodes))
		.links(graph.links)
		.size([w, h])
		.gravity(0)
		.linkDistance(300)
		.linkStrength(1)
		.charge(-50)
		.on(&quot;tick&quot;, tick)
		.start();

	var svg = d3.select(&quot;svg&quot;)
		.attr({
			&quot;width&quot;: w,
			&quot;height&quot;: h
		});

	//フォロー状態を示すpathを追加
	var path = svg.append(&quot;g&quot;).selectAll(&quot;path&quot;)
		.data(force.links())
		.enter()
		.append(&quot;path&quot;)
		.attr({
			&quot;class&quot;: &quot;link licensing&quot;,
			&quot;marker-end&quot;: &quot;url(#licensing)&quot;
		});

	//ユーザーイメージ追加
	var userImg = svg.append(&quot;g&quot;).selectAll(&quot;a&quot;)
		.data(force.nodes())
		.enter()
		.append(&quot;a&quot;)
		.attr({
			&quot;xlink:href&quot;: function(d){ return &quot;http://qiita.com/&quot; + d.pref.url_name },
			&quot;target&quot;:&quot;_blank&quot;
		})
		.append(&quot;image&quot;)
		.attr({
			&quot;class&quot;: &quot;userImg&quot;,
			&quot;xlink:href&quot;: function(d){ return d.pref.profile_image_url }, //ノード用画像の設定
			&quot;x&quot;: &quot;-15px&quot;,
			&quot;y&quot;: &quot;-15px&quot;,
			&quot;width&quot;: &quot;30px&quot;,
			&quot;height&quot;: &quot;30px&quot;,
			&quot;clip-path&quot;: &quot;url(#cut-off-circle)&quot;
		})
		.call(force.drag);

	//ユーザー名ラベル追加
	var label = svg.append(&quot;g&quot;).selectAll(&quot;g&quot;)
		.data(force.nodes())
		.enter()
		.append(&quot;g&quot;);

	label.append(&quot;text&quot;) //ラベル縁取り
		.attr({
			&quot;x&quot;: 8,
			&quot;y&quot;: &quot;.51em&quot;,
			&quot;class&quot;: &quot;shadow&quot;
		})
		.text(function(d) {  return d.name; });

	label.append(&quot;text&quot;) //ラベル本文
		.attr({
			&quot;x&quot;: 8,
			&quot;y&quot;: &quot;.51em&quot;
		})
		.text(function(d) { return d.name; });

	//アニメーション処理
	function tick() {
		path.attr(&quot;d&quot;, function(d) {
			var dx = d.target.x - d.source.x;
			var dy = d.target.y - d.source.y;
			var dr =  Math.sqrt(dy* dy+ dx*dx);
			return &quot;M&quot; + d.source.x + &quot;,&quot; + d.source.y + &quot;A&quot; + dr + &quot;,&quot; + dr + &quot; 0 0,1 &quot; + d.target.x + &quot;,&quot; + d.target.y;
		});

		userImg.attr(&quot;transform&quot;, function(d) {
			return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;;
		});

		label.attr(&quot;transform&quot;, function(d) {
			return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;;
		});
	}

}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3161</wp:post_id>
		<wp:post_date>2013-11-22 10:24:13</wp:post_date>
		<wp:post_date_gmt>2013-11-22 01:24:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3161</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3162]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[qiita%e3%82%bd%e3%83%bc%e3%82%b7%e3%83%a3%e3%83%ab%e3%82%b0%e3%83%a9%e3%83%95%e3%81%ae%e8%a6%96%e8%a6%9a%e5%8c%96%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427408344;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2877;}i:1;a:1:{s:2:"id";i:3770;}i:2;a:1:{s:2:"id";i:3019;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Qiitaのソーシャルグラフをサークル状に表示にしてみた。</title>
		<link>http://shimz.me/blog/d3-js/3164</link>
		<pubDate>Tue, 26 Nov 2013 00:51:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3164</guid>
		<description></description>
		<content:encoded><![CDATA[こういったグラフ(図)を何て呼ぶのかわからない。

<a href="http://shimz.me/example/d3js/Hierarchical_Edge_Bundling/qiita/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/qiitacircle.jpg" alt="qiitacircle" width="590" height="559" class="aligncenter size-full wp-image-3166" /></a>

<a href="http://shimz.me/example/d3js/Hierarchical_Edge_Bundling/qiita/">example</a>

<a href="http://shimz.me/blog/d3-js/3161">昨日作成したQiitaのソーシャルグラフ</a>を、サークル状に表示するようにしてみました。
こちらの方が、Force Layoutより分かり易いですね。

コードは、以下のサンプルほぼそのままです。
<a href="http://bl.ocks.org/mbostock/7607999">Hierarchical Edge Bundling</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3164</wp:post_id>
		<wp:post_date>2013-11-26 09:51:57</wp:post_date>
		<wp:post_date_gmt>2013-11-26 00:51:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>qiita%e3%81%ae%e3%82%bd%e3%83%bc%e3%82%b7%e3%83%a3%e3%83%ab%e3%82%b0%e3%83%a9%e3%83%95%e3%82%92%e3%82%b5%e3%83%bc%e3%82%af%e3%83%ab%e8%a1%a8%e7%a4%ba%e3%81%ab%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3166]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426236255;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3118;}i:1;a:1:{s:2:"id";i:3738;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3の魅力</title>
		<link>http://shimz.me/blog/d3-js/3167</link>
		<pubDate>Fri, 06 Dec 2013 02:05:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3167</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.adventar.org/calendars/117">d3.js Advent Calendar 2013</a>　6日目の参加記事です。

技術的なことはちょっと置いておいて、個人的なD3愛を語ってみました。

<img src="http://shimz.me/blog/wp-content/uploads/2013/12/Hackers_and_Painters.jpg" alt="Hackers_and_Painters" width="400" height="321" class="aligncenter size-full wp-image-3188" />


<blockquote>例えば、大学で私は、コンピュータに手を触れる前に 紙の上でプログラムを完全に理解しなければならないと教わった。 でも私はそういうふうにはプログラムできなかった。 私が好んだやりかたは、紙の前ではなく、コンピュータの前に座って プログラミングすることだった。もっと悪いことに、 辛抱強く全てのプログラムを書き上げて正しいことを確認するなんてことは せずに、私はめちゃくちゃなコードをおっぴろげて、 それを次第に形にしてゆくのだった。 私が教わったのは、デバッグとは書き間違いや見逃しをつかまえる 最終段階の工程だということだったが、 実際に私がやっていたのは、プログラミングそのものがデバッグという具合だった。
（中略）
プログラミング言語はプログラムを考えるためのものであって、 既に考えたプログラムを書き下すためのものじゃない。 それはペンではなく鉛筆であるべきなんだ。
<div style="text-align:right"><a href="http://practical-scheme.net/trans/hp-j.html">ハッカーと画家</a></div>
</blockquote>


プログラミングには２種類の方法があると思っています。

１つは、最初にきっちりと設計・仕様を定めて描いていく方法。
１つは、ひらめき(インスピレーション)に任せて、思うがまま、心の赴くままにコードを紡いでいく方法。

多くの場合、お仕事で行うプログラミングは前者になります。

後者の方法は、Paul Graham ほどのハッカーであれば最終的に美しいコードが出来上がるのかもしれませんが、凡庸なエンジニアではコードを弄り回しているうちにしっちゃかめっちゃかになり、できそこないのスパゲッティが出来上がったり、あるいは完成することもなく終わったりします。

お仕事ではまったく推奨されない方法です。


しかし、圧倒的に"楽しい"のは後者の方法でプログラミングしている時だと私は感じます。

Paul Graham はそれを絵描きにたとえましたが、個人的には「粘土遊び」により近いのではと思っています。

もちろん、最初にきっちりと設計し完成形を定めてつくるモノに比べれば、圧倒的に品質は劣るのですが、「ああだ、こうだと弄まわしているうちになんとなく形になってきて、出来上がりの完成形が見えてくる。作りながら創る」そんな粘土遊びに似たプログラミングが、実のところこの上なく楽しいのです。

私がD3に魅力を感じているのは、D3がこの「弄りまわしながら、徐々に作品を作っていく」のに非常に適したライブラリだからです。

単に「手持ちのデータをグラフにしたい」というだけなら、もっと簡単に見た目のかっこいいグラフを表示できるライブラリが山ほどあります。

あるいはD3をコアとしたWrapperライブラリでも目的を果たすことができるでしょう。

<strong>使いたいデータが決まっていて、見せたい図が定まっていて、やりたいことがすでに分かっている場合には、D3は学習コストが高すぎて目的に見合わない</strong>かもしれません。自分の"見せたい図"を簡単に表示してくれるライブラリを探す方が圧倒的に早いでしょう。


しかし、上記で挙げたように「データやコードを弄りまわしながら、徐々に形作っていく」ことに楽しみを感じるのであれば、D3が最適です。

たとえば、ウチのブログでは下記の記事がそれにあたります。

<a href="http://shimz.me/blog/d3-js/3147">SVGで作成した都道府県の地形を並べて表示する</a>

上記のコードは、初めから「こういうモノを作ろう！」決めて作ったものではありません。

何となく、D3と都道府県のGeoデータを弄りまわしているときに、ふと思いつきで作ったものです。

地図や地形を表示する、データを元にして色を塗り分ける、そんなライブラリは多数ありますが、D3にようにその場の思いつきを即座に反映できるチャートライブラリは中々なく、これこそが私がD3を使っている最大の理由であります。

フルスクラッチで一から作るのは流石にメンドウくさすぎる。かといって既存のチャートライブラリは何もかもがあまりにお膳立てされ過ぎていて、弄り回して遊ぶ余地がない。そんな中でD3は、程よいところまで手を貸してくれてなおかつ利用者が好きなように弄って遊べる余地も残しておいてくれる、そんな気の利いたライブラリなのです。

データを絵具とするならば、D3はちょうどいいサイズで使い勝手の良い絵筆です。

下書きもせずに描き始め、心の赴くままに筆を振るって、途中で、落書きしたりぼかしたり塗りつぶしたりしながら作品を作る。

そんなプログラミングに楽しみを感じる人は、ぜひD3に触れてみてほしいと思います。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3167</wp:post_id>
		<wp:post_date>2013-12-06 11:05:27</wp:post_date>
		<wp:post_date_gmt>2013-12-06 02:05:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3167</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3188]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3%e3%81%ae%e9%ad%85%e5%8a%9b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427398923;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:3698;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>11月は好きなブログを告白する月らしいので、僕の好きなブログを紹介します。</title>
		<link>http://shimz.me/blog/other/3170</link>
		<pubDate>Fri, 29 Nov 2013 03:09:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3170</guid>
		<description></description>
		<content:encoded><![CDATA[「<a href="http://e0166.blog89.fc2.com/blog-entry-347.html">11月は好きなブログを告白する月</a>」というのを初めて知ったのですが、いい機会なので乗っかってみることにしました。

最近では、「ビッグデータ」や「オープンデータ」、「データビジュアライゼーション」「データジャーナリズム」など「データ活用」に関する注目度があがっています。

私もD3.jsを学ぶ過程で、データの活用方法についても学習をしてはいるのですが、今のところ単に「データビュアライゼーションライブラリの使い方」を学ぶことに留まっていて、ちゃんと意味のある可視化が行えていません。

そんな中で「データ活用」「データ可視化」のお手本として、よく閲覧させていただいているのが下記２つのブログです。

<a href="http://www.garbagenews.net/">ガベージニュース</a>

<a href="http://tmaita77.blogspot.jp/">データえっせい</a>

両ブログとも「データジャーナリズム」というバズワードが生まれる以前から、 データを分析して情報を発信するという事を続けていらっしゃるサイトで、閲覧しては「なるほどなー」と勉強させていただいてます。

最近だとデータえっせいさんの「<a href="http://tmaita77.blogspot.jp/2013/11/blog-post_21.html">自殺のジェネレーショングラム</a>」という記事をとても興味深く読ませていただきました。





（完全に一方的に紹介してしまいましたが、もし何か問題がありましたらご連絡ください。）


<a href="http://datajournalismhandbook.org/"><img src="http://shimz.me/blog/wp-content/uploads/2013/11/datajournalism.png" alt="datajournalism" width="348" height="428" class="aligncenter size-full wp-image-3171" /></a>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3170</wp:post_id>
		<wp:post_date>2013-11-29 12:09:11</wp:post_date>
		<wp:post_date_gmt>2013-11-29 03:09:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>11%e6%9c%88%e3%81%af%e5%a5%bd%e3%81%8d%e3%81%aa%e3%83%96%e3%83%ad%e3%82%b0%e3%82%92%e5%91%8a%e7%99%bd%e3%81%99%e3%82%8b%e6%9c%88%e3%82%89%e3%81%97%e3%81%84%e3%81%ae%e3%81%a7%e3%80%81%e5%83%95%e3%81%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3171]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425256933;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3853;}i:1;a:1:{s:2:"id";i:3861;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Advent Calendar に参加します。</title>
		<link>http://shimz.me/blog/other/3172</link>
		<pubDate>Mon, 02 Dec 2013 09:43:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3172</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.flickr.com/photos/ambernectar/6214119489/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/AdventCalendar-.jpg" alt="AdventCalendar" width="400" height="300" class="aligncenter size-full wp-image-3173" /></a>

すっかり冬のイベントとして定着した技術系アドベントカレンダー。
以前より参加したいと考えていたアドベントカレンダーに今年はいよいよ参加します。

<a href="http://www.atmarkit.co.jp/fjava/column/andoh/andoh59.html">師走を楽しもう。技術系アドベントカレンダーの魅力とは</a>


今年は、以下３つのカレンダーに登録させていただきました。

<a href="http://www.adventar.org/calendars/117">d3.js Advent Calendar 2013</a>
　12/4 D3.js + Fabric.js

<a href="http://atnd.org/events/45511">FOSS4G Advent Calendar 2013</a>
　12/7 ベクタータイルマップについて

<a href="http://qiita.com/advent-calendar/2013/civictech">Civic Tech Advent Calendar 2013</a>
　12/11 D3.jsを使ったオープンデータのビジュアライズ

まぁ、基本D3に関する記事になると思います。
（それしか書けないので orz）

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3172</wp:post_id>
		<wp:post_date>2013-12-02 18:43:07</wp:post_date>
		<wp:post_date_gmt>2013-12-02 09:43:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>advent-calendar-%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%be%e3%81%99%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3173]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425468234;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3181;}i:1;a:1:{s:2:"id";i:3191;}i:2;a:1:{s:2:"id";i:3174;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsとFabric.jsを使ってcanvasに描画する</title>
		<link>http://shimz.me/blog/d3-js/3174</link>
		<pubDate>Wed, 04 Dec 2013 00:53:17 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3174</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.adventar.org/calendars/117">d3.js Advent Calendar 2013</a> 4日目の参加記事です。


以前も、Fabric.jsについては書いたことがあるのですが、D3とFabricの組み合わせにはいろいろな可能性を感じるので、布教のつもりで改めて記事にしたいと思います。


Fabricは、HTML5のcanvas要素を使いやすくするJavaScriptのグラフィックライブラリです。



<blockquote>最近では、Canvas は、私たちが、全く 驚くべき グラフィックス をウェブ上で作ることを可能にしました。しかし、 CanvasのAPIが提供するのは、残念ながら低水準です。 もし、私たちが単に基本的な図形を canvas上にほとんど描きたいと思わず、そのことを忘れてしまえば別ですが、 どんな形にせよインタラクションが必要になったり、 いかなる点であれ、絵の変更が必要になったり、もっと複雑な図形を 描くことが必要になったら、状況は一変します。

Fabricは、この問題の解決を目指しています。
(中略)
そのような低水準で仕事をする代わりに、Fabric は、簡単ですが、ネイティブメソッド上に強力なオブジェクトモデルを提供します。 Fabricは、canvasの状態とレンダリングの面倒を見てくれ、直接オブジェクトを扱う仕事をさせてくれます。
</blockquote>

<a href="http://fabricjs.com/">Fabric.js 公式</a>
<a href="http://yamineko.lv9.org/Fabric.js%20Javascript%20Canvas%20Library/Fabric.js%20Javascript%20Canvas%20Library.html">Fabric.js 日本語</a>



この手のライブラリはそれこそ山のようにありますが、Fabricの特徴は内部にSVGパーサーを内蔵しておりsvgで描かれた図をcanvasに転写する機能にすぐれている点です。

<a href="http://shimz.me/blog/d3-js/2892">[Fabric.js]SVGをcanvasに転写する</a>

上記記事のようににFabricを使うことで、D3で作成したsvgも簡単にcanvsに転写することができます。

またFabricでは、SVGの<path>エレメント同様にpathLengthコマンドを用いてcanvas上にパスを記述することができます。
<pre class="lang:js decode:true " >//FabricでのPathオブジェクトの生成
var path = new fabric.Path('M 0 0 L 200 100 L 170 200 z');
path.set({ left: 120, top: 120 });
canvas.add(path);
</pre> 

出力結果
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/fabric10.png" alt="fabric10" width="308" height="308" class="size-full wp-image-3175" />

svg要素と同じ指定方法でオブジェクトを生成することができるので、D3.svgメソッドから生成したpathLengthコマンドを直接Fabricに渡してcanvasに図を記述することができます。
下記は、簡単ですがd3.svgで生成したpathLengthコマンドをFabricに渡して記述した例です。
<pre class="lang:js decode:true " >var w = 600;
var h = 600;
var margin = 200;    
var canvas = new fabric.Canvas('canvas');


var svg = d3.select(&quot;svg&quot;);

var data = [
        {x:10, y:20},
        {x:30, y:10},
        {x:48, y:60},
        {x:89, y:5},
        {x:120, y:100},
        {x:160, y:40},
        {x:200, y:83}
    ];

var xMax = d3.max(data, function(d){ return d.x } );    
var yMax = d3.max(data, function(d){ return d.y } );

var xScale = d3.scale.linear().domain([0, xMax]).range([0, w-margin]);
var yScale = d3.scale.linear().domain([0, yMax]).range([0, h-margin]);

//データからpathLengthコマンド生成する関数　(D3)    
var line = d3.svg.line()
    .x(function(d){ return xScale(d.x) })
    .y(function(d){ return yScale(d.y) })
    .interpolate(&quot;cardinal&quot;)

//pathLengthコマンドを使用してcanvas上に描画　(Fabric)   
var path = new fabric.Path(line(data));
    path.set({ fill: 'none', stroke: 'red', opacity: 1, &quot;stroke-width&quot;: 4});
    canvas.add(path);    </pre> 


<a href="http://shimz.me/example/d3js/fabric/03/">example</a>

さらに面白いことにFabricでは、canvasに追加したオブジェクトはすべてインタラクティブに操作(拡大縮小や回転)が可能になります。

<a href="http://shimz.me/example/d3js/fabric/03/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/d3fabric.jpg" alt="d3fabric" width="400" height="399" class="size-full wp-image-3176" /></a>


このように、Fabric.jsはD3.jsと非常に相性のよいグラフィックライブラリですので、興味ある方はD3と一緒に触ってみてはいかがでしょうか？


<a href="http://shimz.me/blog/category/d3-js">その他のD3.jsの記事はこちら</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3174</wp:post_id>
		<wp:post_date>2013-12-04 09:53:17</wp:post_date>
		<wp:post_date_gmt>2013-12-04 00:53:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3174</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3177]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[d3-js%e3%81%a8fabric-js%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6canvas%e3%81%ab%e6%8f%8f%e7%94%bb%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427304705;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3645;}i:1;a:1:{s:2:"id";i:3167;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>福岡市のオープンデータを使用して交通危険個所マップを作成しました。</title>
		<link>http://shimz.me/blog/d3-js/3178</link>
		<pubDate>Tue, 10 Dec 2013 23:07:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3178</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2013/civictech">Civic Tech Advent Calendar 2013</a> 11日目 参加記事です。

Civic Tecとはなんぞや？という方は<a href="http://qiita.com/hal_sk/items/3f78031e7fcd9f9d02ec#1-1">こちら</a>を。

<hr />


最近のオープンデータ促進の流れを受けて、いくつかの自治体でデータの公開がおこなわれています。
その中の一つ、福岡市のオープンデータ(サンプル)にて公開されている交通危険個所データをGoogle Map上にヒートマップとして表示してみました。

<a href="http://shimz.me/example/d3js/geo_example2/fukuoka2/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/fukuokaTrafic2.jpg" alt="fukuokaTrafic2" width="538" height="758" class="aligncenter size-full wp-image-3187" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/fukuoka2/">example</a> 
SVGを使用しているので、IE9以上Chrome推奨です。


データの入手元は以下です。
<a href="http://www.city.fukuoka.lg.jp/soki/joho/shisei/BDODkyougikai_sampledata.html">福岡市サンプルデータサイト　I02交通危険箇所、D01小学校</a>


以前、福岡市のサンプルデータを使用して「<a href="http://shimz.me/blog/d3-js/2916">防犯危険箇所ヒートマップ＆ボロノイ図</a>」を作成したことがあるのですが、今回はもう少し実用的なものができないか試してみました。

使用用途としては、小学校までの通学路上の交通危険個所のチェックを想定してます。

Google Map上に、交通危険個所のヒートマップと現在の交通状況を表示しルート検索(徒歩)を行えるように、また、ヒートマップのポイントをクリックした際にその場所のストリートビューを表示することで、危険個所の景色を確認できるようにしてみました。
（一部、ストリートビューが対応していない場所があります）

Google Maps APIのヒートマップレイヤはクリックイベントが取得できないようなので、イベント取得のためだけにD3を使って地図上に透明なcircleを重ねてます。

通学路データなどがあれば地図上に重ねてみることで通学の際の注意しなくてはならない場所などを確認しやすくなるのではないかと思って探してみたのですが、残念ながら公開されてはいないようなので代わりにGoogle Mapのルート検索を付けました。

その他に国土数値情報から取得した小学校区ポリゴンを<a href="http://shimz.me/blog/map/2670">Fusion Tables</a>を使ってオーバーレイしてみたりもしたのですが、地図が見づらくなっただけだったのでやめました。ソースコードにその痕跡が残っているので、興味ある方はご覧になってください。

こういった危険個所データはとても実用的なので、各自治体で本格的に提供されるようになると嬉しいですね。一緒に、道路照明灯の位置データとか公開してくれるといろいろ分析ができて面白いかもしれません。



その他の関連記事
<a href="http://www.pinterest.com/shimizuvis/d3js%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%83%87%E3%83%BC%E3%82%BF%E5%8F%AF%E8%A6%96%E5%8C%96/">D3.js/オープンデータ/可視化</a>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3178</wp:post_id>
		<wp:post_date>2013-12-11 08:07:37</wp:post_date>
		<wp:post_date_gmt>2013-12-10 23:07:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%a6%8f%e5%b2%a1%e5%b8%82%e3%81%ae%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e4%bd%bf%e7%94%a8%e3%81%97%e3%81%a6%e4%ba%a4%e9%80%9a%e5%8d%b1%e9%99%ba%e5%80%8b%e6%89%80</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3185]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371454;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2916;}i:1;a:1:{s:2:"id";i:3861;}i:2;a:1:{s:2:"id";i:3132;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ベクタータイルマップの紹介</title>
		<link>http://shimz.me/blog/d3-js/3181</link>
		<pubDate>Sat, 07 Dec 2013 03:23:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3181</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://atnd.org/events/45511">FOSS4G Advent Calendar 2013</a> 7日目　参加記事です。


正直なところ、ブログのタイトルに「GIS」と掲げながら、GISの勉強があまり進んでいない(D3ばっか弄っていた一年だった)ので、ネタが見つからなかったのですが、せっかくお誘いいただいた話なので、D3周辺で見つけたGISにかかわりがありそうな技術について紹介してみようと思います。

D3.jsを使ったベクタータイルマップです。

<a href="http://shimz.me/example/d3js/geo_template/VectorTileMap/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/vectorTileMap1.jpg" alt="vectorTileMap1" width="590" height="369" class="aligncenter size-full wp-image-3182" /></a>

<a href="http://shimz.me/example/d3js/geo_template/VectorTileMap/">example</a>

コードについては下記のサンプルそのままなので、そちらを参照してください。
<a href="http://bl.ocks.org/mbostock/5593150">OpenStreetMap Vector Tiles with D3 </a>

【ちょっとだけ解説】

Open Street Mapの<a href="http://openstreetmap.us/~migurski/vector-datasource/">Mapnik Vector Tiles API(β版)</a>を使用することで、ラスタ地図のAPIでおなじみの{z}/{x}/{y}方式使ってベクター情報を取得することができます。

具体的には、下記のようなURLにリクエストを投げると、画像ではなくその位置のGeoJSONデータを返してきます。

<a href="http://tile.openstreetmap.us/vectiles-highroad/12/656/1582.json">http://tile.openstreetmap.us/vectiles-highroad/12/656/1582.json</a>

取得したGeoJSONデータを、D3.jsを使ってフロントエンド側でsvg:PATH要素に変換して表示したものが上記のサンプルです。

デベロッパーツールでエレメントを確認すると、タイル毎に一つのSVG要素が追加され、そのなかに多数のPath要素が含まれているのが確認できます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/12/vectorTileMap2.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/vectorTileMap2-300x138.jpg" alt="vectorTileMap2" width="300" height="138" class="size-medium wp-image-3183" /></a>

SVG要素なのでフロントエンド側でのカスタマイズが、ラスタ画像に比べて非常に柔軟に行えます。
カラーの変更やイベントの設置なども自在に行えるので、非常に面白いのですが残念ながら実用的な速度では動作しません。

特に、東京のような情報量の多い都市を表示すると非常に重くります。

当然、この上にさらに情報を重ねて表示すればますます遅くなるわけで、今のところは実用性はありませんが今後期待したい技術だと思い、紹介させていただきました。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3181</wp:post_id>
		<wp:post_date>2013-12-07 12:23:47</wp:post_date>
		<wp:post_date_gmt>2013-12-07 03:23:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3181</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3182]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%83%99%e3%82%af%e3%82%bf%e3%83%bc%e3%82%bf%e3%82%a4%e3%83%ab%e3%83%9e%e3%83%83%e3%83%97%e3%81%ae%e7%b4%b9%e4%bb%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427312875;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2575;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3465;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CodeIQでD3.jsの問題を作成しました。</title>
		<link>http://shimz.me/blog/d3-js/3191</link>
		<pubDate>Tue, 10 Dec 2013 00:01:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3191</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.adventar.org/calendars/117">d3.js Advent Calendar 2013</a> 10日目の参加記事です
ぶっちゃけ宣伝です。すみません。


<a href="https://codeiq.jp/ace/shimizu_masayuki/q592"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/test000000.jpg" alt="test000000" width="469" height="330" class="aligncenter size-full wp-image-3192" /></a>

<a href="https://codeiq.jp/ace/shimizu_masayuki/q592">挑戦者求む！【データ可視化】10分で挑戦! D3.js基礎問題 by @_shimizu 清水 正行│CodeIQ</a>



担当者の方からお声をかけていただいて、CodeIQでD3.jsに関する問題を作成させていただくことになりました。

正直なところ、D3はまだまだ日本では知名度が低く難易度調整などで悩んだのですが、初回ということなので基本的な内容と、D3でよく見かけるイデオム的なものを選択する穴埋め問題としました。

「10分で挑戦」と書いてありますが、D3に触れたことがあるかたであれば10分もかからないかと思います。

できれば、これを機会にD3に触れてくれる方増えるといいなぁ〜なんて考えています。

ともあれ、出題者が一番戦々恐々としているので、気楽に挑戦していただければと思います。

「挑戦者０人」とかのままだと、あまりに切ないので orz

この後、２問目、３問目と続けさせていただけるようであれば、もうすこしD3らしい問題も出していけるのではないかと思っているので、是非是非ふるってご参加ください。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3191</wp:post_id>
		<wp:post_date>2013-12-10 09:01:27</wp:post_date>
		<wp:post_date_gmt>2013-12-10 00:01:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3191</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3192]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[codeiq%e3%81%a7d3-js%e3%81%ae%e5%95%8f%e9%a1%8c%e3%82%92%e4%bd%9c%e6%88%90%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427132825;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:3230;}i:2;a:1:{s:2:"id";i:3564;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>スクレーパー共有サイト「ScraperWiki」がリニューアルして凄い事に！　</title>
		<link>http://shimz.me/blog/web/3195</link>
		<pubDate>Thu, 12 Dec 2013 00:51:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3195</guid>
		<description></description>
		<content:encoded><![CDATA[以前、<a href="http://shimz.me/blog/other/2787">オープンデータまで待てない人の、スクレーパー共有サイト(ScraperWiki)</a>という記事を書きましたが、スクレーパー(クローラー)共有サイトのScraperWikiが大幅にリニューアルされていました。

データを取得するだけでなく、データの可視化、分析などまでも行えるデータサイエンスのプラットフォームとなることを目指すそうです。

<blockquote>ScraperWiki is a platform for doing data science on the web

We help individuals and businesses to get, clean, visualise, analyse and manage data from thousands of sources. For science, journalism, lead generation—whatever you need.
</blockquote>

<a href="https://scraperwiki.com/">ScraperWiki</a>


ほとんど別サービスになったため、以前のアカウントは新しいScraperWikiでは使用できず、新たにアカウントを作成する必要があります。
（ScraperWikiクラシックとして旧サービスは継続中なので、そちらでは使用できます）

目玉機能の一つである、ブラウザ上でスクレイパーをコーディングして取得したデータを共有できる機能はそのままに、データをグラフで表示したり、地図上にマッピングするなどの機能(TOOL)が追加されています。


TOOL達
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/NewScraperWiki1.jpg" alt="NewScraperWiki1" width="590" height="282" class="alignnone size-full wp-image-3196" />
SQLクエリを使ってデータを取り出せるTOOLや、取得したデータをCKANに公開するTOOLなどもあります。


グラフ表示
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/NewScraperWiki2-2.jpg" alt="NewScraperWiki2-2" width="590" height="266" class="alignnone size-full wp-image-3200" />

地図表示
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/NewScraperWiki3.jpg" alt="NewScraperWiki3" width="590" height="282" class="alignnone size-full wp-image-3198" />

データを表示するviewについては、HTMLやJavasciptを使って自ら作成することができるそうです。

そして今後導入される予定の「Xtract」機能が素晴らしいです。
今までのようにコードを記述しなくても、簡単なウィザードに沿って設定を行うだけで、簡単にデータを取得するスクレイパーを作成できるようになるそうです。
しかも、エクセルファイルやPDFファイル内のテーブルからもデータ取得が可能だとか！
これが実現したら、データ取得作業がかなり軽減されそうです。
とにかく、今後に期待大なサービスなので目が離せませんね！

<iframe width="480" height="360" src="//www.youtube.com/embed/ErcKL_lfrpE" frameborder="0" allowfullscreen></iframe>





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3195</wp:post_id>
		<wp:post_date>2013-12-12 09:51:49</wp:post_date>
		<wp:post_date_gmt>2013-12-12 00:51:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b9%e3%82%af%e3%83%ac%e3%83%bc%e3%83%91%e3%83%bc%e5%85%b1%e6%9c%89%e3%82%b5%e3%82%a4%e3%83%88%e3%80%8cscraperwiki%e3%80%8d%e3%81%8c%e3%83%aa%e3%83%8b%e3%83%a5%e3%83%bc%e3%82%a2%e3%83%ab%e3%81%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426975216;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2787;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3035;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ひとりオープンデータソンやってみました。</title>
		<link>http://shimz.me/blog/other/3202</link>
		<pubDate>Fri, 13 Dec 2013 02:10:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3202</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.adventar.org/calendars/299">オープンデータ Advent Calendar 2013</a>　13日目の参加記事です。

<a href="https://twitter.com/ujigis">@_ujigis</a>さんが書かれていた"<a href="http://ujigis.blog.fc2.com/blog-date-20131209.html">「地理空間情報オープンデータソン」したらどうかな？</a>"の記事に感銘を受けまして、ひとりオープンデータソンをやってみました。



<h2>ターゲット</h2>
今年の11月に<a href="http://fukuno.jig.jp/461">福井市役所のサイトがオープンバイデフォルト</a>となりました。ライセンス条件の範囲内であれば、福井市のサイトに掲載されている情報を自由に利用できるようになっています。
今回は、福井市で公開されている情報を、使いやすいデータセットにコンバートする作業をおこなってみます。


<h2>元データ</h2>
<a href="http://www.city.fukui.lg.jp/d240/kosodate/hoikuenitiran/index.html">公私立保育園(認定こども園含む)一覧</a>
元データはTableで作成された表データと、GoogleMap上にマッピングされた場所データです。
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/opendatason1.jpg" alt="opendatason1" width="590" height="390" class="alignnone size-full wp-image-3203" />

これはこれでありがたい情報ですが、このままでは決して使いやすいデータというわけではありません。
せっかく、場所情報(緯度経度)のデータがあるので、両者を合わせた１つのcsvファイルになっているともっと利用しやすくなると思うので、まずはcsvを作成します。


<h2>csvファイルを作る</h2>
Excelにコピペして作成。
もう愚直にTableをコピペしてExcel上で整形します。
場所データ(緯度経度)はソースコードに書きこまれていたので、エディタにコピペして整形しました。
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/opendatason3.jpg" alt="opendatason3" width="590" height="331" class="alignnone size-full wp-image-3205" />

「区切り位置」機能や「並べ替え」「置換」などを駆使して、手作業でゴリゴリとデータを整形し、ひとつのcsvに。
まぁ、地味な作業ですね。
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/opendatason2.jpg" alt="opendatason2" width="590" height="360" class="alignnone size-full wp-image-3204" />



<h2>GeoJSONファイルも作る</h2>
ついでなのでGeoJSONファイルも一緒に作成します。
なぜ、GeoJSONなのかは後述。
作成したcsvファイルをQGISに「デミリテッドテキストファイルをレイヤに追加」で読み込み、レイヤを「名前を付けて保存」でGeoJSONデータとしてエクスポートしただけです。
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/opendatason4.jpg" alt="opendatason4" width="590" height="358" class="alignnone size-full wp-image-3206" />


<h2>GitHubで再配布</h2>
とりあえず、コンバートしたcsvファイルとGeoJSONファイルをgithubにアップしました。
githubを使う利点は２つ。
一つは、データに間違いがあったときなどに、修正したファイルをプルリクエストしてもらえれば、容易に反映できるという点。
２つ目は、githubにGeoJSONファイルをアップロードすると自動で地図上にプロットしてくれる機能があることです。
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/eee000002.jpg" alt="eee000002" width="590" height="407" class="alignnone size-full wp-image-3207" />


この機能によって、アップされている地理空間情報の内容を一目で確認することができるので、とても便利です。
生のGeoJSONデータが欲しいときは、ファイルをダウンロードするか、「Raw」ボタンをクリックしてください。

今回コンバートしたデータセットは以下
<a href="https://github.com/shimizu/dataSet/tree/master/fukui_kindergarten">shimizu / dataSet / fukui_kindergarten / </a>





<h2>総括</h2>
以上、駆け足でしたが「ひとりオープンデータソン」をやってみました。
データのコンバート作業は手間のかかる作業ではありますが、その辺がハードルになってデータの公開が滞っているなら残念です。
福井市のようにオープンバイデフォルトで公開してもらえれば、データの編集作業ぐらいやってくれるエンジニアが巷にそこそこ居るのではないかと思うので、ぜひ他の自治体でも検討していただきたいです。

(個人的には、大手ベンダーのデータコンバートソリューションに予算を割くぐらいなら、同じオープンデータ促進でも別のことに予算を使ってほしいなー、なんて思ったりもします)

利用者側も、「データを出せ」と要求するばかりでなく自分達でできることを見つけて協力していかないと、オープンデータの普及も進まないのではないでしょうか。下記の文章は、<a href="http://shimz.me/blog/book/3127">以前も引用した</a>ことがありますがもう一度掲載します。

<blockquote>汚いデータには理由があります。何もやれることがない場合もありますが、それ以外は間違いなくあなたの責任です。いかなるときも、不完全なデータを投げ出したい誘惑に耐える必要があります。
日々の生活と複雑なエコシステムという現実には、高いエントロピー、すなわち「汚さ」があります。こうした現実にまつわるデータも同じです。それは問題解決から逃れる言い訳にはなりません。代わりに、データサイエンティストとして新しいテクニックを追い求め、それを自分たちの生活にとって重要な問題に適用し続けるモチベーションにすべきなのです。</blockquote>

"Code for America"だって、「自治体任せじゃ動きも遅いし、自分たちでHackしちまおうぜ！」というノリで始まったわけですし。
「ない」なら「自分たちで作る」がハッカー文化というものですよね。

<strong>関連記事</strong>
<a href="http://shimz.me/blog/web/3217">PDFから表データをぶっこ抜く「Nitro Cloud」</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3202</wp:post_id>
		<wp:post_date>2013-12-13 11:10:25</wp:post_date>
		<wp:post_date_gmt>2013-12-13 02:10:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3202</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3207]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%81%b2%e3%81%a8%e3%82%8a%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%82%bd%e3%83%b3%e3%82%84%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373065;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3406;}i:1;a:1:{s:2:"id";i:3217;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>地理空間情報作成・編集・共有サイト「geojson.io」</title>
		<link>http://shimz.me/blog/web/3209</link>
		<pubDate>Tue, 17 Dec 2013 02:20:36 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3209</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://geojson.io/#id=gist:shimizu/eaccf7b433382561beef&amp;map=10/36.2310/139.2709"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/geojosnio.jpg" alt="geojosnio" width="590" height="336" class="alignnone size-full wp-image-3210" /></a>

<a href="http://geojson.io/">geojson.io</a>は、地理空間情報(GeoJSON)の作成・編集・共有が行えるWebサービスです。
エディタを使ってマーカーの設置や、ライン(線)、ポリゴン(面)情報を作成し属性情報の編集などを行うことができます。地理情報の編集中は常に<a href="https://github.com/mapbox/geojsonhint">geojsonhint</a>を使ってエラーチェックが行われるので、テキストエディタなどでJSONを編集するのに比べて安全です。読み込めるデータ形式としては「GeoJSON, TopoJSON, KML, CSV, GPX, OSM XML」をサポートしています。
詳しい操作方法は、作者さんが書かれている記事を見てください。
<a href="http://macwright.org/2013/07/26/geojsonio.html">geojson.io - macwright.org</a>

動画チュートリアル
<iframe width="480" height="360" src="//www.youtube.com/embed/sPAkG7bS10o" frameborder="0" allowfullscreen></iframe>



作成したGeoJSONデータは、iframeを使ってサイトに埋め込んだり、パーマリンクで共有することができます。

iframe埋め込み
<iframe frameborder="0" width="100%" height="300" src="http://bl.ocks.org/d/e8be8f5eb2816107bd08"></iframe>

パーマリンク
<a href="http://geojson.io/#id=gist:shimizu/eaccf7b433382561beef&map=10/36.2310/139.2709">shimizu/eaccf7b433382561beef</a>
(平成22年 群馬県 人口集中地区データをマッピングしたものです)　


geojson.ioはオープンソースプロジェクトとしてソースコードが公開されています。
<a href="https://github.com/mapbox/geojson.io">mapbox / geojson.io</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3209</wp:post_id>
		<wp:post_date>2013-12-17 11:20:36</wp:post_date>
		<wp:post_date_gmt>2013-12-17 02:20:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%9c%b0%e7%90%86%e7%a9%ba%e9%96%93%e6%83%85%e5%a0%b1%e4%bd%9c%e6%88%90%e3%83%bb%e7%b7%a8%e9%9b%86%e3%83%bb%e5%85%b1%e6%9c%89%e3%82%b5%e3%82%a4%e3%83%88%e3%80%8cgeojson-io%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3210]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388675;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3406;}i:1;a:1:{s:2:"id";i:3202;}i:2;a:1:{s:2:"id";i:3789;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>そして、開発者とデザイナーはいなくなった。</title>
		<link>http://shimz.me/blog/other/3211</link>
		<pubDate>Thu, 19 Dec 2013 00:45:12 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3211</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://redmonk.com/dberkholz/2013/12/16/the-year-developers-and-designers-collided/">The year developers and designers collided</a>
(今年、開発者とデザイナーは衝突しました)

上記リンク先は、GitHubに新たに登録されるCSSのリポジトリが爆発的に増えていることから「今、"デザイン"は、より"コード"とういう形で起きている」と伝える記事です。個人的に、最近考えていたことと重なる内容だったので紹介します。

全部訳すのは無理なんで、気になったところだけ、ところどころチョイスします。


<blockquote>Developer vs. designer isn’t a binary choice
(開発者vsデザイナーは、バイナリ(1か0か)の選択ではありません)

<img src="http://shimz.me/blog/wp-content/uploads/2013/12/developer_designer_spectrum.jpg" alt="developer_designer_spectrum" width="590" height="255" class="alignnone border size-full wp-image-3213" />
</blockquote>

開発者とデザイナーは二分木で分けられるものではなく、両者の間にスペクトルに分布するようになってきてるよーという話。
グラデーションのようにまじりあって、明確に二つに分けられるものではなくなっているというのは、作成する物の規模にもよりますが、日本でも同じ状態になりつつあるかと。


<blockquote>What’s actually happening here is the advent of the technical designer and the creative coder.
(今ここで起きていることは、技術者的なデザイナーとクリエイター的な技術者の出現です)
</blockquote>

開発者とデザイナーの境がなくなりつつあり、開発もデザインも両方行うフルスタックエンジニア(?)が出現していると。
すでに、小規模なサイトの作成などでは両方を一人の人間が行うのは当たり前になってきていますね。
ぶっちゃけ二人雇う余裕のないケースが多いですし。

フィールドによっては開発者とデザイナーの仁義なきパイの奪い合いは、今後加速していきそうな気がします。

それに伴って、時折「デザイナーがプログラミングを学ぶのと、プログラマーがデザインを学ぶのではどちらが難しいか」という話題がでることがありますが、開発者vsデザイナーの戦いではデザイナーの方が有利ではないかと個人的には思っていたりします。

理由は、単純に「バックエンドの構築やプログラミングをしないで済ますための代替手段は多数あるのにたいして、デザインをしないで済ますための代替手段はあまり無い」と考えているからなんですが。

テンプレートやBootstrapのようなフレームワークで満たせる需要ってそんなにないんですよね。

そんな訳で「来年は真面目にデザインの勉強もしないといかんな。しんどいな」と思う次第です。

（まぁ、沢山の人員を雇う余裕のある大きなプロジェクトでは関係ない話かもしれませんが）

なんか、まとまりのない文章でしたが……以上、終わり。







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3211</wp:post_id>
		<wp:post_date>2013-12-19 09:45:12</wp:post_date>
		<wp:post_date_gmt>2013-12-19 00:45:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%9d%e3%81%97%e3%81%a6%e3%80%81%e9%96%8b%e7%99%ba%e8%80%85%e3%81%a8%e3%83%87%e3%82%b6%e3%82%a4%e3%83%8a%e3%83%bc%e3%81%af%e3%81%84%e3%81%aa%e3%81%8f%e3%81%aa%e3%81%a3%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3213]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427068477;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:1764;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日本版「DATA.GOV」が出来たそうなのですが、ここらでちょっと整理が必要ではないかと思います。</title>
		<link>http://shimz.me/blog/web/3215</link>
		<pubDate>Fri, 20 Dec 2013 01:19:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3215</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://data.go.jp/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/opendata.jpg" alt="opendata" width="400" height="300" class="aligncenter size-full wp-image-3216" /></a>

<a href="http://www.nikkei.com/article/DGXNASFK19012_Z11C13A2000000/">政府、オープンデータ活用サイトを12月20日に開設 全省庁１万のデータ群を開放する「ＤＡＴＡ.ＧＯＶ」日本版</a>

日本版「DATA.GOV」ができたそうです。

<a href="http://data.go.jp/">DATA GO JP</a>

これはこれで、とてもありがたいんですが、今までの「Open Data METI」とか「Databox」とかはどうなるんでしょうか。

<a href="http://datameti.go.jp/">Open DATA METI | 経済産業省のオープンデータカタログサイト</a>
<a href="http://databox.openlabs.go.jp/">経済省の統計利活用サイト　データボックス</a>

経済産業省はちょっと似たようなサイト作りすぎだと思います。「アイデアボックス」とか。
<a href="http://opengov.openlabs.go.jp/">オープンガバメント・アイディアボックス</a>
<a href="http://opendata.openlabs.go.jp/">オープンデータアイディアボックス</a>


他にも「日本版CKAN」や「 ビッグデータ・オープンデータ活用推進協議会オープンデータポータル」とか、「LinkData」とか「CityData」など、官民含めると、かなり多数のデータカタログサイト／データポータルサイトがあるわけですが、ぶっちゃけ数が多すぎても「あっちには有るけど、こっちには無い」と結局データを探すのがメンドウになるだけなので、できれば統合するなりなんなりで多少纏まって欲しいなぁ、と思います。


<a href="http://data.linkedopendata.jp/">CKAN日本語</a>
<a href="http://chiba-ckan.cloudapp.net/">ビッグデータ・オープンデータ活用推進協議会オープンデータポータル</a>
<a href="http://linkdata.org/">LinkData</a>
<a href="http://citydata.jp/">CityData</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3215</wp:post_id>
		<wp:post_date>2013-12-20 10:19:28</wp:post_date>
		<wp:post_date_gmt>2013-12-20 01:19:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%97%a5%e6%9c%ac%e7%89%88%e3%80%8cdata-gov%e3%80%8d%e3%81%8c%e5%87%ba%e6%9d%a5%e3%81%9f%e3%81%9d%e3%81%86%e3%81%aa%e3%81%ae%e3%81%a7%e3%81%99%e3%81%8c%e3%80%81%e3%81%93%e3%81%93%e3%82%89%e3%81%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3216]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427230229;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2590;}i:1;a:1:{s:2:"id";i:3706;}i:2;a:1:{s:2:"id";i:3340;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PDFから表データをぶっこ抜く「Nitro Cloud」</title>
		<link>http://shimz.me/blog/web/3217</link>
		<pubDate>Tue, 24 Dec 2013 00:32:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3217</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.data.go.jp/">DATA GO JP</a>に並んでいるデータセットが「PDFばかりじゃないか！」とお嘆きの方へ。

<a href="https://www.pdftoexcelonline.com/#"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/nitoro1.jpg" alt="nitoro1" width="590" height="432" class="aligncenter size-full wp-image-3218" /></a>

<a href="https://www.pdftoexcelonline.com/#">Nitoro Cloud PDF to Excel</a>

PDFで公開されているデータというのは、わりと扱いにくかったりします。
ドキュメント内で表組みされているデータを取得しようと、表を選択してExcelにコピペしても表のレイアウト情報はコピーされないため整形しなおす必要があったりするので、しごくメンドウです。

「Nitro Cloud」は、PDF内の表データをぶっこ抜いてExcelファイルに変換してくれるクラウドサービスです。

かなりの精度で表データを抜き出してくれるため、非常に便利です。

<strong>サンプル</strong>
<a href="http://shimz.me/blog/wp-content/uploads/2013/12/nitoro2.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/nitoro2-300x234.jpg" alt="nitoro2" width="300" height="234" class="size-medium wp-image-3219" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2013/12/nitoro3.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/nitoro3-300x231.jpg" alt="nitoro3" width="300" height="231" class="size-medium wp-image-3220" /></a>


月５ドキュメントまで無料で使用できるので、PDFからデータを取得したいと考えている方は、利用してみてはいかがでしょうか。

<strong>関連記事</strong>
<a href="http://shimz.me/blog/other/3202">ひとりオープンデータソンやってみました。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3217</wp:post_id>
		<wp:post_date>2013-12-24 09:32:55</wp:post_date>
		<wp:post_date_gmt>2013-12-24 00:32:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3217</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3218]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[pdf%e3%81%8b%e3%82%89%e8%a1%a8%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e3%81%b6%e3%81%a3%e3%81%93%e6%8a%9c%e3%81%8f%e3%80%8cnitro-cloud%e3%80%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390760;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:3202;}i:2;a:1:{s:2:"id";i:3406;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>302</wp:comment_id>
			<wp:comment_author><![CDATA[Webサービス | Annotary]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://annotary.com/collections/15041/web-K-T</wp:comment_author_url>
			<wp:comment_author_IP>50.19.223.217</wp:comment_author_IP>
			<wp:comment_date>2014-01-26 17:01:34</wp:comment_date>
			<wp:comment_date_gmt>2014-01-26 08:01:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;]  shimz.me  [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1390778425.72173595428466796875;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1390723294.8187520503997802734375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>今年読んだ400冊の中から、お勧めの本を紹介します。</title>
		<link>http://shimz.me/blog/book/3222</link>
		<pubDate>Wed, 25 Dec 2013 00:45:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3222</guid>
		<description></description>
		<content:encoded><![CDATA[https://twitter.com/_shimizu/status/274816273706258432

Kindle Paperwhiteを購入したのが去年の12月1日なので、ちょうど一年ちょい経ちました。

この一年でKindleストアから購入した本の数が400冊。
平均すると、だいたい１日１冊購入してたってことになるらしいです。

<a href="http://shimz.me/blog/wp-content/uploads/2013/12/kindlelist2013.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/kindlelist2013-300x264.jpg" alt="kindlelist2013" width="300" height="264" class="alignnone size-medium wp-image-3223" /></a>

「1-Clickで購入」ボタンは……ホント危険ですね。

まぁ、実際には青空文庫から配信されている短編小説なども結構入っているので、全てが購入した本ってわけではないのですが。あと、積読になっているものもあるので、ちゃんと読み終わったのは３分の２ぐらいかな？

とりあえず年末だし、せっかくなので今年購入した本のなかから、何冊かお勧めしてみようと思います。
（あくまで今年買った本で、今年発刊された本ではないのであしからず)


<h2>お勧め本</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009QWIWJO/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ptydXh7sL._SL160_.jpg" alt="バイオパンク ―ＤＩＹ科学者たちのＤＮＡハック！" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009QWIWJO/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">バイオパンク ―ＤＩＹ科学者たちのＤＮＡハック！</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.24</div></div><div class="amazlet-detail">NHK出版 (2012-07-31)<br />売り上げランキング: 13,304<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009QWIWJO/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
<blockquote>ガレージから次のイノベーションが生まれる
コンピュータハッカーの第一世代が自宅のガレージで革新的な技術やソフトウェアを生み出したように、21世紀のバイオハッカーたちも自宅のガレージやキッチンで、オープンソースのDNAデータを使って生命言語の操作に乗り出している。
</blockquote>
今年一番「燃えた」ノンフィクションです。「自宅のキッチンやガレージで行われる遺伝子操作」というフレーズだけで「それなんてSF」といった感じですが、個人的に一番感心したのはアメリカにおけるDIY(Do It Yourself)哲学の社会に与える影響力の強さでした。本書の中にでてくるバイオパンク宣言の一文に「我々に疑問がわずかでもあるなら、だれかに答えてもらうのをただぼんやりと待つことをしない。」という、DIY精神の全てを表すような文章がでてきますが、いちエンジニアとして「かくありたい」と思わずにはいられません。

<blockquote>「ロサンゼルスのダウンタウンに住む13歳の中学生にも、大学教授と同じように世界の探求をする権利があります。遺伝子を調べたい人にとってサーマルサイクラーが高すぎるというなら、私たちが安価なものを設計します。自分で組み立てたいという人には、組み立て方を教えます」
</blockquote>

ここまで言い切ってしまえるのも、また凄い。

何はともあれ、「<a href="http://www.amazon.co.jp/gp/product/B00CHIFA1M/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00CHIFA1M&linkCode=as2&tag=toriaezu04b-22">Gene Mapper -full build-</a>」を読んで「最高にワクワクした！」という方にお勧めです。
TEDで行われたパーソナル・バイオテクノロジーのプレゼンを見て予習するのも良いかもしれません。
<iframe src="http://embed.ted.com/talks/lang/ja/ellen_jorgensen_biohacking_you_can_do_it_too.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009SM0X1C/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ZS2mnzEVL._SL160_.jpg" alt="１／２の騎士 (講談社文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009SM0X1C/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">１／２の騎士 (講談社文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.24</div></div><div class="amazlet-detail">講談社 (2012-10-18)<br />売り上げランキング: 14,650<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009SM0X1C/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
東北のとある地方都市を舞台に都市伝説めいた異常犯罪を主人公の女子高生マドカと騎士と名乗る女装した美少年の幽霊が解き明かしていくという、あらすじだけ聞くとファンタジックですが、本編はホラーな雰囲気が漂う短編連作ミステリです。根底に流れるテーマは「社会的弱者(マイノリティ)」で、軽妙な語り口ではあっても内容は結構、重い作品です。この作品の怖いところは、小説内に出てくる犯人達のような人間が、現実にも決して居ないとは言い切れないと感じられるところかもしれません。


&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0095OEG3Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51U5H1U7SlL._SL160_.jpg" alt="天地明察 上 (角川文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0095OEG3Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">天地明察 上 (角川文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.24</div></div><div class="amazlet-detail">KADOKAWA / 角川書店 (2012-09-01)<br />売り上げランキング: 70<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0095OEG3Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
もはや、説明するまでもないヒット作品ですが、個人的に「時代小説熱」を取り戻すきっかけとなった本だったので。「時代小説ってのは武士やらサムライやら、ばっかりじゃなかったよな」という当たり前の事に気づかせてくれた１冊でした。
「和算」や「暦」といった表現し難いものを扱った小説ですが、そこはマルドゥック・スクランブルで「ブラックジャック」を見事な戦闘シーンとして描ききった冲方丁氏ですので、それはそれは素晴らしいものでした。この作品以来、自分の中でにわかに「和算」ブームが発生し、「<a href="http://www.amazon.co.jp/gp/product/4480090134/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4480090134&linkCode=as2&tag=toriaezu04b-22">算法少女</a>」なども買ったりしてみたのですが、こちらの作品もお勧めです。



<h2>KDP</h2>
Kindle ダイレクト・パブリッシングで、出版されているものなかから。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00AAL9X7K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51hnGBBislL._SL160_.jpg" alt="彼女のための幽霊 (藤元杏シリーズ)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00AAL9X7K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">彼女のための幽霊 (藤元杏シリーズ)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.24</div></div><div class="amazlet-detail">Channel QQL (2010-08-07)<br />売り上げランキング: 11,506<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00AAL9X7K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
個人的に、今年は「<a href="http://ja.wikipedia.org/wiki/%E6%97%A5%E5%B8%B8%E3%81%AE%E8%AC%8E">日常の謎</a>」系ミステリブームだったので、その系統の小説を買いまくった中の一冊です。KDPはどうしても、文章のクオリティなどにバラツキがあって、作品によっては非常に読み辛かったりするのですが、本書はその点文章がこなれていてリーダービリティーの高い作品でした。
人物造形などが、多少ライトノベルっぽさは否めないため、好き嫌いはあると思いますが、第二作目からはその辺の角もとれて深みを増しています。
基本的には「学園」を舞台にしたミステリで、作者さんが米澤穂信のファンであることらしいことも相まって古典部シリーズや小市民シリーズに似た感じと紹介されているのをよく見かけますが、個人的には物語の中に漂う「不安な気配」の手触りが文学少女シリーズに近いかな？　と感じました。
まぁ、「○○に似ている」って評価としてまったく正しくないと思うのですが……分かり易いので。上記作品が好きな方にお勧めです。


&nbsp;
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00AXLYB0G/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/6198mwaInLL._SL160_.jpg" alt="電柱幻想" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00AXLYB0G/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">電柱幻想</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.24</div></div><div class="amazlet-detail">まるかふぇ電書 (2013-01-05)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00AXLYB0G/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
電柱擬人化本です。
おもわず「何を言ってるのか わからねーと思うが」のコピペを張りたくなりますが、中身もまさにといったモノ。
基本的には擬人化された電柱のイラストとともに、電柱に関する雑学や豆知識などが語られるという内容で、なかなかに上級者向けの作品となっています。色んなフェティシズムが重なりあって複雑なグラデーションを描いている作品ですが、このニッチさがKDPらしいし、また日本的だなーと思ったので紹介してみました。電柱に詳しくなりたい方は是非。




<h2>総括</h2>
とりあえず、Kindleを購入して最も良かったことは「読書熱」が戻ってきたことでした。
学生の頃はわりと小説を読む方だったのですが、社会人になってからは、あまり読めなくなっていたので。
仕事柄、どうしても技術書を購入しなくてはならないことが多くて、それが結構な量なので、小説などを買ってしまうと物理的に置くスペースがなかったんですよね。
なので、購入するのにちょっと躊躇いがあり最近はほとんど小説を読むことが無くなっていたのですが、Kindleを買ってからはその辺考えなくて済むようになったので、久々に読書三昧を味わえました。（技術書は面白いけど、読書って感じではないですしね）

「読みたい」と思ったその時に１クリックで読み始められる幸せ……たまりません。

さらに、毎年年末の恒例作業となっていた「本の処分作業」を行わなくてもいいのは、精神衛生上も含めてとてもありがたいことでした。売るにしろ捨てるにしろ本の処分って結構な大仕事なんですよね、選別にも時間がかかるし。

あとは、電子書籍で出版される小説がもっと増えれば言うことなしなのですが。

そんなわけで、「そういえば、最近本読んでないなー」という方は、Kindleを購入してみてはいかがでしょうか。


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=toriaezu04b-22&o=9&p=13&l=ur1&category=kindlerotate&f=ifr" width="468" height="60" scrolling="no" border="0" marginwidth="0" style="border:none;" frameborder="0"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3222</wp:post_id>
		<wp:post_date>2013-12-25 09:45:37</wp:post_date>
		<wp:post_date_gmt>2013-12-25 00:45:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3222</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3224]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bb%8a%e5%b9%b4%e8%aa%ad%e3%82%93%e3%81%a0400%e5%86%8a%e3%81%ae%e4%b8%ad%e3%81%8b%e3%82%89%e3%80%81%e3%81%8a%e5%8b%a7%e3%82%81%e3%81%ae%e6%9c%ac%e3%82%92%e7%b4%b9%e4%bb%8b%e3%81%97%e3%81%be]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3ac16fc9fe17d7ded9d184a6690facfa</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>Kindle買った。</p>&mdash; 清水正行 (@_shimizu) <a href="https://twitter.com/_shimizu/statuses/274816273706258432">December 1, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5d611dd0e7c0904d7e441858ff8519c1</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>Kindle買った。</p>&mdash; 清水正行 (@_shimizu) <a href="https://twitter.com/_shimizu/status/274816273706258432">December 1, 2012</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_5d611dd0e7c0904d7e441858ff8519c1</wp:meta_key>
			<wp:meta_value><![CDATA[1418921067]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427392345;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4122;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:2964;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上に画像を配置する</title>
		<link>http://shimz.me/blog/google-map-api/3226</link>
		<pubDate>Wed, 25 Dec 2013 23:48:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3226</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/image/takasaki/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/gmapv3image.jpg" alt="gmapv3image" width="590" height="279" class="aligncenter size-full wp-image-3227" /></a>

<a href="http://shimz.me/example/gmapv3/image/takasaki/">example</a>

群馬県警察で公開されている「<a href="http://www.police.pref.gunma.jp/seianbu/01seiki/hanzaimap/map.html">犯罪発生マップ</a>(画像)」をGoogle Map上に配置してみました。
高崎警察署管内の「住宅対象侵入窃盗(市街のマップ)」を表示しています。
画像の配置自体は簡単に行えるのですが、位置をぴったり合わせるのが難しいですね。


<h2>サンプル</h2>
<pre class="lang:js decode:true " >function initialize() {
    //Google Maps API初期化
    geocoder = new google.maps.Geocoder();
		var mapOptions = {
		zoom: 15,
		center: new google.maps.LatLng(36.3219088, 139.0032936),
		mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    var map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

    //マップ上の表示領域が変化した際の処理
    google.maps.event.addListener(map, 'bounds_changed', function() {
		var latOutput = document.getElementById('lat');
		var lngOutput = document.getElementById('lng');

		
		var swlatOutput = document.getElementById('swlat');
		var swlngOutput = document.getElementById('swlng');
		
		//北東緯度経度表示エレメント
		var nelatOutput = document.getElementById('nelat');
		var nelngOutput = document.getElementById('nelng');

		var latlngBounds = map.getBounds();
		
		//マップ中心の緯度経度取得
		var centerLatlng = latlngBounds.getCenter();
		var ceLat = centerLatlng.lat();
		var ceLng = centerLatlng.lng();
		
		latOutput.innerText = ceLat;
		lngOutput.innerText = ceLng;
		
		//マップ南西の緯度経度取得
		var swLatlng = latlngBounds.getSouthWest();
		var swlat = swLatlng.lat();
		var swlng = swLatlng.lng();
		swlatOutput.innerText = swlat;
		swlngOutput.innerText = swlng;

		//マップ北東の緯度経度取得
		var neLatlng = latlngBounds.getNorthEast();
		var nelat = neLatlng.lat();
		var nelng = neLatlng.lng();	    
		nelatOutput.innerText = nelat;
		nelngOutput.innerText = nelng;
    });	
    
    var bounds = new google.maps.LatLngBounds();
    //画像の配置位置指定
    bounds.extend(new google.maps.LatLng(36.3068070483715,138.95191292059326));
    bounds.extend(new google.maps.LatLng(36.361153624185235,139.06435112249756));

    //画像をグラウンドオーバーレイとして追加
    var groundOverlay = new google.maps.GroundOverlay("http://www.police.pref.gunma.jp/seianbu/01seiki/hanzaimap/images/jyutaku/takasaki-s.jpg", bounds, {
		map : map,
		opacity : 0.3,
		clickable : true
    });
    
    //地図を表示
    map.fitBounds(bounds);
    
    //グラウンドオーバーレイがクリックされたら、透明度を変更
    google.maps.event.addListener(groundOverlay, "click", toggle(show, hide));	
    function show(){
		groundOverlay.setOpacity(1);
    }
    function hide(){
		groundOverlay.setOpacity(0.5);
    }
}


google.maps.event.addDomListener(window, 'load', initialize);

    
function toggle(){
    var fn = arguments;
    var l = arguments.length;
    var i = 0;
    return function(){
		if(l <= i) i=0;
		fn[i++]();            
    }
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3226</wp:post_id>
		<wp:post_date>2013-12-26 08:48:26</wp:post_date>
		<wp:post_date_gmt>2013-12-25 23:48:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3226</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3227]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[google-map%e4%b8%8a%e3%81%ab%e7%94%bb%e5%83%8f%e3%82%92%e9%85%8d%e7%bd%ae%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427379181;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2151;}i:1;a:1:{s:2:"id";i:3108;}i:2;a:1:{s:2:"id";i:3793;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GISの参考書はどこにあるのか？</title>
		<link>http://shimz.me/blog/map/3228</link>
		<pubDate>Fri, 27 Dec 2013 01:09:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3228</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/12/wtflibrary.jpg" alt="wtflibrary" width="589" height="296" class="aligncenter size-full wp-image-3229" />

GIS、それもQGISの参考書を探しております。

ネットを検索して見つけたリソースで、少しづつ少しづつ勉強していっているのですが、どうにも知識が断片的・パッチワークになりがちなので、参考書を購入しようかなと思い立ったのですが、その過程でちょっと気づいたことがあるったので記事にしてみます。

専門の方からすると当たり前の事なのかもしれませんが、私のように専門外のエンジニアでGISを学ぼうと思っている方には驚きの事実なんじゃないかと思うので。

驚いたこと、それは……

<strong>GISの参考書は書店の「コンピュータ書籍」コーナーには置いてない！</strong>

（本屋によって違うかも）

そもそも入荷されていないケースが多いのですが、たとえ在庫があったとしてもオライリー本が並んでる棚の周辺を探し回っても、その周辺には置いてないんです。


では、いったいどのコーナーにあるのか？

これがよくわからないんですよねー。

書店で、書籍の分類がどのように行われているのか、各店で違うのか、その辺よくわからないのですが。

ものによっては、地理や地図などを扱っているコーナーにあったり、「GISを使って商圏分析をしよう！」みたいな本だとマーケティング本の棚に並んでたり、統計学の棚に潜んでいたり、いろんなところに分散していることが多いようなのです。

とりあえず地元の<a href="http://lib.city.takasaki.gunma.jp/">図書館</a>サイトでGIS本を検索してみたところ、日本十進分類法でもGIS関連書籍は色んな項目に分かれているみたいで、結果一つにまとまって置かれていることがないんですよ。

つまりGISの参考書は「GIS」というジャンルではなくて「利用用途」を元に分類されているため、書店でも図書館でもてんでバラバラに置かれていて非常に見つけにくいのです。

空間スペースを用いた分類の限界……　orz

コンピュータ関連書籍として「CAD」本の隣あたりにまとめてボンと置いておいてくれた方が、絶対利用者にとって探しやすいと思うのですけどね。

そんなわけで、そうそうに現実<リアル>店舗で探すのをあきらめAmazonの検索窓に「GIS」と入力したところ、KDPで出版されている下記の書籍を発見し即ポチりました。

年末年始は下記の本を参考にQGISの勉強をしようと思います。

【追記】<a href="http://shimz.me/blog/book/3853">[オープンデータ+QGIS] 統計・防災・環境情報がひと目でわかる地図の作り方、感想</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G1CXQKW/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41Y2Oehe9tL._SL160_.jpg" alt="QGIS自習室 (QGISでマップ表示)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G1CXQKW/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">QGIS自習室 (QGISでマップ表示)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.26</div></div><div class="amazlet-detail"> (2013-10-19)<br />売り上げランキング: 11,820<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G1CXQKW/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GIIEPMM/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41M3BKtpuXL._SL160_.jpg" alt="QGIS自習室 (GISデータと空間参照システム)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GIIEPMM/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">QGIS自習室 (GISデータと空間参照システム)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.26</div></div><div class="amazlet-detail"> (2013-11-06)<br />売り上げランキング: 3,191<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GIIEPMM/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GWOU17K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41Jy6CcmGiL._SL160_.jpg" alt="QGIS自習室 (個別値主題図とラベル主題図)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GWOU17K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">QGIS自習室 (個別値主題図とラベル主題図)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.26</div></div><div class="amazlet-detail"> (2013-11-24)<br />売り上げランキング: 3,404<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GWOU17K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00H2ABINE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41oyHHN3TdL._SL160_.jpg" alt="QGIS自習室 (段階区分主題図の作成)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00H2ABINE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">QGIS自習室 (段階区分主題図の作成)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.26</div></div><div class="amazlet-detail"> (2013-12-02)<br />売り上げランキング: 2,904<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00H2ABINE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3228</wp:post_id>
		<wp:post_date>2013-12-27 10:09:38</wp:post_date>
		<wp:post_date_gmt>2013-12-27 01:09:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3228</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3229]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[GISの参考書はどこにあるのか？ http://wp.me/p2Qdzq-Q4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[gis%e3%81%ae%e5%8f%82%e8%80%83%e6%9b%b8%e3%81%af%e3%81%a9%e3%81%93%e3%81%ab%e3%81%82%e3%82%8b%e3%81%ae%e3%81%8b%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427400869;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:643;}i:2;a:1:{s:2:"id";i:1764;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【グロースハック】年末なのでアクセス解析みながら１年を振り返ってみる</title>
		<link>http://shimz.me/blog/analytics/3230</link>
		<pubDate>Sat, 28 Dec 2013 03:19:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3230</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/analytics/2194">去年に引き続き</a>、年末なのでGoogleアナリティクスでも見ながら一年を振り返ってみます。


<h2>アクセス解析</h2>
<strong>月間(2013/11/27〜2013/12/27)</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/131228-0001.png" alt="131228-0001" width="590" height="286" class="aligncenter size-full wp-image-3231" />

<strong>年間(2012/1/1〜2013/12/27)</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/131228-0002.png" alt="131228-0002" width="590" height="286" class="aligncenter size-full wp-image-3232" />

<strong>月間アクセスの推移</strong>
PV:10,675 -> 34,360
UU:4,336 -> 13,920

だいたい、去年と比較して３倍増といったところです。
基本的に、ほぼ検索エンジンからの流入なので記事数が増えた影響が大きいようです。


<strong>流入元</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/131228-0003.png" alt="131228-0003" width="590" height="382" class="aligncenter size-full wp-image-3234" />
圧倒的Google率変わらず。今年は「Bingからのアクセスを増やせないものなのかな？」と思っていろいろ試してみたのですが、まったく効果がありませんでした。Bingよくわかりません…

<strong>ユーザー属性</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/12/131228-0004.png" alt="131228-0004" width="590" height="232" class="aligncenter size-full wp-image-3235" />
Googleアナリティクスの新機能でユーザーの属性を表示できるようになったので出力してみました。
訪問者の内、89%が男性、約58%が25才〜35才の方となっています。
Googleがこの数値をどうやって算出しているのか解らないのですが、まぁジャンル的にも「でしょうね」といったところでしょうか。

<h2>アクセスアップの為にやったこと</h2>
実のところ去年とあまりかわりせん。
出来る範囲でページの表示速度を早くなるようにチューニングして、あとはひたすら記事を書く。
結局、それが一番効果が高いようです。
ただリピート率があまり高くないので、来年は１度訪れた方にその後も継続して見てもらえるようなコンテンツ作りを心がけたいと思います。
最近、グロースハックなるものにもちょっと興味が湧いてきたので、そこら辺を参考にしてみようかな？と下記の本を購入してみたりしています。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HEYWCYC/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51RrJHeMQ4L._SL160_.jpg" alt="グロースハッカー" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HEYWCYC/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">グロースハッカー</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.27</div></div><div class="amazlet-detail">日経BP社 (2013-12-19)<br />売り上げランキング: 63<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HEYWCYC/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>総括</h2>
今年は、年末にいくつかのアドベントカレンダーに参加させていただいたり、CodeIQで問題を作成させていただいたりと、いろいろ新たな事に挑戦させてもらい勉強になりました。
来年も多分、D3とGIS関連のことをやっているんじゃないかな？　と思うので、皆様よろしくお願いいたします。

よいお年を。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3230</wp:post_id>
		<wp:post_date>2013-12-28 12:19:38</wp:post_date>
		<wp:post_date_gmt>2013-12-28 03:19:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3230</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3231]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[【グロースハック】年末なのでアクセス解析みながら１年を振り返ってみる http://wp.me/p2Qdzq-Q6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e3%82%b0%e3%83%ad%e3%83%bc%e3%82%b9%e3%83%8f%e3%83%83%e3%82%af%e3%80%91%e5%b9%b4%e6%9c%ab%e3%81%aa%e3%81%ae%e3%81%a7%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e8%a7%a3%e6%9e%90%e3%81%bf%e3%81%aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427139054;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2194;}i:1;a:1:{s:2:"id";i:2903;}i:2;a:1:{s:2:"id";i:3624;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>退屈な年末年始を乗り切るための一冊「サイバー・クライム」</title>
		<link>http://shimz.me/blog/book/3237</link>
		<pubDate>Sun, 29 Dec 2013 06:00:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3237</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00APR9E00/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/414yOVrIppL._SL160_.jpg" alt="サイバー・クライム" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00APR9E00/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">サイバー・クライム</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.12.29</div></div><div class="amazlet-detail">講談社 (2012-12-17)<br />売り上げランキング: 7,570<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00APR9E00/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

&nbsp;
本書は、主に<a href="http://ja.wikipedia.org/wiki/DoS%E6%94%BB%E6%92%83">DoS攻撃</a>と呼ばれるサイバー攻撃に対して、防御側であるコンピューターセキュリティの専門家の視点から描かれたノンフィクション作品です。

２部構成になっており、１部はカリフォルニアに住む天才的なコンピュータ・セキュリティ専門家、バーレット・ライアンにオンラインカジノサイトから脅迫を伴ったDos攻撃からの防御を依頼されるところから物語が始まります。

ハッカーからの攻撃を防ぎ切ったことをきっかけに、バーレット青年は同社の幹部との関係を深めていくのですが、このオンラインカジノサイト運営はマフィアが関与しているため、だんだんとダークな業界へと足を踏み入れていく過程が描かれます。

いつの間にやら裏の世界で名の通ったコンピューターセキュリティ技術者になってしまい自らの倫理観のはざまで葛藤するバーレット青年の苦悩など見どころ（読みどころ？）が沢山あり、まるで映画をみているようですが、あくまでノンフィクションすべて現実にあった話です。

しかし、ハッカーやマフィア、FBIといろいろな人物が入り乱れ、また出てくる登場人物がみな魅力的(マフィアの関係者さえ）でキャラが立ちまくっているので、読んでいる間は事実であることを忘れてしまいそうになります。

第２部は、バーレット青年から情報提供を受けた英サイバー犯罪対策庁捜査官のアンディが、謎のハッカーを追って「ネット犯罪大国」ロシアでの捜査の過程が描かれます。

英国から遠く離れたロシアの地に単身乗り込み、現地の捜査官と友好を深めながらハッカーを追う姿は、まるでハードボイルド小説を読んでいるかのようです。

あくまでノンフィクションですので、全てがうまく行って胸がすくような大団円というわけにはいきませんが、良質な映画を見ているような面白さを持った作品ですので、年末年始が暇でしょうがないという方は是非、これを機会に読んでみてはいかかでしょうか。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3237</wp:post_id>
		<wp:post_date>2013-12-29 15:00:33</wp:post_date>
		<wp:post_date_gmt>2013-12-29 06:00:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3237</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3242]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e9%80%80%e5%b1%88%e3%81%aa%e5%b9%b4%e6%9c%ab%e5%b9%b4%e5%a7%8b%e3%82%92%e4%b9%97%e3%82%8a%e5%88%87%e3%82%8b%e3%81%9f%e3%82%81%e3%81%ae%e4%b8%80%e5%86%8a%e3%80%8c%e3%82%b5%e3%82%a4%e3%83%90%e3%83%bc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425962897;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3228;}i:1;a:1:{s:2:"id";i:3555;}i:2;a:1:{s:2:"id";i:2918;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ブログのテーマを変更しました。</title>
		<link>http://shimz.me/blog/other/3275</link>
		<pubDate>Mon, 30 Dec 2013 01:17:16 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3275</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://stinger3.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/screenshot.png" alt="stinger3" width="300" height="225" class="aligncenter size-full wp-image-3276" /></a>

ブログのテーマを「<a href="http://wptheming.com/foghorn/">Foghorn</a>」から、去年非常に話題になった「<a href="http://stinger3.com/">STINGER</a>」に変更しました。

Foghornも良かったのですが、スマートフォンから見たときのデザインがイマイチ見づらかったので。

テーマの変更とともに、以前から考えていたシンタックスハイライトプラグインを「<a href="http://wordpress.org/plugins/syntaxhighlighter/">SyntaxHighlighter Evolved</a>」から「<a href="http://wordpress.org/plugins/crayon-syntax-highlighter/">Crayon Syntax Highlighter</a>」に変更しました。

SyntaxHighlighter Evolvedは、スマートフォンから見たときに表示が崩れていたので、ずっと変えたいとおもっていたのですが、ショートコードの変更がメンドウすぎて……しかし、記事が増えるほど大変になっていくので一念発起して変更してみました。

これで、スマートフォンから閲覧したときもだいぶ見やすくなったはずです。

まだ、修正されてない記事や見落としなどがありますが、徐々に変えていきますのでよろしくお願いします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3275</wp:post_id>
		<wp:post_date>2013-12-30 10:17:16</wp:post_date>
		<wp:post_date_gmt>2013-12-30 01:17:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3275</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3276]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1424725427;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2194;}i:1;a:1:{s:2:"id";i:2609;}i:2;a:1:{s:2:"id";i:3880;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>連休中に短時間でプログラミングを学ぶなら「CODEPREP」がお勧め</title>
		<link>http://shimz.me/blog/web/3279</link>
		<pubDate>Tue, 31 Dec 2013 02:43:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3279</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codeprep.jp/ja/"><img src="http://shimz.me/blog/wp-content/uploads/2013/12/codeprep1.jpg" alt="codeprep1" width="590" height="282" class="aligncenter size-full wp-image-3280" /></a>


<blockquote>CODEPREPは、プログラミングをオンラインで書きながら
覚えることができる学習サービスです。
プログラミングの基礎から応用、
アプリ開発までを学ぶことができます。
</blockquote>


<a href="http://codeprep.jp/ja/">CODEPREP</a>は、ブラウザ上で実際にコードを入力し実行結果を確認しながら、プログラミングを学べるオンライン学習サイトです。
ブラウザ以外、特に何も必要とせず、実際に入力していくことで短時間でも学習効果が得られます。

同様のオンライン学習サイトは他にもあるのですが、「CODEPREP」は講座の数が多く「Three.jsで作る3Dグラフィックス基礎」や、「CSS3&jQueryで作る2Dゲームモーション」など他ではあまりみられない講座があるので、選択のしがいがあるのではないでしょうか。

<img src="http://shimz.me/blog/wp-content/uploads/2013/12/codeprep2.jpg" alt="codeprep2" width="506" height="650" class="alignnone size-full wp-image-3281" />

他にも、「グリッドレイアウト」や「パララックス」「スライドショー」などの実践的な講座も多数あるので連休中にプログラミングを学ぶのにお勧めです。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3279</wp:post_id>
		<wp:post_date>2013-12-31 11:43:55</wp:post_date>
		<wp:post_date_gmt>2013-12-31 02:43:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3279</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3282]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427398111;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:723;}i:1;a:1:{s:2:"id";i:2860;}i:2;a:1:{s:2:"id";i:1764;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬でもオープンデータで遊びたい！</title>
		<link>http://shimz.me/blog/other/3283</link>
		<pubDate>Wed, 01 Jan 2014 04:16:30 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3283</guid>
		<description></description>
		<content:encoded><![CDATA[明けましておめでとうございます。

タイトルは今年の抱負です。

去年は、いろんな自治体でオープンデータが盛り上がりましたが、当然の事ながらその波は群馬まではまったく届いておりません。

群馬県サイト、高崎市サイト、どちらで検索しても検索結果０件。

まったく、検討された痕跡すらありません。

残念。

とはいえ、県がまったくデータを出していない訳ではなく、下記の様な特設サイトなどが作られていたりもします。

<a href="http://toukei.pref.gunma.jp/notice.html">群馬県統計情報提供システム</a>

「システム案内」のページを見ても、ライセンスに関していっさい記述がないところが不安ですが、今年はこれらのデータを使って勝手にいろいろ遊んで(視覚化）みようかと思います。

怒られたらやめるね！


今年も一年、よろしくお願いいたします。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3283</wp:post_id>
		<wp:post_date>2014-01-01 13:16:30</wp:post_date>
		<wp:post_date_gmt>2014-01-01 04:16:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3283</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3078]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425747568;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2575;}i:1;a:1:{s:2:"id";i:3132;}i:2;a:1:{s:2:"id";i:3440;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2013年に話題になったデータビジュアライゼーション作品</title>
		<link>http://shimz.me/blog/datavis/3286</link>
		<pubDate>Thu, 02 Jan 2014 11:19:15 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3286</guid>
		<description></description>
		<content:encoded><![CDATA[2013年はデータビジュアライゼーション作品が盛んに発表された年でした。
(海外では)

様々なサイトで、去年流行したビジュアライゼーション作品の紹介記事が掲載されます。

<a href="http://www.gizmodo.jp/2013/12/2013_17.html">2013年に発表されたインフォグラフィック総集編（動画あり） </a>

<a href="http://flowingdata.com/2013/12/16/data-and-visualization-year-in-review-2013/">Data and visualization year in review, 2013</a>

<a href="http://www.wired.com/wiredscience/2013/12/best-scientific-figures-2013/">The Best Scientific Visualizations of 2013</a>

<a href="http://www.wired.com/wiredscience/2013/12/the-best-maps-of-2013/">The Most Amazing, Beautiful and Viral Maps of the Year</a>

そこで個人的に、去年みた視覚化作品の中から印象に残ったものを紹介します。



<a href="http://air.nullschool.net/">東京風速</a>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/2013dataviz1.png" alt="東京風速" width="400" height="189" class="alignnone size-full wp-image-3287" />
東京都の風の流れを可視化した作品。この作品は見たことのある方が多いのではないでしょうか。


<a href="http://earth.nullschool.net/jp/">世界風速</a>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/2013dataviz2.png" alt="世界風速" width="400" height="189" class="alignnone size-full wp-image-3288" />
こちらは、全世界の風の流れを地球議上に表示した作品。とても奇麗です。

<a href="http://moebio.com/newk/twitter/">Twitter Co. Conversations</a>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/2013dataviz5.png" alt="Twitter Co. Conversations" width="400" height="189" class="alignnone size-full wp-image-3289" />
Twitterの公式アカウントを中心にして一週間のうちにやりとりされた情報を可視化したサイトです。

<a href="http://charts.animateddata.co.uk/uktemperaturelines/">UK Temperature History</a>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/2013dataviz3.png" alt="UK Temperature History" width="400" height="189" class="alignnone size-full wp-image-3290" />
イギリスの平均気温を可視化した作品。D3.jsを使って作られています。

<a href="http://blog.safecast.org/maps/">SAFECAST</a>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/2013dataiz4.png" alt="SAFECAST" width="400" height="189" class="alignnone size-full wp-image-3291" />
放射線測定値の様々な可視化サイト。


2014年は、日本でもデータビジュアライゼーションが流行すると良いなとおもっています。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3286</wp:post_id>
		<wp:post_date>2014-01-02 20:19:15</wp:post_date>
		<wp:post_date_gmt>2014-01-02 11:19:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3286</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3288]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427339373;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3429;}i:1;a:1:{s:2:"id";i:2775;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>インターネットの物理的な姿を追い求めるドキュメンタリー</title>
		<link>http://shimz.me/blog/book/3293</link>
		<pubDate>Fri, 03 Jan 2014 12:31:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3293</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4152093536/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51JNA7qBsCL._SL160_.jpg" alt="インターネットを探して" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4152093536/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">インターネットを探して</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.01.03</div></div><div class="amazlet-detail">アンドリュー・ブルーム <br />早川書房 <br />売り上げランキング: 151,110<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4152093536/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<blockquote>私たちはふだん、ウェブサイトやメールが、どこを通って自分の目の前まで来たのかを意識することはまずない。それほどインターネットは日常生活にすっかり溶け込んでいる。しかしそのデータは、誰かが送信し、どこかを通ってきたからこそ届いたのだ。著者ブルームはあるきっかけでそうした“モノとしてのインターネット”を強く意識するようになる。つまり、「人類史上もっとも強力な情報ネットワークが、リスの出っ歯でかじられただけで不調におちいった」のを目撃したのだ。やがてブルームは、インターネットそのものをこの目でしかと見ようと決意して、長い旅に出る。多くの人に話を聞き、世界をまたにかけて飛び回る彼が見つけたものとは…</blockquote>

人に勧めるにはちょっと難しい本なんのですが、個人的に感銘を受けたので紹介します。

なぜ勧めるのが難しいかというと、なにしろ興味の無い人には全然面白くないだろうなーと思ったからなのですが。

本書は、家のインターネットがある日突然停止し全く不通になった（原因はリス）ことから、改めてインターネットというモノの物理的な姿に興味を持った著者がひたすらその実態を追い求める軌跡を記録したドキュメンタリーです。

地元のISP(インターネットサービスプロバイダ)から始まり、インターネットエクスチェンジ、海底ケーブルの陸揚局やデータセンターを訪れます。
また、IMP(インターフェイス・メッセージ・プロセッサー)の置かれているUSLAに訪れてインターネットの起源ついても調査しています。

最近では「クラウド（雲）」などと呼ばれるようなったインターネットが実際にどのように繋がれているのか、現実のケーブルによって構築されたネットワークの有様を思い出させてくれる本です。

<blockquote>インターネットは、実際には雲ではない。そんなイメージを信じさせるのは意図的な欺瞞に他ならない。それに、事実上、無線ではない。そこいらじゅうに存在しているわけではないのだ。</blockquote>


この本の中では、キーワードとして「地図」という言葉がよくでてきます。第一章「地図」では TeleGeography （テレジオグラフィー社）が発行しているインターネット地図を確認するところから旅がはじまります。論理的な電子上のネットワークにたいして、物理的なネットワークの姿を認識するのに地図が必要とされるのですね。
改めて、「地図」というものがもつ魅力とその大きな力を感じられる内容でもありました。

<blockquote>この本のテーマは地図上の現実の場所だ。それらの場所の音と匂い、名高い過去、物理的な細部、そしてそこで暮らしている人々だ。まっぷたつに壊れた世界をひとつにまとめる──物理世界と仮想世界を統一する──ため、ぼくはウェブ"所在地"や"住所"を見るのをやめ、本物の所在地や住所を、そしてそこでブーンとうなっている機械を探し出した。
</blockquote>

<blockquote>意味深なタイトルは、地図は場所を示すだけのものではないことをあらわしている。地図は、関心を表現したり強化するのだ。</blockquote>

ひとつだけ残念な点があって、それはこの本には地図がついてこないことです。
著者が訪れた場所が掲載されている地図がついてきたら、それを見ていろいろ思いを馳せることができたのにととても残念に思いました。
時間があったら本書に出てきた「場所」のストーリマップとか作ってみたいですね。

普及しすぎて、あまりにも「当たり前」に存在しているインターネットの実態を知りたくなったら、是非読んでみてください。


【余談】
本書の中でところどころ、日本企業に関する話題やエピソードが出てくるのですが、それがあまりに日本らしくて笑ってしまいました。
１つだけ引用します。

<blockquote>「日本の通信会社と契約を結ぼうとしてて、相手を感心させなきゃならないとしよう。でこの建物に二〇人の視察団を案内しなきゃならないとする」とアンデルスンは説明した。そんなときは、アンデルスンのお得意の表現を借りれば"サイバーっぽく"みえなければならない
（中略）
エクイニクス・データセンターはデータセンターらしく見えるように、それも映画『マトリックス』に出てきそうに、過剰にそうみられるようにつくられている。「洗練された顧客をデータセンターに案内して、そこがどんなにクリーンで見栄えがして──かっこよくてサイバーっぽいかを見てもらえれば──契約してもらえるんだよ」</blockquote>

日本のお偉いさん方……見透かされてますよ！





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3293</wp:post_id>
		<wp:post_date>2014-01-03 21:31:37</wp:post_date>
		<wp:post_date_gmt>2014-01-03 12:31:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3293</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426485996;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1031;}i:1;a:1:{s:2:"id";i:3780;}i:2;a:1:{s:2:"id";i:2331;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】データセットの増減をDOM要素に反映する</title>
		<link>http://shimz.me/blog/d3-js/3295</link>
		<pubDate>Mon, 06 Jan 2014 01:47:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3295</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsでデータセットの増減をDOM要素に反映して更新する方法です。
初めは混乱しがちですか、いったん理解してしまえば非常に簡単でなおかつ強力な機能なので是非使いこなしたいですね。


<h2>準備</h2>
D3を用いて操作を行うドキュメントを用意します。 
 
<pre class="lang:xhtml decode:true " >&lt;html&gt;
&lt;head&gt;
&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
&lt;style&gt;
div {
  color: white;
  height:50;
  background-color:blue;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div&gt;test1&lt;/div&gt;
	&lt;div&gt;test2&lt;/div&gt;
	&lt;div&gt;test3&lt;/div&gt;
	&lt;div&gt;test4&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 
出力結果は以下のようになります。
<a href="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000000.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000000.jpg" alt="d3databinde000000" width="242" height="100" class="alignnone border size-full wp-image-3296" /></a>


<h2>データセットを束縛する</h2>
下記のデータセットをDIV要素に束縛します。
 
<pre class="lang:js decode:true " >var dataSet = [
	{id:"A", val:100},
	{id:"B", val:110},
	{id:"C", val:120},
	{id:"D", val:130},
	{id:"E", val:140},
]  

//データセットを束縛  
d3.select('body').selectAll('div')
	.data(dataSet)
	.enter()
	.append('div')
	.style({
		width:function(d){ return d.val+"px"}
	})
	.text(function(d){ return d.id }); </pre> 

<strong>出力結果</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000001.jpg" alt="d3databinde000001" width="244" height="100" class="alignnone size-full border wp-image-3297" />

選択したDIV要素の数が、データセットの数に対して足りていないので、D3によって新たなDIV要素が追加されました。
しかし、その後のstyle/textの適用は新たに追加された要素に対してしか行われていません。
これは意図した動作(選択した要素・新たに追加された要素ともにデータセットを元にした更新を行いたい)と違っています。
これらが正しく適用されるように、データセットの束縛と、要素の更新をわけます。

<h2>束縛後→要素の更新</h2>
 
<pre class="lang:js decode:true " >//データセットを束縛
d3.select('body').selectAll('div')
	.data(dataSet)
	.enter()
	.append('div')

//要素の更新
d3.selectAll('div')
	.style({
		width:function(d){ return d.val+"px"}
	})
	.text(function(d){ return d.id }); </pre> 

<strong>出力結果</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000002.jpg" alt="d3databinde000002" width="244" height="100" class="alignnone size-full border wp-image-3298" />
選択したdiv要素にデータセットを束縛し、足りないdiv要素をappendします。
その後改めてdiv要素を選択し、データセットの内容を元にdiv要素の属性値を更新しています。

これで意図通り、指定したすべての要素がデータセットを元に更新されました。
次は、データセットの内容を変更して要素を更新してみます。

<h2>データセットの変更→要素の更新</h2>
<pre class="lang:js decode:true " >var dataSet2 = [
	{id:"A", val:100},
	{id:"B", val:110},
	{id:"D", val:130},
	{id:"E", val:140},
]  

d3.selectAll('div')
	.data(dataSet2)
	.style("background-color", "red");</pre> 

データセットの数を減ら(Id:"C"のデータを削除)してDIV要素に束縛し、選択したDIV要素の背景色を「赤」に変更しています。
出力結果
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000003.jpg" alt="d3databinde000003" width="244" height="100" class="alignnone size-full border wp-image-3299" />
新たなデータセットの内容が束縛され要素が更新されました。
しかし、以前束縛されていたデータセットの内容とはまったく関係なく、単に上の要素から順に新たなデータセットが束縛されて要素の更新がおこなわれています。
以前のデータセットと新しいデータセットの差分を要素に反映するには、dataメソッドのコールバックを使用します。

<h2>dataメソッドのコールバック</h2>

<pre class="lang:js decode:true " >var dataSet2 = [
	{id:"A", val:100},
	{id:"B", val:110},
	{id:"D", val:130},
	{id:"E", val:140},
]  


d3.selectAll('div')
	.data(dataSet2, function(d){ return d.id })
	.style("background-color", "red");</pre> 

上記では、データセットのid値を元に新たなデータセットを要素に束縛します。
<strong>出力結果</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000004.jpg" alt="d3databinde000004" width="244" height="100" class="alignnone size-full border wp-image-3300" />
削除されたid:"C"のデータが束縛されていた要素を除いて、正しく更新がおこなわれました。
このようにdataメソッドのコールバックを使用することで、データセットの増減を要素に正しく反映することができます。

<h2>不要になった要素の削除</h2>
 
<pre class="lang:js decode:true " >d3.selectAll('div')
	.data(dataSet2, function(d){ return d.id })
	.style("background-color", "red")
	.exit()
	.remove();</pre> 

<strong>出力結果</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3databinde000005.jpg" alt="d3databinde000005" width="244" height="100" class="alignnone size-full border wp-image-3301" />

最後にexit/removeメソッドを用いて不要となった要素を削除しました。

<h2>総括</h2>
データセットの増減に合わせてDOM要素を操作するには、多少コツがいります。
しかし、動的なビジュアライゼーションを作成するには必要不可欠な知識となるので、是非いろいろ弄って理解を深めてみてください。

transition効果をかけてみたり、途中のexitメソッドを省いたらどうなるのか？　など試してみると面白いかもしれません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3295</wp:post_id>
		<wp:post_date>2014-01-06 10:47:58</wp:post_date>
		<wp:post_date_gmt>2014-01-06 01:47:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3295</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3300]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427398463;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3307;}i:1;a:1:{s:2:"id";i:2619;}i:2;a:1:{s:2:"id";i:2963;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>技術系ブログのアクセスアップ術</title>
		<link>http://shimz.me/blog/other/3306</link>
		<pubDate>Wed, 08 Jan 2014 15:18:36 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3306</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/01/1137473491-8956.jpg" alt="1137473491-8956" width="400" height="284" class="aligncenter size-full wp-image-3316" />

今まで色々試してきた自分なりのアクセスアップ術をまとめてみました。（なお、ここではいわゆる「備忘録」として運営されている技術系ブログのアクセスアップを想定しています）

<h2>準備する</h2>
まずは、ブログを始める所から。
<h3>サーバーを用意する</h3>
技術系ブログを始めるのであれば自分でサーバーを用意するか借りるのがお勧めです。はてなブログのようにSEOに強いブログサービスもありますが自分で一から構築することで勉強になりますし、行えるSEO施策も増えます。構築作業自体が記事のネタになるので便利です。

ついでに余裕があるなら独自ドメインも取ってしまうと良いでしょう。

<h3>基本的なSEOはやっておく</h3>
とりあえず、ホワイトハックSEOと呼ばれる基本的なSEO対策は実施しておきましょう。具体的に何を行ったら良いかは次の項目で紹介する本に詳しく掲載されているのでそちらを参照してみてください。

本当に基本的な施策だけで構いません。メンドウならSEOに強いと言われるブログテーマを選ぶだけでいいと思います。

ただし、GoogleやBingのWebマスターツールにだけは必ず登録しておいたほうが良いと思います。

<h3>エンジニアならではのSEO</h3>
ページの表示速度がSEOにおいて大きく影響する(とくにGoogleでは)ことは良く知られています。そこで、webサーバーやデータベースのチューンナップなどを行って表示速度の高速化を計りましょう。「表示速度の高速化」に関する記事はネットでも人気のあるコンテンツなので、これも記事のネタにもなります。

この手のSEO施策については詳しく知りたければ下記の書籍がお勧めです。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844328093/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Oilf1slvL._SL160_.jpg" alt="SEOを強化する技術 エンジニアが内側から支えるサイト設計・構築術" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844328093/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">SEOを強化する技術 エンジニアが内側から支えるサイト設計・構築術</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.01.07</div></div><div class="amazlet-detail">安川 洋 伊藤 大典 <br />インプレスジャパン <br />売り上げランキング: 32,258<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844328093/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h2>記事を書くための工夫</h2>
とにかく記事を書く。それだけが王道です。
<h3>記事を書くのが基本</h3>
身も蓋もない話ですが、アクセスアップにもっとも効果的なのは記事を書く事です。毎日記事を書く必要はないですが(もちろん出来るならその方が効果は高いです)１週間に１回は更新した方が良いと思います。自分の経験では更新期間が２週間以上空くとかなりアクセス数が下がります。

逆に、掲載記事数が100〜200くらいになると実感出来る程度に検索流入数が増えてくるので、そこまではひたすら地味に頑張りましょう。

「ブログに書くネタがないから、なにか勉強しようか」ぐらいに考えられるとスキルアップにも繋がっていいかもしれません。

<h3>同じ事でも書いていい</h3>
技術系ブログを続ける上で一番のハードルになりがちなのが「こんな簡単な事書いてもしかたがないんじゃないか？」や「もう、嫌というほど同じ内容の記事がネットに上がっているんだから意味ないんじゃないか？」という自分自身の気持ちだったりします。

「Apacheのインストール方法なんていまさら書いたって……」とか。

実のところ気にする必要はありません。むしろ、入門記事に近いほどアクセス数は多くなる傾向がありますし、初心者の人が一から学んでいく過程を記録した記事などは人気の高いコンテンツだったりします。

どうしても気になるようだったら出来るだけ細かい情報を掲載すると良いです。
「○○のサービスを使って、OSは□□で、バージョンは△△で……」ととにかく細かく詳細情報を盛り込みましょう。

環境がまったく一緒ということは殆どないので検索でたどり着いた人にとっても有意義な情報になります。


<h3>紹介記事は目的を忘れずに</h3>
自分が見つけたライブラリやフレームワークなどを紹介する記事はアクセスも集めやすく、自分が学んだ内容などを書くよりも少ない工数で記事を作成できたりします。

また、モノによっては多数ブックマークされたりリツイートされたりして爆発的にアクセスが増えるなんて事もあります。
そのため、ついついこの手の記事に頼りがちになってしまう事がありますがそんな時はブログを始めた目的を思い出しましょう。

始めから紹介記事を中心にしたブログを作るのが目的であれば何の問題もありませんが、本来自分が学んだ内容を記録して行く「備忘録」だったはずなのにアクセスが稼げて書きやすいからといって紹介記事ばかり増やすのは本末転倒になってしまいます。

バランスを考えてほどほどにしておくのがよいでしょう。


<h3>公開は平日の午前中がお勧め</h3>
技術系ブログ全体の傾向らしいのですが、平日の午前中9時〜12時ぐらいにアクセスが高くなります。そこで、この時間帯に合わせて公開することで記事を読んでもらえる確率が増えます。

前日の夜に記事を書いて次の日の朝に公開するというのがお勧めです。一晩寝かせてから校正すると思わぬ穴なども発見できたりしますので一石二鳥です。

<h3>テーマにそぐわない記事は休日に</h3>
逆に技術系ブログでは休日のアクセスがかなり下がる傾向にあるようです。
ウチの場合だとほぼ平日の半分近くまでさがります。

この傾向を利用して「ブログのテーマにはそぐわないのだけれど、なんかどうしても書きたい」という記事は休日に投稿しましょう。

ブログのアクセスアップの定説として「ブログのテーマを絞るべき」と良く言われますが、ブログを続けていくと「関係ないこと書きたい」という衝動に突如襲われたりします。

書いた記事の公開日をアクセスの少ない休日にすることでブログのテーマがぶれるのを最小限におさえられます。もし仮に思いがけず当たったならばそのまま残し逆にたいして読まれなかったら年末あたりでサクッと削除してしまいましょう。


<h3>トラブルシュート記事は鉄板</h3>
なにかトラブルが発生してそれを解決したという記事は爆発的なアクセスを生む事はさほどないですがコンスタントに検索からの流入が望めるコンテンツになります。

「でも、結局解決策はググって見つけたわけだし、それを書いたらパクリになるんじゃね？」とためらいを感じた時は検索キーワードを変えてみましょう。

自分が使った検索キーワード以外で「このトラブルに遭遇した人は、こんなキーワードでも検索しそうだな」というキーワードを片っ端から検索してみて"解決策にたどりつかないキーワード"を見つけ、そのキーワードを中心に据えて記事を書くことで同じトラブルを抱えたユーザーにとって有意義な記事へと変えることができます。


<h2>発見してもらう</h2>
アクセス数を増やすにはブログを発見してもらう必要があります。
<h3>ソーシャルメディアを活用する</h3>
Twitterなどに公開した記事へのリンクをツイートすることで、ブログを発見してもらう機会を増やす事ができます。ただし、自ブログへ誘導するようなツイートしかしないアカウントは宣伝アカウントとして嫌われるので気をつけましょう。

普段はできるだけブログのテーマに即した内容をつぶやいてフォロアーを増やし、バランスを考えて自分の書いた記事へ誘導するつぶやきを混ぜて行くのが良いと思います。

<h3>所属するクラスタを確認する</h3>
一口に技術系といってもその中にもさらに細かい分類があります。
ある程度記事が溜まってきて自分の興味の方向性が明確になってきたら自分のブログがどんな<a href="http://news.searchina.ne.jp/disp.cgi?d=0429&f=column_0429_010.shtml&y=2011">クラスタ</a>に分類されるか考えてみましょう。

自分が属するクラスタがはっきりしてくると、同時に同じクラスタ内で有名なユーザーや影響力の大きい<a href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E5%A5%EC%A1%BC%A5%BF%A1%BC#p1">キュレーター</a>なども解ってくるので、そういったユーザーにどうやったら自分のブログを発見してもらえるか戦略を練りましょう。例えば、記事の公開時間を影響力の高いユーザーがアクティブに活動している時間に合わせてみるとか。

ただし、あまりやり過ぎるとネットストーカーっぽくなるのでほどほどに。

<h3>共有サイトを利用する</h3>
国内であれば <a href="http://jsdo.it/_shimizu">jsdo.it</a> や <a href="http://qiita.com/_shimizu">Qiita</a> 海外であれば <a href="http://codepen.io/shimizu">code.pen</a> などコードを投稿できるサービスを利用することで投稿したコードに興味を持ってくれたユーザーがプロフィール欄のリンクから自分のブログへと訪れてくれることがあります。

また、サンプルコードを jsdo.it で作成しコードの解説記事をブログに書いて jsdo.it の read.me に記事へのリンクを貼ることでブログへの流入を増やすこともできたりします。

<h3>全体を盛り上げる</h3>
OS、言語、フレームワーク、ライブラリ、何でも良いのですが自分のブログで取り上げる事の多いテーマについて書かれた多サイトの記事を見かけたら積極的にツイート・リツイートしたりしてみましょう。
よく取り上げるテーマへの注目度が上がれば回り回って自分のブログへの流入も増えます。

<h3>話題と技術を絡めてみる</h3>
アフェリエイとを目的としたブログなんかだと、前日テレビで話題になった内容を記事にすることで検索流入数を増やすなどのテクニックがありますが、技術系ブログでコレをやるとそもそものブログの目的から外れてしまいがちになるのであまり好ましい事ではありません。

しかし、まったく方法がないか？というとそうでもなく、技術を絡めることで軸をずらすことなく話題に乗っかることはできたりします。例えばウチのブログなら「話題になっているアニメの人物相関図を可視化してみる」とかですかね。

ただし、この方法で見に来てくれたユーザーはあまり定着しないので、バランスを考えて程々に利用していくと良いでしょう。

<h3>イベント企画に参加する</h3>
時期を過ぎてしまっていますが、年末に行われる<a href="http://www.adventar.org/">アベントカレンダー</a>などのイベントに参加する事で自分のブログを知ってもらう機会を増やす事ができます。
なので、気になるイベントを見つけたら積極的に参加してみましょう。

<h2>最後に</h2>
<h3>技術系ブロガーこそアクセスアップを意識するべき</h3>
もともと技術系のブログとアクセスアップは相性がよくありません。
分母の数は限られていますし、一説によると記事の中にコードやコマンドが含まれているだけで一般ユーザーのアクセスは減るらしいです。
アフェリエイトだってサーバー代にでも達すれば上々といったところです。

しかし、やはり読んでくれる人が増えるというのは劇的にモチベーションが上がります。

よほど書く事が好きで習慣づいている人でもない限り「備忘録」のまま継続するのはかなり難しいと思います。
なにかしら「記事を書かねば」というプレッシャーが無いとブログを続けるのは難しい、そう感じています。

アクセス数は適度なプレッシャーを与えてくれます。「記事を書かねば」という気分にさせてくれます。
あまりアクセスアップばかりに熱中しすぎるようだと本末転倒になりますが、ゲーム感覚で楽しんでみると良いのではないでしょうか。

<h2>【関連】３年間やってみた結果</h2>
<a href="http://shimz.me/blog/analytics/3861">未開の地のエンジニアが３年間ブログをやってみた結果。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3306</wp:post_id>
		<wp:post_date>2014-01-09 00:18:36</wp:post_date>
		<wp:post_date_gmt>2014-01-08 15:18:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3306</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3316]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385532;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2194;}i:1;a:1:{s:2:"id";i:3861;}i:2;a:1:{s:2:"id";i:2903;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】おさらい１回目　棒グラフ</title>
		<link>http://shimz.me/blog/d3-js/3307</link>
		<pubDate>Wed, 08 Jan 2014 07:31:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3307</guid>
		<description></description>
		<content:encoded><![CDATA[昨年末、ブログレイアウトのリニューアルのために去年書いた記事を見直していたのですが、よくよく考えてみると棒グラフとか折れ線グラフとかD3を使った基本的なグラフの作成方法について記事を書いたことが無かったな、ということに気付いたので改めてD3についておさらいしていくことに決めました。


<h2>ライブラリを読み込む</h2>
 まず基本ですが、D3ライブラリを読み込みます。
<pre class="lang:xhtml decode:true " >&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;</pre> 

<h2>データセットを用意する</h2>
 今回使用するデータセットは以下。このデータを棒グラフとして表示します。
<pre class="lang:js decode:true " >var dataSet = [
	{name:"a", val1: 1000, val2: 500 },
	{name:"a", val1: 2000, val2: 400 },
	{name:"a", val1: 3000, val2: 300 },
	{name:"a", val1: 4000, val2: 200 },
	{name:"a", val1: 5000, val2: 100 }  
];</pre> 


<h2>SVGを使って棒グラフ(横)を作成する</h2>
<h3>svg要素を設置する</h3>
まずは、body要素のなかにsvg要素を設置します。
このsvgタグが今回グラフが表示されるステージとなります。
高さ200px、幅300pxに指定しています。
<pre class="lang:js decode:true " >var svgW = 300; 	//ステージの幅
var svgH = 200;	//ステージの高さ

var svg = d3.select('body')
	.append('svg') //svg要素をbody要素の中に追加
	.attr({
		width: svgW,
		height: svgH,
	});
</pre> 

<h3>値を正規化するscale関数を作成する</h3>
データの値を正規化するscale関数を作成します。
今回作成したscale関数は「ゼロ〜データ(val1)の最大値」間の値を、「ゼロ〜ステージの高さ」までの値に変換します。
<pre class="lang:js decode:true " >var scale = d3.scale.linear()
	.domain([0, d3.max(dataSet, function(d){ return d.val1 })])	//正規化される値の範囲を指定(0〜val1の最大値)
	.range([0, svgH]);	//出力値の範囲を指定(0〜ステージの高さ)</pre> 


<h3>データセットを束縛しrect要素を追加します</h3>
svg要素に対して架空のrect要素を選択し(この時点ではまだドキュメントにrect要素は存在しない)、データセットを束縛して足りないrect要素を追加します。
attrメソッドを使って各rect要素に属性値を設定、y属性(縦位置)はデータセットのインデックスを元に指定し、width属性(幅)はデータセットのval1の値を正規化して適用しています。
<pre class="lang:js decode:true mark:7,8 " >var barchart = svg.selectAll('rect')	//rect要素を選択
	.data(dataSet)	//データセットを束縛
	.enter()	//データセットの数に対して選択された要素がいくつ足りないかチェック
	.append('rect')	//足りない分のrect要素を追加
	.attr({
		x: 0,
		y: function(d, i){ return i * 30 },			//データのインデックス数をy属性に反映
		width: function(d){ return scale(d.val1) },	//データの値(val1)を正規化してwidth属性に反映
		height: 20,
		fill: "blue"
	});</pre> 

セレクションメソッドやenterメソッドの動作についてもっと詳しく知りたい方は以下を参照してください。	
<a href="http://ja.d3js.info/mike/selection/">D3 - セレクションの仕組み</a>

<h3>実行結果</h3>
ここまでのコードを実行した結果が以下です。
横向きのグラフが表示されます。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000000.jpg" alt="d3barchart000000" width="405" height="139" class="alignnone size-full wp-image-3308" />

次は、このグラフを縦に表示されるように修正します。

<h2>SVGを使って棒グラフ(縦)を作成する</h2>

<h3>縦表示に変更する</h3>
 y属性に指定していたコールバックとx属性の値を入れ替えます。
また、width属性に指定していたコールバックとheight属性の値を入れ替えます。
この変更によって、各rect要素に設定される値が、x属性(横位置)はデータセットのインデックスを元に指定され、height属性(高さ)はデータセットのval1の値を正規化した値が適用されるようになります。
<pre class="lang:js decode:true mark:6-9" >var barchart = svg.selectAll('rect')
	.data(dataSet)
	.enter()
	.append('rect')
	.attr({
		x: function(d, i){ return i * 30 },	//　↓　入れ替えました
		y: 0,								//　↑
		width: 20,										// ↓ 入れ替えました
		height: function(d){ return scale(d.val1)} ,	// ↑
		fill: "blue"
	});</pre> 

<h3>実行結果</h3>
コードを修正して実行した結果が以下となります。
グラフが上から下へ向かって表示されるようになりました。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000001.jpg" alt="d3barchart000001" width="270" height="259" class="alignnone size-full wp-image-3309" />

後ほどグラフの向きを反転(下から上へ向かって表示)させますが、その前に次は目盛り軸を作成します。

<h2>目盛りを表示する</h2>
<h3>マージンを設定する</h3>
今回は目盛りをグラフの左側に表示します。
このままでは、目盛り要素を表示するスペースが無いのでまずマージンを設定します。 
<pre class="lang:js decode:true " >var xMargin = 50;</pre> 

マージンがグラフに反映されるようにコードを修正します。
 
<pre class="lang:js mark:6 decode:true " >var barchart = svg.selectAll('rect')
	.data(dataSet)
	.enter()
	.append('rect')
	.attr({
		x: function(d, i){ return i * 30 + xMargin },	//マージンをグラフに反映
		y: 0,
		width: 20,
		height: function(d){ return scale(d.val1)} ,
		fill: "blue"
	});</pre> 
<h3>目盛りを作成する</h3>
目盛りを作成するには、まずd3.svg.axisメソッドを使ってaxisオブジェクト(yAxisCall)を生成します。
その後、svg要素にg要素(グループ要素)を一つ追加し、callメソッドに作成したyAxisCallオブジェクトを渡します。
 
<pre class="lang:js decode:true " >var yAxisCall = d3.svg.axis()
	.scale(scale)		//スケールを適用する
	.orient('left')		//目盛りの表示位置を左側に指定

var yAxis = svg.append('g')
	.attr({
		"class": "axis",	//classを指定しておく
		"transform": "translate(" + [xMargin, 0] + ")" 
	})
	.call(yAxisCall);	//yAxisCallオブジェクトを適用</pre> 

<h3>実行結果</h3>
修正したコードを実行した結果が以下となります。

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000002.jpg" alt="d3barchart000002" width="270" height="259" class="alignnone size-full wp-image-3310" />

<h3>目盛りをデザインする</h3>
表示されている目盛りをスタイルシートを使用して見た目を変更します。
前回、attrメソッドを使って指定したクラス名を元にpaht要素とline要素にスタイルを適用します。
<pre class="lang:css decode:true " >.axis path, .axis line{
    fill:none;
    stroke:black;
}
.axis text {
    fill:black;
}</pre> 

<h3>実行結果</h3>
上記のスタイルを適用した結果が以下となります。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000003.jpg" alt="d3barchart000003" width="270" height="259" class="alignnone size-full wp-image-3311" />

次はいよいよ、グラフの上下を反転させます。

<h2>反転する</h2>
<h3>スケールを反転させる</h3>
先ずはscale関数のrange(出力範囲)を反転します。
この修正によって大きい値のデータほどscale関数を適用すると、小さい数値に正規化されて出力されます。
<pre class="lang:js mark:3 decode:true " >var scale = d3.scale.linear()
	.domain([0, d3.max(dataSet, function(d){ return d.val1 })])
	.range([svgH, 0]);</pre> 

<h3>実行結果</h3>
yAxisCallオブジェクトは出力する目盛りの値を読み込んでいるscale関数を元に生成しているので、scale関数を修正したことによって出力される目盛りも反転され下に行くほど少ない値が表示されるようになります。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000004.jpg" alt="d3barchart000004" width="270" height="259" class="alignnone size-full wp-image-3312" />

<h3>グラフの高さを反転させる</h3>
上記の実行結果をよく見るとグラフの値が実際のデータの値と反対になっていることに気付くと思います。
そこで、attrメソッドで適用しているrect要素のheight属性を「正規化したデータの値」から「ステージの高さ－正規化したデータの値」に変更します。
<pre class="lang:js mark:9 decode:true " >var barchart = svg.selectAll('rect')
	.data(dataSet)
	.enter()
	.append('rect')
	.attr({
		x: function(d, i){ return i * 30 + xMargin },
		y: 0,
		width: 20,
		height: function(d){ return svgH - scale(d.val1)} ,	//(ステージの高さ－正規化したデータの値)を反映
		fill: "blue"
	});</pre> 

<h3>実行結果</h3>
修正したコードを実行した結果が以下です。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000005.jpg" alt="d3barchart000005" width="270" height="259" class="alignnone size-full wp-image-3313" />

<h3>グラフの表示位置(縦)を反転させる</h3>
最後の仕上げとして、各rect要素のy属性を調整しグラフを下方向に揃えます。
<pre class="lang:js mark:7 decode:true " >var barchart = svg.selectAll('rect')
	.data(dataSet)
	.enter()
	.append('rect')
	.attr({
		x: function(d, i){ return i * 30 + xMargin },
		y: function(d){ return scale(d.val1)},		//縦位置を下方向に揃える
		width: 20,
		height: function(d){ return svgH - scale(d.val1)} ,
		fill: "blue"
	});</pre> 

<h3>実行結果</h3>
これでひとまず棒グラフ(縦)の完成です
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000006.jpg" alt="d3barchart000006" width="270" height="259" class="alignnone size-full wp-image-3314" />

<h2>動的にグラフを変化させる</h2>
ついでなので、イベント実行時にグラフを動的に変化するようにしてみます。
今回は、body要素上でクリックされたら、表示するグラフをval1からval2のグラフへと変化させてみます。

<h3>イベントを設置する</h3>
まずは、body要素にイベントを設置しアラートが正しく実行されるかテストします。
<pre class="lang:js decode:true " >d3.select('body').on('click', function(){
	alert('test');
});</pre> 

正常に動作することが確認できたらalertは削除してください。

<h3>スケールを更新する</h3>
正規化する対象をデータセットのval1からval2へと変更するため、スケールの適用範囲を「ゼロからval2の最大値」へと更新します。 
<pre class="lang:js mark:2 decode:true " >d3.select('body').on('click', function(){
	scale.domain([0, d3.max(dataSet, function(d){ return d.val2 })]);	//正規化される値の範囲を指定(0〜val2の最大値)
});</pre> 

<h3>目盛りを更新する</h3>
さらに、目盛りの表記をval1に対するものからval2に合わせたものへ変更するのために、xAxisオブジェクトに再度yAxisCalオブジェクトを渡して更新します。
<pre class="lang:js mark:3 decode:true " >d3.select('body').on('click', function(){
	scale.domain([0, d3.max(dataSet, function(d){ return d.val2 })]);
	yAxis.call(yAxisCall);
});</pre> 

<h3>棒グラフを更新する</h3>
最後に各rect要素のy属性値・height属性を更新します。
<pre class="lang:js mark:4-7 decode:true " >d3.select('body').on('click', function(){
	scale.domain([0, d3.max(dataSet, function(d){ return d.val2 })]);
	yAxis.call(yAxisCall);
	barchart.attr({
		y: function(d){ return scale(d.val2)},
		height: function(d){ return svgH - scale(d.val2)} , 
	});
});</pre> 

<h3>実行結果</h3>
クリックイベント発生後の実行結果が以下です。
グラフの内容がデータセットのval2の値を元にしたものに変更され、目盛りもそれに合わせた値に変更されています。

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3barchart000008.jpg" alt="d3barchart000008" width="270" height="259" class="alignnone size-full wp-image-3315" />

<h3>アニメーションさせる</h3>
val1グラフからval2グラフへの変更の際にアニメーションされるようにコードを修正します。
transitionメソッドを間に挟むだけなので簡単です。 
<pre class="lang:js decode:true " >d3.select('body').on('click', function(){
	scale.domain([0, d3.max(dataSet, function(d){ return d.val2 })]);
	yAxis.transition().call(yAxisCall);	//目盛り表示更新時にアニメーションさせる
	barchart
		.transition()	//グラフ表示更新時にアニメーションさせる
		.attr({
			y: function(d){ return scale(d.val2)},
			height: function(d){ return svgH - scale(d.val2)} , 
		});
});</pre> 


以上です。
次回は、折れ線グラフをおさらいします。

<hr />

<strong>サンプルコード</strong>

<pre class="lang:js decode:true " >var dataSet = [
	{name:"a", val1: 1000, val2: 500 },
	{name:"a", val1: 2000, val2: 400 },
	{name:"a", val1: 3000, val2: 300 },
	{name:"a", val1: 4000, val2: 200 },
	{name:"a", val1: 5000, val2: 100 }  
];

var svgW = 300; 	//ステージの幅
var svgH = 200;	//ステージの高さ
var xMargin = 50; //マージン

var svg = d3.select('body')
	.append('svg') //svg要素をbody要素の中に追加
	.attr({
		width: svgW,
		height: svgH,
	});

var scale = d3.scale.linear()
	.domain([0, d3.max(dataSet, function(d){ return d.val1 })])	//正規化される値の範囲を指定(0〜val1の最大値)
	.range([svgH, 0]);	//出力値の範囲を指定(ステージの高さ〜0)

var barchart = svg.selectAll('rect')
	.data(dataSet)
	.enter()
	.append('rect')
	.attr({
		x: function(d, i){ return i * 30 + xMargin },	//マージンをグラフに反映
		y: function(d){ return scale(d.val1)},		//縦位置を下方向に揃える
		width: 20,
	height: function(d){ return svgH - scale(d.val1)} ,	//(ステージの高さ－正規化したデータの値)を反映
		fill: "blue"
	});

var yAxisCall = d3.svg.axis()
	.scale(scale)		//スケールを適用する
	.orient('left')		//目盛りの表示位置を左側に指定

var yAxis = svg.append('g')
	.attr({
		"class": "axis",	//classを指定しておく
		"transform": "translate(" + [xMargin, 0] + ")" 
	})
	.call(yAxisCall);	//yAxisCallオブジェクトを適用

d3.select('body').on('click', function(){
	scale.domain([0, d3.max(dataSet, function(d){ return d.val2 })]);
	yAxis.transition().call(yAxisCall);	//目盛り表示更新時にアニメーションさせる
	barchart
		.transition()	//グラフ表示更新時にアニメーションさせる
		.attr({
			y: function(d){ return scale(d.val2)},
			height: function(d){ return svgH - scale(d.val2)} , 
		});
});
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3307</wp:post_id>
		<wp:post_date>2014-01-08 16:31:26</wp:post_date>
		<wp:post_date_gmt>2014-01-08 07:31:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3307</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3314]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427380148;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3564;}i:1;a:1:{s:2:"id";i:3174;}i:2;a:1:{s:2:"id";i:1740;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】おさらい２回目　線グラフ</title>
		<link>http://shimz.me/blog/d3-js/3319</link>
		<pubDate>Mon, 13 Jan 2014 05:04:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3319</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/d3-js/3307">棒グラフ</a>に続いて、今回は(折れ)線グラフを作成します。
前回説明した内容については省略しますので、不明な点があれば先の記事を読んでください。

<h2>データセットを用意する</h2>
今回使用するデータは以下です。
 
<pre class="lang:js decode:true " >//データセット
//データセット
var dataSet = [
	{date:"2012/11", val:1000}, 
	{date:"2012/12", val:800}, 
	{date:"2013/1", val:1200}, 
	{date:"2013/2", val:600}, 
	{date:"2013/3", val:1110}, 
	{date:"2013/4", val:810}, 
	{date:"2013/5", val:1010}, 
	{date:"2013/6", val:1230}, 
	{date:"2013/7", val:910}, 
	{date:"2013/8", val:760}, 
	{date:"2013/9", val:820}, 
	{date:"2013/10", val:700}, 
	{date:"2013/11", val:630}, 
	{date:"2013/12", val:600}, 
	{date:"2014/1", val:930} 
];
</pre> 

<h2>折れ線グラフを表示する</h2>
<h3>ステージを用意する</h3>
前回同様svg要素を設置し、さらにその中にg(グループ要素)を設置します。
実際の折れ線グラフを描く要素は、このg要素の中に追加していきます。
 
<pre class="lang:js decode:true " >//折れ線グラフを表示するエリアのマージン
var margin = {
	top: 30, right: 20,
	bottom: 30, left: 50
}

//折れ線グラフを表示するステージのサイズ
var stageW = 600 - margin.left - margin.right;
var stageH = 270 - margin.top - margin.bottom;

//ステージ追加
var stage = d3.select('body')
	.append('svg') //svg要素を追加
	.attr({
		width: stageW + margin.left + margin.right,  
		height: stageH + margin.top + margin.bottom,
	})
	.append("g") //svg要素の中にg(グループ)要素を追加
	.attr("transform", "translate(" + [margin.left, margin.top] + ")");
</pre> 

<h3>値を正規化するscale関数を作成する</h3>
今回はx軸用、y軸用に２つ作成します。この時点ではdomain範囲は指定せずrangeだけ設定しておきます。
 
<pre class="lang:js decode:true " >//スケール設定
var xScale = d3.time.scale().range([0, stageW]);　　//x軸はタイムスケール
var yScale = d3.scale.linear().range([stageH, 0]);
</pre> 


<h3>データセットの型変換を行う</h3>
データセットのdateの値が現在はstring型になっています。このままでは正しい計算が行えないので、parse関数を作成しデータセットの型変換を行います。
 
<pre class="lang:js decode:true " >//文字列をパースしてdateオブジェクトに変換する
var parseDate = d3.time.format("%Y/%m").parse;

//データセットの型変換
dataSet.forEach(function(d){
	d.date = parseDate(d.date);
});
</pre> 

<h3>scale関数のドメイン設定を行う</h3>
改めてscale関数のドメイン設定を行います。データセットの型変換を行う前に設定してしまうと、正しく計算されないので注意しましょう。
ちなみに、d3.extentはデータセットの最少値と最大値を含む配列を返すメソッドです。
<pre class="lang:js decode:true " >//スケールのドメイン範囲を設定
xScale.domain(d3.extent(dataSet, function(d){
	return d.date;
}));
yScale.domain([0, d3.max(dataSet, function(d){
	return d.val;
})]);
</pre> 

<h3>ライン描画関数を作成する</h3>
データセットを元にライン(線グラフ)を描くライン描画関数を作ります。
<pre class="lang:js decode:true " >//ライン描画関数を作成
var valueLine = d3.svg.line()
	.x(function(d){ return xScale(d.date) })
	.y(function(d){ return yScale(d.val) });
</pre> 

作成したライン描画関数は、引数にデータセットを指定するとsvg:pathの<a href="http://www.hcn.zaq.ne.jp/___/SVG11-2nd/paths.html#PathData">パスデータ</a>を返します。
実際に正しくパスデータが出力されるか試してみましょう。
問題がなければ下記のようにパスデータが出力されます。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/valueline.jpg" alt="valueline" width="377" height="121" class="alignnone size-full wp-image-3320" />
この時点でエラーが出る場合は、スケールの設定やデータセットの型変換が正しく行われているか確認してください。

<h3>折れ線グラフを描画する</h3>
ステージにpath要素を追加しd属性にライン描画関数から出力されるパスデータを渡します。
 
<pre class="lang:js decode:true " >//折れ線グラフを描画
stage.append("path")
	.attr({
		"d": valueLine(dataSet), //d属性の指定
		fill: "none",
		stroke: "steelblue",
		"stroke-width": 2
	});
</pre> 

<h3>実行結果</h3>
<a href="http://shimz.me/blog/wp-content/uploads/2014/01/line000000.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/line000000.jpg" alt="line000000" width="598" height="270" class="alignnone size-full wp-image-3321" /></a>

これで折れ線グラフが表示されました。
某グラフの時と違い、ひとつのPATH要素でデータセットを表現していることに注意してください。

次は、目盛りを追加します。

<h2>目盛りを表示する</h2>

<h3>x軸,y軸の目盛りを作成する</h3> 
目盛りを表示します。今回は、x軸とy軸二つ作成します。

<pre class="lang:js decode:true " >//x軸の目盛りを描画
var xAxis = d3.svg.axis().scale(xScale).orient('bottom').ticks(5);
stage.append("g")
	.attr({
		"class": "x axis",
		"transform": "translate("+[0, stageH]+")", //表示位置をステージ下位に移動
	}).call(xAxis);

//y軸の目盛りを描画
var yAxis = d3.svg.axis().scale(yScale).orient('left').ticks(5);
stage.append("g")
	.attr({
		"class": "y axis",
	}).call(yAxis);</pre> 

<h3>実行結果</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3linechart000000.jpg" alt="d3linechart000000" width="539" height="243" class="alignnone size-full wp-image-3323" />
位置がずれていないか、パスの頂点が正しくデータの内容を示しているか確認してください。

<h3>目盛りをデザインする</h3>
スタイルシートを使用して目盛りのデザインを行います。
 
<pre class="lang:css decode:true " >.axis path,
.axis line {
	fill: none;
	stroke: black;
	stroke-width: 1;
}
</pre> 

<h3>実行結果</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3linechart000001.jpg" alt="d3linechart000001" width="540" height="243" class="alignnone size-full wp-image-3324" />

<h2>補完方法を変更する</h2>
d3は、点と点を結ぶラインの座標を自動的に計算し補完してくれますが、<a href="https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-line_interpolate">interpolate</a>メソッドを使用することで補完方法を変更することができます。

<h3>ライン描画関数を修正する</h3>
実際にinterpolateメソッドを使って、頂点間の補完方法を変更してみます。
<pre class="lang:js mark:5 decode:true " >//ライン描画関数を作成
var valueLine = d3.svg.line()
	.x(function(d){ return xScale(d.date) })
	.y(function(d){ return yScale(d.val) })
	.interpolate('step'); //補完方法を変更</pre> 

<h3>実行結果</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3linechart000002.jpg" alt="d3linechart000002" width="540" height="243" class="alignnone size-full wp-image-3325" />

以上です。interpolateメソッドで指定できる補完方法にはいろいろあるので試してみてください。
次回は、面グラフを作成とグリッド目盛りの表示をおさらいします。

<hr />
<strong>サンプルコード</strong>
 
<pre class="lang:js decode:true " >//データセット
var dataSet = [
	{date:"2012/11", val:1000}, 
	{date:"2012/12", val:800}, 
	{date:"2013/1", val:1200}, 
	{date:"2013/2", val:600}, 
	{date:"2013/3", val:1110}, 
	{date:"2013/4", val:810}, 
	{date:"2013/5", val:1010}, 
	{date:"2013/6", val:1230}, 
	{date:"2013/7", val:910}, 
	{date:"2013/8", val:760}, 
	{date:"2013/9", val:820}, 
	{date:"2013/10", val:700}, 
	{date:"2013/11", val:630}, 
	{date:"2013/12", val:600}, 
	{date:"2014/1", val:930}
];

//折れ線グラフを表示する際のマージン
var margin = {
	top: 30, right: 20,
	bottom: 30, left: 50
}

//折れ線グラフを表示するステージのサイズ
var stageW = 600 - margin.left - margin.right;
var stageH = 270 - margin.top - margin.bottom;

//ステージ追加
var stage = d3.select('body')
	.append('svg') //svg要素を追加
	.attr({
		width: stageW + margin.left + margin.right,  
		height: stageH + margin.top + margin.bottom,
	})
	.append("g") //svg要素の中にg(グループ)要素を追加
	.attr("transform", "translate(" + [margin.left, margin.top] + ")");

//スケール設定
var xScale = d3.time.scale().range([0, stageW]);　　//x軸はタイムスケール
var yScale = d3.scale.linear().range([stageH, 0]);

//日時パース
var parseDate = d3.time.format("%Y/%m").parse;

//データセットの型変換
dataSet.forEach(function(d){
	d.date = parseDate(d.date);
});


//スケールのドメイン範囲を設定
xScale.domain(d3.extent(dataSet, function(d){
	return d.date;
}));
yScale.domain([0, d3.max(dataSet, function(d){
  return d.val;
})]);


//ライン描画関数を作成
var valueLine = d3.svg.line()
	.x(function(d){ return xScale(d.date) })
	.y(function(d){ return yScale(d.val) })
	.interpolate('step');


//折れ線グラフを描画
stage.append("path")
	.attr({
		"d": valueLine(dataSet),
		fill: "none",
		stroke: "steelblue",
		"stroke-width": 2
	});


//x軸の目盛りを描画
var xAxis = d3.svg.axis().scale(xScale).orient('bottom').ticks(5);
stage.append("g")
	.attr({
		"class": "x axis",
		"transform": "translate("+[0, stageH]+")",
	}).call(xAxis);

//y軸の目盛りを描画
var yAxis = d3.svg.axis().scale(yScale).orient('left').ticks(5);
stage.append("g")
	.attr({
		"class": "y axis",
	}).call(yAxis);
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3319</wp:post_id>
		<wp:post_date>2014-01-13 14:04:54</wp:post_date>
		<wp:post_date_gmt>2014-01-13 05:04:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3319</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3325]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369914;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3935;}i:1;a:1:{s:2:"id";i:3307;}i:2;a:1:{s:2:"id";i:2785;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptのエラーを追跡し記録するサービス「{Track:js}」</title>
		<link>http://shimz.me/blog/javascript/3326</link>
		<pubDate>Tue, 14 Jan 2014 00:24:30 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3326</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://trackjs.com/"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/trackjs.png" alt="trackjs" width="590" height="261" class="aligncenter size-full wp-image-3327" /></a>



<a href="http://trackjs.com/">{Track:js}</a> は、ユーザーアクセス時に発生したJavaScriptエラーを補足・記録してくれるサービスです。

サービスに登録して配信されるスクリプトタグを、エラーを補足したいサイトのヘッダに記載するだけで利用することができます。

タイムラインには、エラーに至るまでの、ユーザー、ネットワーク、およびコンソールアプリケーションのイベントが表示され、詳細情報ではブラウザ、OS、ページ上に読み込まれた他のJavaScriptライブラリを確認することができます。

再現しづらく補足しにくいJavaScriptエラーを捕まえたいときに便利なサービスです。

現在はベータ版のため、無料で利用することができます。


実際にこのBlogにTrack.jsを埋め込んでみました。

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/trackjs01.jpg" alt="trackjs01" width="400" height="255" class="alignnone size-full wp-image-3328" />

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/trackjs02.jpg" alt="trackjs02" width="400" height="240" class="alignnone size-full wp-image-3329" />

なんか、結構エラー出てる orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3326</wp:post_id>
		<wp:post_date>2014-01-14 09:24:30</wp:post_date>
		<wp:post_date_gmt>2014-01-14 00:24:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3326</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3330]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427346872;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1561;}i:1;a:1:{s:2:"id";i:2860;}i:2;a:1:{s:2:"id";i:862;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3勉強会に関するアンケートにご協力ください</title>
		<link>http://shimz.me/blog/d3-js/3333</link>
		<pubDate>Wed, 15 Jan 2014 11:25:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3333</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://docs.google.com/forms/d/1anmE24u45gyhvYXlgaajLEVpw806BilryvFJAwvBAco/viewform"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3sitetitle.jpg" alt="d3sitetitle" width="590" height="369" class="aligncenter size-full wp-image-3334" /></a>

去年、２回ほどD3に関する勉強会を開催させていただきました。

<a href="http://shimz.me/blog/d3-js/3035">D3.jsの勉強会を行いました</a>
<a href="http://shimz.me/blog/d3-js/3113">D3.js勉強会（地図入門）を開催しました</a>

勉強会というものを主催するのが初めてだったこともあって、いろいろと拙いところや大変なこともありましたが、自分自身にとっても良い勉強になったなと思ってます。

そんなわけで、今年もD3の勉強会を開催したいなと考えているのですが、そもそも「需要があるのか？」とか「会場はどこにしようかな」とかいろいろ思うところもあってアンケートを作成してみました。

また、今年は需要があればオンラインでの勉強会というものも開催してみようかなと考えアンケートの質問項目に含めてみました。
(昨年開催したD3勉強会は両方とも群馬だったのですが、「D3に興味はあるけど、群馬は遠い」というご意見もあったので)

よろしければ回答してやってください。

<strong>↓回答はこちらから↓</strong>
<a href="https://docs.google.com/forms/d/1anmE24u45gyhvYXlgaajLEVpw806BilryvFJAwvBAco/viewform">2014年、D3勉強会に関するアンケート</a>

よろしくお願いします。

ちなみに時期的には２月か３月あたりを考えています。




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3333</wp:post_id>
		<wp:post_date>2014-01-15 20:25:29</wp:post_date>
		<wp:post_date_gmt>2014-01-15 11:25:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3333</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3334]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426776836;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3113;}i:1;a:1:{s:2:"id";i:3066;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>汝は人狼なりや？　参加してきました。</title>
		<link>http://shimz.me/blog/other/3335</link>
		<pubDate>Fri, 17 Jan 2014 01:08:39 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3335</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/01/aa_JAh5DD1qUduT0iqUnLR8eNJ3GEoiMk_wJf0T0HWVSEY.jpg" alt="群馬県高崎市人狼やってみよう会" width="400" height="319" class="aligncenter size-full wp-image-3337" />


群馬県高崎市のコワーキングスペース「<a href="http://somethingelse.jp/">SOMETHIN' ELSE</a>」で行われた人狼のイベントに参加してきました。

<a href="http://somethingelse.jp/event/jinrou-event-0/">みんなで人狼やってみよう会（初心者大歓迎！）</a>

フジテレビの「人狼〜嘘つきは誰だ〜」とか、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4091244076/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">放課後さいころ倶楽部</a>』の「ミラーズホロウの人狼」回などを読んで、朧げながらにルールは知ってはいたのですが、プレイしたのは始めでとても楽しかったです。

最大８人、途中２人抜けて６人で通常の人狼を４回、ワンナイト人狼を３回行いました。なんだかんだで結構やりましたね。

私も含め人狼初心者の方が多かったのですが、普段「<a href="http://jaga-tokyo.com/">JAGA :日本ゲーム協会</a>」に参加されている方などもいて、初回としてはかなり盛り上がったゲームになりました。(なんでもJAGAの例会は東京・大阪・群馬の３都市で行われているそうです。都府に並びましたねグンマが！　→<a href="http://www4.atwiki.jp/gummajaga/">群馬JAGA@wiki</a>）

人狼は「嘘をつくゲーム」「嘘を見抜くゲーム」だと思っていましたが、実際にやってみると「○○である可能性が高い」という曖昧な情報を元に、いかに意思決定をするか？というのがゲームポイントなんではないかと感じました。

ターンが進むごとに分母の数は減ってくので、それを見越した上で、市民側はいかに「確定できる情報」を増やし共有して行くか、人狼側は逆にどうやって情報を曖昧な状態に保ち場を混乱させるか、みたいなところに駆け引きがあって面白かったです。

前のターンだったら好手であったはずの発言でも、今のターンで言ったら悪手になるといったケースが結構あって、状況が刻々と変わって行く中で「現状での最適解はなにか」という判断を常に求められるので、ひどく疲れますがｗ

SOMETHIN' ELSEさんでは、今後も定期的に人狼会を開催されるらしいので、興味のある方は是非参加してみてください。

【参考】
<a href="http://www.excite.co.jp/News/reviewmov/20130416/E1366050514238.html">大流行のゲーム「人狼」を超ていねいに解説してみた</a>


<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002KNRINW/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51%2BtpjX9ihL._SL160_.jpg" alt="EMOTION the Best 人狼 JIN-ROH [DVD]" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002KNRINW/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">EMOTION the Best 人狼 JIN-ROH [DVD]</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.01.17</div></div><div class="amazlet-detail">バンダイビジュアル (2009-12-22)<br />売り上げランキング: 14,316<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002KNRINW/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3335</wp:post_id>
		<wp:post_date>2014-01-17 10:08:39</wp:post_date>
		<wp:post_date_gmt>2014-01-17 01:08:39</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3335</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3337]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427335029;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2570;}i:1;a:1:{s:2:"id";i:3614;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>314</wp:comment_id>
			<wp:comment_author><![CDATA[4月17日に高崎で開かれる人狼ゲーム会のお知らせです]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.ko31.com/201404/jinrou-event-4/</wp:comment_author_url>
			<wp:comment_author_IP>49.212.188.97</wp:comment_author_IP>
			<wp:comment_date>2014-04-16 12:01:27</wp:comment_date>
			<wp:comment_date_gmt>2014-04-16 03:01:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 汝は人狼なりや？　参加してきました。 | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397617287.2745449542999267578125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>313</wp:comment_id>
			<wp:comment_author><![CDATA[今月も高崎で人狼ゲームイベントを開きます]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.ko31.com/201403/jinrou-event-3/</wp:comment_author_url>
			<wp:comment_author_IP>49.212.188.97</wp:comment_author_IP>
			<wp:comment_date>2014-03-18 02:42:16</wp:comment_date>
			<wp:comment_date_gmt>2014-03-17 17:42:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 汝は人狼なりや？　参加してきました。 | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>前橋市のオープンデータを使ってカレンダー(サンプル)を作ってみた</title>
		<link>http://shimz.me/blog/fullcalendar/3340</link>
		<pubDate>Sat, 18 Jan 2014 12:40:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3340</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/fullcalenar/04/"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/maebashicalendar01.jpg" alt="前橋市オープンデータ" width="590" height="290" class="aligncenter size-full wp-image-3342" /></a>

<a href="http://shimz.me/example/fullcalenar/04/">example</a>

年始の記事でこんな<a href="http://shimz.me/blog/other/3283">ことを書きました</a>が、願いが通じたのか、群馬県前橋市でオープンデータへの取り組みが開始されました。

<a href="http://www.city.maebashi.gunma.jp/sisei/499/509/p012143.html">前橋市におけるオープンデータの取組について</a>

ｷｬｰゞ(^o^ゝ)≡(/^ｰ^)/"""ﾊﾟﾁﾊﾟﾁ

誠にめでたいことであります。

そんなわけで、公開されたイベントデータを使ってとりあえずカレンダーを作ってみました。例によってIE ver.9以上、Chrome推奨です。

「全て終わったイベントのデータしかないじゃないか」とか「日時データには月日だけじゃなく年も付けて欲しい」とか、諸々言いたい事はありますが、今後の展開に期待したいと思います。
(できれば高崎市でも同様にオープンデータへの取り組みが始まると嬉しいのですが)

ところで、今回のカレンダーは「Fullcalendar.js」と「Google Maps API」を使って作ってみたのですが、この組み合わせはなかなか面白く他にも応用が効きそうなので、もうちょっと突き詰めて使ってみたいなと思いました。


【関連】
<a href="http://www.pinterest.com/shimizuvis/d3js%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%83%87%E3%83%BC%E3%82%BF%E5%8F%AF%E8%A6%96%E5%8C%96/">その他、今までやったこと</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3340</wp:post_id>
		<wp:post_date>2014-01-18 21:40:43</wp:post_date>
		<wp:post_date_gmt>2014-01-18 12:40:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3340</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[前橋市のオープンデータを使ってカレンダーを作ってみた]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3342]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427397636;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3760;}i:1;a:1:{s:2:"id";i:3350;}i:2;a:1:{s:2:"id";i:3132;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>米政府をハックする「Code for America」</title>
		<link>http://shimz.me/blog/other/3343</link>
		<pubDate>Sun, 19 Jan 2014 10:49:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3343</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/01/codeforamerica.jpg" alt="codeforamerica" width="400" height="225" class="aligncenter size-full wp-image-3344" />

「<a href="http://codeforamerica.org/">Code for America</a>」という団体があります。
自治体の行政機関に全米から応募してきたエンジニアやデザイナー、クリエイターなどを１年間送り込むというプロジェクトを行っている非営利団体です。
創立から５年程経ちましたが、この団体が今着々とアメリカの政府機関への影響力を高めているらしので、cfa創設者ジェニファー・パルカのプレゼンを見直してみました。

<iframe src="http://embed.ted.com/talks/lang/ja/jennifer_pahlka_coding_a_better_government.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

う〜ん、改めて見ても面白い。
「ITを活用して社会問題を解決しよう！」という組織や団体はcfa以前から沢山ありますしプロボノなども似た活動といってよいでしょう。
そんな中で、cfaが新しいのは行政機関というスーツ帝国の現場に天敵であるギークをぶち込んだところです。
ワイヤードのインタビュー記事でも書かれていますが、単に「行政機関のアプリ作ります」「システム作ります」というだけでなく、オープンソースコミュニティなどで培われてきた<strong>「みんなでハック(改良)する」という文化を行政機関の現場に持ち込んで決定のプロセスを変化させている</strong>、これこそがそれまでのITを絡めた社会活動やボランティア(プロボノ)などと大きく違うcfaの特徴です。

<blockquote>フェローは1年のプログラムを終えてしまえば去ってしまう。だからこそ重要なのはそこでつくられたアプリやソフトウェアそのものではないんだ、とミックは語る。「<strong>ぼくらが行政に与える最大のインパクトは、むしろプロセスを変えていくことだと思う</strong>。このやり方じゃなくてもいいんじゃない?　ほかのやり方があるんじゃない?って新しい思考のプロセスをもたらすことが重要なんだ。」
<div style="text-align:right"><a href="http://wired.jp/2013/10/21/code-for-america/">シヴィック・ハッカーが行政を変える：Code for Americaの試みとは</a></div>
</blockquote>

制作物は、あくまで行政機関の変化を促すための武器なのでしょう、ジェニファー・パルカのプレゼンからもそういった意図をうかがえます。

<blockquote>
カリフォルニア州裁判所のシステム開発では現段階で20億ドルの血税をかけながら、今だにまだ機能していません。
政府のどの階層にもこんなプロジェクトがあります。
一方、アプリは数日で書きあげられてバイラルに広がっていきます。<strong>これは政府機関に対する威嚇射撃のようなものです。</strong>
</blockquote>

なんか本当に「ガバメント2.0」イケるんじゃないか？　と思わせるだけの活動をしています。

ティム・オライリーが提唱している「<a href="http://jp.techcrunch.com/2009/09/05/20090904gov-20-its-all-about-the-platform/">ガバメント2.0</a>」は、オープンソースコミュニティで開発・運用されているOSのように、政府をプラットフォーム化してしまおうという考えで、最近注目が集まっているオープンデータもオライリーがいうところの「ガバメントSDK（ソフトウェ開発キット）」の一つですが、cfaという団体の存在がアメリカにおけるオープンデータ促進に大きな影響をあたえているのは間違いありません。

もともとアメリカは「Do It Yourself!(自分たちでやろう！)」という精神にあふれたお国柄ですが、GoogleやAppleなど社会に大きな影響を持つIT企業やカリスマエンジニアが多数存在するためか、最近は「ギークの技を盗め！」という気運が高まっているようで、この追い風に乗って「Code for America」がどこまでアメリカ社会／政府を変えていくのか目が離せません。

<blockquote>これは非常によい知らせですデジタル技術を使った共同行動が非常に得意だと分かったからです。<strong>今や効率的に共同作業を進めるために必要なツールを作っている人々のとても大きな共同体が存在します。</strong>
参加者は「コード・フォー・アメリカ」のフェロー達だけでなく我が国には自身が属している共同体で日々何百人もの人が立ち上がり市民のアプリを作成しています。
彼らは政府への期待を捨ててはいません。
政府に非常に落胆している一方でただ不満を言い続けるのではなくみずから解決しているのです。
</blockquote>

楽しみですね！


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3343</wp:post_id>
		<wp:post_date>2014-01-19 19:49:44</wp:post_date>
		<wp:post_date_gmt>2014-01-19 10:49:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3343</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3344]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426765838;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3127;}i:1;a:1:{s:2:"id";i:3202;}i:2;a:1:{s:2:"id";i:3711;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>前橋市「町丁ごとの年齢別人口構成推移」データがよくわからない。</title>
		<link>http://shimz.me/blog/other/3350</link>
		<pubDate>Tue, 21 Jan 2014 00:32:04 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3350</guid>
		<description></description>
		<content:encoded><![CDATA[引き続き、前橋市で公開されたオープンデータを弄っています。

<a href="http://www.city.maebashi.gunma.jp/sisei/499/509/p012146.html">前橋市オープンデータライブラリー</a>

とりあえず、「町丁ごとの年齢別人口構成推移」を使って塗り分け地図でも作ってみようかなーと思ったのですが……データの中身を見てみたら、なんだかよくわかりません。

まず、町名で並べ替えてみたら、同じ町名のレコードが複数あります。

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/maebashiopdata201401211.jpg" alt="maebashiopdata201401211" width="590" height="27" class="alignnone size-full wp-image-3351" />

各年代別の人口もまったく同じなので、これは重複データなんだとおもいますが、「元総社町」とかになるとさっぱり。

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/maebashiopdata201401212.jpg" alt="maebashiopdata201401212" width="590" height="45" class="alignnone size-full wp-image-3352" />

同じ町名のレコードが３つあって、そのうち２つは重複データっぽい？　

どういった基準で構成されたデータなのか分からないので、どう使ったらいいものやら……誰かわかる方いらっしゃったらご教授ください。

教えて偉い人！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3350</wp:post_id>
		<wp:post_date>2014-01-21 09:32:04</wp:post_date>
		<wp:post_date_gmt>2014-01-21 00:32:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3350</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427313384;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3463;}i:1;a:1:{s:2:"id";i:3760;}i:2;a:1:{s:2:"id";i:3853;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日米のオープンデータを比較してみた</title>
		<link>http://shimz.me/blog/d3-js/3353</link>
		<pubDate>Wed, 22 Jan 2014 01:59:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3353</guid>
		<description></description>
		<content:encoded><![CDATA[【2014/04/03 追記】
data.go.jpが急死(休止)しているので、data.go.jpに関しては4/02移行更新してていません。

【2014/05/16 追記】
data.go.jpが再開したので、スクレイピングも再開しました。
<hr>

<a href="http://shimz.me/datavis/other/data.govVSdata.go.jp/"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/datagovvsdatagojp140122.jpg" alt="data.gov VS data.go.jp" width="590" height="382" class="alignnone size-full wp-image-3355" /></a>

<a href="http://shimz.me/datavis/other/data.govVSdata.go.jp/">example</a>

アメリカのオープンデータカタログサイト「data.gov」と、日本のオープンデータカタログサイト「data.go.jp」で、公開されているオープンデータの比較を行ってみました。

公開されているデータのフォーマット(ファイル形式)で、数の多いもの上位20をツリーマップとして表示しています。
赤い方がdata.go.jpのデータで、青い方がdata.govのデータです。
日本の場合、公開されているデータセットの８割以上が「PDF」「HTML」「XML」、アメリカの場合は「HTML」「ZIP」「XML」が半分ぐらいといったところです。

アメリカもフォーマットに関してはそんなに進んでいるというわけでもなさそうですね。

ちなみに、data.govにて「5 Star Open Data」でいうところの４星・５星フォーマット「RDF/Linked RDF」で公開されているデータは、88,421件の内僅か144件です。　ホントに普及するんですかね？　Linked Open Data
セマンテックウェブはティム・バーナーズ-リーの悲願ではあるんでしょうけど、なんとなくXHTMLの二の舞になりそうな予感が無きにしも非ずといったところでしょうか。

とりあえず、日本が大きく差を付けられているのは公開されているデータの数なので、xlsでもcsvでもtxtでも良いので、とにかくバンバン公開していって欲しいです。

<h3>データの取得について</h3>
公開されているフォーマットの数は、以前紹介した<a href="http://shimz.me/blog/web/3195">ScraperWiki</a>を使って両サイトから削り取って(スクレイピング)います。
スクレイピングスクリプトのコードを載せておきます。

 
<pre class="lang:python decode:true " title="data.gov scraper" >#!/usr/bin/env python
import scraperwiki
import lxml.html
import json
import string


html = scraperwiki.scrape("http://catalog.data.gov/dataset?_res_format_sortCnt=desc&amp;_res_format_limit=0")
root = lxml.html.fromstring(html)

data = []
for el in root.cssselect("#res_format &gt; li &gt; a &gt; span"):
    type = el.text.split("(")[0].strip() 
    count = el.text.split("(")[1].translate(string.maketrans("", ""), "()").strip() 
    data.append({'type':type, 'count':count })

print repr(data)


# Saving data:
unique_keys = [ 'type' ]
scraperwiki.sql.save(unique_keys, data)</pre> 

 
<pre class="lang:python decode:true " title="data.go.jp scraper" >#!/usr/bin/env python
import scraperwiki
import lxml.html
import json
import string


html = scraperwiki.scrape("http://www.data.go.jp/data/dataset?_res_format_limit=0")
root = lxml.html.fromstring(html)

data = []
for el in root.cssselect("aside.secondary &gt; section")[3]:
    for cel in el.cssselect("nav &gt; ul &gt; li &gt; a span"):
        type = cel.text.split("(")[0].strip()
        count = cel.text.split("(")[1].strip(")"[0]).strip()
        data.append({'type': type, 'count':count  })
    
print repr(data)


# Saving data:
unique_keys = [ 'type' ]
scraperwiki.sql.save(unique_keys, data)</pre> 



一応、JSON APIも公開してます。
ただ、スクレイピングで取得しているので、いつ何時正しいデータが取れなくなるかわかりません。その点、ご了承ください。

<li><a href="https://free-ec2.scraperwiki.com/bm4vdra/b2ba730fe8a54e9/sql/?q=select%20type%2C%20count%20%0Afrom%20swdata">data.gov format</a></li>
<li><a href="https://free-ec2.scraperwiki.com/cfynwdy/8355ec03dbc6492/sql/?q=select%20%0A%09count%2C%0A%09type%0Afrom%20swdata%0Alimit%2020%0A">data.go.jp format</a></li>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3353</wp:post_id>
		<wp:post_date>2014-01-22 10:59:34</wp:post_date>
		<wp:post_date_gmt>2014-01-22 01:59:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3353</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3355]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427041204;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3659;}i:1;a:1:{s:2:"id";i:3540;}i:2;a:1:{s:2:"id";i:3984;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsのまとめを整理しました。</title>
		<link>http://shimz.me/blog/d3-js/3356</link>
		<pubDate>Wed, 22 Jan 2014 23:25:23 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3356</guid>
		<description></description>
		<content:encoded><![CDATA[作成していたD3.jsに関するまとめですが、D3の話題が増えて行くにつれあまりにも数が増えすぎたので、少し整理して、３つのまとめに分類しました。

・<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>
今までのまとめです。
主に公式サイトや、チュートリアル、D3に関するスライドなどのまとめです。
直近では「<a href="http://www.openspc2.org/reibun/D3.js/">D3.js例文辞典</a>」を追加させていただきました。
D3のサンプルコードが多数掲載されています。

・<a href="http://matome.naver.jp/odai/2138966107937611601">D3.js Wrapper Library</a>
D3はよく「学習コストが高い」と言われるのですが、その為か、D3をコアとした、もっと簡単にグラフを描画できるラッパーライブラリが多数存在します。こちらのまとめではそれらのライブラリを登録しています。
手軽にサクッとグラフを表示したい時に覗いてみてください。
AngularJSやEmber.jsなど有名なフレームワークの中でD3を使う為のライブラリなどもこちらに登録しています。

・<a href="http://matome.naver.jp/odai/2138966193538794601">D3.js プラグインまとめ</a>
D3のプラグインを目についた端から登録しています。
D3単体では難しい、複雑なグラフを作成したいときに利用出来るものがあるかもしれません。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3356</wp:post_id>
		<wp:post_date>2014-01-23 08:25:23</wp:post_date>
		<wp:post_date_gmt>2014-01-22 23:25:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3356</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3334]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370975;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2772;}i:1;a:1:{s:2:"id";i:2775;}i:2;a:1:{s:2:"id";i:1740;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図をデザインする</title>
		<link>http://shimz.me/blog/d3-js/3359</link>
		<pubDate>Mon, 27 Jan 2014 05:56:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3359</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_template/filter/"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/LaBelleJapan20140107.jpg" alt="La Belle Japan" width="400" height="388" class="border aligncenter size-full wp-image-3361" /></a>

<a href="http://shimz.me/example/d3js/geo_template/filter/">example</a>

下記記事を参考に、ちょっとオシャレな感じの日本地図を作成してみました。

<a href="http://geoexamples.blogspot.com.es/2014/01/d3-map-styling-tutorial-ii-giving-style.html?utm_content=buffer566f1&utm_source=buffer&utm_medium=twitter&utm_campaign=Buffer">GeoExamples: D3 map Styling tutorial II: Giving style to the base map</a>

SVGのFilter機能を利用して地図をデザインしています。

今のところ、自分の思うとおりに自在にデザインできるところまで、たどり着けていません。
D3でオシャレなグラフを作成するには、SVGに関する知識が必要不可欠なので、これから少しづつ学んでいきたいと思います。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3359</wp:post_id>
		<wp:post_date>2014-01-27 14:56:26</wp:post_date>
		<wp:post_date_gmt>2014-01-27 05:56:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3359</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3361]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427041140;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3583;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3181;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】人気度の動向を調べてみた</title>
		<link>http://shimz.me/blog/d3-js/3362</link>
		<pubDate>Tue, 28 Jan 2014 08:40:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3362</guid>
		<description></description>
		<content:encoded><![CDATA[【更新21:06】 Googleトレンドの埋め込みが上手くいっていなかったようなので、画像に差し替えました。

ちょっと忙しいので、手抜き更新です。

<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3trends2014.jpg" alt="d3trends2014" width="322" height="237" class="aligncenter size-full wp-image-3363" />

GoogleトレンドでD3.jsの動向を調べてみました。

<h3>地域別人気</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3trends1.png" alt="D3.js 地域別人気 2014" width="524" height="349" class="alignnone size-full wp-image-3365" />

インドで大人気のようです。
日本でも少しづつ人気が出てきているようですね。

<h3>人気の動向</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3trends2.png" alt="d3.js 国別人気動向 2014 " width="494" height="309" class="alignnone size-full wp-image-3366" />

2011年頃にアメリカで火がついて、2012年頃にインドへ。2012年の後半から日本でも認知されるようになってきたようです。

<h3>他ライブラリとの比較</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3trends3.png" alt="d3.js 人気比較(jQuery等) 2014" width="494" height="309" class="alignnone size-full wp-image-3367" />

やっぱり、jQueryと比較してはいけませんね。
最近になって注目度が上がってきたフレームワーク「angularjs」にも既に抜かれています。

JavaScriptのグラフィックライブラリと比較してみます。
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3trends4-e1390910638289.png" alt="d3.js 人気比較(グラフィックライブラリ) 2014" width="487" height="307" class="alignnone size-full wp-image-3368" />

グラフィックライブラリの中では健闘している方でしょうか。
Chartライブラリとしては、古くからある「Google Charts」にまだまだ及ばないといったところですね。
個人的には「CreateJS」より検索数が多いのにはびっくりしました。
(JavaScriptグラフィックライブラリの本命だと思っているので)

その他、気になっているライブラリとの比較
<img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3trends5-e1390910615750.png" alt="d3.js 人気比較(その他) 2014" width="487" height="306" class="alignnone size-full wp-image-3369" />
この辺りのライブラリ群の中では、圧倒的な認知度ですね。

とはいえ、まだまだマイナーなライブラリであることは確かなので、今後も布教に努めていきたいと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3362</wp:post_id>
		<wp:post_date>2014-01-28 17:40:47</wp:post_date>
		<wp:post_date_gmt>2014-01-28 08:40:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3362</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3363]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427315439;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3587;}i:1;a:1:{s:2:"id";i:2977;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhoneで複数のWebサイトの生存確認を行うアプリ「Scott&#039;s Pinger」</title>
		<link>http://shimz.me/blog/iphoneipad/3371</link>
		<pubDate>Thu, 30 Jan 2014 05:44:15 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3371</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://itunes.apple.com/jp/app/scotts-pinger-lite-free-website/id624614597?at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/ScottsPinger2014.jpeg" alt="Scott&#039;s Pinge" width="169" height="300" class="aligncenter size-full wp-image-3372" /></a>

複数のwebサイトを管理していると、iPhoneから簡単にそれらの生存確認(ちゃんと表示されているか)ができたらいいなと思うことが多々あるのですが、そんな時にぴったりなアプリがあったので紹介します。

いままでもPing(ICMP)を使ってサーバーの生存確認を行うアプリを使ってはいたのですが、サブドメに振り分けていたり、１つのサーバーで複数のWebアプリを走らせていたりするので、URL単位で生存確認ができるアプリを探していたところ「<a href="https://itunes.apple.com/jp/app/scotts-pinger-lite-free-website/id624614597?at=10lMp5">Scott's Pinger</a>」を見つけたのでインストールしてみました。

機能はとてもシンプルで、登録したURLにリクエストを送りヘッダが返ってくるまでにかかった時間を出力します。
Webページがみれなくなっている場合は赤く「failed」と表示されます。

ワンタッチで登録したすべてのURLのチェックを行えるので、気軽に使えてとても便利です。

複数のWebサイトを管理しているWebマスターにお勧めのアプリです。

<a href="https://itunes.apple.com/jp/app/scotts-pinger-lite-free-website/id624614597?at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/ScottsPinger2014.png" alt="Scott&#039;s Pinger icon" width="57" height="57" class="alignnone size-full wp-image-3373" /></a>



【余談】
他にポート単位で生存確認ができるという便利なアプリもあってインストールしてみたのですが、実際にデーモンを落としたりして確認してみたところちっとも正しく判断してくれずあまり当てにできない感じでした。アップデートなどで、ちゃんと使えるようになったらこのブログで紹介したいと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3371</wp:post_id>
		<wp:post_date>2014-01-30 14:44:15</wp:post_date>
		<wp:post_date_gmt>2014-01-30 05:44:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3371</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3372]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427332293;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3684;}i:1;a:1:{s:2:"id";i:1812;}i:2;a:1:{s:2:"id";i:2194;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】複数のデータセットの読み込み(改良版)</title>
		<link>http://shimz.me/blog/javascript/3376</link>
		<pubDate>Tue, 04 Feb 2014 05:41:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3376</guid>
		<description></description>
		<content:encoded><![CDATA[以前作成した、データファイルの読み込み関数を少し改良しました。

<a href="http://shimz.me/blog/d3-js/3087">【D3.js】複数のデータファイルの読み込み(非同期処理)をまとめる</a>

<h2>サンプルコード</h2>
<pre class="lang:js decode:true " title="loadDataset.js" >d3.loadDataSet = function (option){
	var files = option["files"];
	var endFn = option["endFn"];
	var loadingStartFn = option["loadingStartFn"];
	var loadingSuccessFn = option["loadingSuccessFn"];
	
	if (!Array.isArray(files)) throw "TypeError: files is not a array!";
	if (loadingStartFn && typeof loadingStartFn != "function") throw "TypeError: loadingStartFn is not a function!";
	if (loadingSuccessFn && typeof loadingSuccessFn != "function") throw "TypeError: loadingSuccessFn is not a function!";
	if (typeof endFn != "function") throw "TypeError: endFn is not a function!";
	
	var dataStack = {};
	var fnStack = [];
	
	var chain = function(functions) {
		return functions.reduceRight(function (next, curr) {
			return function () {
				curr.apply({next: next}, arguments);
			}
		});
	}
	
	files.forEach(function(arg){
		if (loadingStartFn) loadingStartFn(arg);
		fnStack.push(
			function() {
				var that = this;
				var exte = arg.file.split(".")[arg.file.split(".").length-1];
				if (arg.filetype) exte = arg.filetype; 
				var readfile;
				switch(exte){
					case "json": case "geojson": case "topojson": 
						readfile = d3.json;
					break;
					case "csv":
						readfile = d3.csv;
					break;
					default:
						throw "TypeError: " + exte + " is not supported";
					break;                        
				}
				
				return readfile(arg.file,  function(data){
					if (arg.callbackData) arg.callbackData = data;
					if (loadingSuccessFn) loadingSuccessFn(arg);
					dataStack[arg.key] = data;
					that.next();
				});
			}
		)
	});
	
	fnStack.push(function(){
		endFn(dataStack);
	});
	chain(fnStack)(); 
		
}    	
</pre> 

<h3>オプション指定</h3>
 
<pre class="lang:js decode:true " >d3.loadDataSet({
	files: {
		{key:"geo", file:"geo.topojson", callbackData:true}, 
		{key:"2013年1月", file:"csv/201301.csv"},
		{key:"2013年2月", file:"csv/201302.csv"},
		{key:"2013年3月", file:"csv/201303.csv"},		
	},
	loadingStartFn: function(d){
		//各ファイルの読み込み前に呼び出される関数
		console.log(d.key+" data loading...");
	},
	loadingSuccessFn: function(d){
		//各ファイルの読み込みが成功する毎に呼び出される関数
		if (d.key === "geo") mapDraw(d.callbackData); //先にマップだけ描画しておく
		console.log(d.key+" data load success!"); 
	},
	endFn:d3main
});

function d3main(loadData){
	console.log(loadData);	
}

function mapDraw(geoData){
	//地図を描画する処理
}</pre> 




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3376</wp:post_id>
		<wp:post_date>2014-02-04 14:41:34</wp:post_date>
		<wp:post_date_gmt>2014-02-04 05:41:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3376</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3377]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427301523;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3087;}i:1;a:1:{s:2:"id";i:2975;}i:2;a:1:{s:2:"id";i:2614;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「インタラクティブ・データビジュアライゼーション」D3.jsのイチオシ参考書が出版されます</title>
		<link>http://shimz.me/blog/d3-js/3378</link>
		<pubDate>Wed, 05 Feb 2014 02:10:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3378</guid>
		<description></description>
		<content:encoded><![CDATA[オライリーより、2月19日にD3.jsの入門書「<a href="http://www.oreilly.co.jp/books/9784873116464/">インタラクティブ・データビジュアライゼーション――D3.jsによるデータの可視化</a>」が出版されます。

著者は、D3のオンライチュートリアルとして評価の高い「<a href="http://ja.d3js.info/alignedleft/tutorials/d3/">D3 チュートリアル</a>」を書かれたスコット・マレイさんです。

以前、オライリーから発売されたD3本「<a href="http://www.oreilly.co.jp/books/9784873115979/">D3をはじめよう</a>」は、いきなりがっつりD3でしたが、こちらの参考書は概要にもあるようにプログラマ以外のWebデザイナーやコーダーの方なども対象としていますので、「JavaScriptにはあまり詳しくなくて……」といった方でも、読み進めていくことができる構成になっています。

とはいえ、最終的には「地理空間情報の可視化」までが含まれますので「簡単すぎて物足りない」という事もないです。

D3はネット上に多数のサンプルコードが公開されていますが、参考書が一冊あると理解しやすさが格段に違いますので、D3に興味を持った方は是非読んでみてください。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51BarZiCJnL._SL160_.jpg" alt="インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.02.05</div></div><div class="amazlet-detail">Scott Murray <br />オライリージャパン <br />売り上げランキング: 9,917<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3378</wp:post_id>
		<wp:post_date>2014-02-05 11:10:43</wp:post_date>
		<wp:post_date_gmt>2014-02-05 02:10:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3378</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3379]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427291080;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:2772;}i:2;a:1:{s:2:"id";i:3405;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code for Americaに学ぶ、2014年に必要とされるスキル</title>
		<link>http://shimz.me/blog/d3-js/3380</link>
		<pubDate>Wed, 05 Feb 2014 23:35:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3380</guid>
		<description></description>
		<content:encoded><![CDATA[「Code for America」については、以下の記事を参照してください。

<a href="http://shimz.me/blog/other/3343">米政府をハックする「Code for America」</a>

<h2>Fellowsのスキルセットから需要を探る</h2>

「Code for America」では、毎年、全米から募集してきたエンジニア/デザイナーを厳選して自治体へ派遣する、「Fellowship」というプロジェクトを行っています。
今年も650名の募集の中から30名のエンジニア/デザイナーが選ばれています。Fellowに選ばれたエンジニア/デザイナーはcfaのサイトでプロフィールが掲載されるのですが、多くのFellowがLinkedInへのリンクも貼っているのでLinkedInのプロフィール画面から各人の詳細なスキルを確認することができます。

<a href="http://www.codeforamerica.org/2014-fellows/">2014 Fellows</a>

そこで各人の「スキル」タグを収集すれば、2014年にCfAに必要と判断された需要の高い技術が見て取れるのではないかと考えました。

<h3>バブルチャートの作成</h3>
2014年のFellowに選ばれた各ユーザーのLinkedInプロフィールに掲載されている「スキル & スキル推薦」タグを取得(手動)しバブルチャートを作成しました。

掲載されているスキルの中から、複数人で重複しているスキルを抽出し重複した数をcircleのサイズと比例させて表示しています。

マウスホイールでパン/ズームが、サークルにマウスオーバーする事で重複数が確認できます。

<a href="http://shimz.me/datavis/other/skillset/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/What_skills_is_required_for_2014.jpg" alt="What_skills_is_required_for_2014" width="400" height="253" class="aligncenter size-full wp-image-3381" /></a>

<a href="http://shimz.me/datavis/other/skillset/index.html">example</a>

<h3>データ概要</h3>
2014 Fellows、全30名の属性は以下のように紹介されています。

エンジニア:14名
デザイナー:12名
データ可視化スペシャリスト:1名
都市計画家:3名

上記はあくまで「エンジニア寄り」「デザイナー寄り」といった感じの大雑把な区分けでしかなく、多くのFellowがデザインやプログラミング/エンジニアリングに関する複数のスキルを兼ね備えています。とくにコーディング・プログラミングに関しては殆どのFellowがなにがしかの言語をスキルとして掲載していて驚きます。(フルスタックエンジニア！)

最も重複数が多かったスキルは「ユーザーエクスペリエンスデザイン」や「ユーザーインターフェイスデザイン」で多数のデザイナーが自身のトップスキルとしてタグを掲載していました。

プログラミング関係では、CSSやHTMLなどを除くと、JavaScript > PHP > Ruby の順に重複していました。

また、都市計画家として紹介されていた３名はみなGISのスキルを身につけているようです。

個人的に気になったのはPHPのウェブアプリケーションフレームワーク「<a href="http://drupal.jp/">Drupal</a>」をスキルとして上げている方が４名程いました。他のPHPのフレームワークの名が一切上がらない中、スキルとして掲載されている方が多かったので、ちょっと興味が湧きました。
後で調べてみたいと思います。

各人のスキルから「Code for America」が重要視していることや方向性などが朧げながら見えてくるようで、なかなか面白ですね。


<h2>スキル一覧</h2>
<strong>■デザイン</strong>
User Interface Design(ユーザーインターフェイスデザイン) 14名
User Experience Design(ユーザーエクスペリエンスデザイン) 12名
Adobe Creative Suite(Adobe Creative Suite) 9名
Graphic Design(グラフィックデザイン) 8名
Web Design(Webデザイン) 8名
Photoshop 6名
InDesign 5名
Information Architecture(インフォメーションアーキテクチャ) 5名
Interaction Design(インタラクションデザイン) 5名
Photography(フォトグラフィー) 5名
Typography(タイポグラフィー) 5名
Illustrator 4名
Usability(ユーザービリティ) 4名
Architecture(アーキテクチャ) 3名
Art(アート) 3名
Graphics(グラフィックス) 3名
Posters(ポスター) 3名
User-centered Design(ユーザー中心設計) 3名
Wireframes(ワイヤーフレーム) 3名
Design Thinking(デザインシンキング) 2名
Dreamweaver 2名
Experience Design(エクスペリエンスデザイン) 2名
Illustration(イラストレーション) 2名
Information Design(インフォメーションデザイン) 2名
Layout(レイアウト) 2名
Logo Design(ロゴデザイン) 2名
Magazines(マガジン) 2名
Multimedia(マルチメディア) 2名
Usability Testing(ユーザービリティ テスト) 2名
Visual Communication(ビジュアルコミュニケーション) 2名

<strong>■プログラミング</strong>
CSS 12名
JavaScript 10名
PHP 9名
Ruby 8名
HTML5 7名
jQuery 7名
Git 6名
HTML 6名
MySQL 6名
Software Development(ソフトウェア開発) 6名
Web Development(Web開発) 6名
Agile(アジャイル) 5名
Web Applications(Webアプリケーション) 5名
CSS3 4名
Flash 4名
Java 4名
Linux 4名
Python 4名
CMS 3名
Perl 3名
Subversion 3名
ASP.NET 2名
C 2名
C# 2名
Microsoft SQL Server 2名
Mobile Applications(モバイルアプリケーション) 2名
Node.js 2名
PostgreSQL 2名
Rapid Prototyping(ラピッドプロトタイピング) 2名
Rhino 2名
Scrum(スクラム開発) 2名
SQL 2名
Testing 2名
Unix 2名
XML 2名

<strong>■CMS, Framework</strong>
Ruby on Rails 7名                
Wordpress 5名
Drupal 4名

<strong>■マーケティング</strong>
Social Media Marketing(ソーシャルメディアマーケティング) 5名
E-commerce(Eコマース) 4名
Branding & Identity(ブランディング) 3名
Urban Planning(都市計画) 3名
Contextual Inquiry(ユーザーシナリオ法) 2名
Content Management(コンテンツマネージメント) 2名
Digital Strategy(デジタル戦略) 2名
Product Management(プロダクトマネージメント) 2名
Research(リサーチ) 2名
SEO 2名
Teaching(ティーチング) 2名
User Research(ユーザーリサーチ) 2名

<strong>■GIS</strong>
ArcGIS 3名
GIS(地理情報システム) 3名
Cartography(カートグラフィ) 2名
Geography(ゲオグラフィ) 2名
Geomatics(地理空間情報科学) 2名
Remote Sensing(リモートセンシング) 2名

<strong>■ライティング</strong>
Blogging(ブログ) 3名
Technical Writing(テクニカルライティング) 2名
Editing(エディター) 2名
      
<strong>■その他</strong>
Mac(Mac) 3名
Non-profits(非営利団体) 3名
Consulting(コンサルティング) 2名
Copy Editing(印刷) 2名
Entrepreneurship(アントレプレナーシップ) 2名
Environmental Science(環境科学) 2名
Event Planning(イベント企画) 2名
Public Speaking(パブリックスピ−キング) 2名
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3380</wp:post_id>
		<wp:post_date>2014-02-06 08:35:10</wp:post_date>
		<wp:post_date_gmt>2014-02-05 23:35:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3380</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3381]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427231271;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3343;}i:1;a:1:{s:2:"id";i:3649;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>あなたもKomodo Editを使いたくなる、10のTIPS</title>
		<link>http://shimz.me/blog/editor/3382</link>
		<pubDate>Mon, 10 Feb 2014 01:47:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3382</guid>
		<description></description>
		<content:encoded><![CDATA[布教のかいなく、周囲ではまったく愛好者が増えない「Komodeo Edit」。
悲しいので人によっては心をくすぐられるかもしれない(?)小技を集めてみました。「Komodo Editって何？」という方は、過去の記事を先にご覧ください。

<a href="http://shimz.me/blog/category/komodo-edit">Komode Edit 記事一覧</a>


以下「それvim…」とか「それema…」とか禁止。


<h2>Komode Edit Tips</h2>
<h3>1.URLをクリックで開く</h3>
ドキュメント内のURLを「Ctrl」ボタンを押しながらクリックすると、デフォルトブラウザでURLを開きます。
相対パスの場合は、エディタで対象ファイルを開きます。
<a target="_blank" href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips1.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips1-300x87.jpg" alt="komodoeditTips1" width="300" height="87" class="alignnone size-medium wp-image-3389" /></a>

<h3>2.ファイル毎のエディタ設定</h3>
ファイルツリーに表示されているファイル上で右クリック「Properties」を選択するとファイル毎の詳細設定が行えます。
インデントスペースの設定なども、ファイル毎に設定を変えることもできます。
<a target="_blank" href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips11.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips11-300x300.jpg" alt="komodoeditTips11" width="300" height="300" class="alignnone size-medium wp-image-3395" /></a>

<h3>3.定義元へジャンプ</h3>
変数名、関数名、クラス名、メソッド名などを選択して「Ctrl+G」を入力すると、定義された位置へジャンプします。

<h3>4.Calltips</h3>
Komodo Editでは定義したファンクションやメソッドのcalltipsを表示してくれますが、関数定義の直前にコメントを書くとcalltipsにコメントも一緒に表示してくれます。
<a target="_blank"href="http://shimz.me/blog/wp-content/uploads/2014/02/kodeeditTips2.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/kodeeditTips2-300x96.jpg" alt="kodeeditTips2" width="300" height="96" class="alignnone size-medium wp-image-3390" /></a>

<h3>5.ファンクションブロック選択</h3>
「Ctrl+b」で、カーソルの現在位置が含まれる関数ブロックを選択します。
<a target="_blank" href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTpis3.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTpis3-300x118.jpg" alt="komodoeditTpis3" width="300" height="118" class="alignnone size-medium wp-image-3391" /></a>

<h3>6.カッコ内を選択</h3>
「Ctrl+Shift+]」で、括弧内を選択します。
<a target="_blank" href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips6.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips6-300x89.jpg" alt="komodoeditTips6" width="300" height="89" class="alignnone size-medium wp-image-3394" /></a>


<h3>7.複数選択</h3>
「Ctrl+d」で複数の単語を選択できます。
選択した文字列は一括編集することができます。
複数選択を解除するには「Esc」ボタンを押します。
<a target="_blank" href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips4.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips4-300x115.jpg" alt="komodoeditTips4" width="300" height="115" class="alignnone size-medium wp-image-3392" /></a>

<h3>8.矩形選択</h3>
「Alt」をクリックしながらドラッグすることで、長方形に範囲選択することができます。
選択した内容は、一括編集することができます。
<a target="_blank" href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips5.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoeditTips5-300x134.jpg" alt="komodoeditTips5" width="300" height="134" class="alignnone size-medium wp-image-3393" /></a>


<h3>9.選択なしショートカット</h3>
なにも選択しないで「Ctrl+x」した場合、カーソル行を丸ごとカットします。
コピーなども選択してない場合は行まるごとが対処になります。

<h3>10.コードミニマップのフォントサイズ変更</h3>
表示されているコードミニマップ上で右クリック「increase Font size 」を選択すると、ミニマップのフォントサイズを大きくすることができます。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3382</wp:post_id>
		<wp:post_date>2014-02-10 10:47:51</wp:post_date>
		<wp:post_date_gmt>2014-02-10 01:47:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3382</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3396]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395841;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:148;}i:1;a:1:{s:2:"id";i:2519;}i:2;a:1:{s:2:"id";i:2661;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit マクロ]ファイル保存したら自動的にブラウザビューをリロードする。</title>
		<link>http://shimz.me/blog/editor/3383</link>
		<pubDate>Fri, 07 Feb 2014 02:31:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3383</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoEditAutoReload2.jpg" alt="komodo Edit AutoReload" width="1412" height="883" class="aligncenter size-full wp-image-3385" />

Komodo Editerで、編集中のファイルを保存した際に自働的にブラウザビューを更新するマクロです。

マクロの設定の仕方は下記記事を参照してください。

<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>

<h3>サンプルマクロ</h3> 
<pre class="lang:js decode:true " title="AutoReload" >var views = ko.views.manager.getAllViews();
var view;
for (var i=0; i &lt; views.length; i++) {
    view = views[i];
    if (view.getAttribute("type") == "browser") {
		view.reload();
		break;
    }
}</pre> 

上記スクリプトをマクロとして保存し、マクロのPropertiesを開きTriggersタブで「After file save」にチェックを入れれば、ファイル保存時に自動的にマクロが実行され、ブラウザビューが更新されます。

<a href="http://shimz.me/blog/wp-content/uploads/2014/02/komodoEditAutoReload1.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/komodoEditAutoReload1-251x300.jpg" alt="komodoEditAutoReload1" width="251" height="300" class="alignnone size-medium wp-image-3386" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3383</wp:post_id>
		<wp:post_date>2014-02-07 11:31:07</wp:post_date>
		<wp:post_date_gmt>2014-02-07 02:31:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3383</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3385]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425984527;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2579;}i:1;a:1:{s:2:"id";i:74;}i:2;a:1:{s:2:"id";i:148;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>なわばりの数理モデル</title>
		<link>http://shimz.me/blog/book/3387</link>
		<pubDate>Sat, 08 Feb 2014 10:40:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3387</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320018788/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41U8KiRmVcL._SL160_.jpg" alt="なわばりの数理モデル -ボロノイ図からの数理工学入門-" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320018788/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">なわばりの数理モデル -ボロノイ図からの数理工学入門-</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.02.08</div></div><div class="amazlet-detail">杉原 厚吉 <br />共立出版 <br />売り上げランキング: 619,232<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320018788/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<blockquote>生物が餌場を争ってできる縄張り,コンビニが顧客を囲い込んでできる商圏,結晶が核から成長してできる単結晶領域,河川が雨水を受け持つ流域,救急病院や公立図書館などの公共施設がサービスを受け持つ地区など,いくつかの個体が勢力を競い合ったり分担し合ったりして空間を分け合う姿は,身の回りのいたるところで観察できる。この姿を,「なわばり」を表す空間分割図形として捉えることによって,自然界や人間社会における多くの現象が統一的視点から解析できるとともに,さまざまなものづくりに役立つことを紹介する。</blockquote>

<a href="http://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%AD%E3%83%8E%E3%82%A4%E5%9B%B3">ボロノイ図</a>に関する書籍です。
以前、<a href="http://shimz.me/blog/d3-js/2819">Google Map上にD3を使ってボロノイ図を描く</a>というのを記事を書きましたが、D3を使えば比較的簡単にボロノイ図を書く事が出来ると知ってもっと活用できないかと思い購入しました。

読んでみると思っていた以上に活用範囲が広く、画像処理や、複雑な図形の中に最大の大きさで文字を描きたい時の位置決めなどにも使用できるそうです。

現在位置近くのAEDを見つけ出すとか、避難場所を探すなどにも使えそう。
（実際には道路に沿って移動しなくてはならないので、単純には決定できないそうですが、市街地域の十分に広い領域をとると近似値となることが経験的にわかっているそうです）

数理モデル部分は、やはり難しくてなかなか理解しきれないですが、応用範囲の広そうな技術なので、頑張って勉強してみたいと思います。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3387</wp:post_id>
		<wp:post_date>2014-02-08 19:40:01</wp:post_date>
		<wp:post_date_gmt>2014-02-08 10:40:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3387</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3388]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390558;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3650;}i:1;a:1:{s:2:"id";i:3562;}i:2;a:1:{s:2:"id";i:3645;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3プラグイン】 D3で作成したグラフをWebGLでレンダリングするプラグイン「PathGL」</title>
		<link>http://shimz.me/blog/d3-js/3399</link>
		<pubDate>Tue, 18 Feb 2014 00:39:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3399</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/PathGL/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/deabo000011-300x300.jpg" alt="pathGL" width="300" height="300" class="aligncenter border size-medium wp-image-3400" /></a>

先週末からずっと雪かきです。
生まれて初めて「雪のせいで家から出られない！」というのをリアルに体験しました。雪怖い。（ちなみに、<a href="http://www.asahi.com/articles/photo/AS20140215001965.html">こんな感</a>じでした）

そんなわけで手抜き更新です。

「<a href="http://pathgl.com/">pathGL</a>」は、D3.jsとDOMの間に入ってSVGの代わりにWebGLに描画を行うプラグインです。
SVGはデバッグがしやすく、解像度の異なるスクリーンに対しても綺麗に描画されるため非常に便利なのですが、要素数が多くなるとどうしても描画が重くなります。可視化の内容によっては、canvasやWebGLに表示したい場合がありますがD3.jsのみで行うのは少々メンドウなところがありました。

PathGLは、D3の書式から外れることなく簡単な記述でD3の出力結果をWebGL上に表示してくれるプラグインです。

とても便利そうなのですが……まだ、一部エラーがあるのか使いこなせていないのか……動きません。

Githubに掲載されている下記サンプルが私の環境では動きません orz

 
<pre class="lang:js decode:true " >d3.select ( 'canvas' ).call ( pathgl ) 
	.append ( 'circle' ) 
	.attr ( 'r' ,  100 ) 
	.attr ( 'cx' ,  50 ) 
	.attr ( 'cy' ,  50 )
 </pre> 

配信されているファイルに含まれているexampleは実行できるのですが、そこからちょっと外れて違うことをやろうとすると、動かせません。

バグなのか、何かを間違っているのか……まだわかりませんが、使いこなせればD3を使ったデータビュジュアライゼーションの表現力を大幅に高めてくれるプラグインなので、今後に期待したいと思います。


<h2>サンプル</h2>
こちらは、動作したサンプルです。
 
 
<pre class="lang:xhtml decode:true " title="200k Circles">&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
&lt;meta charset="utf-8" /&gt;
&lt;meta http-equiv="content-language" content="ja"&gt;
&lt;title&gt;Hello PathGL&lt;/title&gt;
&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
&lt;script src="http://adnanwahab.com/pathgl/dist/pathgl.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;canvas width="600" height="600"&gt;&lt;/vanvas&gt;

&lt;script&gt;
d3.select('canvas').call(pathgl)
	.selectAll("circle")
	.data(d3.range(2e5))
	.enter()
	.append("circle")
	.attr('fill', function () { return "hsl(" + Math.random() * 360 + ",100%, 50%)" })
	.attr('cx', function (d, i) { return d / 1e8 })
	.attr('cy', function (d, i) { return (2e5  -  d) / 20000 })
	.attr('r', function (d, i) { return d  % 1000 })
	.shader({ cx: 'resolution.x / 2. + cos(pos.z + clock * pos.x) * pos.z * 10.;'
			, cy: 'resolution.y / 2. + sin(pos.z + clock * pos.x) * pos.z * 10.;'
			, stroke: 'vec4(unpack_color(stroke) * .5 + vec3(mouse.x / resolution.x, mouse.y / resolution.y, 1.), 1.);'
			, radius: 'pos.y + pos.y * max(distance(x, mouse.x) / resolution.x, distance(y, mouse.y) / resolution.y)'
			});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 


<a href="http://shimz.me/example/d3js/PathGL/01/">example</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3399</wp:post_id>
		<wp:post_date>2014-02-18 09:39:26</wp:post_date>
		<wp:post_date_gmt>2014-02-18 00:39:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3399</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3400]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427312884;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1133;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:3841;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit マクロ]半角、全角変換。</title>
		<link>http://shimz.me/blog/komodo-edit/3402</link>
		<pubDate>Fri, 21 Feb 2014 01:58:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3402</guid>
		<description></description>
		<content:encoded><![CDATA[Komodo Editerで、編集中のドキュメントに対して半角カナを全角カナに、全角英数字を半角英数字に変換するマクロです。

マクロの設定の仕方は下記記事を参照してください。

<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>

半角、全角の変換には、hanzenkaku.jsのコードを使わせてもらいます。

<a href="https://github.com/dankogai/js-hanzenkaku">hanzenkaku.js</a>

<h3>サンプルマクロ</h3> 
 
<pre class="lang:js decode:true " >var global = {};


// js-hanzenkaku start

// ここにhanzenkaku.jsのコードを貼り付けてください

// js-hanzenkaku end 


var scimoz = ko.views.manager.currentView.scimoz,
    savedPos = scimoz.currentPos,
    savedLinePos = scimoz.firstVisibleLine;
 
try {
	//半角ｶﾅ→全角カナ変換
	var hankana = new RegExp(/[\uFF65-\uFF9F]/g);
    scimoz.text = scimoz.text.replace(hankana, function(m){
		return global.HanZenKaku.h2z(m);	
	});	

	//全角英数字→半角英数字変換
	var asciigi = new RegExp(/[\uFF01-\uFF60]/gm);
    scimoz.text = scimoz.text.replace(asciigi, function(m){
		return global.HanZenKaku.fw2hw(m);	
	});
	
    scimoz.gotoPos(savedPos);
    scimoz.lineScroll(0, savedLinePos-scimoz.firstVisibleLine);
} catch(e) {
    return true;
}
return false;</pre> 

Komode EditのマクロはJavaScriptで記述するので、既存のJSライブラリなどを流用することができます。（外部のJavaScriptを読み込むことはできないので、コピペする必要がありますが)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3402</wp:post_id>
		<wp:post_date>2014-02-21 10:58:19</wp:post_date>
		<wp:post_date_gmt>2014-02-21 01:58:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3402</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="komodo-edit"><![CDATA[Komodo Edit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3396]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427144165;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3319;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:3517;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「エンジニアのための データ可視化[実践]入門 ~D3.jsによるWebの可視化」感想</title>
		<link>http://shimz.me/blog/d3-js/3405</link>
		<pubDate>Thu, 27 Feb 2014 00:38:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3405</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163260/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/5163XBvWrkL._SL160_.jpg" alt="エンジニアのための データ可視化[実践]入門 ~D3.jsによるWebの可視化 (Software Design plus)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163260/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">エンジニアのための データ可視化[実践]入門 ~D3.jsによるWebの可視化 (Software Design plus)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.02.22</div></div><div class="amazlet-detail">森藤 大地 あんちべ <br />技術評論社 <br />売り上げランキング: 1,490<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774163260/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<blockquote>データの可視化とは、「データに含まれる事実・示唆を効率よく発見する技術」、「データから発見した事実・示唆を明確に伝える技術」ということができます。本書では、データ可視化の基本に始まり、何を可視化すべきで、誤った考え方は何かなどを解き明かしたあと、JavaScriptライブラリD3.jsの使い方、D3.jsによるWebの可視化のさまざまなケーススタディまで、エンジニアの方がさまざまな業務の現場で直面するであろうデータ可視化の考え方と手法をわかりやすく解説します。</blockquote>


<a href="https://twitter.com/AntiBayesian">@AntiBayesian</a>さんより献本をいただきました。
ありがとうございます。

<h3>感想</h3>
オーライリーから出版された<a href="http://www.oreilly.co.jp/books/9784873116464/">D3本</a>と発売日が近かったこともあって、「D3本」としての印象が強いようですが、本書は「データ可視化」に関する入門書です。
「データの中から重要な事実・示唆を見つけ出す」「見つけた情報を正しくわかりやすく伝える」といったデータビジュアライゼーションを行うために必要な知識や手法について書かれた参考書ですので「データ可視化に興味はあるけどD3はちょっと……」という方や「エクセルでグラフを含む資料を頻繁に作る必要があるんだけど」といったデータ可視化に関わりのある方全般にお勧です。
全体の約半分が可視化に関して基礎となる考え方や知識について、残りの半分がD3.jsを用いて実際に可視化を行う実践編といった構成となっています。


「綺麗なグラフ」や「かっこいいデータビジュアライゼーション」ではなく、「情報を正しくわかりやく伝える可視化」を行うにはプログラミングに関する技術だけでは足りず、別の知識や技術が必要となります。

データビジュアライゼーションの作成にはプログラミングや特定のソフトウェアなどが必要になるため、どうしても可視化を行うためのツールの説明や使い方について書かれた参考書が多く、正しく可視化を行うために必要な技術や知っておくべき知識については説明が足りなかったり省略されていたりするため、「データをグラフィックとして表示する技術は身に付いたけれども、実際に作成するとなんだか分かりづらい可視化になってしまう」ということが多々あります。
場合によっては意図せず情報を歪めて伝えてしまうデータビジュアライゼーションになってしまうこともありとても危険です。

本書では「データ可視化の歴史」から、「何を可視化するかをどうやって決めるか」「データの中から誤った事実を見つけ出したり間違った情報を伝えてしまったりしないためには何に気を付けるべきか」などについて丁寧に説明されています。
可視化作業を行う際に、第5章の「5.6 誤った可視化をしないためのチェックリスト」を使ってチェックを行うだけでも誤った可視化を行うリスクをかなり減らせると思います。

私が今まで読んだことのある参考書のなかで、「データを正しく可視化するために必要なスキル」について特化して書かれた本としては、オライリーの「<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・ビジュアライゼーション</a>」がありますが、あちらがデザイナー(情報デザイン)的な視点から書かれた内容なのに対して、本書はより統計学的な目線から書かれている印象を受けました。

ちなみに、どちらの本でも「3D円グラフ死ね」は共通してたりしますｗ
（もちろん、そんな直接的な言葉で記述されてはいませんが)

D3.jsはJavaScriptのChartライブラリの中でもかなり柔軟に様々な表現が行えるライブラリだけに、ともすると目的を見失いがちになったり、分かりづらいグラフになってしまったり、誤解を招くような可視化を行ってしまうリスクが高いので「改めて誤った可視化を行わないように気を付けないといけないな。」と思いました。

（といいながら、このブログの下書きに「D3.jsとThree.jsを使って3D円グラフを作成する」という書きかけの記事があったりするのですが。まぁ、そういうことができてしまうライブラリなのでより気を付ける必要があるということですね)


<h3>D3.js本としてはどうか？</h3>
まず付録としてD3.jsのAPIハンドブックがついてくるのですが、これがとても便利です。APIリファレンスが掲載されているD3参考書は今のところ無くネット上にも日本語のドキュメントがほとんどないのでお勧めです。

ただ本文の中で書かれている内容は「D3に全く触ったことが無い」という方には少し難しかもしれません。とくに一部のサンプルコードはCoffeeScriptで記述されているので、その点でも馴染みのない方にはハードルが高く感じられるのではないかと思います。

D3というライブラリについてとにかく一から学びたいという方は、オライリーから同時期に発売された「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">インタラクティブ・データビジュアライゼーション</a>」を先に読んだ方が理解しやすいと思います。

<h3>備考</h3>
電子書籍版が出版されたそうです。
<a href="https://gihyo.jp/dp/ebook/2014/978-4-7741-6372-7">エンジニアのための　データ可視化［実践］入門　―D3.jsによるWebの可視化 | Gihyo Digital Publishing</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3405</wp:post_id>
		<wp:post_date>2014-02-27 09:38:31</wp:post_date>
		<wp:post_date_gmt>2014-02-27 00:38:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3405</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3413]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427302504;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:3378;}i:2;a:1:{s:2:"id";i:3853;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>308</wp:comment_id>
			<wp:comment_author><![CDATA[日本語のD3本が発売され始めたようです]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://web.archive.org/web/20140227205302/http://blog.qaramell.com/archives/6491</wp:comment_author_url>
			<wp:comment_author_IP>65.52.170.210</wp:comment_author_IP>
			<wp:comment_date>2014-02-28 00:03:43</wp:comment_date>
			<wp:comment_date_gmt>2014-02-27 15:03:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] らは日本の著者によって書かれた本。日本のD3界のパイオニア 群馬の清水さんの感想がこちらに載ってます→「エンジニアのための データ可視化[実践]入門 ~D3.jsによるWebの可視化」感想 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393541395.6244390010833740234375;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393513423.0764338970184326171875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>370</wp:comment_id>
			<wp:comment_author><![CDATA[Qaramell Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.qaramell.com/?p=6491</wp:comment_author_url>
			<wp:comment_author_IP>138.91.1.170</wp:comment_author_IP>
			<wp:comment_date>2014-11-29 16:31:01</wp:comment_date>
			<wp:comment_date_gmt>2014-11-29 07:31:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] らは日本の著者によって書かれた本。日本のD3界のパイオニア 群馬の清水さんの感想がこちらに載ってます→「エンジニアのための データ可視化[実践]入門 ~D3.jsによるWebの可視化」感想 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417246261.429727077484130859375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417309260.5933730602264404296875;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>高崎市と前橋市のAED設置施設一覧に緯度経度を付加してみた</title>
		<link>http://shimz.me/blog/other/3406</link>
		<pubDate>Mon, 24 Feb 2014 00:54:53 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3406</guid>
		<description></description>
		<content:encoded><![CDATA[2/22は「<a href="http://odhd14.okfn.jp/">インターナショナルオープンデータデイ 2014</a>」だったらしいので、以前行った「<a href="http://shimz.me/blog/other/3202">ひとりオープンデータソン</a>」を再度行ってみました。

<h2>ターゲット</h2>
今回は高崎市と前橋市のAED配置施設一覧に緯度経度情報を付加してcsvとgeojsonにコンバートしてみました。
いくつかの自治体では、AEDの設置位置をオープンデータとして公開していますが、今のところ群馬ではオープンにされている市はないようで残念です。
群馬全域のAED情報をマッピングしてみたかったのですが、<a href="http://www.city.isesaki.lg.jp/www/contents/1353466458553/index.html">伊勢崎市</a>などはAED設置施設の名称と電話番号のデータしかなく、住所が分からないので早々に諦めました。

<h2>元データ</h2>
<a href="http://www.city.maebashi.gunma.jp/kurashi/42/103/p003869.html">前橋市 市有施設等におけるAED設置施設一覧</a>
<a href="https://www.city.takasaki.gunma.jp/hokenjo/hoken-soumu/aed.htm">高崎市 市有施設等におけるAED設置施設一覧</a>
元データは両市ともTableで作成された表データです。前橋市の方は、微妙なセル結合とかが行われていてちょっと編集がメンドウでした。

<h2>データのコンバート</h2>
基本的には<a href="http://shimz.me/blog/other/3202">前回の手順</a>とあまり変わりませんので詳細はリンク先の記事をご覧ください。ただ、今回は位置情報(緯度経度)が元サイトになかったため、webサービスを利用して住所から緯度経度を取得しました。

１．Excelにコピペしてcsvに編集
２．「<a href="http://napzak.com/tool/gcode/">住所から緯度経度を一括変換するツール ｜ ナップザック</a>」を利用して緯度経度を取得
<a href="http://napzak.com/tool/gcode/"><img src="http://shimz.me/blog/wp-content/uploads/2014/02/geocoding20140224.jpg" alt="住所から緯度経度を一括で調べるツール（＋標高もね）" width="590" height="368" class="alignnone size-full wp-image-3407" /></a>
３．作成したcsvをQGISに読み込んでGeoJSONへ変換
４．Githubにアップロードして終了

今回コンバートしたデータセットは以下です。
<a href="https://github.com/shimizu/dataSet/tree/master/takasaki_aed">shimizu / dataSet / takasaki_aed /</a>
<a href="https://github.com/shimizu/dataSet/tree/master/maebashi_aed">shimizu / dataSet / maebashi_aed /</a>

一応、<a href="http://geojsonlint.com/">GeoJSON Lint</a>を使ってデータの内容をざっと確認していますが、もし誤りなどありましたら、Pull Requestください。

なお、上記データのご利用はは自己責任でお願いします。

<h2>埋め込み</h2>
GitHubにGeoJSONをアップロードすると地図で表示されますが、表示される地図をiframeで埋め込むこともできました。

takasaki_aed 
<iframe width="100%" height="300" scrolling="no" frameborder="0" src="https://render.githubusercontent.com/view/geojson?url=https%3A%2F%2Fraw.githubusercontent.com%2Fshimizu%2FdataSet%2Fmaster%2Ftakasaki_aed%2FtakasakiAEDlatlng.geojson#8bd461bd-3230-4cef-bc83-8d43467f1a7e"></iframe>
 
maebashi_aed 
<iframe width="100%" height="300" scrolling="no" frameborder="0" src="https://render.githubusercontent.com/view/geojson?url=https%3A%2F%2Fraw.githubusercontent.com%2Fshimizu%2FdataSet%2Fmaster%2Fmaebashi_aed%2FmaebashiAEDlatlng.geojson#963c0c20-de84-4400-989f-8d5a8bd2fcd6"></iframe>
 
<h2>おまけ</h2>
AEDの位置情報を使ってボロノイ図をつくってみました。
同じ位置の点情報があると、正確に計算ができないようなので、位置が重複しているデータは省略しています。
今のところはただボロノイ図を表示しているだけです。
各セルの面積(ピクセル)などは取得できそうなので、これを何かに使えないか考えているところです。

<a href="http://shimz.me/datavis/gunma/maebashi/AED/">高崎・前橋AED設置場所　ボロノイ図</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3406</wp:post_id>
		<wp:post_date>2014-02-24 09:54:53</wp:post_date>
		<wp:post_date_gmt>2014-02-24 00:54:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3406</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3409]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427377897;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3760;}i:1;a:1:{s:2:"id";i:3340;}i:2;a:1:{s:2:"id";i:3851;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プリンタのステータスが「オフライン」と表示されLAN経由で印刷できない。</title>
		<link>http://shimz.me/blog/troubleshooting/3410</link>
		<pubDate>Wed, 26 Feb 2014 03:30:12 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3410</guid>
		<description></description>
		<content:encoded><![CDATA[プリンタまでPingが通るのに、「プリンターをオフラインで使用する」にチェックが入っているわけでもないのに、ステータスが「オフライン」と表示されて印刷ができないケース。
SNMPが原因だった。
(zabbixのテスト導入の際に、複合機のSNMPコミュニティ名が変更されていたとのこと)

クライアント端末側プリンタドライバで設定されているSNMPの確認・設定は、「デバイスとプリンター」から「プリンタ―のプロパティ」→「ポート」タブ→「ポートの構成」で行える。
<img src="http://shimz.me/blog/wp-content/uploads/2014/02/fukugoukiSNMP.jpg" alt="fukugoukiSNMP" width="490" height="525" class="alignnone size-full wp-image-3411" />

クライアント側と複合機(プリンタ)でコミュニティ名は合わせないと印刷ができない場合がある。
(オフラインと認識される。印刷できちゃう場合もあるっぽい）

SNMPを使う必要がないなら、「SNMPステータスを有効にする」のチェックを外して無効にしてしまう方が良い。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3410</wp:post_id>
		<wp:post_date>2014-02-26 12:30:12</wp:post_date>
		<wp:post_date_gmt>2014-02-26 03:30:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3410</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3411]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387020;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2719;}i:1;a:1:{s:2:"id";i:148;}i:2;a:1:{s:2:"id";i:4038;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3プラグイン】フロアマップを表示する「Floor Plan」</title>
		<link>http://shimz.me/blog/d3-js/3414</link>
		<pubDate>Tue, 04 Mar 2014 03:17:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3414</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/floorplan/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/d3floorplan20140304.jpg" alt="d3 floorplan" width="590" height="395" class="aligncenter size-full wp-image-3416 border" /></a>


<a href="http://shimz.me/example/d3js/floorplan/">example</a>

「<a href="http://dciarletta.github.io/d3-floorplan/">Floor Plan</a>」は図面上にレイヤーを重ねて、ポリンゴンデータやパスデータ、ヒートマップデータなどを表示できる、D3プラグインです。

簡単に使えてわりと実用的かも。

間取り図の表示なんかに使えるかもしれません。

<h2>サンプルコード</h2>
 
<pre class="lang:js decode:true " >var w = 720;
var h = 487;

//スケールの指定
var xscale = d3.scale.linear()
	.domain([0,50.0])
	.range([0, w]);
			   
var yscale = d3.scale.linear()
	.domain([0,33.79])
	.range([0, h]);

//初期化			   
var map = d3.floorplan().xScale(xscale).yScale(yscale);
var imagelayer = d3.floorplan.imagelayer();
var heatmap = d3.floorplan.heatmap();
var pathplot = d3.floorplan.pathplot();
var overlays = d3.floorplan.overlays().editMode(true);
var mapdata = {};


//ベースとなる画像データの読み込み
mapdata[imagelayer.id()] = [{
	url: 'demo.jpg',
	x: 0,
	y: 0,
	height: 33.79,
	width: 50.0
}];

//レイヤーの追加	 
map.addLayer(imagelayer)
   .addLayer(heatmap)
   .addLayer(pathplot)
   .addLayer(overlays);

   
//ポリゴン、ヒートマップ、パスデータの読み込み   
d3.json("data.json", function(data) {
	mapdata[heatmap.id()] = data.heatmap;
	mapdata[overlays.id()] = data.overlays;
	mapdata[pathplot.id()] = data.pathplot;

	//フロアマップ表示
	d3.select("#demo").append("svg")
		.attr("width", w)
		.attr("height", h)
		.datum(mapdata)
		.call(map);
});
</pre> 

デモ画像には、<a href="http://www.city.fukui.lg.jp/sigoto/keiyaku/nyusatu/h25jihanki.html">福井市の自動販売機設置場所位置図</a>を利用させていただきました。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3414</wp:post_id>
		<wp:post_date>2014-03-04 12:17:35</wp:post_date>
		<wp:post_date_gmt>2014-03-04 03:17:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3414</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427364078;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2797;}i:1;a:1:{s:2:"id";i:2635;}i:2;a:1:{s:2:"id";i:3670;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>366</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-11-07 19:30:18</wp:comment_date>
			<wp:comment_date_gmt>2014-11-07 10:30:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【D3プラグイン】フロアマップを表示する「Floor Plan」 | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415664941.240686893463134765625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415356218.5632979869842529296875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>JavaScriptで金額の数値表示とカンマ区切り表示を切り替え。</title>
		<link>http://shimz.me/blog/javascript/3420</link>
		<pubDate>Mon, 10 Mar 2014 05:57:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3420</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/js/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/amount-_display2014.310.jpg" alt="金額表示切替" width="183" height="126" class="aligncenter border size-full wp-image-3421" /></a>

<a href="http://shimz.me/example/js/01/">example</a>

JavaScriptで金額の数値表示とカンマ区切り表示を切り替え。

フォーカス時は数値で表示し、フォーカスが外れたらカンマ区切り(プラス円表記)で表示し、データベースへ保存する際は数値で、という要望があったので。

ぶっちゃけ、めんどくさい。



<h3>サンプル</h3>
 
<pre class="lang:js decode:true " >window.onload = function(){

	//読み込み時にエンコード
	$(".money").each(function(){
		addFigure(this);
	});

	//フォーカス時にデコード
	$(".money").focus(function(){		
		delFigure(this);
	});    
	
	//フォーカスが外れた時にエンコード
	$(".money").blur(function(){
		addFigure(this);
	});    
	
	//保存時は全ての値をデコード
	$("#save").click(function(){
		$(".money").each(function(){
			delFigure(this);
		});
	});
		
	//encode	
	function addFigure(query){
		$(query).val($(query).val().replace( /(\d)(?=(\d\d\d)+(?!\d))/g, '$1,' ) + "円");
	}
	//decode
	function delFigure(query){
		$(query).val($(query).val().replace( /,|円/g, '' ));
	}

}</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3420</wp:post_id>
		<wp:post_date>2014-03-10 14:57:20</wp:post_date>
		<wp:post_date_gmt>2014-03-10 05:57:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3420</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3421]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427367557;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3445;}i:1;a:1:{s:2:"id";i:3984;}i:2;a:1:{s:2:"id";i:2881;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]偽POPサーバー</title>
		<link>http://shimz.me/blog/node-js/3422</link>
		<pubDate>Tue, 11 Mar 2014 00:53:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3422</guid>
		<description></description>
		<content:encoded><![CDATA[「iPhoneでPCのメールって受け取れるんでしょ？　設定して」
「メールのパスワードは？」
「わかんない」
「……」

と、言われて作った簡易偽POPサーバー。
node.js便利。

 
<pre class="lang:js decode:true " >var net = require('net');
var rl = require('readline');


var server = net.createServer(function (socket) {
	 socket.write("+OK Dovecot Ready."+"\r\n") ;
	 
    var i = rl.createInterface(socket, socket);
    i.on('line', function (line) {
		console.log(line);
		
		(/USER.*/i.test(line))	? socket.write('+OK Password required for '+"\r\n") :
		(/PASS.*/i.test(line))	? socket.write('+OK'+"\r\n") :
		(/STAT/i.test(line))	? socket.write('+OK 0 0'+"\r\n") : 
		(/LIST/i.test(line))	? socket.write('+OK 0 messages'+"\r\n"+"1 400") : 		
		socket.write("-ERR unknown command"+"\r\n") ;
    });
	
});

server.listen(110);</pre> 

起動して、メーラのpopサーバーとして指定すれば、メーラから受信したpopコマンドをそのまま表示します。
（平文でアクセスするようにメーラーに設定すれば、user名やpasswordもそのまま表示されます）

<img src="http://shimz.me/blog/wp-content/uploads/2014/03/fakepopserver20140311.jpg" alt="fakepopserver20140311" width="261" height="145" class="alignnone size-full wp-image-3424" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3422</wp:post_id>
		<wp:post_date>2014-03-11 09:53:57</wp:post_date>
		<wp:post_date_gmt>2014-03-11 00:53:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3422</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3424]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427230190;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:24;}i:1;a:1:{s:2:"id";i:2690;}i:2;a:1:{s:2:"id";i:2643;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】デザイナーにお勧め「インタラクティブ・データビジュアライゼーション」感想</title>
		<link>http://shimz.me/blog/d3-js/3425</link>
		<pubDate>Wed, 12 Mar 2014 11:10:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3425</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51BarZiCJnL._SL160_.jpg" alt="インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">インタラクティブ・データビジュアライゼーション ―D3.jsによるデータの可視化</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.03.11</div></div><div class="amazlet-detail">Scott Murray <br />オライリージャパン <br />売り上げランキング: 5,994<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116465/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

オライリーの伊藤編集長より<a href="https://twitter.com/FoD5">@FoD5</a>さん経由で、献本をいただきました。
ありがとうございます。

<h3>感想</h3>
<blockquote>これは、プログラマではない人々を対象としたデータビジュアライゼーションのプログラミングについての本だ。あなたがビジュアルのスキルはあるものの、データやコードをいじったことがないアーティストやグラフィックデザイナなら、この本はあなたに打ってつけだ。あなたが大量のデータを持っているが、ビジュアルやコードを相手にしたことがないジャーナリストや研究者なら、やはりこの本はあなたのためにある。</blockquote>




発売前から<a href="http://shimz.me/blog/d3-js/3378">たびたびお勧めしている</a>のですが、改めて。
本書はD3.jsの初心者向けオンラインチュートリアル「<a href="http://ja.d3js.info/alignedleft/tutorials/d3/">D3 チュートリアル</a>」を書かれたスコット・マレイさんがオンラインチュートリアルに追記する形で出版された参考書です。
著者自らが、D3の使い方を身に付けていったプロセスに沿って章立てられいるので、読者もステップバイステップでD3の扱い方を学んでいくことができます。
本書のなかでも何度も繰り返し説明がありますが、本書はエンジニアではなくアーティストやデザイナのために書かれた参考書です。
HTMLやCSS、DOMについての説明から始まりますので、ある程度フロントエンドの技術を身に着けたエンジニアにとっては冗長に感じられるかもしれません。

一応、本書でターゲットとして想定されている読者は以下となります。

<ul>
	<li>「ワールドワイドウェブ」と呼ばれるこの新しいものについて聞いたことがある。</li>
	<li>HTML、DOM、CSSを少し知っている</li>
	<li>すでにちょっとしたプログラミングの経験がある。</li>
	<li>JQueryについて聞いたことがある。あるいはJavaScriptを以前書いたことがある。</li>
	<li>CSV、SVG、JSONのような聞いたことのない略語が出てきても、怖くならない。</li>
	<li>役に立つ対話的ビジュアライゼーションを作りたいという気持ちを持っている。</li>
</ul>


<h3>GEOについて</h3>
D3.jsの参考書はいくつかありますが、D3を使った地図の描画について詳しく書かれた参考書は今ところ本書だけといえます。
地図を使ったデータビジュアライゼーションに興味のあるかたは、ぜひ本書を手に取ってみてください。

<h3>総括</h3>
D3.jsの入門書として今のところまちがいなくベストといっていい参考書だと思います。
<a href="http://shimz.me/blog/d3-js/3429">先の記事</a>でも書きましたが、D3はその前身となったライブラリが生まれたときから、製作者たちが一貫して「データビジュアライゼーションを、一般のデザイナやアーティストにとって身近で簡単に作成できるものにしよう」という目的で作られています。
最近は日本でもD3の注目度が上がってはきていますが、デザイナやアーティストのクラスタにはまだまだ浸透していないようです。
もし、少しでもデータビジュアライゼーションなどに興味がありましたら、本書を手に取ってみてください。


<blockquote>ソフトウェア開発の学習では、コンピュータが理解できる非常に限られた正確な構文で意思を疎通することを学ばなければならず、苦闘が避けられない。
それでも、ビジュアライゼーションを生み出すことには非常に大きな意味があることがわかっているので、私たちはコーディングを続ける。私たちがデータビジュアライゼーションをするのは、今まで見たこともないようなものが見えるようになるのがとても面白いからだ。それは、データが詰まった得体の知れない壺から、魔法の精霊を目に見える形にして生み出すようなものだ。</blockquote>







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3425</wp:post_id>
		<wp:post_date>2014-03-12 20:10:19</wp:post_date>
		<wp:post_date_gmt>2014-03-12 11:10:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3425</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3432]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427383078;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3564;}i:1;a:1:{s:2:"id";i:3378;}i:2;a:1:{s:2:"id";i:3405;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsの歴史。元になったデータビジュアライゼーションライブラリ一覧</title>
		<link>http://shimz.me/blog/d3-js/3429</link>
		<pubDate>Wed, 12 Mar 2014 02:44:06 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3429</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsの歴史は意外と古く、前身となったライブラリがいくつかありますのでここで紹介してみます。

<h3>prefuse</h3>
2005年に Jeffrey Heer, Stuart K. Card, James A. Landayらによって作成されたデータビジュアライゼーションツールキットです。
Javaで書かれており、Java SwingアプリケーションやWebアプレットに統合されています。比較的簡単にデータビジュアライゼーションを作成・表示することができるライブラリとして人気を得ました。

<a href="http://prefuse.org/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/prefuse20140312.jpg" alt="prefuse" width="590" height="365" class="alignnone size-full wp-image-3427" /></a>

<a href="http://prefuse.org/">prefuse | interactive information visualization toolkit</a>


<h3>flare</h3>
2007年にJeffrey Heerによって作成されたデータビジュアライゼーションツールキットです。
Action Scriptで書かれており、ある意味prefuseのFlash版といえます。javaからflashに移ったことで、さらに利用者が増えることとなりました。

<a href="http://flare.prefuse.org/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/flare20140312.jpg" alt="flare" width="590" height="365" class="alignnone size-full wp-image-3426" /></a>

<a href="http://flare.prefuse.org/">Flare | Data Visualization for the Web</a>


<h3>protovis</h3>
2009年、指導者としてスタンフォード大学に移ったJeffrey Heerが、大学院生であったMike Bostockと供に、スタンフォードのVis Groupで作成したJavaScriptベースのデータビジュアライゼーションツールキットです。
プラグインを必要としないネイティブブラウザテクノロジーのみで作成された初めてのツールキットで、D3.jsの直接の前身となりました。

<a href="http://mbostock.github.io/protovis/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/protovis20140312.jpg" alt="protovis" width="590" height="365" class="alignnone size-full wp-image-3428" /></a>
<a href="http://mbostock.github.io/protovis/">Protovis</a>


<h3>D3.js</h3>
2011年、Mike Bostock, Vadim Ogievetsky, Jeffrey Heerによって、満を持して公式に発表されたデータビジュアライゼーションライブラリです。
抽象化されたインターフェイスを備えていたProtovisと異なり、ウェブドキュメント自体を直接操作する仕組み(Data-Driven Documents)が採用されました。
これによって学習コストは上がりましたが、より自由に作品を作ることが可能になり拡張性も向上しました。
一般に普及していたjQueryの構文を取り入れており、jQueryを使ったことのあるデザイナーであればその知識をD3でも活かすことができます。

<a href="http://d3js.org/"><img src="http://shimz.me/blog/wp-content/uploads/2014/01/d3sitetitle.jpg" alt="d3sitetitle" width="590" height="369" class="alignnone size-full wp-image-3334" /></a>

<a href="http://d3js.org/">D3.js - Data-Driven Documents</a>

<h3>総括</h3>
プラットフォームや開発言語は変われどprefuseの頃より一貫して、簡単になおかつ高度なデータビジュアライゼーションを作成しWeb上で公開できるライブラリを目指して作成されており、その延長線上に現在のD3があります。
新たに、GISのスペシャリストJason Daviesらが参加したことで、地理情報の可視化など活用範囲をさらに広げることとなりました。
D3コミュニティは多くのデザイナー、エンジニア、アーチストなどによって支えられており、日々様々な作品が作成されD3そのものの改良も頻繁に行われています。
D3に興味を持たれた方は、是非その前身となったライブラリやそれらのコミュニティを覗いてみると、色々と勉強になって面白いのではないでしょうか。

<h3>参照</h3>
<ul>
<li><a href="http://homes.cs.washington.edu/~jheer/">Jeffrey Heer</a></li>
<li><a href="http://bost.ocks.org/mike/">Mike Bostock</a></li>
<li><a href="https://www.jasondavies.com/">Jason Davies</a></li>
<li><a href="http://alignedleft.com/">Scott Murray</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3429</wp:post_id>
		<wp:post_date>2014-03-12 11:44:06</wp:post_date>
		<wp:post_date_gmt>2014-03-12 02:44:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3429</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3334]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427312842;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3405;}i:1;a:1:{s:2:"id";i:3688;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Maps APIのちょっとした進化</title>
		<link>http://shimz.me/blog/google-map-api/3435</link>
		<pubDate>Mon, 17 Mar 2014 00:48:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3435</guid>
		<description></description>
		<content:encoded><![CDATA[今まで、Google Maps APIで緯度経度を指定する際は、google.maps.LatLngを使って新たなロケーションオブジェクトを作成しなくてはなりませんでしたが、 versions 3.16 以降では、オブジェクトリテラルで指定できるようになったそうです。

 
<pre class="lang:js mark:3 decode:true " title="before" >var myOptions = {
	zoom: 8,
	center: new google.maps.LatLng(36.322356, 139.013057),
	mapTypeId: google.maps.MapTypeId.ROADMAP
};</pre> 

 
<pre class="lang:js mark:3 decode:true " title="after" >var myOptions = {
	zoom: 8,
	center: {lat: 36.322356, lng: 139.013057}
	mapTypeId: google.maps.MapTypeId.ROADMAP
};</pre> 

ちょっとした変更ですが、利用しやすくなりましたね。


【参照】
<a href="http://googlegeodevelopers.blogspot.jp/2014/03/streamlining-code-in-javascript-maps-api.html">Google Geo Developers Blog: Streamlining code in the JavaScript Maps API</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3435</wp:post_id>
		<wp:post_date>2014-03-17 09:48:02</wp:post_date>
		<wp:post_date_gmt>2014-03-17 00:48:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3435</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3436]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426979211;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2841;}i:1;a:1:{s:2:"id";i:2819;}i:2;a:1:{s:2:"id";i:3108;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬県の地図情報システム</title>
		<link>http://shimz.me/blog/other/3440</link>
		<pubDate>Wed, 19 Mar 2014 12:21:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3440</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://searchizu-maebashi.geocloud.jp/webgis/?p=1"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/140319-0001.png" alt="前橋市の地図情報システム「さーちずまえばし」" width="590" height="281" class="alignnone size-full wp-image-3441" /></a>

今月(3/3より)前橋市で、地図情報が閲覧できるサービスが開始されました。
公開時に上毛新聞で紹介があったみたいなのですが……ぶっちゃけ、Facebookで教えてもらうまでまったく知りませんでした。

グロースハックとまでは言わないものの、どうせならもっとネットでもPRすれば良いのに、とか思うのですがとりあえずブログで紹介してみます。

機能としては、地図上に市の施設のほか、学校区や避難所、都市計画用途地域、道路台帳平面図などさまざまな情報を表示できたり、作図ツールを使って自ら色々書き込んだり書き込んだ地図を印刷して使ったりすることができます。

「Google Mapでよくね？」みたいな話もあるわけですがGoogle Mapは色々と利用に制限があったりしますし、せっかくなので是非活用して欲しいなと思います。

ちなみに、高崎市や群馬県では以前より地図情報システムが公開されているので、一緒に掲載しておきました。


<h3>前橋市地図情報システム</h3>
<a href="http://searchizu-maebashi.geocloud.jp/webgis/?p=1">さーちずまえばし</a>


<h3>高崎市地図情報システム</h3>
<a href="http://www.sonicweb-asp.jp/takasaki/">まっぷdeたかさき</a>

<h3>群馬県地図情報システム</h3>
<a href="http://mapping-gunma.pref.gunma.jp/pref-gunma/top/">マッピングぐんま</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3440</wp:post_id>
		<wp:post_date>2014-03-19 21:21:54</wp:post_date>
		<wp:post_date_gmt>2014-03-19 12:21:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3440</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3441]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391936;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:2670;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上にGeoJSONデータを表示する</title>
		<link>http://shimz.me/blog/google-map-api/3445</link>
		<pubDate>Thu, 20 Mar 2014 05:21:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3445</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://jp.techcrunch.com/2014/03/20/20140319google-maps-makes-creating-maps-easier-for-developers-adds-geojson-support-to-its-javascript-api/">Google、地図アプリのデベロッパー向けJavaScript APIでGeoJSONをサポート</a>

Google Maps APIで<a href="http://ja.wikipedia.org/wiki/GeoJSON">GeoJSON</a>データがサポートされたらしいので、試してみました。（一部、D3.jsを使用しています）

【参考】
<a href="https://developers.google.com/maps/articles/combining-data">Combining and visualising multiple data sources - Google Maps API — Google Developers</a>




<h2>ポイントデータを表示</h2>
ポイント(点)データは、スタイルを指定しないとマーカーで表示される。
<a href="http://shimz.me/example/gmapv3/geoJSON/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/a9037c7d0d0fc74c6ea57bcbccdec794.jpg" alt="GMPSAPI geojson(ポイント)読み込み" width="590" height="545" class="alignnone size-full wp-image-3443" /></a>

<a href="http://shimz.me/example/gmapv3/geoJSON/">example</a>


<h3>サンプルコード</h3> 
<pre class="lang:js decode:true " >google.maps.event.addDomListener(window, 'load', function() {
	
	//Google Maps初期化
	var map = new google.maps.Map(document.getElementById('map-canvas'), {
		center: { lat: 36.3894816, lng: 139.0634281 },
		zoom: 12
	});

	//GeoJSONデータ読み込み
	d3.json('aed.geojson', function(data) {		
		//データレイヤーに追加
		map.data.addGeoJson(data);
		//イベント(マーカークリック時)を設定
		map.data.addListener('click', mouseClick);
	});
	
	function mouseClick(e) {
		//features-&gt;propertiesのaddressデータをクリック時に表示する
		alert(e.feature.getProperty('address'));	
	}
   
});</pre> 


<h2>ポイントデータを表示２</h2>
スタイル指定してみた。
<a href="http://shimz.me/example/gmapv3/geoJSON/index3.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/googlemap_geojson201403203.jpg" alt="GMPSAPI geojson(ポイント)読み込み" width="590" height="540" class="alignnone size-full wp-image-3446" /></a>

<a href="http://shimz.me/example/gmapv3/geoJSON/index3.html">example</a>

<h3>サンプル</h3>
 
<pre class="lang:js decode:true " >google.maps.event.addDomListener(window, 'load', function() {
	
	//Google Maps初期化
	var map = new google.maps.Map(document.getElementById('map-canvas'), {
		center: { lat: 36.3894816, lng: 139.0634281 },
		zoom: 12
	});

	
	//マーカーのスタイルを指定
	var styleFeature = function(feature) {
		return {
			icon: {
				path: google.maps.SymbolPath.CIRCLE,
				scale:  ~~(Math.random() * 20), //円のサイズ(今回はランダムに設定)
				fillColor: '#f00',
				fillOpacity: 0.35,
				strokeWeight: 0
			}
		};
	};
	
	//GeoJSONデータ読み込み
	d3.json('aed.geojson', function(data) {		
		//データレイヤーに追加
		map.data.addGeoJson(data);
		//データレイヤのスタイルを指定
		map.data.setStyle(styleFeature);
		//イベント(マーカークリック時)を設定
		map.data.addListener('click', mouseClick);
	});
	
	function mouseClick(e) {
		//features-&gt;propertiesのaddressデータをクリック時に表示する
		alert(e.feature.getProperty('address'));	
	}
   
});</pre> 



<h2>ポリゴンデータを表示</h2>
都道府県境界データを表示し、各県の人口密度に合わせて塗り分けをしてみた。
<a href="http://shimz.me/example/gmapv3/geoJSON/index2.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/googlemap_geojson20140320.jpg" alt="GMPSAPI geojson(ポリゴン)読み込み" width="590" height="545" class="alignnone size-full wp-image-3444" /></a>

<a href="http://shimz.me/example/gmapv3/geoJSON/index2.html">example</a>

<h3>サンプルコード</h3>  
<pre class="lang:js decode:true " >google.maps.event.addDomListener(window, 'load', function() {
	//Google Maps API初期化
	var map = new google.maps.Map(document.getElementById('map-canvas'), {
		center: { lat: 36.322356, lng: 139.013057 },
		zoom: 5
	});

	//ポリゴンデータのスタイルを指定
	var styleFeature = function(max){	
		//カラースケールを指定
		var colorScale = d3.scale.linear().domain([0, max]).range(["#CCFFCC", "red"]);
		return function(feature){
			return {
				strokeWeight: 2,
				strokeColor: 'blue',
				zIndex: 4,
				fillColor: colorScale(+feature.getProperty('人口密度')),　//人口密度によって色を塗り分ける 
				fillOpacity: 0.75,
				visible: true
			};		
		}
	
	}
	
	//geojsonデータ(ポリゴン)を読み込み
	d3.json('japank.geojson', function(data) {
		//各県の人口密度から最大値を取得
		var max = d3.max(data.features, function(d){ return +d.properties['人口密度'] })
		//データレイヤーに追加
		map.data.addGeoJson(data);
		//データレイヤのスタイルを指定
		map.data.setStyle(styleFeature(max));
	});
   
});</pre> 

<h2>関連</h2>
<a href="http://shimz.me/blog/web/3789">GeoJSONを使いこなすためのWebサービスまとめ</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3445</wp:post_id>
		<wp:post_date>2014-03-20 14:21:58</wp:post_date>
		<wp:post_date_gmt>2014-03-20 05:21:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3445</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3444]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371438;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3824;}i:1;a:1:{s:2:"id";i:3496;}i:2;a:1:{s:2:"id";i:2151;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>377</wp:comment_id>
			<wp:comment_author><![CDATA[google maps geojson - Search Yours]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.searchurs.com/google-maps-geojson/</wp:comment_author_url>
			<wp:comment_author_IP>162.213.251.154</wp:comment_author_IP>
			<wp:comment_date>2015-01-09 02:59:44</wp:comment_date>
			<wp:comment_date_gmt>2015-01-08 17:59:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;]  Google map上にgeojsonデータを表示する | #gunma [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420739985.0047099590301513671875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420757894.2963650226593017578125;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>群馬県　地域別対前月人口増減</title>
		<link>http://shimz.me/blog/d3-js/3451</link>
		<pubDate>Tue, 25 Mar 2014 00:45:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3451</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/jinkou/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/jinkou2014032432.jpg" alt="群馬県　エリア別対前月人口増減" width="571" height="519" class="aligncenter border size-full wp-image-3452" /></a>

<a href="http://shimz.me/datavis/gunma/jinkou/">example</a>

先週末のもくもく会で作っていたページです。

<a href="http://connpass.com/event/5327/">週末もくもく会 in 桐生駅</a>

2010年から2013年までの、群馬県内各市町村における毎月の人口増減を色分けして表示しています。
前月に対して人口が増えた場合は青で、逆に人口が減った場合は黒く塗りつぶしています。地域をクリックすると人口データの詳細が確認できます。

作っていてちょっと面白いと思ったのは、人口の増える月減る月が大体決まっているところでしょうか。もっと年によってばらつきがあるものかと思っていました。まぁ、この図では「前月と比較して減ったか増えたか」しか分からず「どのくらい減ったのか」などの比較はできないのですが。地域ごとの傾向をみるにはよいかなと。

しかし、じわりじわりと減っていますね。

<h3>追記</h3>
ついでに、転入・転出の数値で色塗りしてみました。
でも、『一年のなかで「４月、５月」が、一番、転入数と転出数が多い』という至極当たり前のことしか分からなかった。 orz

<a href="http://shimz.me/datavis/gunma/jinkou/index2.html">群馬県　地域別転入・転出数</a>

<h2>きっかけ</h2>
何の気なしにいろいろ見て回っていたときに、国土交通省が出している下記の資料を見つけました。
内容は、2050年までに日本の人口がどの程度減るのかというのを試算したものです。
なかでもとくに「人口規模の小さい地域ほど人口減少率が高くなる傾向」というのが気になって群馬県の人口を調べ始めました。
(人口10万人規模の地域では、約30%現象、人口1万人〜6000人規模の市町村ではおよそ半分まで人口が減るそうです)

<a href="http://shimz.me/blog/wp-content/uploads/2014/03/jinkou201403241.png"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/jinkou201403241-300x227.png" alt="jinkou201403241" width="300" height="227" class="alignnone size-medium wp-image-3448" /></a>

群馬県の人口データについては、「<a href="http://toukei.pref.gunma.jp/">群馬県統計情報提供システム</a>」でダウンロードできるのできます。途中で集計方法が変わっていたりして、いまいち使いづらいデータではあるのですが、勉強がてらいろいろ作ってみているところです。

下記は、群馬県内の2012年1月の人口データで色塗りしたものです。
人口10万人以下の地域を赤で、人口1万人以下の地域を黒く塗っています。
<a href="http://shimz.me/blog/wp-content/uploads/2014/03/jinkou201403242.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/jinkou201403242-300x225.jpg" alt="jinkou201403242" width="300" height="225" class="alignnone size-medium wp-image-3449" /></a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3451</wp:post_id>
		<wp:post_date>2014-03-25 09:45:01</wp:post_date>
		<wp:post_date_gmt>2014-03-25 00:45:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3451</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3452]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427215634;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3760;}i:1;a:1:{s:2:"id";i:3463;}i:2;a:1:{s:2:"id";i:2969;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ストーリーマップが簡単に作成できるサービス「StoryMapJS」</title>
		<link>http://shimz.me/blog/web/3457</link>
		<pubDate>Wed, 26 Mar 2014 03:03:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3457</guid>
		<description></description>
		<content:encoded><![CDATA[ストーリーマップ
<img src="http://shimz.me/blog/wp-content/uploads/2014/03/deabo000008.jpg" alt="StoryMapJS" width="590" height="290" class="aligncenter size-full wp-image-3459" />

エディタ
<img src="http://shimz.me/blog/wp-content/uploads/2014/03/storymapjs20140326.jpg" alt="StoryMapJS" width="590" height="358" class="aligncenter size-full wp-image-3458" />
ストーリーマップを作成できるサービスがあったので紹介します。
今のところβ版で、利用するにはGoogle のアカウントが必要です。

<a href="http://storymap.knightlab.com/">StoryMapJS</a>

住所等で検索し、画像や動画を登録して記事を書くだけで簡単にストーリーマップを作成することができます。

実際にStoryMapJSを使って試しに作ってみたのが以下。

<a href="http://cdn.knightlab.com/libs/storymapjs/latest/embed/?url=https://www.googledrive.com/host/0B7OQLX5U1kUqcVpsekdIWk9JV3M/published.json">example</a>

作成したストーリマップは、iframeを使ってサイトに埋め込むこともできます。


<h2>関連</h2>
<a href="http://shimz.me/blog/google-map-api/3132">流山市のオープンデータを使ってストーリーマップを作ってみた。</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3457</wp:post_id>
		<wp:post_date>2014-03-26 12:03:00</wp:post_date>
		<wp:post_date_gmt>2014-03-26 03:03:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3457</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3459]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426634674;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3141;}i:1;a:1:{s:2:"id";i:3132;}i:2;a:1:{s:2:"id";i:2670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>前橋市には、男子より女子の方が多く住んでいる。</title>
		<link>http://shimz.me/blog/d3-js/3463</link>
		<pubDate>Fri, 28 Mar 2014 12:32:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3463</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/maebashi/population/"><img src="http://shimz.me/blog/wp-content/uploads/2014/03/maebashipopulation2001403028.jpg" alt="前橋市 平成22年男女別・年齢別人口構成" width="590" height="604" class="aligncenter border size-full wp-image-3464" /></a>

<a href="http://shimz.me/datavis/gunma/maebashi/population/">example</a>

男子の人口を、女子の人口が上回る地域が多数。

<h2>概要</h2>
前橋市オープンデータライブラリーにて公開されている「<a href="http://www.city.maebashi.gunma.jp/sisei/499/509/p012146.html">町丁ごとの年齢別人口構成推移</a>」を利用させていただきました。
地域ごとに男性の人口と女性の人口を比較し、色を塗り分けてい表示しています。年齢別（5歳階級）のデータもあったので、各年齢毎に男女の人口を比較することもできます。
こういったデータは、単純に地図の上にプロットしてみるだけでも、なんか面白いですね。
一部、全く同じデータが何個も重複して存在していたり、カラム名が間違っている部分があったりして手こずりましたが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3463</wp:post_id>
		<wp:post_date>2014-03-28 21:32:05</wp:post_date>
		<wp:post_date_gmt>2014-03-28 12:32:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3463</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3464]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427326018;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3350;}i:1;a:1:{s:2:"id";i:3451;}i:2;a:1:{s:2:"id";i:3760;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3Dコロプレスマップ(塗り分け地図)が簡単に作成できる「GeoCanvas」</title>
		<link>http://shimz.me/blog/web/3465</link>
		<pubDate>Thu, 03 Apr 2014 02:03:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3465</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.synthicity.com/geocanvas.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/8934183_orig.png" alt="GeoCanvas" width="590" height="347" class="aligncenter size-full wp-image-3466" /></a>「<a href="http://www.synthicity.com/geocanvas.html">GeoCanvas</a>」は、わずか数ステップで地理空間情報を読み込んで3Dのコロプレスマップを作成できるアプリケーションです。実際の動作については下記動画を。

<iframe width="560" height="315" src="//www.youtube.com/embed/XQNzo11ncSc" frameborder="0" allowfullscreen></iframe>

<h2>使ってみた</h2>

というわけで、とりあえずインストールして使ってみた感想です。
（使用したのはwindows版です）

・動かない端末がある
多分、グラボの関係？　ノートPCでは起動後ログインした直後に落ちて使えませんでした。
【追記】windows8.1アップデート後、グラフィックドライバを更新したら使えるようになりました。

・よく落ちる
データ量の大きなShapeファイルなど読み込むと頻繁に落ちます。

・上手く読み込めない場合がある。
<a href="http://www.naturalearthdata.com/">NaturalEarth</a>のデータはほぼ問題なく読み込めましたが、<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報</a>のShapeファイルは上手く読み込めませんでした。
（文字コードをUTF8、測地系をWGS84に変換することでファイル自体は読み込めたのですが、どうしても属性データが塗り分け対象フィールドとして認識されません。調査中）

そんなわけで、まだまだ不安定なのと、私自身使いこなせていないのですが、非常に面白いアプリケーションだと思うので今後に期待しています。

作ってみた画像(高さ=GDP)
<img src="http://shimz.me/blog/wp-content/uploads/2014/04/img_2014-04-03_10-30-41.png" alt="img_2014-04-03_10-30-41" width="619" height="582" class="alignnone size-full wp-image-3467" />

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3465</wp:post_id>
		<wp:post_date>2014-04-03 11:03:40</wp:post_date>
		<wp:post_date_gmt>2014-04-03 02:03:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3465</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3466]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427322561;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:2942;}i:2;a:1:{s:2:"id";i:2670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Autocomplete] かな入力で名前（漢字）を絞り込むセレクトボックス</title>
		<link>http://shimz.me/blog/javascript/3471</link>
		<pubDate>Wed, 09 Apr 2014 04:31:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3471</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/js/02/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/autocompletekana201404.jpg" alt="autocomplete.kana.js" width="390" height="293" class="alignnone size-full wp-image-3472" /></a>

<a href="http://shimz.me/example/js/02/">example</a>

入力した「ひらがな」を元に名前(漢字)の一覧を絞り込むセレクトボックスが必要になったのですが、なかなか用途に見合うサジェストプラグインがなかったのでjQuery UIのカスタムコンボボックスを改良して作ってみました。

<h2>サンプル</h2>
jQuery, jQuery Uiのライブラリとともに「autocomplete.kana.js」を読み込むんでください。
option要素に設定したdata-kana属性の値で絞り込みを行うコンボボックスを表示します。  
<pre class="lang:xhtml decode:true " title="index.html" >&lt;!doctype html&gt;
&lt;html lang="jp"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;jQuery UI Autocomplete かな絞り込み&lt;/title&gt;
&lt;link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/themes/smoothness/jquery-ui.css" /&gt;
&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"&gt;&lt;/script&gt;

&lt;script src="autocomplete.kana.js"&gt;&lt;/script&gt;


&lt;style&gt;
body {
	font-family: 'Lucida Grande','Hiragino Kaku Gotdic ProN', Meiryo, sans-serif;
	font-size: 62.5%;
}
.custom-combobox {
	position: relative;
	display: inline-block;
}
.custom-combobox-toggle {
	position: absolute;
	top: 0;
	bottom: 0;
	margin-left: -1px;
	padding: 0;
	/* support: IE7 */
	*height: 1.7em;
	*top: 0.1em;
}
.custom-combobox-input {
	margin: 0;
	padding: 0.3em;
}
&lt;/style&gt;
&lt;script&gt;
$(function() {
	//コンボボックス設定
	$( "#combobox" ).combobox();

	//セレクト要素の表示・非表示
	$( "#toggle" ).click(function() {
		$( "#combobox" ).toggle();
	});
});	
&lt;/script&gt;  
  
&lt;/head&gt;
&lt;body&gt;
&lt;form action="test.php" method="post"&gt;	
	&lt;div class="ui-widget"&gt;
		&lt;label&gt;名前を選択してください: &lt;/label&gt;
		&lt;select name="name" id="combobox"&gt;
			&lt;option value="" selected&gt;選択してください&lt;/option&gt;
			&lt;option value="清水" data-kana="しみず"&gt;清水&lt;/option&gt;
			&lt;option value="田中" data-kana="たなか"&gt;田中&lt;/option&gt;
			&lt;option value="鈴木" data-kana="すずき"&gt;鈴木&lt;/option&gt;
			&lt;option value="志村" data-kana="しむら"&gt;志村&lt;/option&gt;
			&lt;option value="佐藤" data-kana="さとう"&gt;佐藤&lt;/option&gt;
		&lt;/select&gt;
	&lt;/div&gt;
	&lt;input type="submit" value="送信"&gt;
&lt;/form&gt; 

&lt;hr&gt;

&lt;button id="toggle"&gt;selectを表示&lt;/button&gt;
 
 
&lt;/body&gt;
&lt;/html&gt;</pre> 

<pre class="lang:js decode:true " title="autocomplete.kana.js" >(function( $ ) {
	$.widget( "custom.combobox", {
		_create: function() {
			this.wrapper = $( "&lt;span&gt;" )
			.addClass( "custom-combobox" )
			.insertAfter( this.element );
			
			this.element.hide();
			this._createAutocomplete();
			this._createShowAllButton();
		},
			
		_createAutocomplete: function() {
			var selected = this.element.children( ":selected" ),
			value = selected.val() ? selected.text() : "";
			
			this.input = $( "&lt;input&gt;" )
				.appendTo( this.wrapper )
				.val( value )
				.attr( "title", "" )
				.addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
				.autocomplete({
					delay: 0,
					minLength: 0,
					source: $.proxy( this, "_source" )
				})
				.tooltip({
					tooltipClass: "ui-state-highlight"
				})
				.keypress(function(e) { //enterキーでのsubmitを抑制
					var c = e.which ? e.which : e.keyCode;
					if (c == 13) { 
						e.preventDefault();
					} 
				});				
			
			this._on( this.input, {
				autocompleteselect: function( event, ui ) {
					ui.item.option.selected = true;
					this._trigger( "select", event, {
						item: ui.item.option
					});
				},
				
				autocompletechange: "_removeIfInvalid"
			});
		},
		
		_createShowAllButton: function() {
			var input = this.input,
			wasOpen = false;
			
			$( "&lt;a&gt;" )
				.attr( "tabIndex", -1 )
				.attr( "title", "Show All Items" )
				.tooltip()
				.appendTo( this.wrapper )
				.button({
					icons: {
						primary: "ui-icon-triangle-1-s"
					},
					text: false
				})
				.removeClass( "ui-corner-all" )
				.addClass( "custom-combobox-toggle ui-corner-right" )
				.mousedown(function() {
					wasOpen = input.autocomplete( "widget" ).is( ":visible" );
				})
				.click(function() {
					input.focus();
					
					// 一覧が表示されているときは非表示に
					if ( wasOpen ) {
						return;
					}
					
					// 全ての値を表示。検索文字として空文字を渡す
					input.autocomplete( "search", "" );
				});
		},
			
		
		_source: function( request, response ) {
			var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex(request.term), "i" ); //前方一致
			response( this.element.children( "option" ).map(function() {
				var kana = $( this ).data('kana');　//かな名を取得
				var text = $( this ).text(); 
				var value = $( this ).val();
				if ( this.value &amp;&amp; ( !request.term || matcher.test(kana) ) ) //入力文字とかな名のマッチ
				return {
					label: text, //一覧表示時の候補ラベル名
					value: value, //値(submitで渡す値)
					option: this
				};
			}) );
		},
			
		_removeIfInvalid: function( event, ui ) {
			
			// 何も選択されていないときは離脱
			if ( ui.item ) {
				return;
			}			
			
			//一致を検索
			var value = this.input.val(),
			valueLowerCase = value.toLowerCase(),
			valid = false;
			this.element.children( "option" ).each(function() {
				//大文字小文字チェック。日本語だと意味がない。かな＝カナチェックに変えても良いかも
				if ( $( this ).text().toLowerCase() === valueLowerCase ) {　
					this.selected = valid = true;
					return false;
				}
			});
			
			//　見つけたら離脱
			if ( valid ) {
				return;
			}
			
			// 見つからなかった時の処理　（無効な値を削除)
			this.input
				.val( "" )
				.attr( "title", "「" +　value + "」に一致する値は見つかりませんでした" )
				.tooltip( "open" );
				this.element.val( "" );
				this._delay(function() {
					this.input.tooltip( "close" ).attr( "title", "" );
				}, 2500 );
			this.input.data( "ui-autocomplete" ).term = "";
		},
		
		_destroy: function() {
			this.wrapper.remove();
			this.element.show();
		}
	});
})( jQuery );

</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3471</wp:post_id>
		<wp:post_date>2014-04-09 13:31:11</wp:post_date>
		<wp:post_date_gmt>2014-04-09 04:31:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3471</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3472]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374510;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2183;}i:1;a:1:{s:2:"id";i:2107;}i:2;a:1:{s:2:"id";i:1167;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーションを用いた実験的な不動産サイト</title>
		<link>http://shimz.me/blog/web/3473</link>
		<pubDate>Wed, 09 Apr 2014 11:50:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3473</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://rosny.nexity.fr/monquartier/#/alentours/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/monquartier.jpg" alt="monquartier" width="590" height="282" class="alignnone border size-full wp-image-3477" /></a>


<a href="http://rosny.nexity.fr/monquartier/#/alentours/">Mon Quartier</a>

フランスの不動産会社が作成しているらしい、データビジュアライゼーションを用いて物件の周辺施設データを可視化した実験サイトです。
「らしい」というのは、フランス語が読めないので詳しい情報がわからないからなのですが orz

美しくデザインされたマップ上に、周辺施設のデータが可視化されています。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/monquartier1.jpg" alt="monquartier" width="590" height="282" class="alignnone border -full wp-image-3474" />

マップ上をクリックすると、クリックした範囲内にどのような施設があるのか、カテゴリごとの件数がグラフとして表示されます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/monquartier2.jpg" alt="monquartier" width="590" height="282" class="alignnone border size-full wp-image-3475" />

また、物件から周辺施設までの到達時間を扇型に表示し、そのなかに含まれる施設数を表示する機能もあります。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/monquartier3.jpg" alt="monquartier" width="590" height="282" class="alignnone border size-full wp-image-3476" />

実用的かわかりませんが、海外の不動産サイトでは、このように物件の情報のみならず周辺の情報を可視化するサービスなどが増えているようです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3473</wp:post_id>
		<wp:post_date>2014-04-09 20:50:42</wp:post_date>
		<wp:post_date_gmt>2014-04-09 11:50:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3473</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3477]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427220105;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3564;}i:1;a:1:{s:2:"id";i:3583;}i:2;a:1:{s:2:"id";i:3286;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬県の地域別転入転出数</title>
		<link>http://shimz.me/blog/d3-js/3482</link>
		<pubDate>Wed, 16 Apr 2014 01:22:17 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3482</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/jinkou/index3.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/deabo000000.jpg" alt="群馬県　地域別転入転出数" width="590" height="322" class="alignnone size-full wp-image-3483" /></a>

<a href="http://shimz.me/datavis/gunma/jinkou/index3.html">example</a>

あいかわらず、<a href="http://toukei.pref.gunma.jp/idj/index.html">群馬県移動人口調査</a>を弄りながらD3.jsの勉強を行っています。

今回はあまり奇をてらわず、各市町村の転入転出数を折れ線グラフとして表示してみました。
勉強の為にいらんアニメーションとかが入ってます。

D3を使って折れ線グラフを描く方法については、下記記事をごらんください。

<a href="http://shimz.me/blog/d3-js/3319">【D3.js】おさらい２回目　線グラフ</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3482</wp:post_id>
		<wp:post_date>2014-04-16 10:22:17</wp:post_date>
		<wp:post_date_gmt>2014-04-16 01:22:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3482</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3483]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426850949;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3451;}i:1;a:1:{s:2:"id";i:3356;}i:2;a:1:{s:2:"id";i:3688;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhoneやiPadで気軽にD3.jsを試せる開発環境「Procoding」</title>
		<link>http://shimz.me/blog/paper-js/3485</link>
		<pubDate>Thu, 17 Apr 2014 02:41:45 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3485</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://itunes.apple.com/app/procoding-coding-with-style/id493549542?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/iDevices_01.png" alt="Procoding" width="400" height="534" class="aligncenter size-full wp-image-3486" /></a>

<a href="https://itunes.apple.com/app/procoding-coding-with-style/id493549542?mt=8&at=10lMp5">Procoding</a>

<a href="http://processingjs.org/">Processing.js</a>や<a href="http://paperjs.org/">Paper.js</a>などのグラフィックライブラリを利用したプログラミングを気軽に行えるアプリ「Prociding」が、バージョンアップして<a href="">D3.js</a>にも対応しました。

Procodingは、エディタとプレビュー機能を備えた開発環境です。
エディタには構文強調表示、自動補完などの機能が備わっており、常時JSHintによってシンタックスのチェックが行われます。プレビュー画面にはエラーコンソールついているので、エラーを確認するのも簡単です。
これでDOMの状態を確認できる機能などがあればかなり便利なのですが、残念ながら今のところありません。

手軽にiPhoneを使ってD3.jsプログラミングが楽しめるのでお勧めです。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3485</wp:post_id>
		<wp:post_date>2014-04-17 11:41:45</wp:post_date>
		<wp:post_date_gmt>2014-04-17 02:41:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3485</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3486]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427330087;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1561;}i:1;a:1:{s:2:"id";i:3279;}i:2;a:1:{s:2:"id";i:3035;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】隣接する区画を表示する</title>
		<link>http://shimz.me/blog/d3-js/3489</link>
		<pubDate>Fri, 18 Apr 2014 07:25:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3489</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/neighbors201404182.jpg" alt="隣接市区町村表示" width="590" height="359" class="aligncenter size-full wp-image-3490" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/01/">example</a>

こちらの<a href="http://bl.ocks.org/mbostock/8814734">サンプル</a>を見て日本地図版を作ってみました。
マウスオーバーした市に隣接する市区町村がオレンジ色で表示されます。

<h2>サンプル</h2>
ポリゴン数の少ないデータの方が内容を理解しやすいので、都道府県版のサンプルコードを載せておきます。
<a href="http://shimz.me/example/d3js/geo_example3/02/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/neighbors201404181.jpg" alt="隣接都道府県表示" width="590" height="515" class="aligncenter size-full wp-image-3491" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/02/">example</a>

D3とともにTopojsonライブラリ(ver.1以上)を読み込んでください。
 
<pre class="lang:xhtml decode:true " >&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
&lt;script src="http://d3js.org/topojson.v1.min.js"&gt;&lt;/script&gt;
</pre> 
 
<pre class="lang:js decode:true " >d3.json("ken.topojson", function(json) {
	draw(json);
});


function draw(json){
	//geoデータ
	var geodata = json.objects.ken;
	
	//geometrieから隣接するパスのインデックス情報を取得
	var neighbors = topojson.neighbors(geodata.geometries);

	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(2000)	//スケール（ズーム）の指定
		.translate([500,450]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター

	var svg = d3.select("svg");
		
	//地図描画
	var map = svg.append("g")
		.attr("class", "land")
		.selectAll("path")
		.data(topojson.feature(json, geodata).features)
	    .enter().append("path")
		.attr("d", path)
		.attr("stroke", "red")

	map.each(function(d, i) {
			//隣接するパスのインデックス情報を取得元に、データに隣接パスへの参照を追加
			d.neighbors = d3.selectAll(
				neighbors[i].map(function(j) {
					return map[0][j];
				})
			);
		})
		.on("mouseover", function(d) {
			//d.neighbors &lt;- 隣接するパスへの参照
			d.neighbors.classed("neighbor", true);
		})
		.on("mouseout", function(d) {
			d.neighbors.classed("neighbor", false);
		});
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3489</wp:post_id>
		<wp:post_date>2014-04-18 16:25:50</wp:post_date>
		<wp:post_date_gmt>2014-04-18 07:25:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3489</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3490]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427400503;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2881;}i:1;a:1:{s:2:"id";i:2351;}i:2;a:1:{s:2:"id";i:2631;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>361</wp:comment_id>
			<wp:comment_author><![CDATA[D3.js | 今きになった事]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://trend.value-s.com/?p=3173</wp:comment_author_url>
			<wp:comment_author_IP>202.172.28.178</wp:comment_author_IP>
			<wp:comment_date>2014-10-28 23:15:53</wp:comment_date>
			<wp:comment_date_gmt>2014-10-28 14:15:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【D3.js】隣接する区画を表示する | GUNMA GIS GEEK [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414505753.649610996246337890625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414541678.327435016632080078125;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>ガルディアンズにハマってます。(サービス終了となりました)</title>
		<link>http://shimz.me/blog/other/3493</link>
		<pubDate>Sun, 20 Apr 2014 15:44:06 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3493</guid>
		<description></description>
		<content:encoded><![CDATA[【追記】2014/11/26をもってサービス終了となるそうです。残念。

<hr />


<a href="http://www.gardians.info/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/gardians.png" alt="gardians" width="590" height="332" class="aligncenter size-full wp-image-3494" /></a>


<a href="http://www.gardians.info/">GARDIANS ガルディアンズ</a>

「ガルディアンズ」というゲームにハマっています。
タワーディフェンスゲームにシュミレーションRPGの育成要素付け加えたような内容で、結構マゾいゲームです。
マップを攻略すると武器が手に入り、付加効果（攻撃速度+1など）がランダムに付くため、よりよい付加効果が付いた武器を求めて繰り返し何度もプレイしてしまう、中毒性の高いあぶないゲームだったりしますｗ

しばらく遊んでいると思うので、もしプレイしている方がいらっしゃいましたら、フレンド登録よろしくお願いします。

ID: 124280  

（フレンドになるとゲームプレイ時に相手のキャラクター（タワー）を連れていくことができます）

【参照】
<iframe width="560" height="315" src="//www.youtube.com/embed/kZRnFvjzndo" frameborder="0" allowfullscreen></iframe>

<a href="http://matome.naver.jp/odai/2138303672950060101">【クエスト攻略追加】ガチなタワーディフェンスRPG「ガルディアンズ」をやってみた</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3493</wp:post_id>
		<wp:post_date>2014-04-21 00:44:06</wp:post_date>
		<wp:post_date_gmt>2014-04-20 15:44:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3493</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3495]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427407125;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3967;}i:1;a:1:{s:2:"id";i:2570;}i:2;a:1:{s:2:"id";i:3979;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上に平成26年高崎市の公示地価(GeoJSONデータ)を表示する</title>
		<link>http://shimz.me/blog/map/3496</link>
		<pubDate>Mon, 21 Apr 2014 01:24:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3496</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/takasaki/H26landprice/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/deabo000011.jpg" alt="高崎市　平成26年地価公示" width="509" height="366" class="aligncenter size-full wp-image-3497" /></a>

<a href="http://shimz.me/datavis/gunma/takasaki/H26landprice/">example</a>

Google Maps APIでサポートされたGeoJSON表示機能を使って、高崎市の公示地価を地図上にプロットしてみました。（一部、D3.jsを使用しています）
赤いサークルが前年度よりプラスになった場所です。
「高崎パブリックセンター」予定地周辺の地価がやはり上がっているようです。


【参照】
<a href="http://shimz.me/blog/google-map-api/3445">Google Map上にGeoJSONデータを表示する </a>

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >google.maps.event.addDomListener(window, 'load', function() {
	//ツールチップ要素を追加
	var tooltip = d3.select("body")
		.append("div")
		.attr("class", "tooltip")
		.style("position", "absolute")
		.style("z-index", "999999")
		.style("visibility", "hidden")

	
	//Google Maps初期化
	var map = new google.maps.Map(document.getElementById('map-canvas'), {
		center: { lat: 36.322356, lng: 139.013057 },
		zoom: 13,
		mapTypeId: google.maps.MapTypeId.TERRAIN,
		disableDefaultUI: true
	});

	
	//マーカーのスタイルを指定
	var styleFeature =　function(max){
		//正規化関数
		var rScale = d3.scale.sqrt().domain([0, max]).range([0, 20]);
		return 	function(feature) {
			
			var color = function(){
				if(/△/.test(feature.getProperty('対前年変動率'))){
					return 'gray'  //前年度より下がった地域
				}else if(feature.getProperty('対前年変動率') == 0){
					return 'white' //変動なし
				}else{
					return 'red' //前年度より上がった地域
				}
			};
			
			return {
				icon: {	//iconのスタイル指定
					path: google.maps.SymbolPath.CIRCLE,
					scale:  rScale(+feature.getProperty('価格')),
					fillColor: color(),
					fillOpacity: 0.9,
					strokeColor: "black",
					strokeWeight: 3
				}
			};
		};		
	}

	//ストリートビュー初期化
	var streetViewDiv = document.getElementById("streetview");
	var stOptions = {
		pov: {
			heading: 00,
			pitch: 0,
			zoom: 2
		}
	};
	//ストリートビューオブジェクトの生成
	var streetViewPanorama = new google.maps.StreetViewPanorama(streetViewDiv, stOptions);
	var streetViewService = new google.maps.StreetViewService();
	
	//GeoJSONデータ読み込み
	d3.json('landprice.geojson', function(data) {		
		//データレイヤーに追加
		map.data.addGeoJson(data);
		
		//価格の最大値取得
		var max = d3.max(data.features, function(d){ return +d.properties['価格'] })

		//データレイヤのスタイルを指定
		map.data.setStyle(styleFeature(max));
		
		//イベント設定
		map.data.addListener('click', mouseClick);
		map.data.addListener('mouseover', mouseOmover);
		map.data.addListener('mouseout', mouseOut);		
	});
	
	function mouseClick(e) {
		//features-&gt;propertiesのaddressデータをクリック時に表示する
		showStreetView(e.feature.getGeometry().get());
	}
	
	function mouseOmover(e){
		//ツールチップを表示
		tooltip.style("visibility", "visible");
		var content = "&lt;center&gt;"+e.feature.getProperty('住所');
			content += "&lt;p&gt;価格:"+addFigure(e.feature.getProperty('価格'))+"&lt;/p&gt;";
			content += "&lt;p&gt;対前年変動率:"+e.feature.getProperty('対前年変動率')+"&lt;/p&gt;";
			content +="&lt;/center&gt;";
			
			content += "&lt;ul&gt;";
			content += "&lt;li&gt;標準地番号:"+e.feature.getProperty('標準地番号')+"&lt;/li&gt;";
			content += "&lt;li&gt;地積:"+e.feature.getProperty('地積')+"&lt;/li&gt;";
			content += "&lt;li&gt;形状:"+e.feature.getProperty('形状')+"&lt;/li&gt;";
			
		tooltip
		 .style("top", (e.Va.pageY-10)+"px")
		 .style("left",(e.Va.pageX+10)+"px")
		 .html(content);
	}
	
	function mouseOut(e) {
		//ツールチップを非表示
		tooltip.style("visibility", "hidden");
	}
	

	
	//ストリートビューを表示
	function showStreetView(latlng){
		//var latlng = new google.maps.LatLng(d['緯度'], d['経度']);
		streetViewPanorama.setVisible(false);
		streetViewService.getPanoramaByLocation(latlng, 50, function(status){
			if(status){
				streetViewPanorama.setPosition(latlng);
				streetViewPanorama.setVisible(true);
			}else{
				alert("StreetView 非対応エリアです");
			};    
		});
	}	
 
	function addFigure(d){
		return String(d).replace( /(\d)(?=(\d\d\d)+(?!\d))/g, '$1,' ) + "円";
	}
});</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3496</wp:post_id>
		<wp:post_date>2014-04-21 10:24:49</wp:post_date>
		<wp:post_date_gmt>2014-04-21 01:24:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3496</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3497]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388240;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3984;}i:1;a:1:{s:2:"id";i:3824;}i:2;a:1:{s:2:"id";i:2151;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】隣接区の数で地図に色塗りをしてみました。</title>
		<link>http://shimz.me/blog/d3-js/3498</link>
		<pubDate>Thu, 24 Apr 2014 11:24:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3498</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/01/index2.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/neighborscolor.jpg" alt="neighborscolor" width="490" height="491" class="aligncenter size-full wp-image-3499" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/01/index2.html">example</a>

<a href="http://shimz.me/blog/d3-js/3489">隣接する区画を表示する</a>の続きです。
隣接するエリア数を元にコロプレス図をつくってみました。
ついでに、ズーム機能（エリアをクリックするとズームします）と隣接区数ランキングも表示してみました。

topoJSONプラグインには、neighborsメソッド以外にも地形データから様々な情報をとりだしたり、ポリゴンをマージしたりする機能があるようなので、なんとか使いこなしたいです。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3498</wp:post_id>
		<wp:post_date>2014-04-24 20:24:55</wp:post_date>
		<wp:post_date_gmt>2014-04-24 11:24:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3498</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3499]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373159;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3230;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:2575;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsでサクッとFizzBuzzを可視化する</title>
		<link>http://shimz.me/blog/d3-js/3501</link>
		<pubDate>Sat, 26 Apr 2014 10:00:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3501</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/fizzbuzz/"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/fizzbuzztable.jpg" alt="fizzbuzztable" width="415" height="252" class="aligncenter size-full wp-image-3502" /></a>

<a href="http://shimz.me/example/d3js/fizzbuzz/">example</a>

D3.jsを使って、FizzBuzzの結果をテーブルで表示します。
DOMにデータを束縛するD3の機能を使うと非常に簡単に作成することができます。

<h2>サンプルコード</h2> 
<pre class="lang:js mark:36 decode:true " >(function(){
	var START = 1,END = 100;


	var FizzBuzz = function(num){
		if(num%15==0) return 'FizzBuzz';
		if(num%5==0) return 'Buzz';
		if(num%3==0) return 'Fizz';
		return num;   
	}

	//fizz buzz リスト作成
	var list = d3.range(START,END+1).map(FizzBuzz);



	//リストを10個づつの配列に分割
	var fbDataSet = [];
	for(var i=0; i < END; i+=10){
		fbDataSet.push( list.slice(i, i+10) );
	}



	//table要素作成
	var table = d3.select('body').append('table');

	//tr要素作成
	var tr = table.selectAll('tr')
		.data(fbDataSet)
		.enter()
		.append('tr');

	//td要素作成
	var td = tr.selectAll('td')
		.data(function(d){ return d }) //今回のポイント
		.enter()
		.append('td')
		.attr({
			class:function(d){ 
				return (typeof d=='string') ? d : null;
			}
		})
		.text(function(d){ return d } );

})();</pre> 

<h2>解説</h2>
ちょっとだけ解説
<h3>FizzBuzz配列を作る</h3>
 <pre class="lang:js decode:true " >var START = 1,END = 100;

var FizzBuzz = function(num){
	if(num%15==0) return 'FizzBuzz';
	if(num%5==0) return 'Buzz';
	if(num%3==0) return 'Fizz';
	return num;   
}

var list = d3.range(START,END+1).map(FizzBuzz);
</pre> 
d3.rangeは等差数列を含むリストを生成します。d3.range(1, 100)を実行すると以下の配列が生成されます。
<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, …… 99]</code>
２番目の引数は要素数の指定なので、1〜100までの数列を作りたいときは+1します。
生成した配列にmapメソッドを用いてFizzBuzz関数を適用します。実行結果が以下のようになります。
<code>[1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, …… "Buzz"]</code>
<h3>配列を分割してデータセットを作る</h3>
 <pre class="lang:js decode:true " >var fbDataSet = [];
for(var i=0; i &lt; END; i+=10){
	fbDataSet.push( list.slice(i, i+10) );
}
</pre> 
作成したFizzBuzz配列を１０個づつに分割して２次元配列のデータセットを作成します。
<code>[
    [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz"],
    [11, "Fizz", 13, 14, "FizzBuzz", 16, 17, "Fizz", 19, "Buzz"],
    (中略)
    [91, 92, "Fizz", 94, "Buzz", "Fizz", 97, 98, "Fizz", "Buzz"]
]
</code>
<h3>テーブルを作成する</h3>
body要素の中にtable要素を追加します。
 
<pre class="lang:js decode:true " >var table = d3.select('body').append('table');
</pre> 

データセットを元にtr要素を追加します。
 
<pre class="lang:js decode:true " >var tr = table.selectAll('tr')
	.data(fbDataSet)
	.enter()
	.append('tr');
</pre> 
この段階でブラウザの開発者ツールを使いDOMの状態を覗いてみると、以下のようにTR要素が追加されているのがわかります。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/d3fizzbuzztable1.jpg" alt="d3fizzbuzztable" width="166" height="173" class="alignnone size-full wp-image-3503" />

戻り値を収めている変数trには、追加した要素のオブジェクトが入っています。

d3.select('tr')で中身を覗いていると__data__プロパティにデータセットが束縛されているのがみてとれます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/d3fizzbuzztable2.jpg" alt="d3fizzbuzztable2" width="245" height="216" class="alignnone size-full wp-image-3504" />

<h3>tdを追加する</h3>
今回のポイント、td要素を追加します。
<pre class="lang:js decode:true " >var td = tr.selectAll('td')
	.data(function(d){ return d }) 
	.enter()
	.append('td')
	.attr({
		class:function(d){ 
			return (typeof d=='string') ? d : null;
		}
	})
	.text(function(d){ return d } );
</pre> 

D3になれていないと混乱するのが以下の部分。
<code>tr.selectAll('td')
    .data(function(d){ return d }) 
    .enter()
    .append('td')
</code>
dataメソッドにコールバックを設定し、引数をreturnでそのまま返しています。
これが何をやっているのかというと、親要素(tr)に束縛されたデータセットがコールバックの引数として渡されるので、それをそのまま戻り値としてdataメソッドに渡すことでtd要素を各tr要素の配下に追加しています。
引数に何が渡されているかを見るために、returnの前にconsole.logを追加して中身を見てみるとわかりやすいです。
<code>tr.selectAll('td').data(function(d){ console.log(d); return d })
> [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz"] 
> [11, "Fizz", 13, 14, "FizzBuzz", 16, 17, "Fizz", 19, "Buzz"] 
> ["Fizz", 22, 23, "Fizz", "Buzz", 26, "Fizz", 28, 29, "FizzBuzz"] 
(中略)
> [91, 92, "Fizz", 94, "Buzz", "Fizz", 97, 98, "Fizz", "Buzz"] 
</code>
この段階でDOMの状態を覗いてみるとtd要素が追加されているのが分かります。
<img src="http://shimz.me/blog/wp-content/uploads/2014/04/d3fizzbuzztable4.jpg" alt="d3fizzbuzztable4" width="179" height="368" class="alignnone size-full wp-image-3506" />

残りの構文(attrとtext)では、tdに渡されたデータが文字列("Fizz"や"Buzz"、"FizzBuzz")だった場合、tdのcalss属性として設定し、テキスト要素を追加しています。
最終的な出力は以下のようになります。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/d3fizzbuzztable5.jpg" alt="d3fizzbuzztable" width="348" height="386" class="alignnone size-full wp-image-3507" />


「dataメソッドのコールバックの引数に、要素に束縛されているデータセットが渡される」というD3の機能を使うと、メンドウな処理も結構簡単に作成することができます。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3501</wp:post_id>
		<wp:post_date>2014-04-26 19:00:33</wp:post_date>
		<wp:post_date_gmt>2014-04-26 10:00:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3501</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3502]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427316357;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2614;}i:1;a:1:{s:2:"id";i:3743;}i:2;a:1:{s:2:"id";i:3319;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>コロプレス図(塗り分け地図)を作成する際に適したカラーセットを取得できる「ColorBrewer」</title>
		<link>http://shimz.me/blog/web/3509</link>
		<pubDate>Wed, 30 Apr 2014 04:02:46 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3509</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://colorbrewer2.org/#"><img src="http://shimz.me/blog/wp-content/uploads/2014/04/COLORBREWER1.jpg" alt="COLORBREWER" width="590" height="416" class="aligncenter size-full wp-image-3511" /></a>

<a href="http://colorbrewer2.org/#">ColorBrewer</a>

地図上をデータの値に合わせて塗り分けていくのをコロプレス図と言いますが、この際「どんな色で塗り分けたら見やすいか」というのが難しい問題になります。
ColorBrewerでは、この「塗り分けるのに見やすいカラーセット」を提供してくれます。

左側のコンソールから、塗り分ける色数とカラーセットを選択するだけでプレビュー画面に表示されるので、実際に見て確認することができます。
また、オプションでは地図上にラベルを表示したり、道路情報などを重ねることができるので、そういった情報を含めた上での見やすさなども確認することができます。

また、ちょっと分かりづらいですが「Download」のリンクをクリックすることでカラーセットをダウンロードできます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/COLORBREWER2.jpg" alt="COLORBREWER2" width="458" height="58" class="alignnone size-full wp-image-3512" />

CSSやJSONなど、様々なファイル形式でカラーセットをダウンロードできます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/04/COLORBREWER3.jpg" alt="COLORBREWER3" width="553" height="297" class="alignnone size-full wp-image-3513" />

例）<a href="http://shimz.me/example/d3js/geo_example3/01/colorbrewer.js">JavaScript variable形式のカラーセット</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3509</wp:post_id>
		<wp:post_date>2014-04-30 13:02:46</wp:post_date>
		<wp:post_date_gmt>2014-04-30 04:02:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3509</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3511]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427316388;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3853;}i:1;a:1:{s:2:"id";i:2670;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CodeGrid二周年記念パーティーでLTしてきました。</title>
		<link>http://shimz.me/blog/other/3515</link>
		<pubDate>Fri, 09 May 2014 01:25:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3515</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/05/codegrid2th.png" alt="codegrid2th" width="280" height="280" class="aligncenter size-full wp-image-3516" />

<a href="http://www.zusaar.com/event/5117005">CodeGrid二周年記念パーティー on Zusaar</a>

行ってきました。
Ｔシャツ目当てで、LTもしてきました。

例によって「D3.js」に関する内容です。
５分間のLTだったので、技術的な内容はほぼなくしてD3.jsというライブラリの紹介に徹してみました。

個人的には、「日本でも最近D3の注目度が上がってきているけど、Chartライブラリと思われているので『ちょっと、そういうのとは系統が違うライブラリですよ』という話をしよう！と考えたのですが……なんとなく「D3の注目度が上がっている」というのは錯覚だったかも、と思ったり、思わなかったりｗ

単に、自分がしょっちゅう「D3」の情報を探し回っているから、目につくだけでそうでもないのかもなんてことも感じました。
まだまだ、やはりマイナーなライブラリですな。

もうすこし、「そもそもD3とは何か」という内容にした方がよかったかも。

なるべく文字を少なめにしてみた結果、喋って補った部分が多いので、スライドだけ見ても何を言っているのか分かりづらいかもしれませんが、一応LTで使ったスライドをＵＰしておきます。

<a href="http://shimz.me/slide/codegrid/">スライド</a>



しかし……やはり、群馬から東京は遠い。行って帰ってきたら夜中の２時でした orz

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3515</wp:post_id>
		<wp:post_date>2014-05-09 10:25:29</wp:post_date>
		<wp:post_date_gmt>2014-05-09 01:25:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3515</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3516]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427394606;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3362;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:2969;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 LeafletにSVGをオーバーレイする。</title>
		<link>http://shimz.me/blog/d3-js/3517</link>
		<pubDate>Wed, 14 May 2014 04:39:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3517</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://leafletjs.com/">Leaflet</a>は、モバイルフレンドリーでインタラクティブな地図をWeb上に表示するJavaScriptライブラリです。最近、海外での存在感が高まっているような気がします。

今回は、D3で作成したsvg要素をLeaflet上にオーバーレイしてみました。
(まだ、ソースのコメントに書いたこと以上の知識がないので、サンプルコードのみで詳しい解説はありません)

<h2>サンプル</h2>
D3.jsとともにLeaflet.jsとleaflet.cssを読み込んでください。
 
<pre class="lang:xhtml decode:true " >&lt;link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css"/&gt;
&lt;script src="http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
&lt;script src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js"&gt;&lt;/script&gt;</pre> 



<h3>ポイント情報を表示する</h3>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/leaflet/point/"></iframe>

 
<pre class="lang:js decode:true " > 
//Leaflet初期設定
var map = L.map('map').setView([36.3219088　　, 139.0032936], 12);
var mapLink = '&lt;a href="http://portal.cyberjapan.jp/help/termsofuse.html"&gt;国土地理院 地理院地図 標準地図&lt;/a&gt;';

//Leafletに用意されたsvgを使う 
map._initPathRoot();

//Tile Map Serviceの指定    
L.tileLayer(
		'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {
		attribution: '&amp;copy; ' + mapLink + ' Contributors',
		maxZoom: 18,
	}).addTo(map);

	
// svg要素を選択
var svg = d3.select("#map").select("svg");
var g = svg.append("g");

d3.json("landprice.geojson", function(point){

	
	//元データにLeafletのLatLngobjを追加
	point.features.forEach(function(d){
		d.LatLngObj = new L.LatLng(d.geometry.coordinates[1], d.geometry.coordinates[0]);
	});
	

	//サークル要素を追加
	var circle = g.selectAll("circle")
		.data(point.features)
		.enter()
		.append("circle")
			.attr({
				"stroke": "black",
				"stroke-width": 2,
				"opacity": .7,
				"fill": "red",
				"r": 10
			});  



	map.on("viewreset", update);

	update();


	function update() {
		//サークル要素の位置をアップデーと
		circle.attr("transform", function(d) {
			return "translate("+ 
			map.latLngToLayerPoint(d.LatLngObj).x +","+ 
			map.latLngToLayerPoint(d.LatLngObj).y +")";
		});
	} 

});</pre> 

<h3>ポリンゴンを表示する</h3>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/leaflet/polygon/"></iframe>
 
<pre class="lang:js decode:true " >
d3.json("ken.geojson", function(json) {
	mapdraw(json)
});


function mapdraw(json){

	//地形データ取得	
	if (json.type === "Topology"){
		//読み込みファイルがtopojsonの場合(json.objects.△△)　「△△」は変換時のgeojsonファイル名に合わせる
		var geojson = topojson.feature(json, json.objects.ken)
	} else {
		var geojson = json;		
	}


	//Leaflet初期設定
	var map = L.map('map').setView([39.702053　, 141.15448379999998], 5);
	var mapLink = '<a target="_blank" href="http://portal.cyberjapan.jp/help/termsofuse.html">国土地理院 地理院地図 標準地図</a>';
	
	//Tile Map Serviceの指定
	L.tileLayer(
			'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {
			attribution: '&copy; ' + mapLink + ' Contributors',
			maxZoom: 18,
		}).addTo(map);
	
	
	//Leafletに用意されたsvgを使う 
	map._initPathRoot();	
		
	// svg要素を選択
	var svg = d3.select("#map").select("svg");
	var g = svg.append("g");

	//緯度経度->パスジェネレーター関数作成
	var transform = d3.geo.transform({point: projectPoint});
	var path = d3.geo.path().projection(transform);
 
	featureElement = g.selectAll("path")
		.data(geojson.features)
		.enter()
		.append("path")
		.attr({
			"stroke": "red",
			"fill": "green",
			"fill-opacity": 0.4
		});

	map.on("viewreset", update);

	update();

	//pathのd属性を更新
	function update() {		
		featureElement.attr("d", path);
	} 

	//位置→座標変換
	function projectPoint(x, y) {
		var point = map.latLngToLayerPoint(new L.LatLng(y, x));
		this.stream.point(point.x, point.y);
	}

}
 </pre> 

<h2>参考</h2>

<a href="http://bost.ocks.org/mike/leaflet/">D3 + Leaflet</a> Mike Bostock氏によるチュートリアル

参考書
<a href="https://leanpub.com/leaflet-tips-and-tricks"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/LtANDt.png" alt="Leaflet Tips and Tricks" width="192" height="270" class="alignnone size-full wp-image-3518" /></a>

<h2>関連記事</h2>
<a href="http://shimz.me/blog/d3-js/2379">【D3.js】Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</a>
<a href="http://shimz.me/blog/d3-js/2831">【D3.js】OpenLayers上にD3.jsで作成したSVGをオーバーレイ</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3517</wp:post_id>
		<wp:post_date>2014-05-14 13:39:25</wp:post_date>
		<wp:post_date_gmt>2014-05-14 04:39:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3517</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3519]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427382844;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3134;}i:1;a:1:{s:2:"id";i:3521;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上にオーバーレイしたSVG要素にドロップシャドウを付ける</title>
		<link>http://shimz.me/blog/d3-js/3521</link>
		<pubDate>Thu, 15 May 2014 01:19:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3521</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/d3-js/3517">昨日の記事</a>でLeafletで作成した地図上にSVGをオーバーレイしましたが、地図タイルとの相性によっては上に重ねたSVG要素が分かりづらい場合があります。
そこで、SVGのfilter機能を用いてドロップシャドウエフェクトをかけることで、オーバーレイした要素を目立たせてみました。


<h2>比較</h2>
ノーマル
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/leaflet/polygon/"></iframe>

ドロップシャドウ付加
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/d3js/leaflet/polygon/shadow.html"></iframe>

<h2>サンプルコード</h2>
 
 
<pre class="lang:js mark:16-46,59 decode:true " >
//Leaflet初期設定
var map = L.map('map').setView([39.702053　, 141.15448379999998], 5);
var mapLink = '&lt;a target="_blank" href="http://portal.cyberjapan.jp/help/termsofuse.html"&gt;国土地理院 地理院地図 標準地図&lt;/a&gt;';

//Tile Map Serviceの指定
L.tileLayer(
		'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {
		attribution: '&amp;copy; ' + mapLink + ' Contributors',
		maxZoom: 18,
	}).addTo(map);

	
// Leafletのoverlay paneにsvg要素を追加
var svg = d3.select(map.getPanes().overlayPane).append("svg");

//フィルター要素の追加
var filter = svg.append("defs").append('filter')
	.attr({
		"id": "drop-shadow",
		"width": "150%",
		"height": "150%"
	});

//ガウス(ぼかし)フィルターを追加
filter.append('feGaussianBlur')
	.attr({
		"in": "SourceAlpha",
		"result": "blur",
		"stdDeviation": "2"
	});

//平面移動フィルターを追加
filter.append('feOffset')
	.attr({
		"result": "offsetBlur",
		"dx": 4,
		"dy": 4
	})

//上記２つのエフェクトをブレンド(マージ)するフィルターを追加
filter.append('feBlend')
	.attr({
		"in": "SourceGraphic",
		"in2": "offsetBlur",
		"mode": "normal"
	});
	
var g = svg.append("g").attr("class", "leaflet-zoom-hide");

d3.json("ken.geojson", function(geojson) {
  
	var transform = d3.geo.transform({point: projectPoint});
	var path = d3.geo.path().projection(transform);
 
	d3_features = g.selectAll("path")
		.data(geojson.features)
		.enter()
		.append("path")
		.attr("filter", "url(#drop-shadow)"); //svg filterを指定

	map.on("viewreset", update);

	update();

	//SVG要素をleafletのマップレイヤーにフィットさせる
	function update() {
		
		var bounds = path.bounds(geojson);
	
		var topLeft = bounds[0];
		var bottomRight = bounds[1];
	
		svg .attr({
				"width": bottomRight[0] - topLeft[0],
				"height": bottomRight[1] - topLeft[1]
			})
			.style({
				"left": topLeft[0] + "px",
				"top": topLeft[1] + "px"
			})
	
		g .attr("transform", "translate(" + -topLeft[0] + "," + -topLeft[1] + ")");
	
		// path要素（地形)追加 
		d3_features.attr("d", path)
			.attr({
				"fill-opacity": 0.4,
				"fill": "green",
				"stroke": "red"
			});
	} 

	//位置→座標変換
	function projectPoint(x, y) {
		var point = map.latLngToLayerPoint(new L.LatLng(y, x));
		this.stream.point(point.x, point.y);
	}

})
 </pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3521</wp:post_id>
		<wp:post_date>2014-05-15 10:19:32</wp:post_date>
		<wp:post_date_gmt>2014-05-15 01:19:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3521</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3522]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369962;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3517;}i:1;a:1:{s:2:"id";i:3134;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】各県の境界線ボックスを描画する</title>
		<link>http://shimz.me/blog/d3-js/3524</link>
		<pubDate>Tue, 20 May 2014 01:39:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3524</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/03/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/bounds20140520.jpg" alt="Bounds BOX" width="590" height="316" class="alignnone size-full wp-image-3525" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/03/">example</a>

各県が収まるサイズのBOXを描画します。

<h2>サンプル</h2>
  
<pre class="lang:css decode:true " >.elmenthover {
	stroke: blue;
	stroke-width:3;
	fill: blue;
}

.tooltip {
  border: 1px solid black;
  background-color: white;
  padding: 5px 8px 4px 8px;
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}	</pre> 

<pre class="lang:js decode:true " >d3.json("japan.topojson", function(json){
	d3draw(json);
});

function d3draw(json) {

	//ツールチップ要素の追加
	var tooltip = d3.select("body")
		.append("div")
		.attr("class", "tooltip")
		.style("position", "absolute")
		.style("z-index", "10")
		.style("visibility", "hidden");
		
	
	var geodata = json.objects.japan;
	var feature = topojson.feature(json, geodata).features;

	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(2000)	//スケール（ズーム）の指定
		.translate([500 , 500]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター
	
	
	var svg = d3.select('svg');

	//地形の描画
	var land = svg.selectAll('.land')
		.data(feature)
		.enter()
		.append('path')
		.attr({
			"class": function(d){ return d.properties.PREF },
			"d": path,
			"stroke": "white",
			"fill": "#ccc"
		});

	//境界情報の取得
	var drawBounds = function(d){
			var b = path.bounds(d);
			return "M" + b[0] + "H" + b[1][0] + "V" + b[1][1] + "H" + b[0][0] + "Z";
		}

	//境界BOXの描画
	var bounds = svg.selectAll('.bounds')
		.data(feature)
		.enter()
		.append('path')
		.attr({
			"class": function(d){ return d.properties.PREF },
			"d": drawBounds,
			"stroke": "red",
			"fill-opacity": 0
		})
		.on("mouseover", function(d) {
			tooltip.style("visibility", "visible");
			currentClass = d3.select(this).attr("class");
			d3.selectAll("."+currentClass).classed("elmenthover", true);
		})
		.on("mouseout", function(d) {
			tooltip.style("visibility", "hidden");		
			d3.selectAll("path").classed("elmenthover", false);			
		})
		.on("mousemove", function(d){
			var content = "&lt;center&gt;"+d.properties.PREF+"&lt;/center&gt;&lt;br/&gt;";
			tooltip
			 .style("top", (d3.event.pageY-10)+"px")
			 .style("left",(d3.event.pageX+10)+"px")
			 .html(content);
		});

	
	//ズームイベント設定    
	var zoom = d3.behavior.zoom().on('zoom', function(){
	   projection.scale(3000 * d3.event.scale);       
	   land.attr('d', path);       
	   bounds.attr('d', drawBounds); 
	});
	svg.call(zoom);	 
		
	//ドラッグイベント設定
	var drag = d3.behavior.drag().on('drag', function(){
		   var tl = projection.translate();
			projection.translate([tl[0] + d3.event.dx, tl[1] + d3.event.dy]);
			land.attr('d', path);       
			bounds.attr('d', drawBounds);       
		});
	svg.call(drag);

		
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3524</wp:post_id>
		<wp:post_date>2014-05-20 10:39:26</wp:post_date>
		<wp:post_date_gmt>2014-05-20 01:39:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3524</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3525]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395912;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3548;}i:1;a:1:{s:2:"id";i:3489;}i:2;a:1:{s:2:"id";i:3025;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Canvasを使ってWebカメラで動体検知を行う</title>
		<link>http://shimz.me/blog/canvas/3528</link>
		<pubDate>Fri, 23 May 2014 00:17:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3528</guid>
		<description></description>
		<content:encoded><![CDATA[しばらくこぶさたしていた<a href="http://www.html5.jp/canvas/">Canvas</a>の勉強を再開しました。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51luXD8O5sL._SL160_.jpg" alt="HTML5+JavaScriptによる画像・動画像処理入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5+JavaScriptによる画像・動画像処理入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.05.23</div></div><div class="amazlet-detail">松田 晃一 <br />カットシステム <br />売り上げランキング: 366,088<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

上記参考書を読みながら、作ってみたものが以下。

<h2>例</h2>
canvasを使ってwebカメラの映像から「動体（動いているもの）」を検出します。（「動体検出開始」ボタンを押して、カメラの前で激しく動くと背景色が赤く点滅します）

点滅するライトなんかが写っていると、それも「動いているもの」として検出してしまいます。

Chromeでしか動作確認してません。

<a href="http://shimz.me/example/canvas/MotionDetection/">example</a>


上記参考書は、Canvasの基本から、エッジ検出、ノイズ除去などの画像処理や動画処理について詳しい内容となっているので、興味のある方にお勧めです。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3528</wp:post_id>
		<wp:post_date>2014-05-23 09:17:05</wp:post_date>
		<wp:post_date_gmt>2014-05-23 00:17:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3528</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3529]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427399816;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3058;}i:1;a:1:{s:2:"id";i:4025;}i:2;a:1:{s:2:"id";i:2573;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>電子国土基本図（オルソ画像）を読み込みクライアント側で画像処理して表示する</title>
		<link>http://shimz.me/blog/map/3530</link>
		<pubDate>Fri, 23 May 2014 15:58:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3530</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/05/mapTitleEffect.jpg" alt="mapTitleEffect" width="569" height="251" class="aligncenter size-full wp-image-3532" />


<a href="http://hfu.hatenablog.com/entry/2012/11/14/090051">電子国土タイル画像をクライアントサイドでグレースケール化</a>

mapbox.jsとmodLayer.jsを利用すると、読み込んだタイル画像をcanvasに転写し地図として展開してくれるそうです。しかも、canvasに転写されたimageDataをフックするインターフェイスも用意されてあるとな！

画像処理の負荷がかかるため重くはなりますが、通常通りパン/ズーム・ドラッグでの移動も可能です。そこで、覚えたての画像処理アルゴリズムを使ってクライアント側での画像処理をおこなってみました。

グレースケール化は、上記記事で既に行われているので、ハイコントラスト化とエッジ抽出をやってみました。
※imageDataを加工するには、読み込んだ画像がローカル（同ドメイン）に無いとセキュリティエラーになるため、自前の画像用プロクシを通してます。



<h2>サンプル</h2>
詳しい処理については上記で紹介した記事を読んでいただくとして、filter部分のソースだけ載せておきます。
<h3>ノーマル</h3>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/mapbox/00/"></iframe>

<a href="http://portal.cyberjapan.jp/help/development.html#siyou">電子国土基本図（オルソ画像）</a>

<br />

<h3>ハイコントラスト</h3>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/mapbox/01/"></iframe>
 
<pre class="lang:js decode:true " >var filter = function(data) {
	var length = data.length;
	var width = 256, height = 256;

	var a = 2;
	for (var y = 0; y &lt; height; y++) {
		for (var x = 0; x &lt; width; x++) {
			var i = (x + y * width) * 4;　
			data[i + 0] = (data[i + 0] - 128) * a + 128; 
			data[i + 1] = (data[i + 1] - 128) * a + 128; 
			data[i + 2] = (data[i + 2] - 128) * a + 128; 
			data[i + 3] = data[i + 3]; 
		}
	} 
}
</pre> 



<h3>エッジ抽出</h3>
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/mapbox/02/"></iframe>
 
<pre class="lang:js decode:true " >var filter = function(data) {
	var length = data.length;
	var width = 256, height = 256;
	var gray = new Uint8ClampedArray(data.length);
	toGray(data, gray);
	var edge = new Uint8ClampedArray(data.length);
	
	for (var y = 0; y &lt; height - 1; y++) {
		for (var x = 0; x &lt; width - 1; x++) {
			var i = x + y * width; 	
			var r_i = (x + 1) + y * width; 
			var ex = gray[r_i] - gray[i];
			
			var d_i = x + (y + 1) * width;
			var ey = gray[d_i] - gray[i]; 
			
			var ez = Math.sqrt(ex * ex + ey * ey);
			edge[i] = ez * 2; 
		}
	}
	toColor(edge, data);

}

function toGray(rgba, gray) {
	var length = rgba.length;
	var total = 0; 
	for (var i = 0; i &lt; length; i += 4) {
		var g = 0.30 * rgba[i + 0] + 0.59 * rgba[i + 1] + 0.11 * rgba[i + 2];
		gray[i/4] = g;
		total += g;
	}
	return total / (length / 4);
}

function toColor(gray, rgba) {
	var length = gray.length * 4;
	for (var i = 0; i &lt; length; i += 4) {
		rgba[i + 0] = gray[i/4];
		rgba[i + 1] = gray[i/4];
		rgba[i + 2] = gray[i/4];
		rgba[i + 3] = 255;
	}
}
</pre> 

いろいろな、可能性を感じますね。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51luXD8O5sL._SL160_.jpg" alt="HTML5+JavaScriptによる画像・動画像処理入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5+JavaScriptによる画像・動画像処理入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.05.23</div></div><div class="amazlet-detail">松田 晃一 <br />カットシステム <br />売り上げランキング: 366,088<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h3>関連</h3>
<a href="http://shimz.me/blog/map/3538">OpenLayers ver.2でもクライアントサイドで地図タイルを画像処理できた</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3530</wp:post_id>
		<wp:post_date>2014-05-24 00:58:09</wp:post_date>
		<wp:post_date_gmt>2014-05-23 15:58:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3530</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3532]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427408584;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3696;}i:1;a:1:{s:2:"id";i:3538;}i:2;a:1:{s:2:"id";i:1483;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3 Geo Projection Playgraund </title>
		<link>http://shimz.me/blog/d3-js/3534</link>
		<pubDate>Mon, 26 May 2014 01:22:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3534</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_template/playgraund/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/D3_geo_paths_Test.jpg" alt="D3 geo projection Playgraund " width="590" height="477" class="aligncenter border size-full wp-image-3535" /></a>


<a href="http://shimz.me/example/d3js/geo_template/playgraund/">D3 geo projection Playgraund</a>

ブラウザ上で、D3.jsのGeo Projection機能を気軽に試せるページを作成しました。
テキストエリア内のコードをいろいろ書き変えて「実行」ボタンを押してみてください。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3534</wp:post_id>
		<wp:post_date>2014-05-26 10:22:01</wp:post_date>
		<wp:post_date_gmt>2014-05-26 01:22:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-geo-projection-playgraund</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3535]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308350;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3489;}i:1;a:1:{s:2:"id";i:2351;}i:2;a:1:{s:2:"id";i:3147;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenLayers ver.2でもクライアントサイドで地図タイルを画像処理できた</title>
		<link>http://shimz.me/blog/map/3538</link>
		<pubDate>Tue, 27 May 2014 00:08:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3538</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/map/3530">電子国土基本図（オルソ画像）を読み込みクライアント側で画像処理して表示する</a>

先日、上記の記事を書きましたが、OpenLayers2でも同様のことができたのでサンプルを掲載しておきます。

<a href="http://shimz.me/example/OpenLayers/03/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/openlayersCanvas1.jpg" alt="openlayers Canvas effect" width="516" height="517" class="aligncenter border size-full wp-image-3536" /></a>

<a href="http://shimz.me/example/OpenLayers/03/">example</a>

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >window.onload = init;

function init() {
  var options = {
		projection: new OpenLayers.Projection("EPSG:900913"),
		maxResolution:156543.0339,
		maxExtent: new OpenLayers.Bounds(-20037508.3427892,-20037508.3427892,20037508.3427892,20037508.3427892),
		units: "m",
		controls: [
			new OpenLayers.Control.PanZoomBar(),
			new OpenLayers.Control.LayerSwitcher(),
			new OpenLayers.Control.Navigation(),
			new OpenLayers.Control.Attribution({displayClass: 'prmtcd'})
		],
		numZoomLevels: 22
    }

	var map = new OpenLayers.Map('map',options);
	map.div.style.backgroundColor = 'rgb(221,238,255)';

	var tms = new OpenLayers.Layer.TMS(
		"室蘭-航空写真H25",
		 "http://shimz.me/tool/imgProxy.php?url=" +
		"http://neogis.net/muroran/TILE/",
		{
			serviceVersion: '1.0.0',
			layername: "H25",
			type: "jpg",
			numZoomLevels: 22,
			isBaseLayer: true,
			eventListeners: {
				tileloaded: function(evt) {
					var ctx = evt.tile.getCanvasContext();
					if (ctx) {
						var imgd = ctx.getImageData(0, 0, evt.tile.size.w, evt.tile.size.h);
						var data = imgd.data;
						
						var width = 256, height = 256;
						var gray = new Uint8ClampedArray(data.length); //グレイスケール保存用
						var edge = new Uint8ClampedArray(data.length); //エッジ画像保存用

						toGray(data, gray); //グレースケール化
						
						//エッジ抽出
						for (var y = 0; y &lt; height - 1; y++) {
							for (var x = 0; x &lt; width - 1; x++) {
								var i = x + y * width; 	
								var r_i = (x + 1) + y * width; 
								var ex = gray[r_i] - gray[i];
		
								var d_i = x + (y + 1) * width;
								var ey = gray[d_i] - gray[i]; 
		
								var ez = Math.sqrt(ex * ex + ey * ey);
								edge[i] = ez * 2; 
							}
						}
						
						toColor(edge, data);	 //カラー化
						
						ctx.putImageData(imgd, 0, 0);
						evt.tile.imgDiv.src = ctx.canvas.toDataURL();
					}
				}
			}		
		}
    );
	
	map.addLayer(tms);
	var lonlat = new OpenLayers.LonLat(15693230.659, 5208226.967);
	map.setCenter(lonlat, 15);
  
	function toGray(rgba, gray) {
		var length = rgba.length;
		var total = 0; 
		for (var i = 0; i &lt; length; i += 4) {
			var g = 0.30 * rgba[i + 0] + 0.59 * rgba[i + 1] + 0.11 * rgba[i + 2];
			gray[i/4] = g;
			total += g;
		}
		return total / (length / 4);
	}

	function toColor(gray, rgba) {
		var length = gray.length * 4;
		for (var i = 0; i &lt; length; i += 4) {
			rgba[i + 0] = gray[i/4];
			rgba[i + 1] = gray[i/4];
			rgba[i + 2] = gray[i/4];
			rgba[i + 3] = 255;
		}
	}
  
}
</pre> 

なお、地図画像については室蘭市のオープンデータを利用させていただきました。

<a href="http://neogis.net/muroran/man/man_muroran_tms2.pdf">[PDF]室蘭市オルソ画像航空写真のＴＭＳ配信に関しまして</a>

<h3>その他</h3>
特定のカラーだけ別の色に変更するなどもできます。

<a href="http://shimz.me/example/OpenLayers/04/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/openlayersCanvas2.jpg" alt="openlayer canvas effect" width="519" height="460" class="aligncenter border size-full wp-image-3537" /></a>

<a href="http://shimz.me/example/OpenLayers/04/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3538</wp:post_id>
		<wp:post_date>2014-05-27 09:08:13</wp:post_date>
		<wp:post_date_gmt>2014-05-27 00:08:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3538</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[Canvas]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3536]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387459;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3530;}i:1;a:1:{s:2:"id";i:3696;}i:2;a:1:{s:2:"id";i:3134;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>オープンデータの促進に必要なこと</title>
		<link>http://shimz.me/blog/other/3539</link>
		<pubDate>Tue, 27 May 2014 06:10:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3539</guid>
		<description></description>
		<content:encoded><![CDATA[海外でも「オープンデータなんて、一部の政府関係者とGeekコミュニティの中だけで盛り上がっていて、一般の国民にはまったく知られてないよね」という批判があります。

下記は、International Center for Journalists (ICFJ) に掲載された「一般の人々にオープンデータに関心をもってもらうために考え直すべき１１個の事」という記事。

<a href="http://ijnet.org/blog/11-ways-rethink-open-data-and-make-it-relevant-public">11 ways to rethink open data and make it relevant to the public | IJNet</a>

全部訳すのはメンドウなので、一番重要だと思った項目だけ掲載します。

<blockquote>３．語るのをやめて、見せてください。

一般の人々は「オープンデータ」が何を意味するのかわかりません。実際に、彼らは私たちが"それ"を何と呼ぼうと興味はなく、何故"それ"が必要なのかも知りません。
アップル社のスティーブ·ジョブズCEOはかつて「人は形にして見せてもらうまで、自分が何が欲しいのかわからないものだ」と言いました。
私たちは、彼らに「なぜ、"それ"が必要か」を語るのをやめて、実用的なユーザー体験を通じて彼らに"それ"が必要な理由を示すべきです。</blockquote>



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3539</wp:post_id>
		<wp:post_date>2014-05-27 15:10:59</wp:post_date>
		<wp:post_date_gmt>2014-05-27 06:10:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3539</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427133769;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4104;}i:1;a:1:{s:2:"id";i:3591;}i:2;a:1:{s:2:"id";i:3202;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>室蘭市の地理情報付きオープンデータ（選挙ポスター掲示場）を使ってみた</title>
		<link>http://shimz.me/blog/d3-js/3540</link>
		<pubDate>Wed, 28 May 2014 05:10:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3540</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/08/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/muroran_senkyo.jpg" alt="室蘭市　選挙ポスター掲示場" width="590" height="373" class="aligncenter size-full wp-image-3541" /></a>

<a href="http://shimz.me/example/gmapv3/08/">example</a>

<a href="http://www.city.muroran.lg.jp/main/org2260/odlib.php">むろらんオープンデータライブラリ</a>にて、「選挙ポスター掲示場」というデータが公開されたという情報をFacebookで知ったので触ってみました。

例によってIE9以上、Chrome推奨です。

データに位置情報が付加されていると、簡単に地図上にプロットできて楽しいですね。

室蘭市では、公開されているその他のCSVファイルにも全て座標情報が追加されたそうです。すばらしい！
(個人的には、「X座標,Y座標」より「緯度,経度」情報の方が手軽に使いやすいんじゃないかと思ったりもしますが)

とりあえず、今回はShapeファイルのデータを使用しました。
掲示板の線データだけでは小さくて地図上では見えにくいのでcircle要素を重ねてます。ついでに投票区ごとに色分けしてみました。

他、Google MapsやD3.jsで表示するために行ったデータコンバート処理については、サンプルコードの後に簡単ですが手順を掲載しています。


<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >d3.json("senkyo.geojson", function(line) {
	d3.json("point.geojson", function(point) {
		main(line, point);
	});
});

function main(line, point) {
     //カラーリスト作成
    var color =d3.scale.category20b();
    var color2 = d3.scale.category20();
    var color3 = d3.scale.category10();
    var cl = color.range();
    var colorList = cl.concat( color2.range() );
    colorList = colorList.concat(  color3.range() );
	
	//ツールチップ
	var tooltip = d3.select("body")
		.append("div")
		.attr("class", "tooltip")
		.style("position", "absolute")
		.style("z-index", "10")
		.style("visibility", "hidden")

	
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 13,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			center: new google.maps.LatLng(42.3352306　, 140.97379909999995),       
		});

   //ストリートビュー初期化
    var streetViewDiv = document.getElementById("streetview");
    var stOptions = {
        pov: {
            heading: 00,
            pitch: 0,
            zoom: 2
        }
    };
    //ストリートビューオブジェクトの生成
    var streetViewPanorama = new google.maps.StreetViewPanorama(streetViewDiv, stOptions);
    var streetViewService = new google.maps.StreetViewService();
	
	//ストリートビューを表示
	showStreetView =  function(d){
		var latlng = new google.maps.LatLng(d[1], d[0]);
		streetViewPanorama.setVisible(false);
		streetViewService.getPanoramaByLocation(latlng, 30, function(status){
			if(status){
				streetViewPanorama.setPosition(latlng);
				streetViewPanorama.setVisible(true);
			}else{
				console.log(status);
				alert("StreetView 非対応エリアです");
			};    
		});
	}
			
	//OverLayオブジェクトの作成	
	var overlay = new google.maps.OverlayView(); 
	overlay.onAdd = function () {
		
		//オーバーレイ設定
		var layer = d3.select(this.getPanes().overlayMouseTarget).append("div").attr("class", "SvgOverlay");
		var svg = layer.append("svg");
		var svglayer = svg.append("g").attr("class", "svglayer");
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection();

		//Google Projection作成
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}

		//パスジェネレーター作成
		path = d3.geo.path().projection(googleMapProjection);　

		overlay.draw = function () {
			var linedata = line.features;
			var pointdata = point.features;
			
			
			pointdata.forEach(function(d){
				d.latlng = [ d.geometry.coordinates[0], d.geometry.coordinates[1] ];
				var tmp = googleMapProjection(d.latlng);
				d.x = tmp[0];
				d.y = tmp[1];
			})

			
			//地物(掲示板)描く
			svglayer.selectAll("path")
				.data(linedata)
				.attr("d", function(d){ return path(d) }) 
				.enter()
				.append("path")
				.attr({
					"d": function(d){ return path(d)},
					"fill": "red",
				});

			//サークルを重ねる
			var circleAttr = {
				"cx":function(d) {  return d.x; },
				"cy":function(d) { return d.y; },
				"r":8,
				"stroke": "gray",
				"fill":function(d){ return colorList[+d.properties['投票区']] },
				"fill-opacity":0.4
			}	
			svglayer.selectAll("circle")
				.data(pointdata)
				.attr(circleAttr)
				.enter()
				.append("svg:circle")
				.attr(circleAttr)
				.on("click", function(d){
					showStreetView(d.latlng)
				})
				.on("mouseover", function(d) {
					tooltip.style("visibility", "visible");
				})
				.on("mouseout", function(d) {
					tooltip.style("visibility", "hidden");		
				})
				.on("mousemove", function(d){
					var content = "投票:"+d.properties['投票区']+"区<br/>";
					content += d.properties['住所']
					tooltip
					 .style("top", (d3.event.pageY-10)+"px")
					 .style("left",(d3.event.pageX+10)+"px")
					 .html(content);
				});
					
		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);
};</pre> 

<h2>作業メモ</h2>
わりと四苦八苦したので、自分用に記録しておきます。
<ul>
	<li>QGISを使ってデータ内容の確認とGeoJSONへのコンバート。</li>
	<li>元データがライン(線)データだったので、QGIS上で各線データの中心点を求めポイント(点)データを作成<br>(線データにバッファを作成し、その重心を点データとして出力)</li>
	<li>GeoJSONの出力時にCRS(座標系)を「WGS84」に変換。</li>
</ul>

時間があったら、この辺の作業について別記事に詳細を書こうかと思います。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3540</wp:post_id>
		<wp:post_date>2014-05-28 14:10:51</wp:post_date>
		<wp:post_date_gmt>2014-05-28 05:10:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3540</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3541]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426683966;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3733;}i:1;a:1:{s:2:"id";i:3984;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google ストリートビューをパノラマ画像として表示する「GSVPano.js」</title>
		<link>http://shimz.me/blog/map/3542</link>
		<pubDate>Thu, 29 May 2014 01:31:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3542</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/GSVpano/02/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/gsvpano.jpg" alt="gsvpano" width="590" height="547" class="aligncenter border size-full wp-image-3543" /></a>

<a href="http://shimz.me/example/gmapv3/GSVpano/02/">example</a>

「GSVPano.js」を使うと、ストリートビューの画像を使用したパノラマ(<a href="https://developers.google.com/maps/documentation/javascript/streetview?hl=ja#CustomStreetView">カスタムストリートビューパノラマ</a>)を簡単に表示することができます。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >
var messageDiv = document.getElementById( 'messageDiv' );
var errorDiv = document.getElementById( 'errorDiv' );

function showError( message ) {
	errorDiv.innerHTML = message;
}

function showMessage( message ) {
	messageDiv.innerHTML += message;
}
	
window.addEventListener( 'load', function() {

	/*GSVpano　メッセージ出力設定*/
	showMessage( 'Starting...<br/>' );
	
	loader = new GSVPANO.PanoLoader( {
		zoom: 1
	} );
	
	loader.onSizeChange = function() { 
		showMessage( 'Size changed' );
	};
	;
	
	loader.onPanoramaData = function( result ) {
		showMessage( 'Panorama OK.<br/>Load started' );
	}
	
	loader.onNoPanoramaData = function( status ) {
		showError("ストリートビュー非対応エリアです: " + status);
	}

	loader.onProgress = function( p ) {
		showMessage( '.' );
	};
	
	loader.onError = function( message ) {
		showMessage( 'Error: ' + message );
	};
	
	loader.onPanoramaLoad = function() {
		
		showMessage( ' finished.<br/>' );
		document.querySelector("#GSVPano").appendChild( this.canvas );
		showMessage( 'Panorama loaded, street view data ' + this.copyright + '.<br/>' );
		
	};
	

	// Google Maps API 設定
	var mapDiv = document.getElementById("map_canvas");
	var map = new google.maps.Map(mapDiv, {
		center : new google.maps.LatLng(36.322356, 139.013057),
		navigationControl: true,
		draggableCursor: 'crosshair',draggingCursor: 'move',
		zoom : 15,
		mapTypeId : google.maps.MapTypeId.ROADMAP		
	});
	
	//クリックイベント設定
	google.maps.event.addListener(map, 'click', function(event){
		console.log(event.latLng);
		messageDiv.innerHTML = "";
		errorDiv.innerHTML = "";
		loader.load(event.latLng); //パノラマを表示  	
	});
	
});</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3542</wp:post_id>
		<wp:post_date>2014-05-29 10:31:19</wp:post_date>
		<wp:post_date_gmt>2014-05-29 01:31:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3542</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3543]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427379698;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2598;}i:1;a:1:{s:2:"id";i:3601;}i:2;a:1:{s:2:"id";i:3496;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3 Brush機能をユーザーインターフェイスの作成に利用する</title>
		<link>http://shimz.me/blog/d3-js/3545</link>
		<pubDate>Fri, 30 May 2014 00:21:14 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3545</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/brushing/02/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/d3imagebrush.jpg" alt="d3 image brush" width="506" height="309" class="aligncenter border size-full wp-image-3547" /></a>

<a href="http://shimz.me/example/d3js/brushing/02/">example</a>

小ネタです。
画像上をドラッグして範囲を選択すると、選択した範囲の座標(左上,右下)を取得します。
ときおり、こういったUIが必要になるのですが、D3.jsのbrush機能を利用すると簡単に作成することができます。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >var imgW = 500;	//画像の横幅
var imgH = 281;	//画像の高さ
var messege = document.querySelector("#messege")

//選択できる範囲を画像の大きさと同じにしてbrushオブジェクトを生成
var brush = d3.svg.brush()
  .x(d3.scale.identity().domain([0, imgW])) 
  .y(d3.scale.identity().domain([0, imgH]))
  .on("brush", function() {
	  messege.innerHTML = "Extent:"+JSON.stringify(brush.extent());
  });

//brush要素を追加
d3.select("#BrushLayer")
  .append("g")
  .attr("class", "brush")
  .call(brush);
</pre> 


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3545</wp:post_id>
		<wp:post_date>2014-05-30 09:21:14</wp:post_date>
		<wp:post_date_gmt>2014-05-30 00:21:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3545</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3547]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426607969;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2785;}i:1;a:1:{s:2:"id";i:3670;}i:2;a:1:{s:2:"id";i:2797;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】文字で日本地図書いてみた。</title>
		<link>http://shimz.me/blog/d3-js/3548</link>
		<pubDate>Sat, 31 May 2014 02:18:06 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3548</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/04/"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/textPahtJapan.jpg" alt="textPahtJapan" width="590" height="521" class="aligncenter size-full wp-image-3546" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/04/index.html">example</a>

またもや小ネタです。
文字を使って日本地図を描いてみました。
北海道は「Hokkaido」でと、一応各県名でエリアを描画しているんですが……まったく分かりませんね。

綺麗に表示する方法が分かったら、また挑戦してみたいとおもいます。

<h2>サンプル</h2>
ポイントは地形のpathをdef要素の中に描き、県名をidとしてtextpathにリンクさせているところです。
これだけで、pathに沿ってテキストが表示されます。
<pre class="lang:js decode:true " >d3.json("ken.topojson", function(json) {
	draw(json);
});


function draw(json){
	var geodata = json.objects.ken;
	
	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(1900)	//スケール（ズーム）の指定
		.translate([500,450]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター

	var svg = d3.select("svg");　
	var def = svg.append("def"); //svgにおける関数のような要素。再利用が可能
		
	//地図描画(pathをdef内に作成)
	var map = def.append("g")
		.attr("class", "land")
		.selectAll("path")
		.data(topojson.feature(json, geodata).features)
	    .enter().append("path")
		.attr("d", path)
		.attr("stroke", "red")
		.attr("id", function(d){
			//pathのidとして県名を指定
			return d.properties.ObjName_1;
		})
	
	//テキスト要素追加	
	var text = svg.selectAll('text')
		.data(topojson.feature(json, geodata).features)
		.enter()
		.append("text")
		.append("textPath")
		.attr("xlink:href", function(d){
			//defの中に書きこまれたpathをidで呼び出しテキストに適用する
			return "#"+d.properties.ObjName_1;
		})　
		.text(function(d){
			var a = d3.range(0,50)
			.map(function(){ return d.properties.ObjName_1 });
			return a
		})
}
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3548</wp:post_id>
		<wp:post_date>2014-05-31 11:18:06</wp:post_date>
		<wp:post_date_gmt>2014-05-31 02:18:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3548</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3546]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427287968;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3489;}i:1;a:1:{s:2:"id";i:2881;}i:2;a:1:{s:2:"id";i:2877;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「FOSS4G Hokkaido」にてD3.jsに関する講演をさせていただくこになりました。</title>
		<link>http://shimz.me/blog/d3-js/3549</link>
		<pubDate>Sun, 01 Jun 2014 00:45:21 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3549</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://sites.google.com/site/foss4ghokkaido/home"><img src="http://shimz.me/blog/wp-content/uploads/2014/05/foss4g-hkd-2014.png" alt="foss4g-hkd-2014" width="485" height="198" class="aligncenter size-full wp-image-3550" /></a>

<a href="https://sites.google.com/site/foss4ghokkaido/home">FOSS4G 2014 Hokkaido</a>

「FOSS4G Hokkaido」は地理空間情報を扱うオープンソースソフトウェアのカンファレンスです。

主催であるOSGeo財団日本支部様にご依頼いただき、6/27〜6/29に行われる「FOSS4G 2014 Hokkaido」にてD3.jsに関する講演を行わせていただくことになりました。

二日目「6/28(土) ジオメディアサミット in FOSS4G Hokkaido」にて13:00より「D3.jsを用いた地理情報のビジュアライズ」という内容でお話させていただきます。

Web系のイベントでD3.jsのライトニングトークを行ったり、自分でも勉強会を主催したことはあるのですが、実のところGIS関係のイベントに参加するのは今回が初めてで、結構緊張してます（＾＾；）

現在絶賛講演資料作成中なのですが、もしこのブログを読んでいる方のなかで「D3.jsに関するこんな話が聞きたい！」という要望などございましたら下記フォームより投稿していただけると、当日の講演内容に盛り込めるかもしれません。

以上よろしくお願いします。

 [contact-form][contact-field label='名前' type='name' required='1'/][contact-field label='D3.jsに関して聞きたいこと' type='textarea' required='1'/][/contact-form] 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3549</wp:post_id>
		<wp:post_date>2014-06-01 09:45:21</wp:post_date>
		<wp:post_date_gmt>2014-06-01 00:45:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3549</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3550]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3e0d6e54f3f471ea100ba17a3d6e488a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427299179;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3595;}i:1;a:1:{s:2:"id";i:3688;}i:2;a:1:{s:2:"id";i:3816;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_g_feedback_shortcode</wp:meta_key>
			<wp:meta_value><![CDATA[[contact-field label='名前' type='name' required='1'/][contact-field label='D3.jsに関して聞きたいこと' type='textarea' required='1'/]]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>地図の力、地図の怖さ。</title>
		<link>http://shimz.me/blog/map/3555</link>
		<pubDate>Thu, 19 Jun 2014 09:00:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3555</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
かつて、今は亡き地理学者バーナード・ニーチマン氏は、「銃よりも地図が、より多くの土着の土地を奪ってきた」と述べた。奪われた土地を取り戻す地図の力を認めるかどうかは別にして、<strong>集団理解の形成や政治紛争への介入手段における地図の役割は小さくない。</strong>
<div style="text-align:right"><a href="http://ourworld.unu.edu/jp/land-use-expert-talks-tar-sands">政治の地図化：専門家が見るタールサンド</a></div>
</blockquote>

地図にはとても大きな力があります。

2013年、ニューヨークタイムズでもっともアクセスを集めたコンテンツは、インタラクティブな方言地図でした。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/map201406191.jpg" alt="map201406191" width="590" height="418" class="aligncenter size-full wp-image-3577" />
<span style="font-size:10px"><a href="http://www.nytimes.com/interactive/2013/12/20/sunday-review/dialect-quiz-map.html">How Y’all, Youse and You Guys Talk</a></span>

グローバル・エディターズ・ネットワークが主催する2014年データジャーナリズム賞において受賞された８作品の内、半数の４作品が地図を用いたデータビジュアライズ作品です。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/map201406195.jpg" alt="map201406195" width="590" height="340" class="aligncenter size-full wp-image-3581" />
<span style="font-size:10px"><a href="http://www.globaleditorsnetwork.org/programmes/data-journalism-awards/">Data Journalism Awards 2014</a></span>

ニュースを読者にとって身近な「自分事」の問題として提示し大きな反響を得たニューヨークタイムズの「Toxic Waters」もまた、地図を使ったデータビジュアライゼーションが主軸となっていました。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/map201406194.jpg" alt="map201406194" width="590" height="410" class="aligncenter size-full wp-image-3580" />
<span style="font-size:10px"><a href="http://projects.nytimes.com/toxic-waters/polluters/new-york">Find Water Polluters Near You</a></span>

データジャーナリズムにおいて地図は欠かせないツールとなっています。

<strong>地図上にプロットされたデータは、それが閲覧者の生活空間とシムーレスに繋がっているという事実を明らかにするため「自分事」であるという意識を否応なしにいだかせる力があるのです。</strong>

だからこそ、時として大きな問題をはらみます。

ニューヨークの地方紙が銃免許保持者のデータを地図上に記載して公開した際には大きな議論が巻き起こりました。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/map201406192.jpg" alt="map201406192" width="590" height="331" class="aligncenter size-full wp-image-3578" />
<span style="font-size:10px">※現在は閉鎖されています。</span>

ミーガン法によって公開されている性犯罪受刑者のデータをプロットした地図を見れば、誰だって自分の住居や生活空間とデータを結びつけて考えずにはいられないでしょう。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/map201406193.jpg" alt="map201406193" width="590" height="321" class="aligncenter size-full wp-image-3579" />
<span style="font-size:10px"><a href="http://meganslaw.ca.gov/disclaimer.aspx?lang=JAPANESE">カリフォルニア州性犯罪者探査地図</a><br>※青いブロックをクリックすると受刑者の顔写真と個人情報が表示されます</span>

地図には、隠された問題を明らかにし多くの人に伝える力もあれば、偏見や差別を助長するようなダークサイドのインフルエンスもあるのです。

地図は私たちに大きな影響を与えます。

このように大きな力を持つ地図ですが、かつては地図を使ったシステムやコンテンツを作るために多大なコストが必要となりました。

個人で地図を使った作品を作成し配信するのはとても困難を伴うものだったため、地図はマジョリティを対象として作成されていました。

地図を使った表現は、限られた人の物だったのです。

しかし、他のありとあらゆる事柄と同じようにインターネットが全てを変え、Googleが壁を壊しました。

Google Maps APIの登場によって、それまで地図の消費者であった多くの人々が、自ら地図をコントロールし情報を伝えるためのツールとして使い始めたのです。


そして今、私たちの手にはより多くの道具が握られています。

私たちには、地理情報を扱うための数多くのオープンソースツールがあり、OpenStreetMapがあり、クラウドサービスがあり、可視化ライブラリを手にしています。

地図を使ったシステムを構築するハードルは、今では四つん這いの赤ん坊でも軽々と超えられるほどに低くなりました。

現在では、

あなたの意見を伝えるために、地図の力を借りることができます。

あなたは、あなたの望む地図を作ることができます。

地図はあなたとともにあります。

<h3>余談</h3>
ずいぶんと適当なことを書きましたが、とくに専門家ってわけでもないので話半分に聞いておいてください。

ただ、地図を使ったシステムを構築するハードルが非常に低くなっていることがデータジャーナリズムの興隆に一役かっているのではないかとわりとマジで考えていたりします。

映画「サイド・バイ・サイド」によると、デジタルビデオカメラの登場によって、それまで高価な機材を用いなければ難しかった表現が民主化され、またYoutubeなどの動画サイトが生まれたことによって配信のハードルが下がり、新たなプレイヤーが映画界に新風を巻き起こしているそうです。

<iframe width="560" height="315" src="http://www.youtube.com/embed/mOXKQaxUqsc" frameborder="0" allowfullscreen></iframe>

映画の中でインタビューに答えていた女性監督のように「デジタルビデオカメラがあったからこそ映画を録ろうと思ったし、もしなかったら映画を撮ってはいなかったと思う」という若手監督も増えてきているそうです。

データビジュアライゼーションやデータジャーナリズムの情報を集めていると、地図を使った作品が毎日多数作られ配信されていることに気付くのですが、ハードルが下がったことによって新たなプレイヤーが次々参入しているんだなぁと思った次第です。（その分、地図を用いたヘイトスピーチなんかも増えているので、負の面もあるのでしょうけど）

3.11の時も、虚実混じったさまざまな地図が飛び交いましたね。

地図の力は強大なので気を付けましょう。

<h3>参考</h3>

下記は、「NASA」が地図の読み方について警鐘を鳴らしている記事です。
<blockquote>読んだ記事やテレビで見たものを全てを簡単に信用してしまってはならないのと同様に、地図上にあるという理由だけで盲目的に情報を信用してはいけません
<div style="text-align:right"><a href="http://www.directionsmag.com/articles/on-how-to-read-a-good-map/369257">On How to Read a (Good) Map</a></div></blockquote>

もうひとつ。Google Mapsに虚偽の情報を掲載できるか？についての記事。



<blockquote>私たちは最近、悪質なユーザーがGoogle Earthに偽のアドレスを入れることは可能であるかという質問を得ました。端的に言えば「イエス」です。
（中略）
非常に便利なリソースですが、正しい事が保証されているわけではありません。Google MapsやGoogle Earthのマッピングデータは、常にWikipediaと同様に扱われるべきです。
<div style="text-align:right"><a href="http://www.gearthblog.com/blog/archives/2014/09/conman-get-false-information-google-maps-google-earth.html">Could a conman get false information into Google Maps or Google Earth? - Google Earth Blog</a></div></blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3555</wp:post_id>
		<wp:post_date>2014-06-19 18:00:27</wp:post_date>
		<wp:post_date_gmt>2014-06-19 09:00:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3555</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3582]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427362727;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3880;}i:1;a:1:{s:2:"id";i:4015;}i:2;a:1:{s:2:"id";i:3565;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Maps APIの「お天気＆雲レイヤ」と「Panoramioレイヤ」は2015年に廃止されるそうです。</title>
		<link>http://shimz.me/blog/google-map-api/3556</link>
		<pubDate>Thu, 05 Jun 2014 08:35:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3556</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/06/45_04_15_prev.jpg" alt="sunsetting" width="400" height="267" class="aligncenter size-full wp-image-3557" />

<blockquote>So, starting today, we will begin sunsetting the Google Maps JavaScript API v3 Panoramio Library and Weather Library. Per the terms of our deprecation policy, the Panoramio, weather, and cloud layers served by these libraries will continue to function until one year from today and will be removed on June 4, 2015. 

<a href="http://googlegeodevelopers.blogspot.jp/2014/06/sunsetting-javascript-api-weather-panoramio.html">Google Geo Developers Blog: Sunsetting the Google Maps JavaScript API Panoramio and Weather libraries, and a Flash Maps API reminder</a>
</blockquote>

ウチのブログでも紹介したことのある「Weather and Cloud Layer」が来年2015年6月4日に終了するとのことです。同時に「Panoramio Layer」も廃止とのことです。

<a href="http://shimz.me/blog/map/2656">Google Map上に雲と天気を表示する</a>
<a href="http://shimz.me/blog/google-map-api/3132">流山市のオープンデータを使ってストーリーマップを作ってみた。</a>
（上記の記事で写真を表示しているのが「Panoramio」です）

今後は「GeoJSONを使って自分でマッシュアップしてね。その方が自由にカスタマイズできてうれしいでしょ(^_^)v」とのこと。

ちなみに「Flash Maps API」は2014年9月2日に終了とのこと。

<h3>関連記事</h3>
<a href="http://shimz.me/blog/map/3671">Leaflet.jsで作成した地図上にお天気情報をオーバーレイする</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3556</wp:post_id>
		<wp:post_date>2014-06-05 17:35:02</wp:post_date>
		<wp:post_date_gmt>2014-06-05 08:35:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3556</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3557]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395814;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2656;}i:1;a:1:{s:2:"id";i:3671;}i:2;a:1:{s:2:"id";i:2151;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3 Geo Hello World!</title>
		<link>http://shimz.me/blog/d3-js/3560</link>
		<pubDate>Sat, 07 Jun 2014 07:46:47 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3560</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/shimizu/d3_geo_helloworld"><img src="http://shimz.me/blog/wp-content/uploads/2014/06/line000001.jpg" alt="D3 geo Hello World!" width="587" height="300" class="aligncenter size-full wp-image-3559 border" /></a>

<a href="https://github.com/shimizu/d3_geo_helloworld">GitHub shimizu/d3_geo_helloworld</a>

GithubにD3を使った地理情報描画のサンプルをアップしました。
D3.js単体での描画、Google Maps API, leafret.js, openlayers 上での描画サンプルになります。
とりあえず、現状ではポリゴン(面)データを表示するサンプルのみが上がってます。

そのうち、ポイント(点)データの表示サンプルも上げたいと思います。

デモは以下からご覧ください。

<a href="http://shimz.me/example/d3_geo_hello_world/polygon/">DEMO</a>

■関連記事
<a href="http://matome.naver.jp/odai/2136791241493514301">D3.js Geo(Geography) チュートリアル</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3560</wp:post_id>
		<wp:post_date>2014-06-07 16:46:47</wp:post_date>
		<wp:post_date_gmt>2014-06-07 07:46:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-geo-hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3559]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427295933;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:3612;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「地理的プロファイリング」感想</title>
		<link>http://shimz.me/blog/map/3562</link>
		<pubDate>Wed, 11 Jun 2014 01:47:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3562</guid>
		<description></description>
		<content:encoded><![CDATA[TwitterのTLをぼーっと眺めていたら下記ツイートを発見しまして、ちょうど今読んでいる本の内容と被っていたので、紹介させていただきます。

https://twitter.com/ito_nao/status/474509123359211520


<a href="http://vartree.blogspot.co.uk/2014/04/i-know-where-you-were-last-summer.html">The Variable Tree: I Know Where You Were Last Summer: London&apos;s public bike data is telling everyone where you&apos;ve been</a>



<blockquote>それはデータにアクセスする誰かが、「ロンドンの市内を特定の時間に旅行した個々のサイクリスト」の情報を抽出することができ分析することができることを意味します、そして、ほんの少しの努力で、旅行をした実際の人々を見つけることができます。</blockquote>


おぉ、まさに地理的プロファイリングによってプライバシーが侵害されてしまうかもという事例。

<h2>地理的プロファイリングとは</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4762822744/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/515VHEHSCPL._SL160_.jpg" alt="地理的プロファイリング―凶悪犯罪者に迫る行動科学" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4762822744/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">地理的プロファイリング―凶悪犯罪者に迫る行動科学</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.06.11</div></div><div class="amazlet-detail">D.キム ロスモ <br />北大路書房 <br />売り上げランキング: 424,792<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4762822744/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

「羊たちの沈黙」で火がついて以来、日本のミステリーや刑事ドラマでも一時期やたらと「プロファイリング」がもてはやされた時期がありました。最近あまり見かけなくなりましたが。
大概の場合、「お前は犯人よりも危ない奴なんじゃないか？」みたいな捜査官が出てきて、犯人の心情に同化しながら犯人像に迫っていくのがお約束となっていたりします。

本書では、まず「プロファイリング」の詳細な説明から入るのですが、プロファイリングという技術が、正常なんだか異常なんだか分からないような捜査官の職人芸に依存したものではなく、「過去の犯罪データを統計学的に分析し捜査に役立てよう」という学問であることが分かります。
（正確には、アメリカで生まれた心理面から犯人像を推測しようというのが臨床的プロファイリング、イギリスで生まれた犯人の行動パターンを統計学的に分析し推測するというのが統計的プロファイリングと分類されているそうです）

そういったプロファイリングの中で、地理空間情報に注目して犯人の居場所や生活空間を推測しようというのが「地理的プロファイリング」となります。発案者は著者のキム ロスモさん。

現在では、FBIの捜査手法にも正式に取り入れられ、専用のソフトウェアなども開発されているそうです。（FBIではGISの講習会などもあるそうです)

海外ドラマがお好きな方なら、「NUMB3RS」のシーズン１第一話で主人公である天才数学者チャーリーが犯人の居場所を突き止めるのに使用したのがまさに地理的プロファイリングです。
（ちなみにこの第一話は、キム ロスモの実際のエピソードをそのままドラマの脚本として使っているそうです。）

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001VCBZQE/toriaezu04b-22/ref=nosim/"><img src="http://shimz.me/blog/wp-content/uploads/2014/06/numbers20140611.jpg" alt="NUMB3RS 天才数学者の事件ファイル" width="400" height="258" class="alignnone size-full wp-image-3563" /></a>

地理的プロファイリングの概要を簡単に説明すると、犯人の行動パターン（多くの犯人は、自分の自宅のすぐそばでは事件を起こさず、また、土地勘がないほど遠く離れた場所でも事件は起こさないなど）を数理モデル化し事件発生場所をプロットした地図を使って、犯人が潜んでいる確立を各エリア毎に計算しヒートマップとして描いていく技術です。

面白いのは、概念としては理解するのにさほど難しくなく、技術的にもさほどハードルの高いものではないのですが、いろんなことに応用できそうな技術であるというところでしょうか。（野良猫の生息場所とか探すのにも使えそう）

ただ、上記ツイートにもあったように「レンタサイクルの移動データで個人識別ができてしまった」などプライバシーに関わることでもあるので、今後データを公開する際には気を付けなくてはならないですね。

<h3>関連書籍</h3>
「地理的プロファイリング」本はなかなか手に入れにくいのですが、「NUMB3RS」に出てくる数学を解説した「数学で犯罪を解決する」という本の第一章で地理的プロファイリングについて、結構詳細な説明があるので、興味のあるかたはそちらを読んでみてはいかがでしょう。
（「地理的プロファイリング」のKindle版は洋書になるので注意）

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/447800420X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41aE6boMPFL._SL160_.jpg" alt="数学で犯罪を解決する" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/447800420X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">数学で犯罪を解決する</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.06.11</div></div><div class="amazlet-detail">キース・デブリン ゲーリー・ローデン <br />ダイヤモンド社 <br />売り上げランキング: 122,047<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/447800420X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3562</wp:post_id>
		<wp:post_date>2014-06-11 10:47:29</wp:post_date>
		<wp:post_date_gmt>2014-06-11 01:47:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3562</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3563]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ab44bb2e1137de6ce8ea487c92d900e8</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>何が問題になったかというと、Transport for London (TfL)でオープンデータとして公開されたレンタサイクルの移動データに顧客コードが付いていて、長期間のデータを可視化すると個人識別可能になってしまうということだった <a href="http://t.co/MfYQctnCTn">http://t.co/MfYQctnCTn</a></p>&mdash; Naoyuki Ito (@ito_nao) <a href="https://twitter.com/ito_nao/statuses/474509123359211520">June 5, 2014</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fb49429c120dc81828b693fb368dc5d9</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>何が問題になったかというと、Transport for London (TfL)でオープンデータとして公開されたレンタサイクルの移動データに顧客コードが付いていて、長期間のデータを可視化すると個人識別可能になってしまうということだった <a href="http://t.co/MfYQctnCTn">http://t.co/MfYQctnCTn</a></p>&mdash; Naoyuki Ito (@ito_nao) <a href="https://twitter.com/ito_nao/status/474509123359211520">June 5, 2014</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_fb49429c120dc81828b693fb368dc5d9</wp:meta_key>
			<wp:meta_value><![CDATA[1418921783]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308526;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4043;}i:1;a:1:{s:2:"id";i:3853;}i:2;a:1:{s:2:"id";i:2321;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「データビジュアライゼーションのためのD3.js徹底入門」感想</title>
		<link>http://shimz.me/blog/d3-js/3564</link>
		<pubDate>Fri, 13 Jun 2014 04:36:18 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3564</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom: 0px;">
<div class="amazlet-image" style="float: left; margin: 0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368861/toriaezu04b-22/ref=nosim/" target="_blank" name="amazletlink"><img style="border: none;" src="http://ecx.images-amazon.com/images/I/51OMyXf5iLL._SL160_.jpg" alt="データビジュアライゼーションのためのD3.js徹底入門 Webで魅せるグラフ&amp;チャートの作り方" /></a></div>
<div class="amazlet-info" style="line-height: 120%; margin-bottom: 10px;">
<div class="amazlet-name" style="margin-bottom: 10px; line-height: 120%;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368861/toriaezu04b-22/ref=nosim/" target="_blank" name="amazletlink">データビジュアライゼーションのためのD3.js徹底入門 Webで魅せるグラフ&amp;チャートの作り方</a>
<div class="amazlet-powered-date" style="font-size: 80%; margin-top: 5px; line-height: 120%;">posted with <a title="amazlet" href="http://www.amazlet.com/" target="_blank">amazlet</a> at 14.06.11</div>
</div>
<div class="amazlet-detail">古籏 一浩
SBクリエイティブ
売り上げランキング: 37,388</div>
<div class="amazlet-sub-info" style="float: left;">
<div class="amazlet-link" style="margin-top: 5px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797368861/toriaezu04b-22/ref=nosim/" target="_blank" name="amazletlink">Amazon.co.jpで詳細を見る</a></div>
</div>
</div>
<div class="amazlet-footer" style="clear: left;"></div>
</div>
SBクリエイティブの友保様より献本いただきました。
ありがとうございます。

<h3>感想</h3>

まず、手に取ってみて一番最初に感じたのが「分厚い！」でした。なにしろ大型本: 480ページ、「<a href="http://shimz.me/blog/d3-js/3425">インタラクティブ・データビジュアライゼーション</a>」の約２倍です。それだけ情報量が多いということなんですが、同時に画像を使った説明がかなり豊富なのでこれだけの厚さになっています。

著者は「<a href="http://www.openspc2.org/reibun/D3.js/">D3.js例文辞典</a>」を作成されている古籏 一浩さん。

リンク先のサイトを見ていただくと分かる通り、非常に多くのサンプルコードを書かれている方ですので、本書も、棒グラフ、折れ線グラフ、円グラフといった基本的なグラフ表示から、パックレイアウト、ツリーマップ、フォースレイアウト、地図描画までと、ほぼ全てを網羅した参考書となっています。（鶏頭図のようなマニアックなものまで！）

かなりの数の作例が載っていますが一つ一つ丁寧に説明されており、また先に上げた通り画像も多いので、D3を初めて学ぶという方でも詰まることなく読み進めることができると思います。

第1章から第6章までが、D3のコアな部分（要素の選択、データの束縛や外部ファイルの読み込み方、SVGについてなど）の説明、第7章から第15章までが具体的な可視化方法の説明になります。

とくにお勧めなのが第４章で、D3によってSVG要素を追加する方法を、開発者ツール(chrome)のスナップショットをふんだんに使って説明されています。D3のデバッグでは正しく要素が追加されているかを確認するのにブラウザの開発者ツールが欠かせないのですが、なかなかそこまで詳しく説明がある参考書がありません。開発者ツールを使って追加された要素の確認や、要素に束縛されているデータの見方などデバッグの方法が分かれば、それだけでD3を使いこなすハードルが格段に下がります。

また、D3を使った地図描画について上手く行かなかった例を載せてから原因を解説し、正しく表示するための改善方法を説明するのは、ただ「こうすれば地図が表示できます」とだけ説明するより非常に分かりやすいなと感じました。地理情報はそもそも扱うのが難しいデータなので、思った通りに表示できなかったりすることが多々あるのですが「思い通りに地図に色が塗れない！」などで困っている方は、ぜひ本書を読んでみてください。



<h3>総括</h3>
「インタラクティブ・データビジュアライゼーション」を読み終えたD3初学者の次の一冊として、ベストと思われるD3本です。
あるいは「インタラクティブ・データビジュアライゼーションは確かに分かり易いんだけど、HTMLやJavaScriptについてはある程度知識があるので冗長するぎる」といったデザイナー、エンジニアさんは本書を購入すれば、D3を使った基本的なデータビジュアライゼーションについて制作に困ることはないでしょう。

各章や節の見出しも分かり易いタイトルになっているので、読み終わったあとも逆引きリファレンスとして手元に置いておきたい一冊で、お勧めですよ！
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3564</wp:post_id>
		<wp:post_date>2014-06-13 13:36:18</wp:post_date>
		<wp:post_date_gmt>2014-06-13 04:36:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3564</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3569]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427383056;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3425;}i:1;a:1:{s:2:"id";i:2772;}i:2;a:1:{s:2:"id";i:3405;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「1964年新潟地震オープンデータ」を使ってみました。</title>
		<link>http://shimz.me/blog/map/3565</link>
		<pubDate>Thu, 12 Jun 2014 00:49:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3565</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/OpenLayers/niigata-eq/"><img src="http://shimz.me/blog/wp-content/uploads/2014/06/niigata-eq1.jpg" alt="広域版新潟市1964年7月21日カラー撮影 空中写真" width="590" height="380" class="aligncenter size-full border wp-image-3566" /></a>

<a href="http://shimz.me/example/OpenLayers/niigata-eq/">example</a>


1964年に発生した新潟地震に関する空中写真やスナップ写真などのデータがオープンデータとして公開されました。

<blockquote>1964（昭和39）年の新潟地震が発生してから、2014年で50年を迎えます。新潟地震は、液状化現象や津波など、今なお私たちの生活を脅かす多くの自然現象がリアルタイムで撮影された災害です。本地震の記録映像や写真は、その後の災害研究に重要な役割を果たしました。また、新潟地震は防災科学技術研究所の前身である国立防災科学技術センターの設立から1年後に発生した災害であり、当研究所の当時の研究員が現地調査を行いました。このため、当時のスナップ写真や空中写真フィルムなど、多くの貴重な資料が残されています。本サイトでは、防災科研の所蔵資料を紹介するとともに、当時の空中写真や現地調査写真をオープンデータとして公開します。 
<div style="text-align:right">
<a href="http://ecom-plat.jp/19640616-niigata-eq/index.php">1964年新潟地震オープンデータ特設サイト</a>
</div>
</blockquote>


Web地図用のAPIも公開されていたので、OpenLayersを使って表示してみました。
(orig.)と付いているのがオリジナルの空中写真、ついていない方がコントラストをカスタマイズしたものとなります。
カスタマイズしたレイヤーは、コンストラストの閾値や透明度をスライダーで変化させることができるようになってます。（クライアント端末のスペックによっては処理が重くなります）

<h2>サンプル</h2>
地図タイル読み込み部分だけ
 
<pre class="lang:js decode:true " >
//OpenLayers初期設定
var options = {
	div: "map",
	projection: "EPSG:900913",
	displayProjection: new OpenLayers.Projection("EPSG:4326"),
	numZoomLevels: 20
};
var map = new OpenLayers.Map(options);


// 広域版新潟市1964年7月21日カラー撮影　XYZタイル読み込み設定
var nigata1 = new OpenLayers.Layer.XYZ("新潟市1964/7/21撮影(orig.)",
	"http://opendata.ecom-plat.jp/xyz/19640721c-wide-niigata-eq/${z}/${x}/${y}.png",
	{
		attribution: "&lt;a href='http://ecom-plat.jp/19640616-niigata-eq/group.php?gid=10032' target='_blank'&gt;1964年新潟地震オープンデータ特設サイト&lt;/a&gt;",
		isBaseLayer: false,	//ベースレイヤにするか・しないか
		visibility: false,	//初期状態で表示するか・しないか
	});	

//地図に追加
map.addLayers([nigata1]);
</pre> 

詳細は<a href="http://shimz.me/example/OpenLayers/niigata-eq/">example</a> の<a href="view-source:http://shimz.me/example/OpenLayers/niigata-eq/">ソースコード</a>を参照してください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3565</wp:post_id>
		<wp:post_date>2014-06-12 09:49:29</wp:post_date>
		<wp:post_date_gmt>2014-06-12 00:49:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3565</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3566]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426491142;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3693;}i:1;a:1:{s:2:"id";i:3880;}i:2;a:1:{s:2:"id";i:3853;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wordpress の記事にD3.jsで作ったグラフ等を埋め込むプラグイン「WP-D3」</title>
		<link>http://shimz.me/blog/d3-js/3567</link>
		<pubDate>Thu, 19 Jun 2014 02:45:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3567</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/06/wpd3000.jpg" alt="WP-D3" width="590" height="692" class="aligncenter size-full wp-image-3576 border" />

<h3>インストール</h3>
「プラグイン」メニューの「新規追加」から「WP-D3」を検索してインストールしてください。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/wpd32.jpg" alt="WP-D3" width="590" height="345" class="alignnone size-full wp-image-3573" />

<h3>使い方</h3>
プラグインをインストールすると、記事投稿画面のビジュアルエディタにWP-D3のアイコンが追加されます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/wpd33.jpg" alt="WP-D3" width="590" height="129" class="alignnone size-full wp-image-3574" />

アイコンをクリックすると入力ホームが表示されるので、そこにJavaScriptを書きこむだけです。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/wpd34.jpg" alt="WP-D3" width="590" height="350" class="alignnone size-full wp-image-3575" />

タブ名がD3.jsを使って描画を行うdiv要素のクラス名になっているので、それをselectしsvg要素を追加するなどして使います。

例えば今回の場合、タブ名は「wpd3-3567-0」なので、そこに赤いcircle要素を表示するサンプルは以下のようになります。
 
<pre class="lang:js decode:true " >var svg = d3.select('.wpd3-3567-0')
	.append('svg')
	.attr({
		width: 300,
		height:300
	});

svg.append('circle')
	.attr({
		cx:150,
		cy:150,
		r:80.
		fill, "red"
	});
</pre> 

<h3>余談</h3>
デバッグはちょっとメンドウです。

<img src="http://shimz.me/blog/wp-content/uploads/2014/06/wpd31.jpg" alt="WP-D3" width="590" height="355" class="alignnone size-full wp-image-3572" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3567</wp:post_id>
		<wp:post_date>2014-06-19 11:45:57</wp:post_date>
		<wp:post_date_gmt>2014-06-19 02:45:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3567</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>wpd3-3567-0</wp:meta_key>
			<wp:meta_value><![CDATA[{"includes":[],"code":"var w = 400;\r\nvar h = 400;\r\nvar r = Math.floor(w/2);\r\nvar color = d3.scale.linear().domain([0, 89, 90, 100]).range([\"#ccccFF\", \"#6666FF\", \"#FF2222\", \"#FF2222\"])\r\nvar textColor = d3.scale.linear().domain([0, 80, 81, 100]).range([\"#FFF\", \"#FFF\", \"#000\", \"#000\"])\r\n\r\n\r\nvar data = d3.range(8).map(function(d) {\r\n  return {id:d, value: Math.floor(Math.random() * 100)};\r\n});\r\n\r\n   \r\nvar svg = d3.select('.wpd3-3567-0')\r\n.append('svg')\r\n.attr({\r\n    width: w,\r\n    height:h\r\n});\r\n\r\nvar arcsGroup = svg\r\n    .data([data])\r\n    .append(\"svg:g\")\r\n    .attr(\"transform\", \"translate(\" + Math.floor(w/2) + \",\" + Math.floor(h/2) + \")\")\r\n    \r\n    \r\n    var pie = d3.layout.pie().value(function(d) { return d.value; }); \r\n    var arc = d3.svg.arc().outerRadius(r).innerRadius(Math.floor(r/2)); \r\n    var pathStyle = {\r\n        fill: function(d){ return color(d.value) },\r\n        d: arc\r\n    }\r\n\r\n     //円グラフ作成    \r\n     var sliceGroup = arcsGroup.selectAll(\"g.slice\")     \r\n        .data(pie)                       \r\n        .enter()                        \r\n        .append(\"svg:g\")                \r\n        .attr(\"class\", \"slice\");   \r\n        \r\n     var slicePaths = sliceGroup.append(\"svg:path\")\r\n         .attr(pathStyle) \r\n\r\n\r\n\t//テキスト表示\r\n     var textStyle = {\r\n         \"transform\":function(d) {                  \r\n                d.innerRadius = 0;\r\n                d.outerRadius = r;\r\n                return \"translate(\" + arc.centroid(d) + \")\";       \r\n           },\r\n         fill:function(d){ return textColor(d.value) },\r\n         \"text-anchor\":\"middle\"\r\n     }\r\n     var text =  sliceGroup.append(\"svg:text\")                                    \r\n     .attr(textStyle)\r\n            .attr(\"text-anchor\", \"middle\")                        \r\n            .text(function(d){ return d.value });  \r\n\r\n\r\nsetInterval(update, 3000);\r\nsvg.on('click', update);\r\n\r\nfunction update(){\r\n\tvar data = d3.range(8).map(function(d) {\r\n\t  return {id:d, value: Math.floor(Math.random() * 100)};\r\n\t});\r\n\r\n    arcsGroup.data([data], function(d){ return d.id });\r\n    sliceGroup.data(pie);\r\n    slicePaths.data(pie).transition().attr(pathStyle).duration(1000);\r\n    text.data(pie).text(function(d){ return d.value }).transition().attr(textStyle)\r\n           \r\n};\r\n\r\n"}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3576]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427375825;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:2772;}i:2;a:1:{s:2:"id";i:3307;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ハイクオリティでちょーかっこいいデータ視覚化地図が作れる「Leaflet-dvf」</title>
		<link>http://shimz.me/blog/map/3583</link>
		<pubDate>Fri, 20 Jun 2014 00:01:04 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3583</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://humangeo.github.io/leaflet-dvf/"><img src="http://shimz.me/blog/wp-content/uploads/2014/06/leaflet-def1.png" alt="leaflet-def" width="590" height="443" class="aligncenter size-full wp-image-3584" /></a>

「<a href="http://humangeo.github.io/leaflet-dvf/">Leaflet-dvf</a>」は、ベース地図にLeaflet.jsを用い、地理情報を可視化するために必要なライブラリをまとめてパッケージしたデータビジュアライゼーションフレームワークです。
サイトに掲載されているサンプルを見ても解るように、非常にクオリティが高くデザイン性に富んだ視覚化地図を作成することができます。

データビジュアライゼーションの参考書に必ずといってよいほど出てくる Charles Minard の「<a href="http://en.wikipedia.org/wiki/Charles_Joseph_Minard#mediaviewer/File:Minard.png">ナポレオンのロシア侵攻</a>」を可視化した地図も、Leaflet-dvfを使えばこんなにかっこよく作成することができます。

<a href="http://humangeo.github.io/leaflet-dvf/examples/html/minard.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/06/Napoleons_March.png" alt="Napoleons_March" width="590" height="267" class="aligncenter size-full wp-image-3585" /></a>

<a href="http://humangeo.github.io/leaflet-dvf/examples/html/minard.html">Napoleon's March</a>


その他、こんな手の込んだ視覚化も。

<a href="http://humangeo.github.io/leaflet-dvf/examples/html/panoramio.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/06/Panoramio_Browser.png" alt="Panoramio_Browser" width="590" height="272" class="aligncenter size-full wp-image-3586" /></a>

<a href="http://humangeo.github.io/leaflet-dvf/examples/html/panoramio.html">Panoramio Browser</a>

D3.jsほどの自由度はありませんが、かっこいい datavis map を作成したい時は、ぜひ選択肢の一つとして検討してみてください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3583</wp:post_id>
		<wp:post_date>2014-06-20 09:01:04</wp:post_date>
		<wp:post_date_gmt>2014-06-20 00:01:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3583</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3584]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374724;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3624;}i:1;a:1:{s:2:"id";i:3587;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>可視化？ 視覚化？</title>
		<link>http://shimz.me/blog/other/3587</link>
		<pubDate>Sun, 22 Jun 2014 08:42:41 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3587</guid>
		<description></description>
		<content:encoded><![CDATA[いつも、どっちの単語を使うかで迷います。


<h3>可視化 or 視覚化</h3>
データビジュアライゼーションとひとくちに言っても、データを分析するために用いる厳密な意味でのチャート(グラフ)から、動的なインフォグラフィックのようなものや、データを用いて作成されるメディアアート的なコンテンツまでといろいろあります。

「<a href="http://shimz.me/blog/other/2918">デザイニング・データビジュアライゼーション</a>」のいうところの「探索的データビジュアライゼーション」と「説明的データビジュアライゼーション」の違いではあるのですが、両者は目的も違えば用途も違い、求められるものもまた変わってきます。

この辺りがごっちゃになるといろいろととても分かりずらくなるし、せっかく単語が２種類あるので今後このブログでは、以下のように<strong>自分勝手に定義して</strong>使っていくことにしました。

可視化：探索的データビジュアライゼーション
視覚化：説明的データビジュアライゼーション

ちなみにD3.jsは上記定義からすると視覚化に向いているライブラリです。


<h3>可視化・視覚化ライブラリ</h3>
これまた、自分勝手にいくつかのライブラリを分類してみると以下となります。

<ul class="border">
可視化に向いているライブラリ
<li style="margin-left:20px"><a href="http://www.chartjs.org/">Chart.js</a></li>
<li style="margin-left:20px"><a href="http://www.highcharts.com/">Highcharts</a></li>
<li style="margin-left:20px">その他、D3をコアにした<a href="http://matome.naver.jp/odai/2138966107937611601">ラッパーライブラリ</a></li>
</ul>

<br />

<ul class="border">
視覚化に向いているライブラリ
<li style="margin-left:20px"><a href="http://d3js.org/">D3.js</a></li>
<li style="margin-left:20px"><a href="http://matome.naver.jp/odai/2138966107937611601">processing.js</a></li>
<li style="margin-left:20px"><a href="http://paperjs.org/">paper.js</a></li>
</ul>

<br />

D3はどちかっていうとprocessingなどのグラフィックライブラリに近い立ち位置にある感じですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3587</wp:post_id>
		<wp:post_date>2014-06-22 17:42:41</wp:post_date>
		<wp:post_date_gmt>2014-06-22 08:42:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3587</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427381509;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2918;}i:1;a:1:{s:2:"id";i:3286;}i:2;a:1:{s:2:"id";i:3473;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON-LDとRDF</title>
		<link>http://shimz.me/blog/other/3591</link>
		<pubDate>Mon, 30 Jun 2014 03:48:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3591</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/06/json-ld-logo.png" alt="json-ld-logo" width="260" height="277" class="aligncenter size-full wp-image-3597" />

今年の１月、<a href="http://www.w3.org/TR/json-ld/">JSON-LD</a>(Linked Data)が、W3Cによって承認されWeb標準規格になったらしいです。

それに伴い、JSON-LDの創作者でもあり、JSON-LD 1.0仕様に関するリードエディター、JSON-LDコミュニティ・グループの議長であるManu Sporny氏があくまで個人的な意見として下記事を公開していました。

<a href="http://manu.sporny.org/2014/json-ld-origins-2/">JSON-LD and Why I Hate the Semantic Web </a>
(JSON-LDと、なぜ私はセマンテックウェブを憎むか)

内容は、JSON-LDに関する説明と、主にRDF及びRDFコミュニティに対する痛烈な批判となっています。
個人的にオープンデータの推進に関して示唆に富む記事だとおもったので、紹介します。

<h2>今までの流れ</h2>
簡単にこれまでのあらすじを要約すると、

2009年にティム・バーナーズ＝リーがTEDで「みんなデータをオープンにしてくれ！　そしてそれをURIを使って互いにつなげよう！」と講演しました。

これには、多数のエンジニアやデベロッパが「いいぞ、もっとやれ」と大賛成。

ところがその後、しれっと出てきた「<a href="http://5stardata.info/ja/">オープンデータのための5つ星スキーム</a>」の中で突然RDFなんて単語が出てきて、大混乱。

一部の開発者達が「なんでRDFなんてsuckなデータモデルを使うんだ! Fuck!」と反発し大議論になり、それが現在も続いています。

その辺の議論については下記の記事を。

<a href="http://cloudofdata.com/2009/07/does-linked-data-need-rdf/">Does Linked Data need RDF ?</a>
<a href="http://milicicvuk.com/blog/2011/07/21/problems-of-the-rdf-syntax/">Problems of the RDF syntax</a>
<a href="http://blogs.gartner.com/nick_gall/2010/07/21/tim-berners-lee-doesnt-seem-to-think-linked-data-requires-rdf/">Tim Berners-Lee Doesn’t Seem to Think “Linked Data” Requires RDF</a>

途中、「ティム・バーナーズ＝リーはRDFの事なんて言及していない！」みたいな、「言った、言わない」議論とかまで起きて、もはやよくわかりません。

とりあえず抑えておくべきことは「Linked (Opend) Data」は、必ずしもデータモデルにRDFを使わなければならないということではないということと、JSONで「Linked (Opend) Data」を実現するための規格「JSON-LD」の策定が進めれられていたということです。

それらを踏まえた上で、Manu Sporny氏の記事をお読みください。

<blockquote>RDFは、くそいまいましいデータ・モデルです。
　(中略)
RDFを活用するためには、通常、クアッドストア、SPARQLエンジン、およびいくつかの大きなライブラリを必要とします。それらは必要以上に複雑さをソリューションに付け加えるため、標準的なウェブ開発者はそのツールチェインに関心がありません。
</blockquote>

<blockquote>あまりにも長い間焦点を見失たままであったので、私はセマンテックウェブの物語を憎みます。そしてそのコミュニティも。
（私は今、意識的にそれらから距離を取っています）

それらの目的意識は病的(schizophrenic)です。

セマンテックウェブグループでは「どうすれば現在使用されている一般的なプラクティスを活用して多くの人間がウェブ上で簡単にデータを公開できるようになるか？」といった方法を見つけ出す代わりに、「RDFを通して公開されることが確実であるビックデータをどのように問い合わせることができるか？」について議論して貴重な時間を消費します。

<strong>あまりにも長い時間が、彼らが期待する方向に展開しそうもない将来を装うことに費やされます。</strong></blockquote>

というわけで、だいぶご立腹です。
肝心のJSON-LDはどうなったかというと……

<blockquote>この記事の残りの部分は、何故我々がJSON-LDを伝統的なセマンティックウェブ／Link data stack とは異なる方向へ設計することに決定したのかという概要を説明しています。
（中略）
我々は、JSON-LD仕様から複雑なテクノバブルを除くために最善を尽くしました。
（中略）
私は個人的にJSON-LDとRDF 間で互換性を持って欲しかったです……しかし、まあ、それはそれです。
（中略）
大部分のウェブ開発者が今日使用するテクノロジーに基づくので私はJSON-LDが好きです。それは、人々に壮大なビジョンをご購入いただくことなく、幅広く興味深い問題を解決するのに役立ちます。
</blockquote>

というわけで、JSON-LDはRDFと袂を分かったようです。

<h3>参考</h3>
<a href="https://news.ycombinator.com/item?id=7105156">JSON-LD and Why I Hate the Semantic Web | Hacker News</a>
<a href="http://www.reddit.com/r/semanticweb/comments/1w7vc0/manu_sporny_jsonld_and_why_i_hate_the_semantic_web/">JSON-LD and Why I Hate the Semantic Web | reddit</a>

<a href="http://json-ld.org/index.html">JSON-LD - JSON for Linking Data</a>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3591</wp:post_id>
		<wp:post_date>2014-06-30 12:48:20</wp:post_date>
		<wp:post_date_gmt>2014-06-30 03:48:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3591</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3597]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308364;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3629;}i:1;a:1:{s:2:"id";i:2321;}i:2;a:1:{s:2:"id";i:3633;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FOSS4G 2014 Hokkaidoに行ってきました。</title>
		<link>http://shimz.me/blog/d3-js/3595</link>
		<pubDate>Sun, 29 Jun 2014 02:14:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3595</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/06/e0014773_12325886.jpg" alt="e0014773_12325886" width="334" height="400" class="aligncenter size-full wp-image-3594" />

<a href="https://sites.google.com/site/foss4ghokkaido/">FOSS4G 2014 Hokkaido</a>にてD3.jsに関する講演を行わせていただきました。

人生初北海道、初札幌だったわけですが、札幌良いですね！
都会としての活気もありながら、あらゆる空間が広いので(歩道もすごく広い）、沢山の人が歩いていてもごみごみした感じが無いのが素敵でした。
たまに東京などに出ると、あまりの人の多さ、人混みで、人疲れしてしまうのですが、そういったこともなく、街歩きが楽しい都市だなと思いました。

後から、「道が広いのは冬場雪を積み上げる必要があるから」と教えていただきました。なので、冬場は大変なのかもしれませんｗ

さて、FOSS4G 2014 Hokkaidoです。
懇談会で何人の方にお話しましたが、このブログに書いていることは完全に趣味で学んだことなので、日頃仕事などではGISや地図などにかかわることが全くなかったりまします。
なので普段はお会いすることのできない、様々な業種の方々とお話することができたので、非常に刺激になりました。
なにぶん、人見知り―なので、ぼーっと突っ立ているだけだった私に話しかけてくださった皆さん、ありがとうございます！　

暖かく迎えていただきまして、非常に楽しい時間を過ごすことができました。
また、機会があれば参加させていただきたいなと思います。

<h2>スライドと補足</h2>
講演資料として使用したスライドを載せておきます。
chrome推奨。

テーマは、北海道・札幌といえばクリプトン、といえばボカロということで「Everyone, Cartographer」です。そう、某Google ChromeCMのパクリですね（＾＾；）

<a href="http://shimz.me/slide/foss4g20014hokkaido/#/">D3.jsを用いた地理情報のビジュアライズ</a>

<iframe width="100%" height="350" scrolling="no" src="http://shimz.me/slide/foss4g20014hokkaido/#/"></iframe>

[追記] *講演内容の<a href="https://www.youtube.com/watch?v=RHOPvO76Ge0">動画</a>が公開されました。

で、いくつか補足です。

D3のサンプルやデモのカタログサイト。
<a href="http://biovisualize.github.io/d3visualization/#visualizationType=all">biovisualize.github.io/d3visualization/#visualizationType=all</a>
<a href="http://techslides.com/over-2000-d3-js-examples-and-demos/">Over 2000 D3.js Examples and Demos | TechSlides</a>

紹介したCharles Minard のナポレオンマーチですが、D3で作成されたものがあります。
<a href="http://bl.ocks.org/kgryte/5951026">Minard and Napolean&apos;s 1812 March + D3.js</a>
（これ以外にも、沢山あります）
以前、紹介しましたが「<a href="http://shimz.me/blog/map/3583">Leaflet-dvf</a>」で実装されたものもあります。
<a href="http://humangeo.github.io/leaflet-dvf/examples/html/minard.html">Examples - Napoleon&apos;s March</a>

ジャック・ベルタンの「図の記号学」は日本語訳されたものが出版されています。（絶版になっていますが）
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000J7J2YE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">図の記号学―視覚言語による情報の処理と伝達 (1982年)</a>

　<br />
　<br />
以上です。

<hr />


さて、この記事を書いている今現在、まだ札幌に居ます。
これから、群馬へ帰ります。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3595</wp:post_id>
		<wp:post_date>2014-06-29 11:14:05</wp:post_date>
		<wp:post_date_gmt>2014-06-29 02:14:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3595</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3594]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427299080;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3549;}i:1;a:1:{s:2:"id";i:2990;}i:2;a:1:{s:2:"id";i:3191;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Pathアニメーション</title>
		<link>http://shimz.me/blog/d3-js/3598</link>
		<pubDate>Tue, 01 Jul 2014 00:36:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3598</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/05/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/pathanimation.jpg" alt="pathanimation" width="541" height="613" class="aligncenter border size-full wp-image-3599" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/05/index.html?1">example</a>

<a href="http://ascii.jp/elem/000/000/901/901319/">SVG線画が美しいリッチアニメーションの作り方</a>

上記記事を参考にして日本の地形でパスアニメーションを行ってみました。
D3のトランジションとCSSアニメーションとを組み合わせたら、なにか面白い表現ができそうですね。

（ちなみに、北方領土が無いのは海外のサイトで取得したデータを利用しているからです。……この辺、まぁ、いろいろとありますねぇ）

<h2>サンプル</h2>
アニメーションCSS設定
 
<pre class="lang:css decode:true " >.japan {
	fill: white;
	stroke-width:1;
	stroke-dasharray: 3000;
	stroke-dashoffset:3000;
	animation: DASH 6s ease-in alternate forwards;
	-webkit-animation:DASH 6s ease-in 0s forwards;
	-o-animation:DASH 6s ease-in 0s forwards;
	animation:DASH 6s ease-in 0s forwards;
}
@keyframes DASH{
	0%{stroke-dashoffset:3000;}
	100%{stroke-dashoffset:0;fill:green}
}
@-moz-keyframes DASH{
	0%{stroke-dashoffset:3000;}
	100%{stroke-dashoffset:0;}
}
@-webkit-keyframes DASH{
	0%{stroke-dashoffset:3000;}
	100%{stroke-dashoffset:0;fill:green}
}
@-o-keyframes DASH{
	0%{stroke-dashoffset:3000;}
	100%{stroke-dashoffset:0;}
}
@-ms-keyframes DASHf{
	0%{stroke-dashoffset:3000;}
	100%{stroke-dashoffset:0;}
}
</pre> 

fillカラーのアニメーションは初期状態で色を塗っていないと上手く遷移しないようです。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3598</wp:post_id>
		<wp:post_date>2014-07-01 09:36:27</wp:post_date>
		<wp:post_date_gmt>2014-07-01 00:36:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3598</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3599]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427305395;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2993;}i:1;a:1:{s:2:"id";i:4081;}i:2;a:1:{s:2:"id";i:3659;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ストリートビューのカメラの向きを自動的に調整する</title>
		<link>http://shimz.me/blog/google-map-api/3601</link>
		<pubDate>Wed, 02 Jul 2014 01:27:08 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3601</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/07/streetviewcamera20140701.jpg" alt="streetviewcamerapov" width="300" height="505" class="aligncenter size-full wp-image-3600" />

まぁ、上記の画像で全て説明しているのですが。

Google のストリートビューは緯度経度を渡すと、その位置から一番近いストリートビュー対応エリアを検出します。
その時、カメラはデフォルトの方向を向いているので、対象物が写っているとは限らず、マウスでグリグリ動かして見ないと対象物が見えません。
これを、検出された対応エリアから元の対象物への緯度経度の方向へ、ストビューのカメラを自働的に向けるようにしてみました。
Google Maps APIのジオメトリライブラリを使用して２地点間の方向を計算し、ストリートビューのカメラの向きを対象物へと向けています。

<h2>作ってみた物</h2>

オープンデータとして公開されている<a href="http://www.city.muroran.lg.jp/main/org2260/odlib.php">室蘭市の「砂箱」の位置情報</a>を使ってデモをつくってみました。
ストリートビューから取得した画像に砂箱が映っていれば、カメラが正しく対象物の方向へ向いています。

<a href="http://shimz.me/example/gmapv3/streetview/muroran_sbako/index.html">example</a>

砂箱はこれ↓
<img src="http://shimz.me/blog/wp-content/uploads/2014/07/sunabako.jpg" alt="sunabako" width="90" height="81" class="alignnone size-full wp-image-3604" />

検出されるストリートビュー対応ポイント場所によっては、対象物とストリートビューポイントの間に地物が挟まってて、見えなかったりします。


<h3>サンプルコード</h3>

 
<pre class="lang:js decode:true " >window.onhashchange  = getSubakoPhoto;
getSubakoPhoto();

function getSubakoPhoto() {

	d3.selectAll(".pagerlink").remove();
	d3.selectAll(".subakoraw").remove();
	
	//pager処理
	var page = +location.hash.replace("#", "");
	if (typeof page != "number") page = 0;
	var endpage = page+20;
		
	
	d3.json("subako.geojson", function(geojson){
		var sbako_table = d3.select('#stage');
		
		var pageNumber = d3.range(0, geojson.features.length, 20);
		//pager設置
		d3.select("#pager")
			.selectAll("pagerlink")
			.data(pageNumber)
			.enter()
			.append("a")
			.attr({
				"class":"pagerlink",
				"href": function(d){ return "http://shimz.me/example/gmapv3/streetview/muroran_sbako/index.html#" + d }
			})
			.style("margin", "5px")
			.text(function(d, i){ return i })
			.on("click", function(d){
				location.href = "http://shimz.me/example/gmapv3/streetview/muroran_sbako/index.html#" + d ;
			})

		setTimeout(function(){
				   loop(geojson.features.slice(page, endpage))
		} , 500);
		
		
		
		function loop(features){
			var div = sbako_table.append("div").attr("class", "subakoraw");
			var raw = features.pop();			
			var latlng = raw.geometry.coordinates;

			getStreetViewPov(
				{
					lat:latlng[1] ,
					lng:latlng[0]
				},
				function(stv){
					//street view image url を取得しimgのsrcに設定
					div.append("img")
						.attr("src", "http://maps.googleapis.com/maps/api/streetview?size=300x200&amp;location="+stv.lat+","+stv.lng+"&amp;heading="+stv.heading+"&amp;pitch="+stv.pov.pitch+"&amp;sensor=false");
					div.append("p").text(raw.properties["整理番号"]);
					div.append("a")
						.attr({
							"href": "https://www.google.com/maps/place/"+latlng[1]+","+latlng[0],
							"target": "_blank"
						})
						.text("lat:"+latlng[1]+" lng:"+latlng[0]);
				}
			);
			
			if (features.length &gt; 0) setTimeout(function(){
				loop(features);
			}, 500);
		
		}
	})
	
	/* street view 初期化 */
	var panoOptions = {
		panControl: false,
		addressControl: false,
		linksControl: false,
		zoomControlOptions: false
	};
	var pano = new  google.maps.StreetViewPanorama(document.getElementById('streetview'), panoOptions);
	var service = new google.maps.StreetViewService;

	
	//heading,pov取得
	function getStreetViewPov(arg , callback) {
		//対象物緯度経度設定
		var lookTo = new google.maps.LatLng(arg.lat, arg.lng); 
		pano.setPosition(lookTo);
	
		service.getPanoramaByLocation(pano.getPosition(), 50, function(panoData) {
			if (panoData != null) {
				//検出されたstreetview対応位置(緯度経度)を取得
				var panoCenter = panoData.location.latLng;
				//２地点間(streetview対応位置と対象物の緯度経度)の方向を計算
				var heading = google.maps.geometry.spherical.computeHeading(panoCenter, lookTo);
				//povを取得
				var pov = pano.getPov();
				
				//コールバックの引数として取得した値を渡す
				callback({heading:heading, pov:pov, lat:arg.lat, lng:arg.lng});
				
			} else {
				console.log('not found StreetView point'); 
			}
		});
	}
	
};</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3601</wp:post_id>
		<wp:post_date>2014-07-02 10:27:08</wp:post_date>
		<wp:post_date_gmt>2014-07-02 01:27:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3601</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3600]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427375592;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3540;}i:1;a:1:{s:2:"id";i:3496;}i:2;a:1:{s:2:"id";i:4086;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ボロノイ図を使ってラベルの重なり合いを解消する</title>
		<link>http://shimz.me/blog/d3-js/3609</link>
		<pubDate>Wed, 02 Jul 2014 14:59:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3609</guid>
		<description></description>
		<content:encoded><![CDATA[画像をクリックすると、デモページに飛びます。

<h2>見づらいラベル</h2>
<a href="http://shimz.me/example/d3js/voronoi/02/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/volonoilabel000000.jpg" alt="ボロノイ図を使ってラベルの最適配置位置を検出" width="590" height="282" class="alignnone border size-full wp-image-3605" /></a>

地図上に沢山のラベルを並べると、位置によっては重なり合ってとても見ずらくなります。
このラベルの配置位置をボロノイ図を利用して重なり合わないように配置してみます。

<h2>母点から中心点へ</h2>
<a href="http://shimz.me/example/d3js/voronoi/03/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/volonoilabel000001.jpg" alt="ボロノイ図を使ってラベルの最適配置位置を検出" width="590" height="282" class="alignnone border size-full wp-image-3606" /></a>
まず、ポイントを母点としたボロノイ図を描きます。
各ボロノイのセル（ボロノイ領域）の中心点を求め、母点から中心点へのラインを引きました。

ボロノイ領域の中心点は、母点から見て空きスペースの方角となります。
この角度を利用してラベルを配置します。


<h2>中心点に向けてラベルを配置</h2>
<a href="http://shimz.me/example/d3js/voronoi/04/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/volonoilabel000002.jpg" alt="volonoilabel000002" width="590" height="282" class="alignnone size-full border wp-image-3607" /></a>

単純にラインに沿う角度でテキストを回転(rotate)させました。
重なり合いは解消されましたが、必ずしも見やすくはありません。
（これはこれで活用方法がありそうですが）

<h2>ラベル開始位置をずらす</h2>
<a href="http://shimz.me/example/d3js/voronoi/05/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/volonoilabel000003.jpg" alt="volonoilabel000003" width="590" height="282" class="alignnone size-full border wp-image-3608" /></a>

母点からボロノイ領域の中心点の方角へ、ラベルの開始位置を少しずらして配置した例です。
ラベルの重なり合いが解消されてだいぶ見やすくなりました。

このようにボロノイ・ダイアグラムには、さまざまな活用法があります。

<h2>参考</h2>
D3を使ってボロノイ図を描く方法は以下を。

<a href="http://shimz.me/blog/d3-js/2817">【D3.js】地図上にボロノイ図を描く</a>
<a href="http://shimz.me/blog/d3-js/2819">【D3.js】Google Map上にボロノイ図を描く</a>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3609</wp:post_id>
		<wp:post_date>2014-07-02 23:59:01</wp:post_date>
		<wp:post_date_gmt>2014-07-02 14:59:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3609</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3608]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369352;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3645;}i:1;a:1:{s:2:"id";i:3650;}i:2;a:1:{s:2:"id";i:3406;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Cartogramsプラグインを使ってみた。</title>
		<link>http://shimz.me/blog/d3-js/3612</link>
		<pubDate>Fri, 04 Jul 2014 00:25:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3612</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsのカルトグラムプラグインを使って、データを元に変形させた日本地図を描画してみました。

<h2>カルトグラムとは？</h2>
<blockquote>地域の統計データに基づいて地図を歪めた変形地図のこと． 地域の特徴を視覚的に表現するために用いられる． 統計量を地図上の距離で表すディスタンスカルトグラム， 地図上の面積で表すエリアカルトグラムなどがある． 地点間の所要時間を地図上の距離で表す時間地図も代表的なカルトグラムである．</blockquote>

今回利用したプラグインは、エリアカルトグラムを描画します。

<h2>Cartogramsプラグイン</h2>

<a href="http://prag.ma/code/d3-cartogram/#popest/2010">Cartograms with d3 & TopoJSON</a>

D3.jsのカルトグラム描画プラグイン。

<h3>サンプルコード</h3>
<pre class="lang:js decode:true " >
//カルトグラム初期設定
var cartogram = d3.cartogram()
	.projection(d3.geo.albersUsa()) //d3.projectionをラップ
	.value(function(d) {
		return Math.random() * 100; //ランダムに変形
	});
	 
 //topoJSONデータを読み込み
d3.json("path/to/hoge.topojson", function(topology) {
	
	//カルトグラム変換
	var features = cartogram(topology);
	
	//地形描画
	d3.select("svg").selectAll("path")
		.data(features)
		.enter()
		.append("path")
		.attr("d", cartogram.path);
});</pre> 

<h2>作ってみた物</h2>
<a href="http://shimz.me/example/d3js/geo_template/cartograms/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/cartograms20140704.jpg" alt="cartograms" width="590" height="580" class="aligncenter border size-full wp-image-3611" /></a>

<a href="http://shimz.me/example/d3js/geo_template/cartograms/01/">example</a>

「click here to run」の文字をクリックすると、群馬県が大きく爆発(?)します。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3612</wp:post_id>
		<wp:post_date>2014-07-04 09:25:49</wp:post_date>
		<wp:post_date_gmt>2014-07-04 00:25:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3612</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3611]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308359;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3645;}i:1;a:1:{s:2:"id";i:3498;}i:2;a:1:{s:2:"id";i:3053;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>QGIS HackFest Tokyoに参加してきました。</title>
		<link>http://shimz.me/blog/map/3614</link>
		<pubDate>Mon, 07 Jul 2014 02:37:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3614</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://connpass.com/event/6733/"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/e910aea7f220e16ca90a14195439607d.png" alt="QGIS HackFest Tokyo" width="660" height="426" class="aligncenter size-full wp-image-3615" /></a>

土曜日に行われた「<a href="http://connpass.com/event/6733/">QGIS HackFest Tokyo</a>」に参加してきました。

ぶっちゃけ、QGISをGeoJSONが必要な際のコンバーターとしてしか利用していないのは、あまりにもったいないと常々おもっていたので、HackFestというイベントが具体的に何をやるものなのか分からないまま申し込みをしてしまいました。

内容的には「緩いハンズオン＋ハッカソンorもくもく会」といったところでしょうか。具体的にどんなことが行われたのかは下記HackPadをご覧ください。

<a href="https://hackpad.com/QGIS-HackFest-Tokyo-8geRvutVoHW">HackPad</a>

GIS界の猛者ばかりが集まるイベントで「モヒカンな方々に斧でギッタギッタにされたらどうしよう」と恐れおののいていたわけですが、私以外にも初心者の方が結構いて、上級者の方に日頃疑問に思っていたけれどなかなか聞くことのできなかった事柄などについて快く教えていただけて、非常に勉強になりました。

今回、個人的に、特に勉強になったのはQGISでの<a href="http://www.pasco.co.jp/recommend/cook/cook062/">バッファ</a>の作り方を教えていただけたことでした。

QGISを使って、各ポイントに「半径100mのバッファを作成したい」という時があるのですが、項目にある「バッファ距離」にどんな数値を入力すれば、正しく「半径100m」のバッファが作成できるのかずーっと分からず独りで試行錯誤していたのです……「この距離の単位は何なんだ？　km? m? 分かんねー」といろいろ弄ってはみてはいたのですが、そもそも間違っていたようです。

<img src="http://shimz.me/blog/wp-content/uploads/2014/07/qgisbuffer140707.jpg" alt="qgisbuffer" width="397" height="336" class="size-full wp-image-3616" />
↑の単位がわからない（＞＜）

<a href="https://sites.google.com/site/qgisnoiriguchi/crs/02/01">1.投影変換が必要な理由 - QGIS入門</a>

<blockquote>国交省や国土地理院がオンラインで提供しているGISデータはJGD2000で作成されており、指定がなければ十進緯度経度です。
表示するだけなら十進緯度経度でもかまわないのですが、距離を計測する、バッファを作る、データを面積按分するなどの演算処理をする場合は、十進緯度経度ではいろいろと不都合があります。
（中略）
ということで、特定の場所から500mを設定するパラメータを毎回作るよりは、すでにGISで設定してあるパラメータを使い、JGD2000の地図の方を単位がメートルである平面直角座標等に変換するほうが簡単です。</blockquote>

距離を使った演算処理を行うには、地理情報そのものの投影変換が必要になるそうです。（つまり、バッファ距離の項目は、読み込んだデータの座標系によって単位が変わる）

これは、独りでQGISを適当に弄りまわしていても気づかないですね。

ちゃんとドキュメント読めよという話ではありますが。

とりあえず、QGIS上で正しくバッファを作成する方法を学べたので、作成したバッファをGeoJSONとして出力して、ブラウザ上で表示してみました。

<a href="http://shimz.me/datavis/gunma/maebashi/AED/index2.html">高崎・前橋AED設置場所　(半径300mのバッファを表示）</a>

というわけで、これが私のHackFestでの成果です。

今後も、QGIS関連のイベントを行う予定があるらしいので、できる限り参加して使いこなせるようになりたいと思います。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3614</wp:post_id>
		<wp:post_date>2014-07-07 11:37:35</wp:post_date>
		<wp:post_date_gmt>2014-07-07 02:37:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3614</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3615]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427386150;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3853;}i:1;a:1:{s:2:"id";i:3228;}i:2;a:1:{s:2:"id";i:2321;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】ドロネー三角分割図を作成してみた</title>
		<link>http://shimz.me/blog/d3-js/3617</link>
		<pubDate>Tue, 08 Jul 2014 00:05:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3617</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/delaunay/02/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/delaunay140708.jpg" alt="Delaunay triangulation" width="590" height="381" class="aligncenter size-full wp-image-3618" /></a>

<a href="http://shimz.me/example/d3js/delaunay/02/index.html">example</a>

ボロノイ図と対になるドロネー図をGoogle Map上に表示してみました。
D3がドローネ図を描画するために必要な座標の計算を行ってくれるので、簡単に表示することができます。

【参考】
<a href="http://ja.wikipedia.org/wiki/%E3%83%89%E3%83%AD%E3%83%8D%E3%83%BC%E5%9B%B3">ドローネ図</a>

<h2>サンプル</h2>
ドローネ図を描いている部分だけ。
 
<pre class="lang:js decode:true " >//ボロノイ変換関数
var voronoi = d3.geom.voronoi()
	.x(function(d){ return d.x } )
	.y(function(d){ return d.y } );
	
//ドロネー座標データ取得
var delaunay  = voronoi.triangles(positions); 

//ドロネー図パス描画	
var du = svgoverlay.selectAll(".du")
	.data(delaunay)
	.enter()
	.append("path")
	.attr("class", "du")
	.attr("d",function(dd, i) {
		return "M" + dd.map(function(d){
				return [d.x, d.y]
			}).join("L")  + "Z";
	})
	.attr({
		stroke:"blue",
		fill:"none",
		"stroke-width": 1
	});	
</pre> 

d3.geom.voronoiのtrianglesメソッドを使うことで、ドローネ図を描くための座標データが取得できます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3617</wp:post_id>
		<wp:post_date>2014-07-08 09:05:31</wp:post_date>
		<wp:post_date_gmt>2014-07-08 00:05:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3617</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3618]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385578;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2817;}i:1;a:1:{s:2:"id";i:4125;}i:2;a:1:{s:2:"id";i:2819;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsを用いて作成されたデータビジュアライゼーション事例まとめ。</title>
		<link>http://shimz.me/blog/d3-js/3620</link>
		<pubDate>Tue, 15 Jul 2014 02:01:30 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3620</guid>
		<description></description>
		<content:encoded><![CDATA[絶賛、夏バテ中です。

<img src="http://shimz.me/blog/wp-content/uploads/2014/07/321_tired-cat.jpg" alt="夏バテ" width="415" height="313" class="aligncenter size-full wp-image-3621" />


ここ数日間は、ホント「仕事して寝る」の繰り返しでブログに書くようなことも特に学べてないので手抜き更新です。

<a href="http://matome.naver.jp/odai/2140496004771647801">D3.js 事例</a>

D3.jsで作成されたデータビジュアライゼーションを集めてまとめました。
かなり有名な作品なども、確認してみるとD3.jsが使われていたりします。

いつか、こんなのが作れるようになりたいなーと眺める用です。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3620</wp:post_id>
		<wp:post_date>2014-07-15 11:01:30</wp:post_date>
		<wp:post_date_gmt>2014-07-15 02:01:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3620</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3621]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427219694;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3587;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:3378;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leaflet.jsを使って、巨大な画像を地図のように表示するプラグイン「Leaflet.Zoomify」</title>
		<link>http://shimz.me/blog/map/3622</link>
		<pubDate>Wed, 16 Jul 2014 01:18:09 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3622</guid>
		<description></description>
		<content:encoded><![CDATA[下記は画像なので動きません。

<a href="https://github.com/turban/Leaflet.Zoomify"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/Leaflet.Zoomify.jpg" alt="Leaflet.Zoomify" width="400" height="238" class="aligncenter size-full wp-image-3623" /></a>



「<a href="https://github.com/turban/Leaflet.Zoomify">Leaflet.Zoomify</a>」は、地図ライブラリの<a href="http://leafletjs.com/">Leaflet.js</a>を使用して画像を地図のように表示するプラグインです。

下処理として、「<a href="http://www.zoomify.com/express.htm">ZoomifyExpress4</a>」というアプリケーションを使って画像をタイル化します。（解凍したファイルの中から「Zoomify Converter.exe」を実行し、タイル化する画像を選択すれば後は自動で処理がおこなわれます）

タイルに変換すると容量がかなり増えるので気を付けてください。

<h2>サンプル</h2>
<a href="http://starmen.net/mother1/miscinfo/">STARMEN.NET</a>からダウンロードした「<a href="http://starmen.net/mother1/miscinfo/maps/eb0map_big.png">Full Map of MOTHER / EarthBound Zero</a>」画像をZoomifyExpress4を使ってタイル化し、Leaflet.Zoomifyで地図として表示しました。

※下記の地図は動きます。
<iframe width="100%" height="400" scrolling="no" src="http://shimz.me/example/leaflet/image/full.html"></iframe>

leaflet.jsを読み込んだ後に、L.TileLayer.Zoomify.jsを読み込んでください。
<pre class="lang:xhtml decode:true " >&lt;link rel="stylesheet" href="leaflet-0.7.3/leaflet.css" /&gt;
&lt;script src="leaflet-0.7.3/leaflet-src.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="L.TileLayer.Zoomify.js"&gt;&lt;/script&gt;  </pre> 

 基本的には、タイル化した画像が収められているフォルダを指定するだけです。
<pre class="lang:js decode:true " >var map = L.map('map').setView(new L.LatLng(0,0), 0);

L.tileLayer.zoomify('mother_map/', { //タイル画像フォルダを指定
    width: 16384,
    height: 14336,
    tolerance: 0,
    attribution: 'Image: &lt;a href="http://starmen.net/mother1/miscinfo/"&gt;starmen.net&lt;/a&gt;'
}).addTo(map);


map.setView(new L.LatLng(74.56673621013677, -117.18017578125));</pre> 

ちょー簡単！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3622</wp:post_id>
		<wp:post_date>2014-07-16 10:18:09</wp:post_date>
		<wp:post_date_gmt>2014-07-16 01:18:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3622</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3623]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427376212;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4142;}i:1;a:1:{s:2:"id";i:3693;}i:2;a:1:{s:2:"id";i:3583;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>久々にアクセス解析</title>
		<link>http://shimz.me/blog/analytics/3624</link>
		<pubDate>Wed, 16 Jul 2014 11:22:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3624</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="aligncenter size-full wp-image-3626" src="http://shimz.me/blog/wp-content/uploads/2014/07/tumblr_mt3d1rS5Jr1qewacoo10_r1_500.jpg" alt="アクセスまだかな〜まだかな〜" width="500" height="312" />

相変わらず、夏バテ気味で何もやってません。
書くことがないので、とりあえず久々にアクセス解析なんぞをやりました。

<a href="http://shimz.me/blog/analytics/3230">前回</a>調べてから、それなりに増えていて、いつの間にか月間５万PVを突破！
この辺りが、個人ブログの壁らしいので素直に嬉しいですね。

<img class="alignnone size-full wp-image-3625" src="http://shimz.me/blog/wp-content/uploads/2014/07/access20140716.jpg" alt="アナリティクス" width="590" height="302" />

<strong>月間アクセスの推移</strong>
PV:34,360 -&gt; 50,377
UU:13,920 -&gt; 16,975

もう少し頑張れば、去年の年末から２倍増ぐらいは目指せそうです。

で、Googleアナリティクスを弄りまわしながらいろいろ調べてみたのですが……前回、前々回とさして傾向に変化がありません。
基本的にGoogle(Search)依存なのは変わらず、といったところです。
（全然、参考にならない orz）

特に面白い動きも見つからなかったので、とりあえず、直近１ヶ月間でアクセス数の高かった記事をリストにしてみました。
<h3>直近１ヶ月の中での人気記事TOP10</h3>
<table class="statsDay" style="color: #626262;" cellspacing="0">
<tbody style="font-weight: inherit; font-style: inherit;">
<tr class="alternate" style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/">ホームページ / アーカイブ</a></td>
<td class="views" style="font-style: inherit;">4,248</td>
</tr>
<tr style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-2295-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/other/2295" target="_blank">「ライフゲームの世界」という動画が面白すぎて眠れなくなったのでブログ書く。</a></span></td>
<td class="views" style="font-style: inherit;">3,863</td>
</tr>
<tr class="alternate" style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-1265-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/jquery/1265" target="_blank">FullCalendar のカスタマイズ</a></span></td>
<td class="views" style="font-style: inherit;">1,414</td>
</tr>
<tr style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-2977-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/d3-js/2977" target="_blank">D3.jsはなぜ人気があるのか？　そして、なぜ難しいのか？</a></span></td>
<td class="views" style="font-style: inherit;">1,388</td>
</tr>
<tr class="alternate" style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-3144-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/iphoneipad/3144" target="_blank">iPadのプログラミングアプリの決定版になるかも？　iPadアプリが作成できる開発環境「JASIC」が凄い！</a></span></td>
<td class="views" style="font-style: inherit;">1,091</td>
</tr>
<tr style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-2781-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/programming/2781" target="_blank">[Codea]iPadでiPadアプリが作成できるiPadアプリがまた一つ増えました。</a></span></td>
<td class="views" style="font-style: inherit;">1,085</td>
</tr>
<tr class="alternate" style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-3583-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/map/3583" target="_blank">ハイクオリティでちょーかっこいいデータ視覚化地図が作れる「Leaflet-dvf」</a></span></td>
<td class="views" style="font-style: inherit;">904</td>
</tr>
<tr style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-2670-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/map/2670" target="_blank">Fusion TablesとGoogle Mapの連動が革命的に便利になっていた。</a></span></td>
<td class="views" style="font-style: inherit;">785</td>
</tr>
<tr class="alternate" style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-74-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/editor/74" target="_blank">エディタをKomodo Editに変えた10の理由</a></span></td>
<td class="views" style="font-style: inherit;">627</td>
</tr>
<tr style="font-weight: inherit; font-style: inherit;">
<td class="label" style="font-style: inherit;"><span class="post-2797-link" style="font-weight: inherit; font-style: inherit;"><a style="font-weight: inherit; font-style: inherit; color: #278dbc;" href="http://shimz.me/blog/d3-js/2797" target="_blank">【D3.js】グラフと地図を連動させる</a></span></td>
<td class="views" style="font-style: inherit;">557</td>
</tr>
</tbody>
</table>

　

なぜだか、「ライフゲーム」記事が急上昇。
こちらはTwitterで紹介いただいたようです。インフルエンサーの力絶大。
その他は、今までもコンスタントにアクセス数を稼いでいた記事です。
基本的に、期間を直近１年間に変えても変わらない感じ。

悲しいのは、D3や地図に関する記事は、ほとんどアクセス数に貢献していないところでしょうかｗ
まぁ、ニッチな世界であるような気はするので、仕方がないことなんですけど。
<h3>総括</h3>
まぁ、ある意味順調に成長しているとは言えるのでしょうか。
ただ、ジャンル的にはそろそろ頭打ちな感じもするので、ここらでブログ以外のコンテンツも作ってみたいという願望もあります。
（これもまた、ネタが思いつかないのですが）

しかし、こうやっていろいろ試したことが仕事に活きるといいんですけどねぇ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3624</wp:post_id>
		<wp:post_date>2014-07-16 20:22:49</wp:post_date>
		<wp:post_date_gmt>2014-07-16 11:22:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3624</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3626]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[久々にアクセス解析]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426783359;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3230;}i:1;a:1:{s:2:"id";i:2194;}i:2;a:1:{s:2:"id";i:2903;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「びわ湖大花火大会」のオープンデータをCSV／JSONで出力するページを作りました。</title>
		<link>http://shimz.me/blog/other/3629</link>
		<pubDate>Mon, 21 Jul 2014 01:54:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3629</guid>
		<description></description>
		<content:encoded><![CDATA[現在SPARQLエンドポイントが動作していないようです。
<hr/>

ｼｰｴｽﾌﾞｲ..ｼﾞｪｲｿﾝ..ﾄﾞｺﾆｱﾙ....

<img src="http://shimz.me/blog/wp-content/uploads/2014/07/rdf_scream.jpg" alt="rdf_scream" width="300" height="300" class="aligncenter size-full wp-image-3631" />

公開されている「<a href="http://opendata.shiga.jp/hanabi2014/">びわ湖大花火大会」に関するオープンデータ</a>をエンドポイントから取得してCSVとして出力するページを作りました。
基本的に各データセット毎に全件取得して出力します。
csvの他にシンプルな形に整形したJSONも出力するので、適当にコピペしてお使いください。
「Advanced」にチェックを入れると送信するクエリの内容を編集できます。

<a href="http://shimz.me/tool/rdf2csv_json/"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/rdf2csvjson.jpg" alt="rdf2csvjson" width="590" height="333" class="aligncenter size-full wp-image-3632" /></a>

<a href="http://shimz.me/tool/rdf2csv_json/">RDF to CSV/JSON</a>
（Chrome推奨、IEでは微妙です）

個人的に、「SPARQLでデータを取り出して使って」というのはハードル高いなーなんて思ったので作ってみました。

【追記】
JSONの出力にバグがあったので修正しました。
ついでに、GeoJSONでも出力するようにしました。

・参考
<a href="http://shimz.me/blog/google-map-api/3445">Google Map上にGeoJSONデータを表示する</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3629</wp:post_id>
		<wp:post_date>2014-07-21 10:54:50</wp:post_date>
		<wp:post_date_gmt>2014-07-21 01:54:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3629</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3631]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427139545;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3688;}i:1;a:1:{s:2:"id";i:2787;}i:2;a:1:{s:2:"id";i:2670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「YOKOHAMA datavisualizathon」に参加してきました。</title>
		<link>http://shimz.me/blog/other/3633</link>
		<pubDate>Mon, 21 Jul 2014 12:39:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3633</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.facebook.com/events/1448637512058581/"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/10489663_258017404406728_6779074521573566973_n.png" alt="LOCAL GOOD YOKOHAMA データビジュアライズソンvol.1" width="590" height="245" class="aligncenter border size-full wp-image-3636" /></a>

「<a href="https://www.facebook.com/events/1448637512058581/">LOCAL GOOD YOKOHAMA データビジュアライズソンvol.1</a>」に参加してきました。

データビジュアライソンというのは、データビジュアライゼーションを作成する<a href="http://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%83%E3%82%AB%E3%82%BD%E3%83%B3">ハッカソン</a>です。
以前から興味があったのとちょうどスケジュールが空いていたので参加してきました。

位置的な理由により(群馬遠い)、途中からの参加になってしまったのですが、会場には非常に多くの方それも様々な業種・ジャンルの方が多数集まっており、横浜市のオープンデータやデータ可視化などへの関心の高さを伺えました。

行政と地元のエンジニアやクリエーターが協力しあう体制が作られている事が、個人的には羨ましかったりします。

群馬でも……まぁ、これからですかね。


<h2>成果</h2>
さて、肝心のハッカソンについてですが、今までもくもく開発会などには参加した事が多少あるのですが、今回の様な本格的なハッカソンには初参加でした。

結果……個人的にいろいろと反省点が。
ぶっちゃけ準備不足でした。

ハッカソンの時間内で作ったものが以下です。
今回の制作では、横浜の地形を各エリアの人口に対する子供の比率で塗り分け、その上に小学校の位置(青)と保育所・幼稚園の位置(赤)、路線をマッピングするというのが目標だったのですが、データを見つけてD3で表示するので精一杯でした。

<a href="http://shimz.me/datavis/yokohama/old_index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/ykohamadatavizthon1407201.png" alt="" width="300" height="357" class="aligncenter border size-full wp-image-3634" /></a>

<a href="http://shimz.me/datavis/yokohama/old_index.html">example</a>

ホントはもっとオーバレイするデータがあったのですが、それらは間に合わず。
また、見せ方を工夫する余裕も無く時間切れとなってしまいました。

今回、一番の問題となったのが「コード書く以前にIISとの格闘に時間を費やしてしまったという事」というのが何とも悲しい限りです。（本気で、Mac持って行けばよかったと後悔(>_<)

でも、MACの方にはQGISが入っていなかったりするんでWin8マシンを持って行ったのですが、ローカルサーバーぐらい準備しておくべきでした。
(IISってデフォルトではMIMEタイプにCSVやJSONが設定されていないってことを今回初めて知りました）

不甲斐ないので、帰りの電車の中と家でひとり延長戦をしています、現在の進捗は以下。この辺りまで、ハッカソンの時間内にたどり着きたかった（ーー；）

とりあえず、ノートPC(win8)の方にも開発環境を本格的に構築することから始めないといかんですな。

<a href="http://shimz.me/datavis/yokohama/"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/ykohamadatavizthon1407202.png" alt="とりあえずver 1.0" width="300" height="357" class="aligncenter border size-full wp-image-3635" /></a>

<a href="http://shimz.me/datavis/yokohama/">example</a>

まだまだ要件を満たせていないので、もうちょっと作り込んでみようかと思ってます。

ともあれ、そんなアタフタしまくりのだったわけですが、非常に楽しく勉強になったので今後に活かしてまた参加したいなと思ってます。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3633</wp:post_id>
		<wp:post_date>2014-07-21 21:39:42</wp:post_date>
		<wp:post_date_gmt>2014-07-21 12:39:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3633</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3636]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1424957303;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3614;}i:1;a:1:{s:2:"id";i:3649;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>QGISでGeoJSONデータが読み込めない場合の対応</title>
		<link>http://shimz.me/blog/map/3639</link>
		<pubDate>Wed, 23 Jul 2014 01:57:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3639</guid>
		<description></description>
		<content:encoded><![CDATA[小ネタです。

<a href="http://geojsonlint.com/">GeoJSONLint</a>でデータ構造を確認して問題ないはずのGeoJSONデータがQGISで読み込めない場合、文字コードを確認しましょう。

↓のように「<strong>正しくないか認識できないデータソースです</strong>」というエラーが出る場合

<img src="http://shimz.me/blog/wp-content/uploads/2014/07/geojsonerror140723.jpg" alt="geojsonは正しくないか認識できないデータソースです。" width="590" height="53" class="alignnone size-full wp-image-3640" />

文字コードがUTF8であっても、「BOM(<a href="http://ja.wikipedia.org/wiki/%E3%83%90%E3%82%A4%E3%83%88%E3%82%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%83%9E%E3%83%BC%E3%82%AF">バイトオーダーマーク</a>)付き」だとQGISでは読み込めません。


「<a href="http://notepad-plus-plus.org/">notepad++</a>」などを使ってBOM無しのUTF8に変換してください。

<img src="http://shimz.me/blog/wp-content/uploads/2014/07/encoding1407232.png" alt="notepad++でUTF8(BOM無し)に変換" width="590" height="297" class="alignnone size-full wp-image-3643" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3639</wp:post_id>
		<wp:post_date>2014-07-23 10:57:51</wp:post_date>
		<wp:post_date_gmt>2014-07-23 01:57:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3639</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3642]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427213031;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3465;}i:1;a:1:{s:2:"id";i:2575;}i:2;a:1:{s:2:"id";i:3789;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ボロノイ図を使って、地図上の特定の位置から最も近い施設を見つけ出す。</title>
		<link>http://shimz.me/blog/d3-js/3645</link>
		<pubDate>Mon, 28 Jul 2014 00:17:17 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3645</guid>
		<description></description>
		<content:encoded><![CDATA[昨日は「Code for SAITAMA ハッカソン ( Hack for クリテリウム)」に参加してきました。

ハッカソンに関する感想は後ほど記事にするとして、ハッカソンの中で「地図上の特定のポイントから、もっとも近くの施設を見つけ出す」という処理をD3.js使って描いたボロノイ図を利用して実装したので、ボロノイ図の活用方法の一つとして紹介したいと思います。
（ここでの"近く"とは直線距離が一番短くなる施設の事を指します。道なりに移動してもほぼ近似するという研究結果があるので、おおよそ一番近くの施設と言えます)


<h2>作ったもの</h2>
実際にハッカソンで使ったものとは別のコードです。
地図のクリックした地点から最も近くの施設を見つけ出します。

<a href="http://shimz.me/example/d3js/voronoi/06/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/07/voronoi140727.png" alt="ボロノイ図" width="590" height="589" class="aligncenter size-full wp-image-3646" /></a>

<a href="http://shimz.me/example/d3js/voronoi/06/index.html">example</a>

以前「<a href="http://shimz.me/blog/d3-js/3609">ボロノイ図を使ってラベルの重なり合いを解消する</a>」という記事を書きましたが、基本的にはやっていることは変わりません。

まず、施設の点データを母点として地図上に透明なボロノイ図を描き、セル(ボロノイ領域)がクリックされた際にクリック座標から、ボロノイ領域内の母点へとライン＆サークルを描画しているだけです。
ボロノイ領域内であれば、どこであってもその領域の母点が最も直線距離が短くなるというボロノイ図の特性を利用しています）

<img src="http://shimz.me/blog/wp-content/uploads/2014/07/voronoi1407272.png" alt="ボロノイ図" width="418" height="245" class="alignnone size-full wp-image-3647" />

ボロノイ図は、最短経路検索などにも活用されるとても奥の深い図形なので、ぜひ利用してみてください。

なお、以前の記事ではGoogle Maps APIをベース地図として使いましたが、今回はLeaflet.js(Mapbox)をベースに使っています。
このように、色んな地図サービスと組み合わせて使えるのがD3.jsの利点だと思います。

<h2>参考</h2>
D3を使ってボロノイ図を描く方法は以下を。

<a href="http://shimz.me/blog/d3-js/2817">【D3.js】地図上にボロノイ図を描く</a>
<a href="http://shimz.me/blog/d3-js/2819">【D3.js】Google Map上にボロノイ図を描く</a>




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3645</wp:post_id>
		<wp:post_date>2014-07-28 09:17:17</wp:post_date>
		<wp:post_date_gmt>2014-07-28 00:17:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3645</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3646]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[ボロノイ図を使って、地図上の特定の位置から最も近い施設を見つけ出す。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427389293;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3387;}i:1;a:1:{s:2:"id";i:3609;}i:2;a:1:{s:2:"id";i:3684;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「Code for SAITAMA ハッカソン Hack for クリテリウム」に参加してきました。</title>
		<link>http://shimz.me/blog/other/3649</link>
		<pubDate>Tue, 29 Jul 2014 02:10:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3649</guid>
		<description></description>
		<content:encoded><![CDATA[先週末の土日にCode for Saitamaハッカソンに参加してきました。

<a href="https://atnd.org/events/52446">Code for　SAITAMA ハッカソン
Hack for クリテリウム　</a>

二日間にわたる本格的なハッカソンです。
<a href="http://shimz.me/blog/other/3633">前回</a>の反省も含め、準備はばっちり「ローカルサーバー(IIS)がまともに動かねぇ」みたいな初歩的なことで躓くこともなく、だいぶハッカソンらしいことができたのではないかと(^^；)

事前にアイデアソンがあったらしいのですが、そちらには参加できなかったため、アイデアソンで選定されたいくつかのプロジェクトの中から、自分のスキルが生かせそうなチームに入れていただきました。

かろうじて「これが得意です」と言えそうなものは「Web上で地図を使った仕組みを作ること」だったので、wifiのアクセスポイント接続時の認証画面と広告を組み合わせたプロジェクトに参加させていただきました。
私が担当させていただいたのは、wifiのアクセスポイントを地図上に表示するフロントエンド部分。
プロジェクトとしては、アクセスポイントを提供する機器とPacketFenceを使ったweb認証の仕組みがメインではあるのですが、ハードウェアが関わってくる部分もあったのでハッカソン中に作るのは難しく、ひとまずモックアップを作成する形に。（言葉ではなかなか説明が難しい内容ですが、資料などが公開されましたら追記します）

会場が17時に閉まった後も、皆でコワーキングスペース「7F」さんに移動して引き続きコーディングを行ったり、二日目にはピザを食べたり(コーラとピザ。ハッカソンっぽいｗ)と、とても楽しかったです。

印象としてはCodo for Saitamaはエンジニアの方が結構多いコミュニティでした。あと、偉い人も多かった。

某大きな企業の協賛を得ていたり、途中自治体の関係者の方がこられたり、ハッカソンの審査員としても参列されていたりと、こちらもがっつりタッグを組んで進めている感じが素晴らしいなと思いました。

巻き込みの力すごい。

個人的には、反省点もないわけでは無いんですが、今回も非常に楽しい経験をさせていただいたので、今後もこういったイベントには積極的に参加していきたいなと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3649</wp:post_id>
		<wp:post_date>2014-07-29 11:10:50</wp:post_date>
		<wp:post_date_gmt>2014-07-29 02:10:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3649</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[「Code for SAITAMA ハッカソン Hack for クリテリウム」に参加してきました。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427291279;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3645;}i:1;a:1:{s:2:"id";i:3614;}i:2;a:1:{s:2:"id";i:4108;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最適配置の数理</title>
		<link>http://shimz.me/blog/book/3650</link>
		<pubDate>Wed, 30 Jul 2014 01:25:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3650</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4254126069/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41njKspDjYL._SL160_.jpg" alt="最適配置の数理 (シリーズ「現代人の数理」)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4254126069/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">最適配置の数理 (シリーズ「現代人の数理」)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.07.30</div></div><div class="amazlet-detail">岡部 篤行 鈴木 敦夫 <br />朝倉書店 <br />売り上げランキング: 306,687<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4254126069/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<blockquote>多くの施設を利用して営まれている現代生活において、最適施設配置問題を考える重要性は、ますます高まってきている。この本はその施設配置最適化について、ボロノイ図を用いて平易に解説したものである。最終章に応用練習問題つき。</blockquote>

最近はまっているボロノイ図に関する書籍です。
以前、「<a href="http://shimz.me/blog/book/3387">なわばりの数理モデル</a>」という書籍を紹介したことがありますが、あちらがボロノイ図そのものに対する解説が多かったのに対して、こちらはより具体的にボロノイ図を利用しての問題解決に焦点が当てられています。

目次をみるだけでも、「ポストの最適配置／中学校配置の評価／移動図書館問題／石焼いも屋問題／シュタイナー問題／定期市問題／バス停問題／アイスクリーム屋台問題」と、心躍る題目が並んでます。

ちなみに出版社の解説ページでは「ボロノイ図を用いて高校程度の数学的素養があれば充分理解できるよう平易に解説」と書いてあるのですが……すんげー難しいんですけど！

高校どころか、中学程度の数学ですら怪しくおぼつかないのでホント真面目に数学勉強しておけばよかったなぁ、と後悔しきりです。

それでも本書で提示される問題とその解決法は非常に魅力的なので、分からないながらもしょっちゅう持ち歩いて読み返しています。

そのぐらい夢中になれる本なので、ボロノイ図に興味のある方は是非。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3650</wp:post_id>
		<wp:post_date>2014-07-30 10:25:44</wp:post_date>
		<wp:post_date_gmt>2014-07-30 01:25:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3650</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3652]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427390539;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3387;}i:1;a:1:{s:2:"id";i:3609;}i:2;a:1:{s:2:"id";i:3645;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「はぁー？　群馬にだってWebの会社とかありますし。」</title>
		<link>http://shimz.me/blog/other/3654</link>
		<pubDate>Thu, 31 Jul 2014 00:11:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3654</guid>
		<description></description>
		<content:encoded><![CDATA[＼なめんな／
<img src="http://shimz.me/blog/wp-content/uploads/2014/07/gunmachan.jpg" alt="gunmachan" width="100" height="93" class="alignnone size-full wp-image-3656" />


https://twitter.com/_shimizu/status/494442845336383488

 &nbsp; 


東京で働いていたころの同僚に数年ぶりに会い、近況などを聞いていたら「東京で消耗され過ぎたので地方にでも移住するかな」と言いていたので「じゃぁ、群馬は？近いし」と言ったってみたところ「<strong>でも、群馬ってWebの仕事とかないでしょう？ っていうかインターネットできんの？</strong>」みたいなことを言われてカッなって群馬県のWeb系の会社のまとめ作った、反省はしていない。

<a href="http://matome.naver.jp/odai/2140670218444113101">はぁー？　群馬にだってWebの会社とかありますし。（群馬のWeb系企業まとめ）</a>

何の気なしに調べてみたら、思っていたより多くてびっくり。
まぁ、会社があるなら仕事もある……とは限らないけれども。


<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4107717380/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/515TSq0mlJL._SL160_.jpg" alt="お前はまだグンマを知らない 1 (BUNCH COMICS)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4107717380/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">お前はまだグンマを知らない 1 (BUNCH COMICS)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.07.30</div></div><div class="amazlet-detail">井田 ヒロト <br />新潮社 (2014-03-08)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4107717380/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

ちなみに、アイコンは以下サイトからいただいたものを使わせていただきました。

<a href="http://blog.livedoor.jp/gestsan/tag/%E3%81%90%E3%82%93%E3%81%BE%E3%81%A1%E3%82%83%E3%82%93%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%8A%E3%83%AB%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E7%B4%A0%E6%9D%90">ぐんまちゃんオリジナルアイコン素材</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3654</wp:post_id>
		<wp:post_date>2014-07-31 09:11:37</wp:post_date>
		<wp:post_date_gmt>2014-07-31 00:11:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3654</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3655]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_34a0fe6e7461d9035e7b9d041b634e5a</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>数年ぶりに会った友人に群馬をdisられるなど。くそう都民めぇ、ぐぬぬ。</p>&mdash; 清水正行 (@_shimizu) <a href="https://twitter.com/_shimizu/statuses/494442845336383488">July 30, 2014</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1bb3463bdd36b193d8436ee9d45294e0</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>数年ぶりに会った友人に群馬をdisられるなど。くそう都民めぇ、ぐぬぬ。</p>&mdash; 清水正行 (@_shimizu) <a href="https://twitter.com/_shimizu/status/494442845336383488">July 30, 2014</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_1bb3463bdd36b193d8436ee9d45294e0</wp:meta_key>
			<wp:meta_value><![CDATA[1418923551]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426903660;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3004;}i:1;a:1:{s:2:"id";i:3066;}i:2;a:1:{s:2:"id";i:3440;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「ウチの会社のホームページってホントに役に立ってるのかな？」と思った時に読んでみると良いかもしれない本</title>
		<link>http://shimz.me/blog/book/3305</link>
		<pubDate>Fri, 22 Aug 2014 02:27:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3305</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wp-d.org/2014/01/06/5529/">自分でWebサイトやブログを作って収益化を図る際に参考になる10冊の書籍の紹介 | WP-D</a>

<blockquote>多くのウェブ制作のプロがアフィリエイターを「下」に見ているようですが、「稼ぐサイトの１つも作れないで何がプロやねん」というのが私の考えです。
</blockquote>

リンク先の記事で引用されていた文章ですが……これは、まぁ、その通りですよねーと思ったりします。
アフェリエイトに限らず、"自社のブランディング"のためにサイトを作成したりもしますが、「で。作ったサイトは実際のところ役にたってんの？」という視点は、"作る側"も"作ってもらう側"も常に意識しておくべきだと最近感じてます。わりとこの辺を有耶無耶にしてしまいがちなところってあるので。

さて、リンク先の記事では主に「アフェリエイトによる収益化」を考える際に参考になる書籍が紹介されていましたが、ここでは、自社サイトの活用について参考になりそうな本を２冊ほど紹介したいと思います。

&nbsp;
&nbsp;

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477415606X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51srzkjD5mL._SL160_.jpg" alt="ネットで儲ける王様のカラクリ ~物語でわかるこれからのWebマーケティング" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477415606X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">ネットで儲ける王様のカラクリ ~物語でわかるこれからのWebマーケティング</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.01.07</div></div><div class="amazlet-detail">竹内 謙礼 <br />技術評論社 <br />売り上げランキング: 96,652<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477415606X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<strong>「ホームページ制作なんて，人間の仕事じゃない</strong>」の一言から始まる、まったくもって身も蓋もない小説仕立てのビジネス書です。さすがに、この本の中に登場するような悪質な「WEB制作会社」は、最近は少なくなってきたのではないかと思いますが、それでもググってみるとそれなりに健在だったりしますね。
また、顧客が「解っていない」ことを利用して、いっこうに効果の出てないサイトの運営費で稼ぐモデルはまだまだ多いようです。
本書ではかなり強烈なWeb制作業界disが繰り広げられますが、かといって批判だけに終始するわけではなく、後半では中小企業が自社サイトを活用する具体的な方法論がそれなりに納得できる内容で語られるので、興味がある方は読んでみてください。また、「作成する側」も自戒を込めて目を通しておくと良いような気がします。

Amazonのレビューに書かれていた内容があまりにも「あるある」だったので引用しておきます。

<blockquote>まず自分でＨＰを作った。
絶対売れると思ったが自己満足で誰も来ない、知らない店のままだった。

次に、検索して小さなホームページ制作会社（個人）を調べて相談した。

ＨＰの制作を依頼して、●十万支払った。全然、売れなかった。
彼は集客の方法なんて知らなかった。
ただ私と気が合い、きれいなＨＰを作ってくれるだけだった。

最後のチャンスと別の会社のセミナーに参加した。

成功率80％だとコンサルは胸を張った。●十万払った。
ＨＰもセミナーと提携している会社に再度依頼し●十万払った。
相変わらず売れなかった。
売るためにはあと●十万必要だろう。
失敗した20％の中に入り、そこを離脱。

コンサルからはあなたの努力が足らない、真剣さが足らないと言われた。

その合間、合間に竹内さんの本を数冊読んで、ようやく分かった。
自分の実力と無知に。

今ようやく、自分の身の丈に合ったサイトで少しづつだけど物が売れ始めた。</blockquote>

同じような状況にある方は読んでみると良いのではないでしょうか。


&nbsp;
&nbsp;

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4799101676/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51kSyEruqzL._SL160_.jpg" alt="大変です!! 社長!  御社のホームページが死にかけています!" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4799101676/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">大変です!! 社長!  御社のホームページが死にかけています!</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.01.07</div></div><div class="amazlet-detail">望月 聡 <br />すばる舎 <br />売り上げランキング: 233,978<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4799101676/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

こちらは最早タイトルからして身も蓋もないわけですが。
主に物販系のサイトに関する内容が多いですが、基本的な考え方は別ジャンルの企業サイトにも通じるものだと思います。「最先端」なクラスタではまず語られない、ある意味泥臭くだからこそ実用的なノウハウが掲載されます。
とくにサイトのデザインに関しては「売れたデザイン」と「売れなかったデザイン」のスクリーンショットを比較して理由を解説してくれるので、分かり易く納得感もあります。
たまに話題にあがる「かっこいい(Cool)なデザイン」が必ずしも「効果のあるデザイン」ではない問題なども絡んできます。
(まぁ……物を売ることに関しては、楽天メソッドはやっぱ強いですよねーとか思うわけですが)
ECサイトを考えているかたは参考に読んでみてはいかかでしょうか。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3305</wp:post_id>
		<wp:post_date>2014-08-22 11:27:26</wp:post_date>
		<wp:post_date_gmt>2014-08-22 02:27:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3305</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3704]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[「ウチの会社のホームページってホントに役に立ってるのかな？」と思った時に読んでみると良いかもしれない本]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370132;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2194;}i:1;a:1:{s:2:"id";i:2575;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[D3+Leaflet]国土地理院さん渾身のベクトルタイルで遊んでみた。</title>
		<link>http://shimz.me/blog/d3-js/3659</link>
		<pubDate>Sat, 02 Aug 2014 05:35:28 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3659</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/leaflet/vectolMap/index2.html#17/36.32236/139.01306"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/vectoltilemap140802.jpg" alt="ベクトルタイルマップ" width="590" height="282" class="alignnone size-full wp-image-3660" /></a>

<a href="http://www.gsi.go.jp/johofukyu/johofukyu40039.html">ベクトルタイルの提供実験について｜国土地理院</a>

<a href="http://shimz.me/blog/d3-js/3595">FOSS4G 2014 Hokkaido</a>にて会場をザワつかせたベクトルタイルがとうとう公開されました。
私も去年の<a href="http://shimz.me/blog/d3-js/3181">Advent Calendar</a>でちょこっとだけ紹介したことがあるのですが、それ以来あまり触っていなかったので、これを機にいろいろ遊んでみました。

<a href="http://gsi-cyberjapan.github.io/vector-tile-experiment/#17/36.10347/140.08741">道路中心線ベクトルタイル表示サンプル</a>

国土地理院さんが用意してくれた上記サンプルを弄って遊んでいたのですが……サンプルで使われているTileLayer.GeoJSON.jsプラグインでは、オーバーレイされるPathを直接弄る方法が分からず右往左往。
（onEachFeatureのコールバック内でPath要素に直接アクセスできるかな？ と思ったのですが、イベント発火時にはDOM上にpathが追加されていないのでアクセスできませんでした）

TileLayer.GeoJSON.jsでもスタイルの指定やフィルタリングなど行えるので特に問題ないのですが、せっかくのベクトルタイルデータ、できることなら道路の一本一本まで自分自身でコントロールしたい！

そう思って、いろいろ探してみたのですがタイルデータロード時にPath要素に直接アクセスする方法を結局みつけられなかったので、TileLayer.GeoJSON.jsを使わず、D3.jsを使って描画するTileLayer.d3GeoJSON.jsを作成しました。

D3.jsで描画しているので、オーバーレイされているPath全てにGeoJSONデータが束縛されています。
これで、いつも通りD3を使っていかようにも操作できますよ！

<h2>D3でベクトルタイルを描画する</h2>
今のところ、レイヤーコントローラーと連動しないなど、いたるところにバグがあります。例の如くChromeでしか動作確認してません。
<pre class="lang:js decode:true " title="TileLayer.d3GeoJSON.js" >L.TileLayer.d3GeoJSON =  L.TileLayer.extend({
	tileNodes:null,
	onAdd : function(map) {
		this._map = map;
		L.TileLayer.prototype.onAdd.call(this,map);
		this._path = d3.geo.path().projection(function(d) {
			var point = map.latLngToLayerPoint(new L.LatLng(d[1],d[0]));
			return [point.x,point.y];
		});
		this.on("tileunload",function(d) {
			if (d.tile.xhr) d.tile.xhr.abort();
			if (d.tile.nodes) d.tile.nodes.remove();
			d.tile.nodes = null;
			d.tile.xhr = null;
		});
	},
	onRemove: function (map) {
		d3.selectAll(".d3-geojson-layer").remove();
	},	
	_loadTile : function(tile,tilePoint) {
		var self = this;
		this._adjustTilePoint(tilePoint);

        if (!tile.nodes &amp;&amp; !tile.xhr) {
            tile.xhr = d3.json(this.getTileUrl(tilePoint),function(error, geojson) {
                if (error) {
					console.log(error);
                } else {
					
					if (self.options.filter){
						var tmp;
						tmp = geojson.features.filter(self.options.filter);
						geojson.features = tmp;
					}
					
					tile.xhr = null;
					tile.nodes = d3.select(map._container).select("svg").append("g")
						.attr("class", "d3-geojson-layer leaflet-zoom-hide");
					tile.nodes.selectAll("path")
					.data(geojson.features).enter()
					.append("path")
					.attr("d", self._path)
					.attr(self.options.attr)
					.style(self.options.style)
					.on("click", self.options.onClick)
					.on("mouseover", self.options.onMouseover )
					.on("mouseout", self.options.onMouseoute )
					;
				}
			});
		}
	}
});
</pre> 

こんな感じで使います

 
<pre class="lang:js decode:true " >//ベクトルタイル設定
var vec =  new L.TileLayer.d3GeoJSON(
	"http://cyberjapandata.gsi.go.jp/xyz/experimental_rdcl/{z}/{x}/{y}.geojson",
	{
		"attr":{
			"class":function(d){
				return d.properties.rID ;
			},
			"stroke-width": 4,
			"stroke": "black"
		},
		"style": {
			"cursor": "pointer"
		},
		"layerName": "vectile",
		"onClick":function(d){
			  alert(JSON.stringify(d.properties, null, " "));
		}
	}
)


//地理院タイル（標準地図）設定	
var std = new  L.tileLayer(
	'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
	{
		attribution: "地理院タイル（標準地図）", 
		opacity: 0.4,
	})

var map = L.map("map", {
		center: [36.322356, 139.013057], zoom: 17,
		layers: [vec, std]
	});

map.options.maxZoom = 18;
map.options.minZoom = 10

map._initPathRoot();

L.control.scale({imperial: false}).addTo(map);
L.control.layers({}, {
	'地理院タイル（標準地図）': std,
	'道路中心線': vec
}).addTo(map);
</pre> 


<h3>遊んでみた</h3>

d3.jsを用いてベクトルタイルを描画。道路をクリックすると属性データが見れます。
<a href="http://shimz.me/example/leaflet/vectolMap/index2.html#17/36.32236/139.01306">example1</a>

Path要素にマウスオーバーイベントを設定。国道、市区町村道等、都道府県道、それぞれでマウスオーバーしたときの色を変えてみました。
無駄にアニメーションします。……重いdeth。
<a href="http://shimz.me/example/leaflet/vectolMap/index3.html#17/36.32236/139.01306">example2</a>

zoomレベルに応じて表示する道路を間引いたり線の太さを変えてみたりしました。
間引く道路は、幅(rnkWidth)の値をつかって判別しています。
<a href="http://shimz.me/example/leaflet/vectolMap/index4.html#16/36.3154/139.0481">example3</a>


ベクトルタイルデータは、ラスタタイルに比べて利用する側が好き勝手に操作して遊ぶことができる面白いサービスです。
皆さんもぜひ活用してみてください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3659</wp:post_id>
		<wp:post_date>2014-08-02 14:35:28</wp:post_date>
		<wp:post_date_gmt>2014-08-02 05:35:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3659</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3660]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427377796;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3134;}i:1;a:1:{s:2:"id";i:3696;}i:2;a:1:{s:2:"id";i:3714;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>めちゃくちゃわかりやすいFunctional JavaScriptチュートリアル</title>
		<link>http://shimz.me/blog/javascript/3662</link>
		<pubDate>Tue, 05 Aug 2014 01:18:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3662</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/414qGlNpcHL._SL160_.jpg" alt="JavaScriptで学ぶ関数型プログラミング" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">JavaScriptで学ぶ関数型プログラミング</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.08.05</div></div><div class="amazlet-detail">Michael Fogus <br />オライリージャパン <br />売り上げランキング: 209,036<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


夏ですね。暑いですね。
私の部屋のクーラーは数年前から故障したままなので、家に帰ってから何もやりたくありません。というかパソコン使うとサウナみたいになるしぶち壊れそう。

なので、本日も小ネタです。

何となくネットをさまよって居たらJavaScriptを関数型のパラダイムで記述する、ひじょうにわかり易いチュートリアル記事を発見しました。

<a href="https://nicolas.perriault.net/code/2013/functional-javascript-for-crawling-the-web/">Functional JavaScript for crawling the Web | Code | Nicolas Perriault</a>

テーブルからデータを取得する一連の処理を、一段階づつFanctionalなコードへと書き替えていくチュートリアルです。
コードを書き替えていく過程が分かり易く提示されているので、ぶっちゃけ英語が読めなくてもサンプルコードを追っていくだけで理解できる素晴らしいチュートリアルです。

ただ、ES6の文法で書かれているので(アロー関数とか)そこだけ、ちょっとなれないと読み辛いかもしれません。
Functional JavaScriptingに興味ある方にお勧めです。

<h2>サンプル</h2>
ES5で書いてみました。

<div data-height="604" data-theme-id="467" data-slug-hash="idmuK" data-default-tab="js" class='codepen'><pre><code>/*
 *Functional JavaScript for crawling the Web
 *https://nicolas.perriault.net/code/2013/functional-javascript-for-crawling-the-web/
 *
 */



/*************************************************** *
 * Helper Fantion
 *
 *************************************************/

//デバッグ用	
function logs(){
	console.log(arguments);
	return arguments;
}

	
//domから要素を取得
function nodes(sel, root){
	return (root || document).querySelectorAll(sel);
}

//nodesの中から特定の要素を見つけ出す
function finder(selector) {
  return function(root) {
    return nodes(selector, root);
  }
}

//与えられた関数を配列のすべての要素に対して適用
function map(fn, iterable){
	return [].map.call(iterable, fn)
}

//オブジェクトからプロパティを指定して取得
function prop(name){
	return function(object){
		return object[name];
	}
}

//functionを順番に実行
function sequence() {
	var fns = Array.prototype.slice.call(arguments);
	return fns.reduce(function(comp, fn) {
		return function(){
			var args =  Array.prototype.slice.call(arguments);
			return comp(fn.apply(null, args))
		};
	});
};


//隣り合う 2 つの配列要素に対して（左から右へ）同時に関数を適用
function reduce(fn, init, iterable){
	return [].reduce.call(iterable, fn, init)
}

//関数合成
function compose(){
	var fns = Array.prototype.slice.call(arguments);
	return sequence.apply(null, fns.reverse());
}

//カリー化
function curry( orig_func ) {
	var ap = Array.prototype;
	var args = arguments;
	
	function fn() {
		ap.push.apply( fn.args, arguments );
	
		return fn.args.length &lt; orig_func.length
		  ? fn
		  : orig_func.apply( this, fn.args );
	};
	
	return function() {
		fn.args = ap.slice.call( args, 1 );
		return fn.apply( this, arguments );
	};
};

//部分適用
function partial( orig_func ) {
	var aps = Array.prototype.slice,
	args = aps.call( arguments, 1 );
	
	return function() {
		return orig_func.apply( this, args.concat( aps.call( arguments ) ) );
	};
};


/**************************************************
 *
 * 以下、main
 *
 *************************************************/

//テーブルからrow要素を取得
var  rows = nodes(&quot;tbody tr&quot;);
//rowsからtdを取得
var findCells = finder(&quot;td&quot;);
//セルのテキストを取得
var getText = prop(&quot;textContent&quot;);

var getFirst = prop(0);
var getSecond = prop(1);
var getThird = prop(2);

/*******************************
 * テーブルの1行目(国名)を取得
 *******************************/
console.log( &quot;first-ColumnList&quot;, map(compose(findCells, getFirst, getText), rows) )

/*******************************
 * 途中の処理にlogsを挟んでデバッグ
 *******************************/
console.log( &quot;debug&quot;, map(compose(findCells, getFirst, logs, getText), rows) )


/*******************************
 * 人口の合計を取得
 *******************************/
var sum = function(a, b) {
	return a + b;
}
var populations  =  map(compose(findCells, getSecond, getText, parseFloat), rows);
console.log(&quot;sum-populations&quot;, reduce(sum, 0, populations));



/*******************************
 * データをオブジェクトに変換
 *******************************/
var asObject = function(data){
	return {
		name:getFirst(data),
		population: parseFloat(getSecond(data)),
		gnp:parseFloat(getThird(data))
	}
};
var getTexts = partial(map, getText); //getText関数をmap関数に部分適用して、arrayにgetTextを使えるようにする
console.log(&quot;toObject&quot;,  map(compose(findCells, getTexts, asObject), rows ))



</code></pre>
<p>See the Pen <a href='http://codepen.io/shimizu/pen/idmuK/'>Functional JavaScript for crawling the Web</a> by shimizu masayuki (<a href='http://codepen.io/shimizu'>@shimizu</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
</div><script async src="//codepen.io/assets/embed/ei.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3662</wp:post_id>
		<wp:post_date>2014-08-05 10:18:11</wp:post_date>
		<wp:post_date_gmt>2014-08-05 01:18:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3662</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3663]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427368321;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3015;}i:1;a:1:{s:2:"id";i:1167;}i:2;a:1:{s:2:"id";i:3737;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>責任の取りようもない事</title>
		<link>http://shimz.me/blog/other/3664</link>
		<pubDate>Wed, 06 Aug 2014 02:18:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3664</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/08/tumblr_mt3d1rS5Jr1qewacoo10_r1_500.jpg" alt="なんかなー" width="500" height="312" class="aligncenter size-full wp-image-3665" />

後から振り返って「あぁすれば良かった」「こうすれば防げていた」なんていくらでも言えるんだけど、本当にそれで防げたかどうかなんて誰にもわからない。

たとえその意見が正しかったとしても、誰もが常に正しい判断が下せるわけでもないしどんなに気をつけていたってミスは起こるしバグは生まれる、ソフトウェアでも組織でも家庭でも。

最近のニュースを見ていると、「こんなん責任の取りようもないよなー」とか「そもそも防ぎようもないがな」とか「教育とかそいう問題でもないだろう」みたいな話題が沢山あるんだけれど、「事が起きた以上、誰かが責任を取らないと絶対に許さない」みたいな社会だと、なんかこう無限責任の底なし沼みたいなものに沈んでいく気がする。

同じことが発生するのをできる限り減らすために原因を追究するのは必要だけど、それが過去に遡って"正しいことをしなかった誰か"を見つけ出して責任を取らせることが目的になると、「エビデンスを残すために大量のExcelスナップショットが必要」みたいな事から抜け出せなくて、根本的な解決にはならないのに"何かあった時に自分には責任がない事を証明するための"高コストな作業だけがどんどん増えていく世の中になるような気がする。


<a href="http://togetter.com/li/701166">SIerの闇・Excelにエビデンス貼付け - Togetterまとめ</a>



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3664</wp:post_id>
		<wp:post_date>2014-08-06 11:18:05</wp:post_date>
		<wp:post_date_gmt>2014-08-06 02:18:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3664</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3665]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427307429;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2609;}i:1;a:1:{s:2:"id";i:1031;}i:2;a:1:{s:2:"id";i:3711;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】多角形Brushプラグイン</title>
		<link>http://shimz.me/blog/d3-js/3670</link>
		<pubDate>Mon, 11 Aug 2014 00:19:16 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3670</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://gist.github.com/gtb104/3667340"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/polybrush140806-1.jpg" alt="polybrush example" width="590" height="308" class="aligncenter size-full wp-image-3668" /></a>

D3.jsの<a href="http://shimz.me/blog/d3-js/3545">brash機能</a>では長方形での選択しかできませんが、<a href="https://gist.github.com/gtb104/3667340">polybrushプラグイン</a>を使うと多角形(ポリゴン)での選択が可能となります。

公式のサンプルではボロノイ描画などが含まれているので、もっとシンプルにサークルを選択するだけの例題を作成しました。

<h2>サンプル</h2>
<a href="http://shimz.me/example/d3js/brushing/polybrush/"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/polybrush140806-2.jpg" alt="simple polybrush example" width="590" height="300" class="aligncenter size-full wp-image-3669" /></a>

<a href="http://shimz.me/example/d3js/brushing/polybrush/">example</a>

d3.jsとともにpolybrush.jsを読み込んでください。
 
<pre class="lang:xhtml decode:true " >&lt;script type="text/javascript" src="http://d3js.org/d3.v2.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="polybrush.js"&gt;&lt;/script&gt;</pre> 
 
<pre class="lang:js decode:true " >var w = 960;
var h = 500;

//svg要素設置
var svg = d3.select("#chart")
	.append("svg:svg")
	.attr("width", w)
	.attr("height", h);

//データセット作成
var dataSet = d3.range(200).map(function(d) {
	return  {x:Math.random() * 1000, y:Math.random() * 1000};
});

//スケール初期化
var xScale = d3.scale.linear().domain([0, 1000]).range([0, w]);
var yScale = d3.scale.linear().domain([0, 1000]).range([0, h]);

//brash初期化
var brush = d3.svg.polybrush()
	.x(d3.scale.linear().range([0, w]))　
	.y(d3.scale.linear().range([0, h]))
	.on("brushstart", function() {
		svg.selectAll(".selected").classed("selected", false);
	})
	.on("brush", function() {
		//ポイントがbrush選択範囲内に存在していたらselectedクラスを付加する
		svg.selectAll(".point").classed("selected", function(d) {		
			if ( brush.isWithinExtent(xScale(d.x), yScale(d.y)) ) {
				console.log("hit", d.x+":"+d.y);
				return true;
			} else {
				return false;
			}
		});
	});

//brush設置	
svg.append("svg:g")
	.attr("class", "brush")
	.call(brush);

//ポイント(circle)設置    
var  points = svg.append("svg:g").attr("id", "points");
points.selectAll("circle")
	.data(dataSet)
	.enter()
	.append("svg:circle")
	.attr("class", "point")
	.attr("id", function(d, i) { return "point-"+i; })
	.attr("transform", function(d) { return "translate(" + [xScale(d.x), yScale(d.y)] + ")"; })
	.attr("r", 4)
	.attr('stroke', 'none');
</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3670</wp:post_id>
		<wp:post_date>2014-08-11 09:19:16</wp:post_date>
		<wp:post_date_gmt>2014-08-11 00:19:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3670</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3668]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427306385;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2635;}i:1;a:1:{s:2:"id";i:2881;}i:2;a:1:{s:2:"id";i:2785;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leaflet.jsで作成した地図上にお天気情報をオーバーレイする</title>
		<link>http://shimz.me/blog/map/3671</link>
		<pubDate>Wed, 06 Aug 2014 23:57:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3671</guid>
		<description></description>
		<content:encoded><![CDATA[以前、「<a href="http://shimz.me/blog/map/2656">Google Map上に雲と天気を表示する</a>」という記事を書きましたが、残念なことに<a href="http://shimz.me/blog/google-map-api/3556">「お天気＆雲レイヤ」と「Panoramioレイヤ」は2015年に廃止される</a>そうなので、その代案として「<a href="http://openweathermap.org/api">OpenWeatherMap API</a>」を利用してみました。

OpenWeatherMapでは、様々な気象データが取得できるのですが、今回はAPI keyも必要なく簡単に使える画像タイルデータをLeaflet.jsに読み込んで表示しています。

<h2>サンプル</h2>
OpenWeatherMapから「降水予測」「雲」「気圧図」のタイル画像を読み込み地図上にオーバーレイして表示しています。
<a href="http://shimz.me/example/leaflet/openweathermap/index.html#4/33.28/135.22"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/openweathermap140706-2.jpg" alt="Leaflet.jsで作成した地図上にお天気情報をオーバーレイする" width="590" height="282" class="aligncenter size-full wp-image-3673" /></a>

<a href="http://shimz.me/example/leaflet/openweathermap/index.html#4/33.28/135.26">example</a>
 
<pre class="lang:js decode:true " >//オープンストリートマップレイヤー設定
var osm = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
		attribution: '&amp;copy; &lt;a href="http://osm.org/copyright"&gt;OpenStreetMap&lt;/a&gt; contributors'
	});

//地理院タイル（標準地図）レイヤー設定	
var std = new  L.tileLayer(
	'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
	{
		attribution: "地理院タイル（標準地図）", 
	});

	
/**********************************************************
 * OpenWeatherMap 
 **********************************************************/	
var pf = new  L.tileLayer(
	'http://{s}.tile.openweathermap.org/map/precipitation/{z}/{x}/{y}.png',
	{
		attribution: '&lt;a href=""&gt;降水予測&lt;a&gt;',
		opacity:0.8
	});
	
var cf = new  L.tileLayer(
	'http://{s}.tile.openweathermap.org/map/clouds/{z}/{x}/{y}.png',
	{
		attribution: '&lt;a href=""&gt;雲の予測&lt;/a&gt;',
		opacity:0.8
	});
	
var pcf = new  L.tileLayer(
	'http://{s}.tile.openweathermap.org/map/pressure_cntr/{z}/{x}/{y}.png',
	{
		attribution: '&lt;a href=""&gt;気圧図&lt;/a&gt;',
		opacity:1
	});
// OWN end	
	

	
//地図初期化	
var map = L.map("map", {
		center: [37.09, 138.52], zoom: 4,
		layers: [std,cf,pf,pcf]
	});

	
	
//ベースレイヤーグループ化
var baseMaps = {
    "Mapbox(osm)": osm,
    "地理院タイル（標準地図）": std
};

//オーバレイヤーグループ化
var overlayMaps = {
	"雲の予測": cf,
    "降水予測": pf,
	"気圧図": pcf,
};

//レイヤーコントロール追加
L.control.scale({imperial: false}).addTo(map);
L.control.layers(baseMaps, overlayMaps).addTo(map);
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3671</wp:post_id>
		<wp:post_date>2014-08-07 08:57:01</wp:post_date>
		<wp:post_date_gmt>2014-08-06 23:57:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3671</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[Leaflet.jsで作成した地図上にお天気情報をオーバーレイする]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3673]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371767;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3659;}i:1;a:1:{s:2:"id";i:3984;}i:2;a:1:{s:2:"id";i:3445;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebookページの「いいね！」数が200を超えました。</title>
		<link>http://shimz.me/blog/analytics/3676</link>
		<pubDate>Thu, 07 Aug 2014 00:26:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3676</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://3dicon-free.com/04-icon/064-icon.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/l_064.png" alt="200「いいね！」記念" width="400" height="280" class="aligncenter size-full wp-image-3677" /></a>

「いいね！」してくださった皆様ありがとうございます。

<a href="https://www.facebook.com/GunmaGisGeek">GUNMA GIS GEEkのFacebookページ</a>は基本ブログ記事の更新通知となってますが、時々私がネットを彷徨っていて見つけた、素敵なデータビジュアライゼーションや地図、便利なサービスなどを投稿していたりもします。

もし、ご興味があったら「いいね！」ください！(切実)

<iframe src="//www.facebook.com/plugins/likebox.php?href=http%3A%2F%2Fwww.facebook.com%2FGunmaGisGeek&amp;width=590&amp;height=300&amp;show_faces=true&amp;colorscheme=light&amp;stream=false&amp;border_color&amp;header=true&amp;appId=106329816175854" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:100%; height:300px;" allowTransparency="true" ></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3676</wp:post_id>
		<wp:post_date>2014-08-07 09:26:03</wp:post_date>
		<wp:post_date_gmt>2014-08-07 00:26:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3676</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[Facebookページの「いいね！」数が200を超えました。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3677]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426940098;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3861;}i:1;a:1:{s:2:"id";i:3118;}i:2;a:1:{s:2:"id";i:3306;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadで念願のWeb Inspector(開発者ツール)が使えるアプリ「MIHTool」</title>
		<link>http://shimz.me/blog/iphoneipad/3684</link>
		<pubDate>Fri, 08 Aug 2014 01:08:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3684</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.iunbug.com/mihtool"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/mihtool0.jpg" alt="MIHTool" width="400" height="300" class="aligncenter size-full wp-image-3683" /></a>

以前から、「<a href="http://shimz.me/blog/editor/1561">iPadでプログラミング＆デバッグ（Web系）</a>」なんて記事をかいているなど、わりと本気でiPadでのプログラミング環境構築を模索しているのですが、どうしてもフロントエンドの開発となるとWeb InspectorなどのいわゆるWebデベロッパーツールが無いとかなり辛く著しく生産性が損なわれます。

ホントはMobile Safariに開発者ツールが付属するようになると非常に嬉しいのですが、そんなバカげた需要はあるはずもなく……何年まってみたところでWeb Inspectorが搭載される日など来そうにありません。

仕方がないので、日々App Storeの中を探し回っていたところ、スクリーンショットに見慣れたUIが写っているアプリを発見！　

「これWeb Inspectorじゃね？」と居てもたってもいられなくなり、「<a href="https://itunes.apple.com/jp/app/mihtool-basic-web-debugger/id584739126?mt=8&at=10lMp5">MIHTool</a>」を早速ダウンロードしてみました。

公式サイトに掲載されているコピーは以下。

<blockquote>MIHTool helps Front-End Engineers to debug and optimize their webpages on iPad and iPhone.</blockquote>

やばい、期待せずにはいられない。

実際の動作については下記動画をご覧ください。

<iframe width="480" height="360" src="//www.youtube.com/embed/I-joxZbdk0s" frameborder="0" allowfullscreen></iframe>

ガチで、Web Inspectorだ！

<h2>自サイトで使ってみた</h2>

まず、「<a href="http://www.iunbug.com/mihtool">MIHTool</a>」には、無料版と有料版(1000円)があります。有料版も購入してみたのですが、今のところ無料版との違いがさっぱり分からないので、とりあえず「Web Inspectorだけ使えればいい！」という方は無料版で十分だと思います。

仕組みとしては、<a href="http://people.apache.org/~pmuellr/weinre-docs/latest/">weinre</a>を利用しているようです。なので、ある日突然weinreを設置しているサーバーが死んでアプリ使えなくなるというリスクはありますね。（個人で提供されているアプリのようですし）

また、今回はセキュリティについてはまったく考慮してませんが、ログインが必要なサービスなどをこのアプリを使って見て回るのはとりあえずやめておいた方がいいと思います。

※このアプリに限らず、ログインが必要なWebサービスを利用する場合はChromeのようなある程度信頼できる企業が提供しているブラウザアプリか、Mobile Safariを使いましょう。


では、実際に以前作った「<a href="http://shimz.me/blog/d3-js/3645">ボロノイ図を使って、地図上の特定の位置から最も近い施設を見つけ出す。</a>」のページで使ってみました。

<h3>要素の検証</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/08/mihtool1.png" alt="mihtool1" width="590" height="442" class="alignnone size-full wp-image-3680" />

操作感としては、ワンテンポ遅れて反映されるようなラグがありますが、問題なくエレメントの表示ができてます。普通にWeb Inspector。

<h3>JSコンソール</h3>
<img src="http://shimz.me/blog/wp-content/uploads/2014/08/mihtool2.png" alt="mihtool2" width="590" height="442" class="alignnone size-full wp-image-3681" />
コンソールも問題なくつかえます。
console.logやconsole.dirを使えば、オブジェクトのメソッドやプロパティもちゃんと出力されます。（嬉しい）

<h3>感想</h3>
上記で挙げた以外の「Networkタブ」や「Timelineタブ」は上手く動きませんでした。（設定・使い方を間違っているかも？）

というわけで完璧とは言えませんが、とりあえず「エレメント」と「コンソール」が使えるだけでも、だいぶデバッグが捗るので、「iPadでフロントエンドのプログラミングするぞいや」という奇特な方は試してみてはいかがでしょうか。

ちなみに、iPhone版は試していません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3684</wp:post_id>
		<wp:post_date>2014-08-08 10:08:26</wp:post_date>
		<wp:post_date_gmt>2014-08-08 01:08:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3684</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3683]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[iPadで念願のWeb Inspector(開発者ツール)が使えるアプリ「MIHTool」]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427377918;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1561;}i:1;a:1:{s:2:"id";i:3371;}i:2;a:1:{s:2:"id";i:3967;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>アニメアイコンはマイノリティではないしオタクだとも限らない</title>
		<link>http://shimz.me/blog/other/3685</link>
		<pubDate>Tue, 12 Aug 2014 00:58:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3685</guid>
		<description></description>
		<content:encoded><![CDATA[なんかなー。

<img src="http://shimz.me/blog/wp-content/uploads/2014/08/original.gif" alt="hit and away" width="304" height="196" class="aligncenter size-full wp-image-3686" />

<a href="http://togetter.com/li/702512">橋本潮「艦これ厨は右傾戦争脳」 - Togetterまとめ</a>

勉強会などに行くと、わりと社会的地位の高い人がアニメアイコンを使っていることを知ったりもするのですが、そういったこともないまま「アニメアイコン＝オタク」みたいな認識でいると、炎上した際に初期の対応を間違えることがあって危険だなーと。

いわゆる未成年の犯罪自慢事件でも、初期の段階でアニメアイコンのユーザーからの批判メンションなどに「うわっ、オタクに絡まれた」「お前らリアルじゃ何も言えねぇんだろ！」みたいなアホなこと言っている間に取り返しのつかないところまで騒ぎが大きくなって道を誤ったケースをよく見ました。

アニメアイコン＝キモオタ＝少数派、みたいなイメージが判断を鈍らせるのでしょう。

アニメアイコンの多くは情報感度が高く、匿名性を重要視していてもネット上でのコミュニケーションには積極でそれゆえに拡散力の高いユーザーが多いです。

なので、<strong>何か「やらかしてしまった」際に一番最初に接触する可能性が非常に高い</strong>のですが、ここで「どうせキモオタだろ。あいつらの言うことなんて誰も支持しない」みたいな思考停止をしてしまうと炎上まで一直線なので気を付けましょう。

こんな事件もありましたね。
<a href="http://katsumoku.net/archives/7369876.html">元NHKキャスターがTwitterで暴言ｗｗｗｗ「アニメアイコンで変ちくりんなハンドルネームの人でまともな意見見たことない」</a>

情報感度の高いユーザーはネット上の風を読むのが得意で、<strong>こういったユーザーが積極的に叩きに転じる場合は「こいつの言っていることは一般的に変だ。叩いてもサイレントマジョリティ(大多数)の支持が得られる」という判断の元に行われている</strong>ことがほとんどなので、この段階で変な意地をはったり挑発したりすると、結果火に油を注ぐことになりかねません。
（それらを認識した上で、自分の意見を押し通すというのはアリですが）

ネット上にもアニメアイコンに批判的な意見もありますし、実際変な人もいるわけですが、一度に複数のアカウントから批判された場合は自分の意見や態度を一度俯瞰して見直してみた方がいいかもしれません。

<a href="http://proto-1.net/articles/16188.html">Twitterのアニメアイコンは糞という風潮</a>

なんにせよ、アイコンで判断するのは無理ですし、基本常に誠実に対応する方がリスクは少ないですよ。（あるいは、問答無用でブロック）

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3685</wp:post_id>
		<wp:post_date>2014-08-12 09:58:42</wp:post_date>
		<wp:post_date_gmt>2014-08-12 00:58:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3685</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3686]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426728534;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1031;}i:1;a:1:{s:2:"id";i:3000;}i:2;a:1:{s:2:"id";i:2331;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>9月6日に大宮でD3.js勉強会をやります。</title>
		<link>http://shimz.me/blog/d3-js/3688</link>
		<pubDate>Wed, 13 Aug 2014 08:18:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3688</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/08/d3.jpg" alt="Data-Driven Documents ?" width="497" height="272" class="aligncenter size-full wp-image-3690" />

<a href="https://www.facebook.com/groups/186097664924714/">Code for SAITAMA</a>さんに声をかけていただき、D3.jsの勉強会を開催させていただくこととなりました。

開催日は9/6(土曜日)17:00〜19:00時となります。
開催場所は、埼玉県大宮市<a href="http://office7f.com/">コワーキングスペース7F</a>さん。

詳細・登録は以下より。
<a href="http://connpass.com/event/8044/">グラフを一切書かないD3.js勉強会 - connpass</a>

えぇ、久々の勉強会で何をやろうかいろいろ迷った結果、D3を使った地理情報の可視化（FOSS4G HOKKAIDOでやったやつ）と、データビジュアライゼーション要素を一切省いたD3勉強会をやることにしました。

グラフ書きません。データビジュアライゼーションもやりません。
グラフィック要素ゼロです。

超〜地味。

とは言え、わりと真面目に考えてこの内容にしました。

とかく、ハードルが高いといわれがちなD3.jsですが、あの独特のセレクションとデータバインディングがある程度理解できれば、後はサクサク好きなように書いていけるライブラリだったりします。

また、D3というとチャートやグラフを書くためのライブラリと思われがちですが、わりといろんなことに使えます。

以前、<a href="http://shimz.me/blog/other/3629">SPARQLエンドポイントから取得したデータをCSV/JSONで出力するページ</a>を作成したことがありますが、これなんかはD3のみで作ってます。

ちょっとした小物を作るのにも便利なライブラリなのです。

そんなところが伝わればいいかなーと。

なので、もしかしたらこの勉強会でD3の楽しいところが見つかるかもしれません。（あるいはD3のメンドクサイところが実感できるかも？）

ご興味ある方はぜひご参加ください。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3688</wp:post_id>
		<wp:post_date>2014-08-13 17:18:57</wp:post_date>
		<wp:post_date_gmt>2014-08-13 08:18:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3688</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3690]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427300507;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2990;}i:1;a:1:{s:2:"id";i:3035;}i:2;a:1:{s:2:"id";i:3720;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[leaflet]1964年7月21日の新潟市に、現在の新潟市の地図(エッジ)を重ねてみた。</title>
		<link>http://shimz.me/blog/map/3693</link>
		<pubDate>Fri, 15 Aug 2014 10:34:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3693</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/leaflet/filter/canvasFilter/02/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/niigata-eq140815.jpg" alt="新潟市1964年7月21日 - 現在" width="590" height="427" class="aligncenter size-full wp-image-3692" /></a>

<a href="http://shimz.me/example/leaflet/filter/canvasFilter/02/index.html">example</a>

leaflet.jsでも、クライアントサイドで画像処理を可能にするプラグインがあることを知り利用してみました。
（このプラグインについては、後日改めて詳細を記事にします）

<a href="http://shimz.me/blog/map/3565">1964年新潟地震オープンデータ特設サイト</a>(現在メンテナンス中)で公開されている「広域版新潟市1964年7月21日カラー撮影 空中写真」に、地理院タイル(標準地図)にクライアントサイドでエッジ抽出を行い、エッジ部分のみを空中写真にオーバーレイしています。

思い付きでやってみたのですが、わりと綺麗に重なって震災時と現在で変わった部分が見やいかなと思います。
ズームすると建物一つ一つの変化などもわかります。

クライアントサイドで地図タイルの画像処理が行えると、いろいろと夢が広がりますね！
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3693</wp:post_id>
		<wp:post_date>2014-08-15 19:34:26</wp:post_date>
		<wp:post_date_gmt>2014-08-15 10:34:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3693</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3692]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426688645;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3565;}i:1;a:1:{s:2:"id";i:3622;}i:2;a:1:{s:2:"id";i:3696;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「世界の果ての通学路」を観てきました</title>
		<link>http://shimz.me/blog/movie/3694</link>
		<pubDate>Sun, 17 Aug 2014 04:55:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3694</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.sekai-tsugakuro.com/"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/sekainohatnotsugakuro.jpg" alt="sekainohatnotsugakuro" width="283" height="400" class="aligncenter size-full wp-image-3695" /></a>

<blockquote>世界には、自宅から学校まで片道約20㎞かけて学校へ通う子どもたちがいる。時に危険な野生動物が出没する草原を往復するケニアの兄妹。道なき道を馬に乗って通学するアンデス山脈の兄妹。足の不自由な兄のために廃材を組み合わせた手作りの車いすで通学する兄弟。家族の中で初めて就学したモロッコの少女。世界の子どもたちの通学路を通して、夢、希望、地球の今を見つめるドキュメンタリー。</blockquote>

「<a href="http://www.sekai-tsugakuro.com/">世界の果ての通学路</a>」を見てきました。
ドキュメンタリーには、たまに「このテーマを見つけた時点である程度は成功している」というものがありますが、この映画がまさにそれ。

通学が困難な地域にすむ４組の子供たちの「通学の風景」を撮った作品で、監督はこの絵を撮るために何日も前から寝食を共にし信頼関係を築いたそうです。雄大な自然の風景とともに、子供たちの学業にかける思いが胸をうつ作品です。

ただ、寄りの絵が多いためドキュメンタリー感が薄いのと(演出っぽさが見え隠れしてしまう）のと、もう少し各子供たちのバッググラウンドなどに焦点を当てて欲しかった気もします。

面白いテーマであるだけに、全体として「大変な苦労をして学校に通っている子がいるんだねー」というミクロな視点のみで終わってしまっているのがもったいない映画だと思いました。

ところで、登場する子供たちのモチベーションの源になっているのは、「夢をかなえたい」「良い職に付きたい」「生活を変えたい」という、あるいみ実利的な希望であったりします。
日本では「大学が単なる職業訓練所になってしまっていいのか？」という議論があったりするのですが、こういった映画を見ると学校の本質は「職業訓練なんじゃないか？」とも思えてくるので、難しいところですね。



<iframe width="560" height="315" src="//www.youtube.com/embed/BkTjJLPT2fQ" frameborder="0" allowfullscreen></iframe>

キリンの群れって絵的にけっこう怖いですね。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3694</wp:post_id>
		<wp:post_date>2014-08-17 13:55:34</wp:post_date>
		<wp:post_date_gmt>2014-08-17 04:55:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3694</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3695]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427030557;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3780;}i:1;a:1:{s:2:"id";i:2743;}i:2;a:1:{s:2:"id";i:2590;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[leaflet]クライアントサイドでの画像処理を可能にする「tilefilter」プラグイン</title>
		<link>http://shimz.me/blog/map/3696</link>
		<pubDate>Mon, 18 Aug 2014 01:40:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3696</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/humangeo/leaflet-tilefilter/wiki">Home · humangeo/leaflet-tilefilter Wiki</a>

「tilefilter」プラグインは、leafletにて読み込んだタイル画像をブラウザに描画される前にフックし、クライアントサイドにて画像処理が行えるようにするプラグインです。
このプラグインでは「Canvasフィルター」と「CSSフィルター」の二種類の方法で画像処理を行うことができます。

<h2>インストール</h2>
leaflet.js読み込み後にTileLayer.Filter.jsを読み込んでください。
 
<pre class="lang:xhtml decode:true " >&lt;script src="leaflet.js"&gt;&lt;/script&gt;
&lt;script src="TileLayer.Filter.js"&gt;&lt;/script&gt;</pre> 


<h2>canvasフィルター</h2>
タイル画像をいったんcanvasへと転写し、Image Processingを行います。
 
<pre class="lang:js decode:true " >var hogeLayer = new L.TileLayer('http://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png', {
	attribution: '地理院タイル',
    filter: function () {
            new L.CanvasFilter(this, {
                channelFilter: function (imageData) {
				
					// 画像処理を行う
				
					return imageData;
                }
            }).render();
    }
});</pre> 
channelFilterの引数に、タイル画像をcanvasに転写した際のImageData Objectが送られます。
このImageData Objectに対して処理を行うことで様々なフィルタ効果を付加させることができます。
<a href="http://shimz.me/blog/leaflet-js/3693">前回の記事</a>では、地理院タイル（電子国土基本図）を読み込み、エッジを抽出しエッジ(白色)以外の透明度を0にしてオーバーレイしています。
 
<pre class="height-set:true lang:js decode:true " title="edgeLayer " >var edgeLayer = new L.TileLayer('http://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png', {
	attribution: '地理院タイル（標準地図エッジ）',
    filter: function () {
            new L.CanvasFilter(this, {
                channelFilter: function (imageData) {
					edge(imageData.data);
					return imageData;
                }
            }).render();
    }
});


function edge(data) {
    var length = data.length;
    var width = 256, height = 256;
    var gray = new Uint8ClampedArray(data.length);
    toGray(data, gray);
    var edge = new Uint8ClampedArray(data.length);
    
    for (var y = 0; y &lt; height - 1; y++) {
        for (var x = 0; x &lt; width - 1; x++) {
            var i = x + y * width;     
            var r_i = (x + 1) + y * width; 
            var ex = gray[r_i] - gray[i];
            
            var d_i = x + (y + 1) * width;
            var ey = gray[d_i] - gray[i]; 
            
            var ez = Math.sqrt(ex * ex + ey * ey);
            edge[i] = ez * 2; 
        }
    }
    toColor(edge, data);
 
}
 
function toGray(rgba, gray) {
    var length = rgba.length;
    var total = 0; 
    for (var i = 0; i &lt; length; i += 4) {
        var g = 0.30 * rgba[i + 0] + 0.59 * rgba[i + 1] + 0.11 * rgba[i + 2];
        gray[i/4] = g;
        total += g;
    }
    return total / (length / 4);
}
 
function toColor(gray, rgba) {
    var length = gray.length * 4;
    for (var i = 0; i &lt; length; i += 4) {
        rgba[i + 0] = gray[i/4];
        rgba[i + 1] = gray[i/4];
        rgba[i + 2] = gray[i/4];
		if (gray[i/4] &gt; 180){ 	
	        rgba[i + 3] = 255;
		}else{
	        rgba[i + 3] = 0;			
		}
    }
}</pre> 
 
<h3>ビルトインフィルター</h3>
canvasフィルターには、いくつかの組み込みフィルターが用意されています。
以下は、セピア効果を付加するフィルター
 
<pre class="lang:js decode:true " title="Sepia Filter" >var baseLayer = new L.TileLayer('http://otile1.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpg', {
    filter: function () {
            new L.CanvasFilter(this, {
                channelFilter: function (imageData) {
                    return new L.CanvasChannelFilters.Sepia(imageData).render();
                }
            }).render();
    }
});</pre> 

<h2>CSSフィルター</h2>
ブラウザのCSSフィルター機能を使ってタイル画像にフィルター効果を付加します。Chromeなどブラウザでは、CSSでのフィルター効果がGPUによってアクセラレーションレンダリングされるため、単純な画像処理であればcanvasでImageDataを弄るより高速に描画されます。
※Webkit系ブラウザ以外ではCSS Filterに対応していない場合が多数あります。
<pre class="lang:js decode:true " >var ort = new L.TileLayer('http://cyberjapandata.gsi.go.jp/xyz/ort/{z}/{x}/{y}.jpg', {
	attribution: '地理院タイル（オルソ画像）',
	filter:function () {
        new L.CSSFilter(this, {
            filters: //cssフィルタープロパティを指定
        }).render();
    }
});</pre> 

<h3>サンプル</h3>
下記はcssフィルターの「invert」コマンドを使ってタイル画像に対して階調の反転を行ったサンプルです。
<a href="http://shimz.me/example/leaflet/filter/cssFilter/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/leafletcssfiter140818.jpg" alt="leaflet css fiter" width="590" height="338" class="aligncenter size-full wp-image-3697" /></a>

<a href="http://shimz.me/example/leaflet/filter/cssFilter/01/index.html">example</a>

 
<pre class="lang:js decode:true " title="css filter sample" >var ort = new L.TileLayer('http://cyberjapandata.gsi.go.jp/xyz/ort/{z}/{x}/{y}.jpg', {
	attribution: '地理院タイル（オルソ画像）',
	filter:function () {
        new L.CSSFilter(this, {
            filters:['invert(100%)']
        }).render();
    }
});</pre> 

cssフィルタープロパティは複数指定可能です。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3696</wp:post_id>
		<wp:post_date>2014-08-18 10:40:27</wp:post_date>
		<wp:post_date_gmt>2014-08-18 01:40:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3696</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3697]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427306114;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3530;}i:1;a:1:{s:2:"id";i:3622;}i:2;a:1:{s:2:"id";i:3029;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>サクサク書けて柔軟なカスタマイズが可能な、UIフレームワーク「Webix」</title>
		<link>http://shimz.me/blog/webix/3698</link>
		<pubDate>Wed, 20 Aug 2014 03:03:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3698</guid>
		<description></description>
		<content:encoded><![CDATA[最近、Webixを弄ってます。

<a href="http://webix.com/"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/webix1408201.jpg" alt="webix" width="500" height="315" class="aligncenter size-full wp-image-3699" /></a>

<a href="http://webix.com/">Webix</a>
<a href="http://webix.com/demos/">Demo</a>



WebixはリッチなUIコンポーネントを備えたウィジェットフレームワークです。

<a href="http://www.infoq.com/jp/news/2013/10/webix-javascript-ui-library" style="font-size:0.8em">参考：クロスプラットフォームHTML5アプリケーション開発を支援するJavaScriptのUIライブラリWebix</a>

似たタイプのフレームワークとしては<a href="http://www.sencha.com/products/extjs/">Sencha Ext.js</a>や<a href="http://www.telerik.com/kendo-ui">Kendo UI</a>などがあります。Ext.jsは過去に触ってみたことがあり仕事でも利用したことがあるのですが、わりと厳密にガッツリExt.jsのお作法に沿ってコード書かなければならないところがあるため、あまり手軽に使えるものではありませんでした。（私が触ったことがあるのはSenchaになる前のExt.jsなので、現在は変わっているかもしれません）

Webixは、そこらへんが緩くぶっちゃけ適当に書いてもそこそこ動きます。基本、JSONでコンポーネントの設定を積み上げていくだけでそれなりの画面が作れます。なんて素晴らしい！

D3.jsとも組み合わせて使いやすいフレームワークだったので、しばらく遊んでみようと思います。

ちなみにWebixは話題のフレームワーク「Angular.js」とも組み合わせやすいように設計されています。
<a href="http://docs.webix.com/samples/33_angular/">Webix : angular Samples</a>


<h2>サンプル１</h2>
rowやcolumnの構造をJSONで記載すれば自動的にレイアウトされます。

<iframe width="100%" height="400" scrolling="no" src="http://shimz.me/example/webix/layout01/index.html"></iframe>
 
<a href="http://shimz.me/example/webix/layout01/index.html">example</a>

<pre class="lang:js decode:true " >webix.ui({
	rows:[
		{template:"heder", height:35 },
		{template:"row 1"},
		{view:"resizer"},
		{template:"row 2"},
		{view:"resizer"},
		{cols:[
			{
				id:"a1",
				template:"column 1",
				width:150
			},
			{
				view:"resizer",
				id:"resizer"
			},
			{   
				template:"column 2"
			},
			{
				template:"column 3"
			}
		]
		}
	]
}).show();</pre> 

ここでは画面全てをWebixのみで作成していますが、DIV要素で枠だけ作ってID属性を指定してコンポーネントを埋め込むといったこともできます。
また、カスタムデータ属性「data-*」を利用してコンポ―ネットを設置することもできます。
<h2>サンプル２</h2>
ちょっと作ってみたもの。
<a href="http://shimz.me/example/webix/map/maps.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/webix1408212.jpg" alt="webix + D3.js" width="500" height="286" class="aligncenter size-full wp-image-3700" /></a>
<a href="http://shimz.me/example/webix/map/maps.html">example</a>


Google Maps API、leaflet.js、D3.js、で描いた地図をWebixのWindowコンポーネントで表示しています。
Webixはカスタムコンポーネントが比較的簡単に作成できて、D3.jsと組み合わせるのが楽なところが気に入ってます。

<a href="http://shimz.me/example/webix/02/"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/webix1408203.jpg" alt="webix + map" width="500" height="315" class="aligncenter size-full wp-image-3701" /></a>
<a href="http://shimz.me/example/webix/02/">example</a>

Listviewとmapの連動

<h2>関連</h2>
<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> やっています。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3698</wp:post_id>
		<wp:post_date>2014-08-20 12:03:51</wp:post_date>
		<wp:post_date_gmt>2014-08-20 03:03:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3698</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3699]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427345477;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3864;}i:1;a:1:{s:2:"id";i:3874;}i:2;a:1:{s:2:"id";i:2856;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>国策としてオープンデータ推進が重要だと思う理由</title>
		<link>http://shimz.me/blog/other/3706</link>
		<pubDate>Mon, 25 Aug 2014 05:19:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3706</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.esrij.com/products/data/japan-shp/">全国市区町村界データ</a>はESRIジャパン社が公開しているけれど、都道府県界データがなかなか無くてわりと困ります。

下記は、<a href="http://www.diva-gis.org/gdata">DIVA-GIS</a>という海外のサイトからダウロードした日本の都道府県界データと、RWikiの<a href="http://www.okada.jp.org/RWiki/?ShapeFile%A5%E9%A5%A4%A5%D6%A5%E9%A5%EA">ShapeFileライブラリ</a>においてある都道府県界データを表示してみたものです。（RWikiの方は、ESRIジャパンが公開しているデータを加工したものっぽい）

上が、DIVA-GISから取得したデータ。
下が、RWikiから取得したデータ。
微妙に違いがあるので両者で異なっている部分を見つけてみよう！
<a href="http://shimz.me/blog/wp-content/uploads/2014/08/opendatagis1408251.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/opendatagis1408251-300x237.jpg" alt="opendatagis1408251" width="300" height="237" class="alignnone size-medium wp-image-3707 border" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2014/08/opendatagis1408252.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/opendatagis1408252-300x237.jpg" alt="opendatagis1408252" width="300" height="237" class="alignnone size-medium wp-image-3708 border" /></a>


ちなみに海外のサイトでダウンロードできる日本の地理情報はほぼDIVA-GISと同じ内容。（まぁ、国際的には基本ロシア領になってますね）
で、日本のオープンデータが進まずデータの取得がメンドウだったりすると、簡単に手に入るデータを使うわけですが、そうすると、「あの島がなかったり」「この島がない」みたいなことが出てくるんだけど、まぁ、他にないしメンドウだからいいかなってなる。

地理情報なんかは特に、各国の主義主張が表れるものだと思うので、積極的にオープンデータにしていってほしいなと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3706</wp:post_id>
		<wp:post_date>2014-08-25 14:19:24</wp:post_date>
		<wp:post_date_gmt>2014-08-25 05:19:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3706</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3707]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426806738;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:2321;}i:2;a:1:{s:2:"id";i:3132;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】データセットを元にセレクトボックスの項目を動的に生成する</title>
		<link>http://shimz.me/blog/d3-js/3709</link>
		<pubDate>Tue, 26 Aug 2014 04:20:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3709</guid>
		<description></description>
		<content:encoded><![CDATA[小ネタです。

読み込んだデータセットを元にselect要素にoption要素を追加します。
 
<pre class="lang:js decode:true " >var dataSet = [
  {label:"hoge", value:10},
  {label:"hello", value:20, selected:true},
  {label:"world", value:30},
  {label:"shimizu", value:40}
]

//option要素の生成
var optionElm = d3.select(".select")
  .selectAll("option")
  .data(dataSet)
  .enter()
  .append("option")
  .attr("value", function(d){ return d.value})
  .attr("selected", function(d){ if(d.selected) return "selected"})
  .text(function(d){ return d.label });
</pre> 

<h3>example</h3>
<p data-height="268" data-theme-id="467" data-slug-hash="kfgJE" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/shimizu/pen/kfgJE/'>d3.jsを使ってselect要素を生成</a> by shimizu masayuki (<a href='http://codepen.io/shimizu'>@shimizu</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
D3を使うと簡単にシンプルに書くことができます。
D3.jsのデータを束縛してDOMを操作する機能は、グラフを描画する以外にも様々なことに利用できて楽しいのでいろいろ試してみてください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3709</wp:post_id>
		<wp:post_date>2014-08-26 13:20:35</wp:post_date>
		<wp:post_date_gmt>2014-08-26 04:20:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3709</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3710]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388369;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3501;}i:1;a:1:{s:2:"id";i:3738;}i:2;a:1:{s:2:"id";i:2797;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>悪用されないように制限をかけるなら、それはオープンデータではない。</title>
		<link>http://shimz.me/blog/other/3711</link>
		<pubDate>Thu, 28 Aug 2014 01:10:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3711</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://opendatahandbook.org/ja/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/free-our-open-data.jpg" alt="オープンデータ" width="543" height="362" class="aligncenter size-full wp-image-3712" /></a>

<blockquote>オープンデータを使った社会的に問題のあるアプリが出てくる可能性もある。そうならないように、オープンデータ提供者とアプリ開発者の間でデータ利用許諾規約を明確にする必要がある。ちなみに今回のコンテストについても、東京メトロはその規約をきちんと打ち出している。

<div style="text-align: right"><a href="http://japan.zdnet.com/cio/sp_13matsuokaopinion/35052928/">オープンデータ活用の可能性とリスク</a></div>
</blockquote>

それはもうオープンデータではないです。
<a href="http://opendatahandbook.org/ja/index.html">オープンデータハンドブック</a>に定義が書かれています。

<blockquote>
<h4>オープンとは?</h4>
<p>このハンドブックで扱うのはオープンデータである。ところで、実際のところ オープン なデータとは何なのだろう? 本書では、<a href="http://opendefinition.org/"> Open Definition</a> の定義に従うデータをオープンデータと呼ぶことにする。</p>

<p>オープンデータとは、自由に使えて再利用もでき、かつ誰でも再配布できるようなデータのことだ。従うべき決まりは、せいぜい「作者のクレジットを残す」あるいは「同じ条件で配布する」程度である。</p>

<p><a href="http://opendefinition.org/od/">full Open Definition</a> に、その意味するところの明確な説明がある。まとめると、最も大切なのはこの三点である。</p>

<li>利用できる、そしてアクセスできる データ全体を丸ごと使えないといけないし、再作成に必要以上のコストがかかってはいけない。望ましいのは、インターネット経由でダウンロードできるようにすることだ。また、データは使いやすく変更可能な形式で存在しなければならない。</li>
<li>再利用と再配布ができる データを提供するにあたって、再利用や再配布を許可しなければならない。また、他のデータセットと組み合わせて使うことも許可しなければならない。</li>
<li>誰でも使える 誰もが利用、再利用、再配布をできなければならない。データの使い道、人種、所属団体などによる差別をしてはいけない。たとえば「非営利目的での利用に限る」などという制限をすると商用での利用を制限してしまうし「教育目的での利用に限る」などの制限も許されない。</li>

<div style="text-align: right"><a href="http://opendatahandbook.org/ja/what-is-open-data/index.html">オープンデータとは何か?</a></div>
</blockquote>

データ提供者に悪用された責任を負わせる社会では、提供者はデータの利用に様々な制限をかけ、開発者はデータを利用するまでに雑多な手続きを経なければならず、それはイノベーションを阻害し生産性を低下させます。
データを悪用するような人間がでてきたら、悪用した人間を都度取り締まりましょう。その方がローコストです。

というのがオープンデータの基本方針です。

ついでに言ったら「データに誤りがあったりバグがあったりしても、提供側は責任を取らないよ！　自己責任でよろしく！　自分で直して、なんなら修正したデータをPull Requestしてくれれば反映するよ！」というのがオープンデータです。

ようするに、オープンソースのデータ版です。

「データの提供側がデータがどう使われるかに責任をもたないなんてとんでもない事だ。絶対に許せん！」という考え方もアリですが、だったらそれはもうオープンではないので「オープンデータ」という用語を使うのはやめましょう。




<blockquote>アクセスに条件を付けるような使用規約などという言葉は使うべきではない。使用規約は、本来オープンなはずのファイルへのアクセスを規制するズルイやり方だ。素晴らしい公共リソースになりたいのなら、そんな態度は避けるべきだ。

<div style="text-align: right"><a href="http://makezine.jp/blog/2014/08/the-scramble-to-build-thingiverse-gov-is-on.html">Make:</a></div></blockquote>


<h2>追記</h2>

https://twitter.com/_shimizu/status/505193271040040960]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3711</wp:post_id>
		<wp:post_date>2014-08-28 10:10:33</wp:post_date>
		<wp:post_date_gmt>2014-08-28 01:10:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3711</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3712]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3cce20f4fabe15e3d32e0b9e39ac7caf</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="546"><p>「制限をかけるならオープンの定義からは外れるよね」と言ってるだけなんだが、なぜか「制限をかけるな！」と言っているかのように受け取る人がいるので言葉は難しい。</p>&mdash; 清水正行 (@_shimizu) <a href="https://twitter.com/_shimizu/statuses/505193271040040960">August 29, 2014</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c8928bcf07dd6524b728f607fd7ff1cb</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>「制限をかけるならオープンの定義からは外れるよね」と言ってるだけなんだが、なぜか「制限をかけるな！」と言っているかのように受け取る人がいるので言葉は難しい。</p>&mdash; 清水正行 (@_shimizu) <a href="https://twitter.com/_shimizu/status/505193271040040960">August 29, 2014</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_c8928bcf07dd6524b728f607fd7ff1cb</wp:meta_key>
			<wp:meta_value><![CDATA[1418918969]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426794328;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4104;}i:1;a:1:{s:2:"id";i:3202;}i:2;a:1:{s:2:"id";i:2918;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twitterのアクティビティアナリティクスデータで遊んでみた。</title>
		<link>http://shimz.me/blog/webix/3714</link>
		<pubDate>Thu, 28 Aug 2014 23:29:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3714</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://jp.techcrunch.com/2014/08/28/20140827how-many-people-see-your-tweets-twitter-opens-its-nifty-analytics-dashboard-to-everyone/">私のツイートを読んだ人数は？　Twitterがアナリティクス・ダッシュボードを公開（日本語も） - TechCrunch</a>

やっとアナリティクス・ダッシュボードが誰でも使えるようになりましたね！
わぁい♪ヽ(▽￣ )ﾉ/(＿△＿)ヽ( ￣▽)ﾉわぁい♪

ちょっこだけ触ってみました。

<a href="http://shimz.me/blog/wp-content/uploads/2014/08/Twitteranalytics01.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/Twitteranalytics01.jpg" alt="Twitter アクティビティアナリティクス" width="590" height="324" class="aligncenter size-full wp-image-3716 border" /></a>

過去28日間のアクティビティが確認できます。
各ツイートごとに、表示された回数、インプレッション数（ファボられたり、リツイートされた回数）、インプレッションの割合を調べることができます。
詳細画面ではさらに、ユーザープロフィール画面をクリックされた回数なども。

<a href="http://shimz.me/blog/wp-content/uploads/2014/08/Twitteranalytics02.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/Twitteranalytics02.jpg" alt="Twitter アクティビティアナリティクス" width="590" height="324" class="aligncenter size-full wp-image-3717 border" /></a>

ただ、毎回一つ一つ詳細画面をクリックして確認するのはメンドウなので、エクスポートしたデータをWebixのデータテーブルに流し込んでみました。
ほんの数行のスクリプトで表示できるのでWebixは便利ですね！

<h2>サンプル</h2>
<a href="http://shimz.me/example/webix/datatable/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/08/Twitteranalytics03.jpg" alt="Twitter アクティビティデータ一覧" width="590" height="282" class="aligncenter size-full wp-image-3718 border" /></a>

<a href="http://shimz.me/example/webix/datatable/01/">example</a>

webixとcsvの読み込みにだけd3.jsを使ってます。
 
<pre class="lang:js decode:true " >d3.csv("access.csv", main)

function main(csv) {
	var columns = [
		{ id:"id",	header:"id", css:"rank",  		width:50},
		{ id:"Tweet_text",	header:"text" , template:"&lt;a target='_blank' href='#Tweet_permalink#'&gt;#Tweet_text#&lt;/a&gt;", fillspace:true},
		{ id:"impressions",	header:"impressions", 	width:100, sort:"int"},
		{ id:"engagements",	header:"engagements", 	width:100, sort:"int"},
		{ id:"engagement_rate",	header:"engagement rate", 	width:100, sort:sortByPercent},
		{ id:"retweets",	header:"retweets", 	width:100, sort:"int"},
		{ id:"favorites",	header:"favorites", 	width:100, sort:"int"},
		{ id:"replies",	header:"replies", 	width:100, sort:"int"},
		{ id:"permalink_clicks",	header:"permalink clicks", 	width:100, sort:"int"},
		{ id:"url_clicks",	header:"url clicks", 	width:100, sort:"int"},
		{ id:"user_profile_clicks",	header:"user profile clicks", 	width:100, sort:"int"}
			
	]
	
	
	 new webix.ui({
		id:"twitter",
		view:"datatable",
		resizeColumn:true,
		pager:{
			id:"paging_here",
			size:100,
			group:10
		},
		columns:columns,
		data: csv
	});
}


function sortByPercent(a,b){
	a = +a["engagement_rate"].replace("%", "");
	b = +b["engagement_rate"].replace("%", "");
	return a&gt;b?1:(a&lt;b?-1:0);
}
</pre> 
ページングの処理なども簡単！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3714</wp:post_id>
		<wp:post_date>2014-08-29 08:29:37</wp:post_date>
		<wp:post_date_gmt>2014-08-28 23:29:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3714</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3716]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388634;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3659;}i:1;a:1:{s:2:"id";i:3902;}i:2;a:1:{s:2:"id";i:3909;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「AITC データビジュアライゼーションもくもく会」に参加しました。</title>
		<link>http://shimz.me/blog/d3-js/3720</link>
		<pubDate>Mon, 01 Sep 2014 00:23:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3720</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.facebook.com/events/708479205890571/"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/datavismoku2140830.jpg" alt=" 夏休み最後の自由研究をしよう！データビジュアライゼーションもくもく会" width="590" height="221" class="aligncenter size-full wp-image-3721" /></a>

<a href="https://www.facebook.com/events/708479205890571/">夏休み最後の自由研究をしよう！データビジュアライゼーションもくもく会</a>

ちょうど３０日に東京へ出ないとならない用事があったので、それにかこつけてデータビジュアライゼーションもくもく会に参加してきました。

今回はデータだけ事前に用意して、D3.jsとWebixを使って４時間でどこまでつくれるかチャレンジしたのですが……やっぱり、ところどころ躓いてなかなか思うようには進まないものですね。

<h2>作ったもの</h2>
ちばしオープンデータポータル（プレビュー版）からダウンロードした将来人口推計データを折れ線グラフとシンボルマップで表現しようとしたもの、例によってまったく完成ならず。
<a href="http://shimz.me/datavis/datavismoku140830/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/datavismoku21408302.jpg" alt="千葉市 将来人口推計" width="1338" height="748" class="aligncenter size-full wp-image-3722" /></a>

<a href="http://shimz.me/datavis/datavismoku140830/index.html">example</a>

個人的に「Responsive charts」というのをやってみたかったのですが、地図をウインドサイズに合わせて上手い事縮小する方法が見つからず断念。折れ線グラフの方だけはかろうじてレスポンシブになってます。

チャートの描画部分とイベントのアタッチを分離したいなー思ったのですが、Webixでコンポーネントのレンダリングが終了したタイミングを取得する方法がわからず、しかたなくエレメントが生成されるまでsetTimeoutでwaitするという強引な方法をとってます。
この辺、D3とWebixを組み合わせて使うのに非常に重要なポイントなので、もうすこしちゃんと調べてみたいと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3720</wp:post_id>
		<wp:post_date>2014-09-01 09:23:35</wp:post_date>
		<wp:post_date_gmt>2014-09-01 00:23:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3720</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3721]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425204045;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2990;}i:1;a:1:{s:2:"id";i:3688;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Webix+ADDRAjax で住所ドリルダウン検索を行う。</title>
		<link>http://shimz.me/blog/webix/3724</link>
		<pubDate>Tue, 02 Sep 2014 08:24:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3724</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/webix/addrajax/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/webix_addrajax.png" alt="Webix+ADDRAjax で住所ドリルダウン検索を行う。" width="590" height="421" class="aligncenter size-full wp-image-3725" /></a>

<a href="http://shimz.me/example/webix/addrajax/index.html">example</a>

<a href="http://webix.com/">Webix</a>に<a href="http://www.kawa.net/works/ajax/addrajax/addrajax.html">ADDRAjax</a>を組み込んで使う方法です。

ポイントはui.selectビューのattributesプロパティでname属性を指定してあげることです。ビューのnameプロパティはエレメントのname属性とはまた別なので注意。

<h2>サンプル</h2>
webix,ADDRAjax(&jQuery)は先に読み込んでおいてください。
 
<pre class="lang:js decode:true " >webix.ready(function(){
	new webix.ui({
		view:"form",
		id:"form",
		rows:
		[
			{
				id:"address",
				cols:[
					{
						width:200,
						name:"pref",
						attributes:{ name:"pref" },
						view:"select",
						label:"都道府県",
						labelAlign:'right',
						options:[
							{ value:"↓(都道府県)"}
						]
					},			
					{
						width:200,
						name:"city",
						attributes:{ name:"city" },
						view:"select",
						label:"市区町村",
						labelAlign:'right',
						options:[
							{ value:"↓(市区町村)"}
						]
					},			
					{
						width:180,
						name:"town",
						attributes:{ name:"town" },
						view:"select",
						label:"町域",
						labelAlign:'right',
						options:[
							{ value:"↓(町域)"}
						]
					},
				]			
			},
			{ view:"button", id:"form_Send_btn", value:"取得", type:"form"}
		]
	}).show();
	
	//formから選択された項目を取得
	$$("form_Send_btn").attachEvent("onItemClick", function(){
		var param = $$("form").getValues();
		alert(JSON.stringify(param, " ", "\n"))
	})
	
	//addrajaxの設定
	var addrajax = new ADDRAjax( 'pref', 'city', 'town' );
	addrajax.JSONDATA = 'http://shimz.me/libs/addrajax/data/';
	addrajax.init();
	addrajax.setAddress('群馬県');
	
});</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3724</wp:post_id>
		<wp:post_date>2014-09-02 17:24:35</wp:post_date>
		<wp:post_date_gmt>2014-09-02 08:24:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3724</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3725]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427287505;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3902;}i:1;a:1:{s:2:"id";i:3937;}i:2;a:1:{s:2:"id";i:3907;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「作りたいものがないけれど、プログラミングを勉強したい」って人は、ＰＲＧツクールをやってみたら良いんじゃないかな</title>
		<link>http://shimz.me/blog/programming/3726</link>
		<pubDate>Wed, 03 Sep 2014 02:50:04 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3726</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B005QW260E/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51%2BwCFSNzcL._SL160_.jpg" alt="RPGツクールVX Ace" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B005QW260E/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">RPGツクールVX Ace</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.03</div></div><div class="amazlet-detail">角川ゲームス (2011-12-15)<br />売り上げランキング: 87<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B005QW260E/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

 これだけリッチなコンテンツに溢れた世の中だと、コンソールに「Hello Worldと出力して感動した！」なんて特殊なフェティシズムを持った人なんて稀有な存在でしょうし、かといってScratchのようなビジュアルプログラミング環境は、「作りたいモノは特に決まってないんだけどプログラミングを勉強したい」って人には、その制約のなさや自由さが白紙のキャンパスを渡されて「好きに絵を書いていいよ」といわれるぐらい途方に暮れてしまうようなものだと思います。

その点RPGツクールは、とりあえず「RPGを作る」という目的が初めから定められているので迷う余地がなく、そのための素材も最初から用意されていて、そこそこリッチなものができるのでそれなりに作ったものに対して達成感を感じられます。初めから用意されているものが多いので、スクリプトに集中することができプログラミングを学びたい人にとっては優れた環境ではないかと思います。

とくに大きな利点としては、RPGツクールで何かを作ろうとすればどうしたって「イベントドリブン」な思考を強制されることでしょう。

いわゆる、上から下へと処理が流れる"バッチ処理的思考"からの解脱には大きなギャップが伴うのですが、PRGという枠を用意してあげるだけでイベントドリブンという考え方がすんなりと理解しやすくなる気がします。
「村人に話しかけたら、この処理をする」「プレイヤーが階段を踏んだら次のフロアに移動する」などイベントの発火とコールバック処理の流れが自然と身に付くのでお勧めです。

慣れてきたら、ゲームのなかにゼルダ的な謎解き要素なんかを盛り込んでみると良いかもしれません。

自分も、「床のスライドパズルを解くと扉が開く」みたいな要素をRPGツクールで密かにつくってほくそ笑んだりしていたのですが、今思うとこの時の経験がその後のプログラミングを学ぶ際にとても役に立ったと感じています。

ある程度の規模まで作ると、フラグ管理で発狂しそうになるなどプログラミングにありがちなアレやコレを十分に堪能できるので、なにげに学習効果高いのではないかと。

最近のRPGツクールは内部的にはRGSSというRubyの拡張スクリプトで動いているらしく、やろうと思えばコードを書き替えることもできるらしいので次のステップにも進みやすいですし。

ロープレ好きな子供には一番適した開発環境なのではないかと思うので、学校の教材とかに取り入れてみてもいいんじゃないかと思います。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3726</wp:post_id>
		<wp:post_date>2014-09-03 11:50:04</wp:post_date>
		<wp:post_date_gmt>2014-09-03 02:50:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3726</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3727]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427335131;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3167;}i:1;a:1:{s:2:"id";i:1899;}i:2;a:1:{s:2:"id";i:643;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsを使ったグラフを簡単に作成できるChromeアプリ「datamatic.io」</title>
		<link>http://shimz.me/blog/web/3728</link>
		<pubDate>Wed, 03 Sep 2014 07:24:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3728</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://chrome.google.com/webstore/detail/datamaticio/kkfklmfapponpmhhddfdngkibnglmlfh"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/datamatic11.png" alt="datamatic.io " width="590" height="368" class="aligncenter size-full wp-image-3730" /></a>

<a href="https://chrome.google.com/webstore/detail/datamaticio/kkfklmfapponpmhhddfdngkibnglmlfh">Chromeウエブストア datamatic.io</a>


「datamatic.io」はブラウザ上でD3.jsを用いたグラフを簡単に作成できるChromeアプリです。
テンプレートを選択して、各項目(プロパティ)を設定するだけで綺麗なグラフを作成することができます。

<a href="https://chrome.google.com/webstore/detail/datamaticio/kkfklmfapponpmhhddfdngkibnglmlfh"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/datamatic22.png" alt="datamatic.io" width="590" height="368" class="aligncenter size-full wp-image-3731" /></a>

下記URLにアクセスするだけでジェネレーターを弄って遊ぶことはできますが、作成したグラフをShareしたりsvgやpngファイルとしてダウンロードするにはChromeアプリとして登録する必要があります。

<a href="http://datamatic.io/">http://datamatic.io/</a>

詳しい操作方法は下記動画を参照してください。



<iframe width="480" height="360" src="//www.youtube.com/embed/Yn8HSnZmLfk" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3728</wp:post_id>
		<wp:post_date>2014-09-03 16:24:11</wp:post_date>
		<wp:post_date_gmt>2014-09-03 07:24:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3728</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3730]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427375287;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:862;}i:1;a:1:{s:2:"id";i:3820;}i:2;a:1:{s:2:"id";i:3053;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google Map上に円グラフを表示する</title>
		<link>http://shimz.me/blog/d3-js/3733</link>
		<pubDate>Fri, 05 Sep 2014 03:39:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3733</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/maebashi/population/pie.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/maebashi140905.png" alt="google map上に円グラフを表示する" width="500" height="388" class="aligncenter size-full wp-image-3734" /></a>

<a href="http://shimz.me/datavis/gunma/maebashi/population/pie.html">example</a>

以前,前橋のオープンデータを使って<a href="http://shimz.me/blog/d3-js/3463">シンボルマップを作成</a>しましたが、同じ「<a href="http://www.city.maebashi.gunma.jp/sisei/499/509/p012146.html">町丁ごとの年齢別人口構成推移</a>」データを使って、男女比を表す円グラフを地図上に表示してみました。

<h2>サンプル</h2>
コードが結構長くなったので、Google Maps APIのdrawメソッド内だけ参考に載せます。
 
<pre class="lang:js decode:true " >overlay.draw = function () {
	var index = getIndex();	　//選択されている項目を取得
	
	//ピクセルポジション情報
	pointdata.forEach(function(d) {
		var point = googleMapProjection([d['X_CODE'] ,d['Y_CODE']]);//位置情報→ピクセル
		d['xpoint'] = point[0];
		d['ypoint'] = point[1]; 
	});
	
	//前のグラフをすべて削除する
	d3.selectAll(".pie").remove()
	
	//データの数だけ円グラフを各
	pointdata.forEach(function(point){
		if (+point['男'+index] &lt;= 0 &amp;&amp; +point['女'+index] &lt;= 0) return ;  //男女ともに０人の場合は抜ける
		
		//円グラフ作成用のデータセットを作る
		var data = [
			{key:"男", value:point['男'+index], city:point.CITYNAME, town:point.NAME},
			{key:"女", value:point['女'+index], city:point.CITYNAME, town:point.NAME}
		];
			
		//	円グラフを作成するのに必要な座標計算
		var pie = d3.layout.pie().value(function(d) { return d.value; });           
		var arc = d3.svg.arc().outerRadius(15).innerRadius(Math.floor(3));　//パスデータジェネレータ
		
		var arcsGroup = gunmalayer //Gmap上のsvgレイヤ
			.data([data])   
			.append("g")
			.attr("class", "pie")
			.attr("transform", "translate(" + point.xpoint+ "," + point.ypoint + ")")　//円グラフを表示する座標を指定

		
		//円グラフ(グループ)作成    
		var circleGroup = arcsGroup.selectAll(".pie")     
		   .data(pie)                       
		   .enter()                        
		   .append("svg:g")                
		   .attr("class", "pie") ;
		 
		 //円グラフ path描画 
		var circlePaths = circleGroup.append("svg:path")
		   .attr("class", "pie")
		   .attr({
			   fill:function(d){
				   if(d.data.key == "男"){
					   return "blue";
				   }else{
					   return "red";
				   }
			   },
			   "stroke":"black",
			   d: arc
		   })
		
		//マウスオーバーした際に詳細を表示		
		circleGroup.append("title")
			.text(function(d){ return d.data.town + " " + d.data.key + "：" +d.data.value + "人" })
				
				
	})

}</pre> 

D3.jsを使てGoogle Map上にSVGを表示する方法は以下を参照してください。
<a href="http://shimz.me/blog/d3-js/2379">【D3.js】Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3733</wp:post_id>
		<wp:post_date>2014-09-05 12:39:25</wp:post_date>
		<wp:post_date_gmt>2014-09-05 03:39:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3733</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3734]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395939;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3743;}i:1;a:1:{s:2:"id";i:2819;}i:2;a:1:{s:2:"id";i:3984;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>382</wp:comment_id>
			<wp:comment_author><![CDATA[成約間取りマップ(東京都23区北部編) | 1-&gt;100]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ec2-54-92-71-56.ap-northeast-1.compute.amazonaws.com/2014/12/17834740/</wp:comment_author_url>
			<wp:comment_author_IP>54.92.71.56</wp:comment_author_IP>
			<wp:comment_date>2015-02-14 23:04:10</wp:comment_date>
			<wp:comment_date_gmt>2015-02-14 14:04:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 実装に当たっては、こちらのサイト(GUNMA GIS GEEK / 【D3.js】Google Map上に円グラフを表示する )を参考にしました。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423922650.5355279445648193359375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423997725.356400966644287109375;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>グラフを一切書かないD3.js勉強会を開催しました。</title>
		<link>http://shimz.me/blog/d3-js/3737</link>
		<pubDate>Tue, 09 Sep 2014 02:24:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3737</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/08/d3.jpg" alt="Data-Driven Documents ?" width="497" height="272" class="aligncenter size-full wp-image-3690" />

先週、土曜日に「<a href="http://connpass.com/highlight/">グラフを一切書かないD3.js勉強会</a>」を行いました。
第一部の内容は、<a href="http://shimz.me/blog/d3-js/3595">FOSS4G 2014 Hokkaido</a>の内容と同じものを行ったのでそれはいいとして、第二部の方は……正直準備不足だったかなと。
一番の問題は、使おうとしていたCodepenの<a href="http://shimz.me/blog/web/2860">プロフェッサーモード</a>が現場では重くて使えなかったことですかね。
そのため、直前になってワタワタしてしまい軽くパニック！　急遽、別の方法で説明を行ったわけですが、遠くの席にいた方にはプロジェクターではコードが見えづらかったと思います。
やはり事前に現場での確認が必要だなーと思いました。
（できればリハーサルなんかもやった方が良いのかも）

とりあえず第二部で使った資料を掲載しておきます。

<h2>資料</h2>
D3.jsは「束縛したデータセットエレメントの差分を操作するってイメージすると理解しやすいですよー」ということが言いたかったのですが、ちゃんと伝えられた感じがしません　orz
とりあえず、サンプルコードとか弄ってもらえると多少分かりやすいかも。
<iframe src="//www.slideshare.net/slideshow/embed_code/38776129" width="590" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/xxshimizuxx/d3jsdom" title="D3.jsによるDOM操作" target="_blank">D3.jsによるDOM操作</a> </div>
文字が読み辛いのでフルスクリーンでご覧ください。

<h3>サンプルコード</h3>
 
<a href="http://shimz.me/example/d3js/binding_data/index2.html">example</a>

<pre class="lang:xhtml decode:true " >&lt;body&gt;
&lt;h3&gt;順番に実行→&lt;/h3&gt;
&lt;button id="enter_append"&gt;binding:dataset1 enter.append&lt;/button&gt;
&lt;button id="update"&gt;update&lt;/button&gt;
&lt;button id="binding_dataset2"&gt;binding:dataset2 update&lt;/button&gt;
&lt;button id="exit_update"&gt;exit.update&lt;/button&gt;
&lt;button id="exit_remove"&gt;exit.remove&lt;/button&gt;
&lt;div id="stage"&gt;
	&lt;p&gt;test1&lt;/p&gt;
	&lt;p&gt;test2&lt;/p&gt;
&lt;/div&gt;


&lt;script&gt;
var dataSet1 = [
	{id:1, label:"hoge", value:100},
	{id:2, label:"hello", value:200},
	{id:3, label:"wold", value:300},
	{id:4, label:"fuga", value:400},
	{id:5, label:"ora", value:500},
	{id:6, label:"muda", value:600}
]

var dataSet2 = [
	{id:1, label:"hoge", value:100},
	{id:2, label:"hello", value:200},
	{id:4, label:"fuga", value:400},
	{id:5, label:"ora", value:500},
	{id:6, label:"muda", value:600}
]


var div = d3.select("#stage");


/*
 * データセット１に対して足りないエレメントを追加
 */
d3.select("#enter_append").on("click", function(){
	div.selectAll("p")
		.data(dataSet1)
		.enter()
		.append("p")
		.text(function(d){ return d.label });
});

/*
 * 束縛されているデータを元にエレメントのスタイルをアップデート
 */
d3.select("#update").on("click", function(){
		div.selectAll("p")
		.style("background-color", "red")
		.style("color", "white")
		.text(function(d){ return d.label });
});


/*
 * データセット２をエレメントに束縛しアップデート
 */
d3.select("#binding_dataset2").on("click", function(){
	div.selectAll("p")
		.data(dataSet2, function(d){ return d.id })
		.style("background-color", "blue")
});


/*
 * データセット２に対し多すぎるエレメントのスタイルをアップデーと
 */
d3.select("#exit_update").on("click", function(){
	div.selectAll("p")
		.data(dataSet2, function(d){ return d.id })
		.exit()
		.style("background-color", "green")
});

/*
 * データセット２に対し多すぎるエレメントを削除
 */
d3.select("#exit_remove").on("click", function(){
	div.selectAll("p")
		.data(dataSet2, function(d){ return d.id })
		.exit()
		.remove();
});



&lt;/script&gt;
&lt;/body&gt;</pre> 

<h2>備考</h2>
勉強会にていただいた質問に関する記事を書きました。
<a href="http://shimz.me/blog/d3-js/3738">[SVG]ドーナツ状のcircleを描画する。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3737</wp:post_id>
		<wp:post_date>2014-09-09 11:24:24</wp:post_date>
		<wp:post_date_gmt>2014-09-09 02:24:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3737</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3690]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427400188;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3134;}i:1;a:1:{s:2:"id";i:3738;}i:2;a:1:{s:2:"id";i:2975;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SVG]ドーナツ状のcircleを描画する。</title>
		<link>http://shimz.me/blog/d3-js/3738</link>
		<pubDate>Tue, 09 Sep 2014 02:25:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3738</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/d3-js/3737">先日の勉強会</a>にて「重ねたcircleの途中の色だけ変えたい」という質問があり、その場では詳しい方法を答えることができなかったので、記事にて回答します。

複数のcircleを重ねて色を変えた場合、透過処理を行うと下のcircleの色と重なってしまいます。
<img src="http://shimz.me/blog/wp-content/uploads/2014/09/circlemask140909.jpg" alt="svg mask" width="425" height="208" class="aligncenter size-full wp-image-3739" />

これを回避する方法はいろいろあるのですが、一番簡単な方法はmaskを使う方法です。
（質問には「クリップパスでできると思います」と答えた気がするのですが、すみません私の勘違いでした。クリップパスは「表示したい部分を切り取る」だけなので、Maskを使う必要があります）

サークルをMaskを使ってドーナツ状に変形することで、重ねたときに色が重ならなくなります。

<h2>Mask機能を使ってドーナツ状のcircleを表示する</h2>
<p data-height="268" data-theme-id="467" data-slug-hash="FLnje" data-default-tab="result" data-user="shimizu" class='codepen'>See the Pen <a href='http://codepen.io/shimizu/pen/FLnje/'>svg mask</a> by shimizu masayuki (<a href='http://codepen.io/shimizu'>@shimizu</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<h2>サンプル</h3>
D3.jsを使てドーナツ状のcircleを重ねるサンプルです。
データセットの数に合わせてmask要素を追加します。

<a href="http://shimz.me/example/d3js/circleMask/index.html">example</a>

 
<pre class="lang:js decode:true " >var dataSet =[
	{r:20, color:"blue"},
	{r:40, color:"red"},
	{r:60, color:"blue"},
]

/*normal*/
var svg1 = d3.select("#svg1")
svg1.selectAll("circle")
	.data(dataSet.reverse())
	.enter()
	.append("circle")
	.attr({
		cx:100,
		cy:60,
		r:function(d){ return d.r },
		fill:function(d){ return d.color }
	});


/*fill-opacity:0.5*/
var svg2 = d3.select("#svg2")
svg2.selectAll("circle")
	.data(dataSet.reverse())
	.enter()
	.append("circle")
	.attr({
		cx:100,
		cy:60,
		r:function(d){ return d.r },
		fill:function(d){ return d.color },
		"fill-opacity": 0.5
	});


/*mask*/
var svg3 = d3.select("#svg3")
svg3.selectAll("circle")
	.data(dataSet)
	.enter()
	.append("circle")
	.attr({
		cx:100,
		cy:60,
		r:function(d){ return d.r },
		fill:function(d){ return d.color },
		"fill-opacity": 0.5,
		mask:function(d, i){
			if (i &lt;= 0) return null;
			return "url(#mask"+i+")";
		}
	});

//部品の定義	
var defs = svg3.append("defs");		
dataSet.forEach(function(d, i){
	if (i &lt;= 0) return;
	
	//defs内にmask要素を追加
	var mask = defs.append("mask")
		.attr({
			id:function(d){ return "mask"+i }
		});
	
	//mask表示領域の指定	
	mask.append("circle")
		.attr({
			cx:100,
			cy:60,
			r:(dataSet[i].r),
			fill: "white"
		});

	//mask非表示領域の指定	
	mask.append("circle")
		.attr({
			cx:100,
			cy:60,
			r:(dataSet[i-1].r),
			fill: "black"
		});
});
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3738</wp:post_id>
		<wp:post_date>2014-09-09 11:25:00</wp:post_date>
		<wp:post_date_gmt>2014-09-09 02:25:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3738</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3739]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427398672;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3737;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:3841;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Force-Directed Japan</title>
		<link>http://shimz.me/blog/d3-js/3742</link>
		<pubDate>Wed, 10 Sep 2014 22:09:02 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3742</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/force/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/forcemap140911.png" alt="Force-Directed Japan" width="590" height="370" class="aligncenter size-full wp-image-3741 border" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/force/index.html">example</a>

「<a href="http://bl.ocks.org/mbostock/1073373">Force-Directed States of America</a>」を参考に日本版を作ってみました。
コードはほぼ参考にしたサンプルそのままですが、一応載せておきます。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >d3.json("../../_geodata/japan_light.geojson", function(error, json) {
	if (error) return console.error(error);
	draw(json);	
})	
	
function draw(json){	
	var width  = 1000;
	var height = 1000;
	
	var svg = d3.select("body").append("svg")
	    .attr("width", width)
	    .attr("height", height)
	    .append("g")
	    .attr("transform", "translate(0,0)");
	
	var projection = d3.geo.mercator()
		.center([139.0032936, 36.3219088])
		.scale(2000)
		.translate([width/2, height/2]);
	
	var path = d3.geo.path().projection(projection);
						
	var nodes = [];
	var links = [];
	
	json.features.forEach(function(d, i) {
		//各領域の中心点取得
		var centroid = path.centroid(d);
		centroid.x = centroid[0];
		centroid.y = centroid[1];
		centroid.feature = d;
		nodes.push(centroid);	//ノードデータを生成
	});

	//ノードデータから、ドロネー三角分割データを生成		
	var triangles = d3.geom.voronoi().triangles(nodes);
		
		triangles.forEach(function(d,i){
			//各三角形の頂点からソースポイント、ターゲットポイント、２点の距離をリンクデータとして保存
			links.push( edge( d[0] , d[1] ) );
			links.push( edge( d[1] , d[2] ) );
			links.push( edge( d[2] , d[0] ) );
		});
		
		//console.log(nodes);
		//console.log(links);
		
		//力学グラフ生成
		var force = d3.layout.force().size([width, height]);		
		force.gravity(0.01)
			.charge(0.01)
			.nodes(nodes)
			.links(links)
			.linkDistance(function(d){ return d.distance; })
			.start();
		
		//ノード(地形)の描画
		var node = svg.selectAll("g")
			.data(nodes)
			.enter()
			.append("g")
			.attr("transform", function(d) { return "translate(" + -d.x + "," + -d.y + ")"; })
			.call(force.drag) //forceレイアウトのドラッグビヘイビアを設定
			//地形描画
			.append("path")
			.attr({
				"transform": function(d) { return "translate(" + d.x + "," + d.y + ")"; },
				"stroke": "#ccc",
				"stroke-width": 1,
				"fill": "green",
				"d": function(d){ return path(d.feature) }
			});						
		
		//ライン(地形を結ぶ線)の描画
		var link = svg.selectAll("line")
			.data(links)
			.enter()
			.append("line")
			.attr({
				"class": "link",
				"x1":function(d){ return d.source.x },
				"y1":function(d){ return d.source.y },
				"x2":function(d){ return d.target.x },
				"y2":function(d){ return d.target.y },
			})
		
		//力学グラフのアップデート処理
		 force.on("tick", function() {
			    link.attr({
					"class": "link",
					"x1":function(d){ return d.source.x },
					"y1":function(d){ return d.source.y },
					"x2":function(d){ return d.target.x },
					"y2":function(d){ return d.target.y },
				});
			   node.attr("transform", function(d) {
					return "translate(" + d.x + "," + d.y + ")";
			   });
		});
				
	function edge(a, b) {
		var dx = a[0] - b[0], dy = a[1] - b[1];
		return {
			source: a,
			target: b,
			distance: Math.sqrt(dx * dx + dy * dy)
		};
	}
}</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3742</wp:post_id>
		<wp:post_date>2014-09-11 07:09:02</wp:post_date>
		<wp:post_date_gmt>2014-09-10 22:09:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3742</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3741]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427403676;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:2993;}i:2;a:1:{s:2:"id";i:2913;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google Map上に棒グラフを表示する</title>
		<link>http://shimz.me/blog/d3-js/3743</link>
		<pubDate>Mon, 15 Sep 2014 01:14:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3743</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/datavis/gunma/maebashi/population/bar.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/barmap140915.jpg" alt="Google Map上に棒グラフを表示する" width="590" height="453" class="aligncenter size-full wp-image-3744" /></a>

<a href="http://shimz.me/datavis/gunma/maebashi/population/bar.html">example</a>

<a href="http://shimz.me/blog/d3-js/3733">円グラフ</a>に引き続き、棒グラフを地図上に表示してみました。
棒グラフは高さのスケールを設定するのが難しいですね。

<h2>サンプル</h2>
今回も、Google Maps APIのdrawメソッド内だけ参考に載せます。
 
<pre class="lang:js decode:true " >overlay.draw = function () {
	var index = getIndex();	　//選択されている項目を取得
	
	//ピクセルポジション情報
	pointdata.forEach(function(d) {
		var point = googleMapProjection([d['X_CODE'] ,d['Y_CODE']]);//位置情報→ピクセル
		d['xpoint'] = point[0];
		d['ypoint'] = point[1];
	});
	
	//最大値取得
	var max = d3.max(pointdata, function(d){
		if (+d['女の総数'] > +d['男の総数']) {
			return +d['女の総数']
		}else{
			return +d['男の総数']					
		}
	});
	
	//棒グラフの高さスケールを設定
	var barH = 100;
	var barW = 8;
	var yScale = d3.scale.linear().domain([0, max]).range([0, barH]);
	
	//前のグラフをすべて削除する
	d3.selectAll(".bar").remove()
	
	//データの数だけ棒グラフを書く
	pointdata.forEach(function(point){
		if (+point['男'+index] <= 0 && +point['女'+index] <= 0) return ;  //男女ともに０人の場合は抜ける
		
		//棒グラフ作成用のデータセットを作る
		var data = [
			{key:"男", value:point['男'+index], city:point.CITYNAME, town:point.NAME},
			{key:"女", value:point['女'+index], city:point.CITYNAME, town:point.NAME}
		];
			
		//棒グラフグループ
		var barGroup = gunmalayer //Gmap上のsvgレイヤ
			.append("g")
			.attr("class", "bar")
			.attr("transform", "translate(" + point.xpoint+ "," + point.ypoint + ")")　//円グラフを表示する座標を指定
		
		//棒グラフ描画
		var bar = barGroup.selectAll("rect")
			.data(data)
			.enter()
			.append("rect")
			.attr({
				x:function(d,i){ return i * barW - (barW/2) },
				y:function(d){ return barH - yScale(d.value) },
				width:barW,
				height:function(d){ return yScale(d.value) },
				stroke:"black",
				fill:function(d, i){
					if (i == 0) {
						return "blue";
					}else{
						return "red";
					}
					
				}
			});
		
		//マウスオーバーした際に詳細を表示		
		bar.append("title")
			.text(function(d){ return d.town + " " + d.key + "：" +d.value + "人" })
						
	});
};</pre> 

D3.jsを使てGoogle Map上にSVGを表示する方法は以下を参照してください。
<a href="http://shimz.me/blog/d3-js/2379">【D3.js】Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3743</wp:post_id>
		<wp:post_date>2014-09-15 10:14:27</wp:post_date>
		<wp:post_date_gmt>2014-09-15 01:14:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3743</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3744]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427402048;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3733;}i:1;a:1:{s:2:"id";i:2881;}i:2;a:1:{s:2:"id";i:3445;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>東京メトロに住所をDISられる。</title>
		<link>http://shimz.me/blog/other/3745</link>
		<pubDate>Mon, 15 Sep 2014 06:57:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3745</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/09/dis140915.jpg" alt="dis140915" width="500" height="375" class="aligncenter size-full wp-image-3746" />

東京メトロの<a href="http://tokyometro10th.jp/future/opendata/">オープンデータ活用コンテスト</a>に登録したところ、下記のような通知が来た。

<blockquote>この度は、東京メトロオープンデータ活用コンテストの
開発者サイトへのご登録ありがとうございました。

登録情報を確認させていただいたところ、下記に不備がありました。

・住所

お手数をおかけいたしますが、下記サイトから、再度ご登録をお願いいたします。

http://tokyometro10th.jp/future/opendata/index.html

ご登録お待ちしております。</blockquote>

「うん？　ちゃんと入力したはずだけどなぁ」と思い、もう一度登録し直した。

<strong>同じ内容のメールが再度届いた。</strong>

どうやら、うちの住所はメトロ的には不備のある住所ということになるらしい。

ウチは一戸建てで地番は１桁しかないですが、それが正しい住所なんですが。

県名から市名、町名、地番まで入力しているのですが、いったい何が「不備」なのか、ちゃんと説明して欲しい。

とりあえず、もう一度登録してみる。

オープンデータを使うのにいったい何回登録し直さないといけないのか……その都度、確認のために２営業日ほどまたされるし。

まったく、激おこオープン丸ですよ！

【追記9/16】
三回目にしてやっと登録されました。入力した住所は１回目、２回目と特に変わらないので、結局なにが不備とされたのか不明なままです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3745</wp:post_id>
		<wp:post_date>2014-09-15 15:57:42</wp:post_date>
		<wp:post_date_gmt>2014-09-15 06:57:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3745</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_eb6d80ba97e2e1380b7edbfd2ef32cc4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3746]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7aaeb671427081c75813436b40e167b7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427170992;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3170;}i:1;a:1:{s:2:"id";i:3711;}i:2;a:1:{s:2:"id";i:3406;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>スマートフォン用UIフレームワーク「lungo.js」で地図アプリを作ってみる</title>
		<link>http://shimz.me/blog/javascript/3747</link>
		<pubDate>Tue, 16 Sep 2014 00:18:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3747</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/lungo/map/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/lungomap170914.jpg" alt="lungo.js maps" width="590" height="359" class="aligncenter size-full wp-image-3748" /></a>

とある事情により、スマホ向けに地図を使ったWebApp的なものを作る必要があって、モバイル向けフレームワークをいろいろ試しています。

個人的には「<a href="http://lungo.tapquo.com/">lungo.js</a>」というフレームワークが手持ちのiPhone4sで見てもキビキビ動いて気に入ったのですが、IEにはまったく対応していないらしいので今回は見送り。（公式のKitchenSinkもIE10で動かなかったので、IEは完全スルーという方針らしいです）

かなり性能の良いフレームワークだと思うのですが、日本語ドキュメントはおろか英語のドキュメントすら公式以外にはほとんど見当たらないというニッチさ。

興味がある方は使ってみてください。

<h2>サンプル</h2>
<iframe id="demo" src="http://shimz.me/example/lungo/map/index.html" width="320" height="512"></iframe>    
<a href="http://shimz.me/example/lungo/map/index.html">example</a>

 
<pre class="lang:xhtml decode:true " >&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;lungo gmap&lt;/title&gt;
&lt;meta name="description" content=""&gt;
&lt;meta name="HandheldFriendly" content="True"&gt;
&lt;meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /&gt;
&lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
&lt;meta name="apple-mobile-web-app-status-bar-style" content="black"&gt;
&lt;meta name="mobile-web-app-capable" content="yes"&gt;
&lt;meta name="format-detection" content="telephone=no"&gt;
&lt;meta http-equiv="cleartype" content="on"&gt;

&lt;!-- Main Stylesheet --&gt;
&lt;link rel="stylesheet" href="../css/lungo.css"&gt;
&lt;link rel="stylesheet" href="../css/lungo.theme.css"&gt;
&lt;link rel="stylesheet" href="../css/lungo.icon.css"&gt;
		
&lt;style&gt;
html, body{
    margin: 0px;
    padding: 0px;
}
html, body, #map {
	width: 100%;
	height: 100%;
}
&lt;/style&gt;		
		
&lt;/head&gt;

&lt;body&gt;
&lt;!-------------------------------------------------------------------------------------------------------
	サイドメニュー
----------------------------------------------------------------------------------------------------------&gt;
&lt;aside id="features" &gt;
	&lt;header&gt;
		&lt;h1 class="title text big"&gt;Menu&lt;/h1&gt;
	&lt;/header&gt;

	&lt;article id="sss" class="list active"&gt;
		&lt;ul&gt;
			&lt;li  class="active"  data-view-article="map-art" data-title="地図" data-icon="map-marker"&gt;
				&lt;a href="#"&gt;
					&lt;strong&gt;地図&lt;/strong&gt;
				&lt;/a&gt;
			&lt;/li&gt;

			&lt;li data-view-article="route-atr" data-title="施設"  data-icon="align-justify"&gt;
				&lt;div class="tag count on-right"&gt;4&lt;/div&gt;
				&lt;strong class="text big"&gt;施設&lt;/strong&gt;
				&lt;small&gt;タップした地点に移動&lt;/small&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/article&gt;
&lt;/aside&gt;


&lt;!-------------------------------------------------------------------------------------------------------
	メインコンテンツ
----------------------------------------------------------------------------------------------------------&gt;
&lt;section id="layout" data-transition="" data-aside="features"&gt;
	&lt;!-- ヘッダー --&gt;
	&lt;header data-tistle="Layout"&gt;
		&lt;nav class="on-left"&gt;
			&lt;a href="#" data-view-aside="features" data-icon="menu"&gt;&lt;/a&gt;
		&lt;/nav&gt;
		&lt;h1 class="title centered"&gt;
			タイトル
		&lt;/h1&gt;
	&lt;/header&gt;

	&lt;!-- 地図ー --&gt;
	&lt;article id="map-art" class="active"&gt;
	   &lt;div id="map"&gt;&lt;/div&gt;
	&lt;/article&gt;  

	&lt;!-- 施設一覧 --&gt;	
	&lt;article id="route-atr" class="list scroll "&gt;
		&lt;ul&gt;
			&lt;li class="anchor contrast"&gt;高崎&lt;/li&gt;
			&lt;li&gt;
				&lt;a  href="#"  data-view-article="map-art" data-action="point_selected" data-latlng="36.322356,139.013057"&gt;
					&lt;strong&gt;高崎駅&lt;/strong&gt;
				&lt;/a&gt;
			&lt;/li&gt;
			&lt;li&gt;
				&lt;a  href="#" data-view-article="map-art" data-action="point_selected" data-latlng="36.3219477,139.00335240000004"&gt;
					&lt;strong&gt;高崎市役所&lt;/strong&gt;
				&lt;/a&gt;
			&lt;/li&gt;

		&lt;li class="anchor contrast"&gt;大宮&lt;/li&gt;		
			&lt;li&gt;
				&lt;a  href="#" data-view-article="map-art" data-action="point_selected" data-latlng="35.906295,139.62399900000003"&gt;
					&lt;strong&gt;大宮駅&lt;/strong&gt;
				&lt;/a&gt;
			&lt;/li&gt;
			&lt;li&gt;
				&lt;a  href="#" data-view-article="map-art" data-action="point_selected" data-latlng="35.923507,139.63239"&gt;
					&lt;strong&gt;大宮公園&lt;/strong&gt;
				&lt;/a&gt;
			&lt;/li&gt;		
		&lt;/ul&gt;
	&lt;/article&gt;
	
	&lt;!--
	&lt;footer&gt;
		&lt;nav&gt;
			&lt;a href="#" data-view-article="map-art" data-icon="screenshot" class="active" &gt;&lt;/a&gt;
		&lt;/nav&gt;
	&lt;/footer&gt;
	--&gt;	
&lt;/section&gt;


&lt;script src="../quo.js"&gt;&lt;/script&gt;
&lt;script src="../lungo.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"&gt;&lt;/script&gt;

&lt;script&gt;
	Lungo.init({
		name: 'Flexbox',
		version: '2.2',
		history: false
	});

	Lungo.ready(function() {
		//画面表示時に再度メニューを開く
		Lungo.Aside.show("features");

		//Google Map 初期化
		var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 16,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			center: { lat: 35.906961392699998, lng: 139.622833797 },       
		});
		
		$$("[data-action=point_selected]").tap(function(event) {
			var latlng = this.dataset.latlng.split(",");
			map.panTo(new google.maps.LatLng(latlng[0], latlng[1]));
		});
		
	});

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3747</wp:post_id>
		<wp:post_date>2014-09-16 09:18:40</wp:post_date>
		<wp:post_date_gmt>2014-09-16 00:18:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3747</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3748]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427397582;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:527;}i:1;a:1:{s:2:"id";i:1167;}i:2;a:1:{s:2:"id";i:3399;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsとWeb Audio APIを使ったオーディオビジュアライゼーション</title>
		<link>http://shimz.me/blog/web/3751</link>
		<pubDate>Wed, 17 Sep 2014 04:19:51 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3751</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://preziotte.com/partymode/"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/partymode140917.jpg" alt="party-mode" width="590" height="318" class="aligncenter size-full wp-image-3752" /></a>

<a href="http://preziotte.com/partymode/">Demo</a>
※Chrome推奨

D3.jsとWeb Audio APIを用いて作られたブラウザ用オーディオビジュアライザのデモだそうです。
デスクトップから画面内にmp3ファイルをドラッグすれば音楽に合わせたビジュアライズが行われます。

Githubにてコードが公開されています。

<a href="https://github.com/preziotte/party-mode">preziotte/party-mode</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3751</wp:post_id>
		<wp:post_date>2014-09-17 13:19:51</wp:post_date>
		<wp:post_date_gmt>2014-09-17 04:19:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3751</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3752]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426912519;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3378;}i:1;a:1:{s:2:"id";i:3073;}i:2;a:1:{s:2:"id";i:2898;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>東京メトロAPIテスト</title>
		<link>http://shimz.me/blog/d3-js/3753</link>
		<pubDate>Thu, 18 Sep 2014 00:55:48 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3753</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/TokyoMetoro/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/tokyometoro140918.jpg" alt="東京メトロAPIてすと" width="399" height="307" class="aligncenter size-full wp-image-3754 border" /></a>

<a href="http://shimz.me/example/TokyoMetoro/01/index.html">example</a>

<a href="http://shimz.me/blog/other/3745">なんだかんだでやっと承認され</a>、東京メトロAPIで遊んでいます。

とりあえずデータの構造を把握するのに一苦労。

APIのオプション「rdf:type=odpt:Station」(駅データ）で取得できる駅情報に中に含まれない駅があるのはなぜなのか？

駅データが足りないため「odpt:StationTimetable」（時刻表データ）で取得した「odpt:destinationStation」（行き先の駅）の名称が駅データからとれず駅名が表示できてないものがあります。 orz

う〜ん、わからない。

とりあえず使ってみた感じは、データの構造上リクエストを投げて戻ってきた値を元にさらにリクエストを投げるというのを頻繁に行わなくてはならないので、気を抜くとあっというまにコールバック地獄に陥ってしまいますね。

JSON-LDってSQLで言う所のJOINみたいなことはできないのかな？

ちゃんと扱えるようになるには、JSON-LDに関してもう少し勉強しないと難しそうです。

<h2>サンプル</h2>
D3.js, moment.js の他に、以前作った<a href="http://shimz.me/blog/javascript/3376">loadDataSet.js</a>を使ってます。
JavaScriptでAPIのデータを取得するために<a href="http://benalman.com/code/projects/php-simple-proxy/docs/files/ba-simple-proxy-php.html">proxy</a>を通してます。(consumerKeyは隠匿したいのでproxy内にてリクエストに付加してます)

<pre class="height-set:true lang:js decode:true " >(function(){
	
	var API_ENDPOINT  = "https://api.tokyometroapp.jp/api/v2/datapoints?";	
	var PROXY = "http://shimz.me/tool/metoro_proxy.php?url=" + API_ENDPOINT;
	var TODAY = new Date().getDay();
	
	//毎回APIから取得するのもなんなので、デモ用にローカルに保存している。
	var STATION_DATA_FILE = "../_demodata/station.json";
	var RAILWAY_DATA_FILE = "../_demodata/railway.json";
	
	//helper 関数。
	var getStationData, getStationName, getRailwayName;
	
	d3.loadDataSet({
		files:[
			{key:"station", file:STATION_DATA_FILE},
			{key:"railway", file:RAILWAY_DATA_FILE},
		],
		endFn:function(data){
			init(data);
		}
	})
	

	function init(data){
		console.log("Station & railway data", data);
		//読み込んだstation,railwayのデータを各関数にバインドしておく
		getStationData = partial(propStation,  data.station);
		getStationName = partial(propStationName,  data.station);
		getRailwayName = partial(propRailwayName,  data.railway);
		
		//検索実行
		d3.select("#search").on("click", function(){
			document.querySelector("#timetable").innerHTML = "";
			
			var inputStationName = document.querySelector("#stationName").value.replace("駅", "");
			//取得した駅データから対象駅のデータだけを取得(該当するのは１件とは限らない)
			var stations = getStationData(inputStationName);		
			getCrrentTimetable(stations, function(dataset){
				console.log("Timetable data", dataset);
				outputTable(dataset);
			})
		});
	}
	
	//テーブル要素出力
	function outputTable(dataSet){		
		var div = d3.select("#timetable");
		
		var railway_table = div.selectAll(".railway_table")
			.data(dataSet)
			.enter()
			.append("div")
			.attr("class", "railway_table");
		
		railway_table.append("p")
			.text(function(d){ return  getRailwayName(d.key) + "線" });
		
		railway_table.append("table")
			.selectAll("tr")
			.data(function(d){return d.value.shift() })
			.enter()
			.append("tr")
				.selectAll('td')
				.data(function (row) {
					  return d3.entries(row); //rowオブジェクトを配列へ変換
				}) 
				.enter()
				.append('td')    //tdタグ追加   
				.text(function(d){					
					switch(d.key){
						case "odpt:destinationStation": return getStationName(d.value) + "行き";break;
						case "odpt:departureTime": return d.value; break;
						case "odpt:isLast": return "最終";
					}
					return null;
				});			
	}
		
	//現在時刻以降の対象駅時刻表データを取得
	function getCrrentTimetable(stations, callback){	
		var stationName = this.value;
		if (stationName == "") return null;
			 
		 getStationTimetable(stations, function(timetablesJSON){
			 var resolute = [];
			 
			 //timetableは方面毎に存在するため、それぞれについて処理
			 d3.map(timetablesJSON).forEach(function(key, val){
				 var res = val.map(function(d){
					 //本日、現在時刻後のtitmetableデータのみを返す
					 return propAfterThis(propTimetable(d, TODAY)) ;
				 });
				 resolute.push({key:val.shift()["odpt:railway"], value:res});
			 });
			 callback(resolute);
		 });
	}
		 
	//対象駅のtimetableデータを取得 
	function getStationTimetable(targetStationData, callback){		
		var type = "rdf:type=odpt:StationTimetable";
	
		var XHRresource = { files:[] };
		
		//必要な数のXHRリクエストをストック
		targetStationData.forEach(function(d, i){
			var filter = "&odpt:station="+d['owl:sameAs'];
			var url = PROXY + encodeURIComponent(type + filter);
			XHRresource.files.push({key:i, file:url, filetype:"json"});
		});
		
		XHRresource.endFn = callback;
		d3.loadDataSet(XHRresource); //XHR send	
	}
		
	//「今日」の曜日に応じて、該当するtimetableを取り出す
	function propTimetable(timetableData, wday) {
		// Todo: 祝日の処理をあとで追加
		return (wday == "3") && timetableData["odpt:holidays"]
			  || (wday == "6") && timetableData["odpt:saturdays"]
			  || timetableData["odpt:weekdays"];
	}
		
	//timetable data から、現在時刻以降の発車予定のデータを取り出す
	function propAfterThis(todayTimetableData){
		return todayTimetableData.filter(function(d){
			return /^in/.test( moment(d['odpt:departureTime'], "hh:mm").fromNow() );
		});
	}
	
	//railway data から該当する路線名を取り出す
	function propRailwayName(railwayJSON, odpt_railway){
		if (!odpt_railway) return null;
		var resolute = railwayJSON.filter(function(d){
			return d['owl:sameAs'] === odpt_railway;
		});
		if (resolute.length <= 0) return  "railway Not Found. ";
		return resolute.shift()['dc:title'] ;						
	}
	
	//station data から該当する駅名を取り出す
	function propStationName(stationJSON, owl_sameAs){
		if (!owl_sameAs) return null; 
		var resolute = stationJSON.filter(function(d){
			return d['owl:sameAs'] === owl_sameAs;
		});
		if (resolute.length <= 0) {
			return  "Not Found:" + owl_sameAs;
		}
		return resolute.shift()['dc:title'];		
	}
		
	//station data から該当する駅データを取り出す
	function propStation(stationJSON, stationName){
		if (!stationName) return null; 
		var resolute = stationJSON.filter(function(d){
			return d['dc:title'] === stationName;
		});		
		if (resolute.length <= 0) throw stationName + " Data Not Found. ";		
		return resolute;
	}	
	
	//部分適用
	function partial( orig_func ) {
		var aps = Array.prototype.slice,
		  args = aps.call( arguments, 1 );
	
		return function() {
		  return orig_func.apply( this, args.concat( aps.call( arguments ) ) );
		};
	};

})();</pre> 

APIの仕様やデータの構造をまだちゃんと把握できてないので、無駄が多い感じになってます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3753</wp:post_id>
		<wp:post_date>2014-09-18 09:55:48</wp:post_date>
		<wp:post_date_gmt>2014-09-18 00:55:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3753</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3754]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427293112;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1167;}i:1;a:1:{s:2:"id";i:3841;}i:2;a:1:{s:2:"id";i:2749;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>目的別お勧めプログラミング言語</title>
		<link>http://shimz.me/blog/javascript/3757</link>
		<pubDate>Tue, 23 Sep 2014 03:06:33 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3757</guid>
		<description></description>
		<content:encoded><![CDATA[目的に合わせて、適切なプログラミング言語を選択しましょう！

&nbsp;
<hr>
&nbsp;

<h2>Webサイトを作る</h2>
HTML + CSS + JavaScript

<h2>フロントエンドプログラミング</h2>
JavaScript

<h2>サーバーサイドプログラミング</h2>
<a href="http://nodejs.jp/">node.js</a>

<h2>デスクトップアプリ作りたい</h2>
<a href="https://github.com/rogerwang/node-webkit">node-webkit </a>, <a href="https://developer.mozilla.org/ja/docs/Rhino">Rhino</a>, <a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20100218/344797/">HTA+JScript</a>

<h2>モバイルアプリ作成</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HEB6UFM/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51qc81IwN7L._SL160_.jpg" alt="[iOS/Android対応] HTML5 ハイブリッドアプリ開発[実践]入門 (Software Design plus)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HEB6UFM/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">[iOS/Android対応] HTML5 ハイブリッドアプリ開発[実践]入門 (Software Design plus)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">技術評論社 (2013-12-20)<br />売り上げランキング: 9,555<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HEB6UFM/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839943710/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51jtfN6mC7L._SL160_.jpg" alt="HTML5/JavaScriptとPhoneGapで作るiPhoneアプリ開発入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839943710/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5/JavaScriptとPhoneGapで作るiPhoneアプリ開発入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">富田 宏昭 <br />マイナビ <br />売り上げランキング: 190,354<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839943710/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<a href="http://monaca.mobi/ja/">Monaca - HTML5モバイルアプリ開発プラットフォーム</a>


<h2>Windows storeアプリ作りたい</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BH772WE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51pFTouULfL._SL160_.jpg" alt="JavaScriptで作る Windows ストアアプリ開発スタートガイド" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BH772WE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">JavaScriptで作る Windows ストアアプリ開発スタートガイド</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">インプレス (2013-02-21)<br />売り上げランキング: 63,222<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BH772WE/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>Chromeアプリを作る</h2>
<a href="https://developer.chrome.com/apps/about_apps">What Are Chrome Apps?</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844334220/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51whkjxFOAL._SL160_.jpg" alt="開発者のためのChromeガイドブック (Google Expert Series)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844334220/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">開発者のためのChromeガイドブック (Google Expert Series)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.29</div></div><div class="amazlet-detail">吉川 徹 あんどうやすし 田中 洋一郎 小松 健作 <br />インプレスジャパン <br />売り上げランキング: 467,408<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844334220/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>Firefoxの拡張機能を作る</h2>
<a href="http://masahal.web.fc2.com/addon_lecture/">Firefoxアドオン（拡張機能）の作り方</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839918058/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41YRE87YMQL._SL160_.jpg" alt="Firefoxの改造テクニック!―カスタマイズ&拡張機能開発ガイド" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839918058/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Firefoxの改造テクニック!―カスタマイズ&拡張機能開発ガイド</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.29</div></div><div class="amazlet-detail">大浦 淳 <br />毎日コミュニケーションズ <br />売り上げランキング: 296,059<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839918058/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>ブックマークレットを作る</h2>
<a href="http://www.catch.jp/wiki/?Bookmarklet%A4%CE%BA%EE%A4%EA%CA%FD">ブックマークレット／Bookmarkletの作り方</a>
<a href="http://blog.bornneet.com/Entry/10/">bookmarklet作成支援ツールまとめ</a>

<h2>Windows の自動化</h2>
<a href="http://msdn.microsoft.com/ja-jp/library/72bd815a(v=vs.90).aspx">JScript</a>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/483991902X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">JScriptハンドブック―Java Scriptを越えた最強のツール</a>

<h2>Mac OS X Yosemiteの自動化</h2>
<a href="https://developer.apple.com/library/prerelease/mac/releasenotes/interapplicationcommunication/rn-javascriptforautomation/index.html">JavaScript for Automation Release Notes</a>

<h2>Microsoft Officeの自動化</h2>
<a href="http://msdn.microsoft.com/ja-jp/library/office/fp142185(v=office.1501401).aspx">JavaScript API for Office (v1.1)</a>

<h2>Google ドキュメントの自動化</h2>
<a href="https://developers.google.com/apps-script/?hl=ja">Google Apps Script — Google Developers</a>


<h2>Adobeソフトの自動化</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FZEK6J6/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41OH6N15lrL._SL160_.jpg" alt="Adobe JavaScriptリファレンス (NextPublishing)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FZEK6J6/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Adobe JavaScriptリファレンス (NextPublishing)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">インプレスR&D (2013-10-18)<br />売り上げランキング: 46,240<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FZEK6J6/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774136875/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/4167EXj33TL._SL160_.jpg" alt="組版時間を半減する! InDesign自動処理実例集" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774136875/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">組版時間を半減する! InDesign自動処理実例集</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">(株)シータス 古籏 一浩 <br />技術評論社 <br />売り上げランキング: 346,876<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774136875/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h2>2Dゲームを作る</h2>
<a href="http://blog.mb.cloud.nifty.com/?p=1311">HTML5でゲーム開発。JavaScriptゲームフレームワークまとめ</a>
<a href="http://matome.naver.jp/odai/2134682461157875201">Javascript 2Dゲームエンジンまとめ</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4899772971/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51yXpz8wbiL._SL160_.jpg" alt="14歳からはじめるHTML5 & JavaScriptわくわくゲームプログラミング教室Windows／Macintosh対応" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4899772971/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">14歳からはじめるHTML5 & JavaScriptわくわくゲームプログラミング教室Windows／Macintosh対応</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">大槻有一郎 <br />ラトルズ <br />売り上げランキング: 323,338<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4899772971/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<a href="https://herlock.do/">Herlock - JavaScriptクロスプラットフォームゲームエンジン</a>


<h2>3Dゲームを作る</h2>
<a href="http://japan.unity3d.com/">Unity - Game Engine</a>

<a href="http://libro.tuyano.com/index2?id=3036003">JavaScriptではじめるUnityプログラミング入門</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479737490X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41sz2JtArGL._SL160_.jpg" alt="Unity4入門   最新開発環境による簡単3Dゲーム製作" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479737490X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Unity4入門   最新開発環境による簡単3Dゲーム製作</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">浅野 祐一 荒川 巧也 森 信虎 <br />ソフトバンククリエイティブ <br />売り上げランキング: 2,608<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479737490X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h2>サウンドプログラミング</h2>
Web Audio API + JavaScript
<a href="http://www.html5rocks.com/ja/tutorials/webaudio/intro/">Getting Started with Web Audio API - HTML5 Rocks</a>


<h2>画像処理プログラミング</h2>
canvas + javascript 
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51luXD8O5sL._SL160_.jpg" alt="HTML5+JavaScriptによる画像・動画像処理入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5+JavaScriptによる画像・動画像処理入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">松田 晃一 <br />カットシステム <br />売り上げランキング: 473,399<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833218/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>3Dグラフィックプログラミング</h2>
WebGL + JavaScript
<a href="https://developer.mozilla.org/ja/docs/Web/WebGL">WebGL | MDN</a>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798129534/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Nw-XsPQiL._SL160_.jpg" alt="実践プログラミングWebGL HTML & JavaScriptによる3Dグラフィックス開発 (Programmer’s SELECTION)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798129534/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">実践プログラミングWebGL HTML & JavaScriptによる3Dグラフィックス開発 (Programmer’s SELECTION)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">Andreas Anyuru <br />翔泳社 <br />売り上げランキング: 456,749<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798129534/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<h2>物理シミュレーション</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487783303X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51kNVB-2mOL._SL160_.jpg" alt="HTML5による物理シミュレーション―JavaScriptでThree.js/jqPlo" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487783303X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5による物理シミュレーション―JavaScriptでThree.js/jqPlo</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">遠藤 理平 <br />カットシステム <br />売り上げランキング: 333,929<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487783303X/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833129/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51MyFAwKN5L._SL160_.jpg" alt="HTML5による物理シミュレーション 拡散・波動編―JavaScriptライブラリとCanvas 2D Context/Web Workersを使う" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833129/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">HTML5による物理シミュレーション 拡散・波動編―JavaScriptライブラリとCanvas 2D Context/Web Workersを使う</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">遠藤 理平 <br />カットシステム <br />売り上げランキング: 392,875<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877833129/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>ハードウェア(フィジカルコンピューティング)</h2>
<a href="http://makezine.jp/blog/2014/06/building-robots-and-rockets-with-javascript.html">Cylon.js ─ ロボットやロケットをJavaScriptで作る</a>

<a href="http://www.atmarkit.co.jp/ait/kw/arduino_js.html">Arduinoで始めるWeb技術者のためのIoT入門</a>

<a href="http://jsdo.it/konashijs/">konashi.js | エンジニアとデザイナ・アーティストを繋ぐアプリ</a>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4899773935/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51sL1KkmBdL._SL160_.jpg" alt="BeagleBone Blackで遊ぼう! Raspberry Piより高機能で高性能" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4899773935/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">BeagleBone Blackで遊ぼう! Raspberry Piより高機能で高性能</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">米田 聡 <br />ラトルズ <br />売り上げランキング: 216,274<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4899773935/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<a href="http://gigazine.net/news/20130821-tessel-javascript-hardware/">次世代マイコン「Tessel」はJavaScriptとNode.jsをサポートしWi-Fiからアップデート可能 - GIGAZINE</a>

<a href="http://www.espruino.com/">Espruino - JavaScript for Microcontrollers</a>

<a href="http://itpro.nikkeibp.co.jp/article/Interview/20140319/544664/">Kinoma Create</a>

<h2>デジタルサイネージ</h2>
<a href="https://github.com/emahub/wint">emahub/wint</a>

<h2>プロジェクションマッピング</h2>
<a href="https://github.com/keijiro/unity-pm-tutorial/blob/master/README.md">unity-pm-tutorial/README.md at master · keijiro/unity-pm-tutorial</a>

<h2>機械学習</h2>
<a href="http://burakkanber.com/blog/machine-learning-in-other-languages-introduction/">Machine Learning in Javascript: Introduction</a>

<h2>TDD</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048707868/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/5183T8gKXyL._SL160_.jpg" alt="テスト駆動JavaScript" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048707868/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">テスト駆動JavaScript</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">Christian Johansen <br />アスキー・メディアワークス <br />売り上げランキング: 181,416<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048707868/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h2>関数型プログラミング</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/414qGlNpcHL._SL160_.jpg" alt="JavaScriptで学ぶ関数型プログラミング" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">JavaScriptで学ぶ関数型プログラミング</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.09.23</div></div><div class="amazlet-detail">Michael Fogus <br />オライリージャパン <br />売り上げランキング: 210,223<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

&nbsp;
<hr>
&nbsp;

もちろん、冗談ですよ……

<img src="http://shimz.me/blog/wp-content/uploads/2014/09/BRhteg3CcAAM548-e1411441524970.jpg" alt="てへぺろ☆" title="てへぺろ☆" width="200" height="268" class="aligncenter size-full wp-image-3759" />

&nbsp;
&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3757</wp:post_id>
		<wp:post_date>2014-09-23 12:06:33</wp:post_date>
		<wp:post_date_gmt>2014-09-23 03:06:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3757</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3759]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427397455;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3156;}i:1;a:1:{s:2:"id";i:643;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>高崎市にオープンデータへの取り組みについて聞いてみた。</title>
		<link>http://shimz.me/blog/other/3760</link>
		<pubDate>Thu, 25 Sep 2014 01:48:56 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3760</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.city.takasaki.gunma.jp/"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/takasaki.jpg" alt="takasaki" width="256" height="148" class="aligncenter size-full wp-image-3761" /></a>

高崎市のサイトを見ていたら「<a href="http://www.city.takasaki.gunma.jp/docs/2013120900042/">市への意見・提言</a>」というページを見つけたので、「オープンデータってやらないんですか？」という質問を投げてみた。

とりあえず、回答待ち。
回答はサイト上に掲載されるらしいです。

<h3>回答いただきました。</h3>
<a href="http://shimz.me/blog/other/3851">高崎市からオープンデータへの取り組みについて回答がきました。</a>

<h3>関連記事</h3>
<ul>
<li><a href="http://shimz.me/blog/map/3496">Google Map上に平成26年高崎市の公示地価(GeoJSONデータ)を表示する</a></li>
<li><a href="http://shimz.me/blog/other/3406">高崎市と前橋市のAED設置施設一覧に緯度経度を付加してみた</a></li>
<li><a href="http://shimz.me/blog/d3-js/3037">高崎市のビリオンダラーグラムつくってみた</a></li>
<li><a href="http://shimz.me/blog/d3-js/3463">前橋市には、男子より女子の方が多く住んでいる。</a></li>
<li><a href="http://shimz.me/blog/fullcalendar/3340">前橋市のオープンデータを使ってカレンダー(サンプル)を作ってみた</a></li>
<li><a href="http://shimz.me/blog/d3-js/2635">群馬県の賃貸価格データを可視化してみた（散布図＆地図）</a></li>
<li><a href="http://shimz.me/blog/d3-js/3482">群馬県の地域別転入転出数</a></li>
<li><a href="http://shimz.me/blog/d3-js/3451">群馬県　地域別対前月人口増減を可視化</a></li>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3760</wp:post_id>
		<wp:post_date>2014-09-25 10:48:56</wp:post_date>
		<wp:post_date_gmt>2014-09-25 01:48:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3760</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3761]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1425983916;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3851;}i:1;a:1:{s:2:"id";i:3340;}i:2;a:1:{s:2:"id";i:3406;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>snap.js + Google Maps API(スワイプイベントをmap要素に適用しない）</title>
		<link>http://shimz.me/blog/troubleshooting/3762</link>
		<pubDate>Thu, 25 Sep 2014 02:31:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3762</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/jakiestfu/Snap.js/">snap.js</a>を用いてサイドメニュー付きの地図を作成してみています。

それなりにサクサク動いて便利なのですが、地図を移動する際のタッチが親要素にsnap.jsのスワイプイベントとして伝播してしまい、地図を動かすたびにサイドメニューが開いて非常に使いづらい感じになっていました。

<a href="http://shimz.me/example/snapjs/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/09/snapmap140925.jpg" alt="snapmap140925" width="417" height="618" class="aligncenter size-full wp-image-3764" /></a>

<a href="http://shimz.me/example/snapjs/01/">example</a>

こまったもんだなーと思って公式のDemoを探っていたら「no-drag」というまさに求めていたものがそこに！

スワイプイベントの伝播を止めたいときは、対象とする要素にカスタムデータ属性「data-snap-ignore」を指定し「true」を渡してあげればいいだけでした。

map要素に適応するならこんな感じ。
 
<pre class="lang:js decode:true " >&lt;div id="map" data-snap-ignore="true"&gt;&lt;/div&gt;			</pre> 

これでmap要素上ではスワイプイベントがsnap.jsに伝わらずサイドメニューが開きまくってこまるという問題が解消されます。
(ヘッダ上でスライドした場合はちゃんとメニューが表示されます）

<a href="http://shimz.me/example/snapjs/no_drag/">no drag example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3762</wp:post_id>
		<wp:post_date>2014-09-25 11:31:38</wp:post_date>
		<wp:post_date_gmt>2014-09-25 02:31:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3762</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3765]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427296510;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4142;}i:1;a:1:{s:2:"id";i:3874;}i:2;a:1:{s:2:"id";i:3698;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google Mapにsvgを使ってマスクをかける</title>
		<link>http://shimz.me/blog/d3-js/3770</link>
		<pubDate>Wed, 01 Oct 2014 05:15:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3770</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example3/mask/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/googlemapsmask141001.jpg" alt="Google Mapにマスクをかける" width="588" height="453" class="aligncenter size-full wp-image-3769" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/mask/index.html">example</a>

実は以前、ClipPathを使って<a href="http://shimz.me/blog/d3-js/3019">似たようなこと</a>をやったことがあるのですが、Mask機能を使った方が綺麗に切り抜けたので掲載します。

地図上にオーバーレイしたSVGにマスクをかけるテクニックは、いろんなことに応用が利きそうですね。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >d3.json("../../_geodata/gunma_outline.geojson", function(json) {
	mapdraw(json);
});

function mapdraw(json) {

	var feature = json.features;		
	
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
		zoom: 10,
		mapTypeId: google.maps.MapTypeId.TERRAIN,
		center: new google.maps.LatLng( 36.4894706, 139.00044819999994),       
	});

	//OverLayオブジェクトの作成	
	var overlay = new google.maps.OverlayView(); 
	overlay.onAdd = function () {
		
		//オーバーレイ設定
		var layer = d3.select(this.getPanes().overlayLayer).append("div").attr("class", "SvgOverlay");
		var svg = layer.append("svg");
		var defs = svg.append("defs");
		var mask = defs.append("mask").attr("id", "mask");
		//表示エリア指定マスク
		mask.append("rect").attr({
			x:0,
			y:0,
			width:8000,
			height:8000,
			fill:"white"			
		});
		//実際に地図を隠すカバー
		var cover = svg.append("rect").attr({
			x:0,
			y:0,
			width:8000,
			height:8000,
			fill:"gray"			
		});

		
		var overlayProjection = this.getProjection();

		//Google Projection作成
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}

		//パスジェネレーター作成
		path = d3.geo.path().projection(googleMapProjection);　
        
		//オーバーレイ描画イベント    
		overlay.draw = function () {
			//マスクに地形のパスを追加し、非表示エリアとして指定
			mask.selectAll("path")
				.data(feature)
				.attr("d", function(d){ return path(d) }) 
				.enter()
				.append("svg:path")
				.attr({
					"d": path,
					"fill": "black"
				});
			 
				//カバーにマスクを反映
				cover.attr("mask", "url(#mask)");
		};
	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);
};</pre> 

※マスクの表示・非表示はSVGにかかっています。地図が表示される部分は、svg上の要素を非表示にした部分です。
混乱しがちなので注意が必要です。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3770</wp:post_id>
		<wp:post_date>2014-10-01 14:15:05</wp:post_date>
		<wp:post_date_gmt>2014-10-01 05:15:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3770</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3769]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385639;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3984;}i:1;a:1:{s:2:"id";i:2379;}i:2;a:1:{s:2:"id";i:2703;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GeoJSONで出力できるGPSロガーアプリ「GPS Catcher」</title>
		<link>http://shimz.me/blog/iphoneipad/3771</link>
		<pubDate>Thu, 02 Oct 2014 01:01:05 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3771</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://itunes.apple.com/jp/app/gps-catcher/id847289059?mt=8&at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/gpscatcher141002.jpeg" alt="GeoJSONで出力できるGPSロガーアプリ「GPS Catcher」" width="320" height="568" class="aligncenter size-full wp-image-3773" /></a>

<a href="https://itunes.apple.com/jp/app/gps-catcher/id847289059?mt=8&at=10lMp5">GPS Catcher - App Store</a>

GeoJSON形式でトラッキングデータを出力できるアプリを探していたのですが、なかなか見つからずやっと見つけたのが「GPS Catcher」でした。

基本的な操作は、newボタンから新しいプロジェクトを作成し再生ボタンを押してトラッキングを開始するだけです。
保存したファイルはメールに添付して送信やDropboxに出力できます。
選べる出力形式は、「Shapefile, kml, spatialite, dxf, GeoJSON」の五つ。
トラッキングデータのライン化、簡素化などもアプリ内で行えます。
精度やセキュリティについては詳しく調べていないので、その辺自己責任でお願いします。
（一点致命的な問題があって、バックグランドではうまくトラッキングができていないみたいなんですよね。アップデートに期待）

GeoJSONは、ただのJSONなのでJavaScriptで扱いやすく、Google Maps APIで読み込むのも非常に簡単です。また、Githubにアップロードすれば自働的にマップ上にプロットされて表示されます。便利！

<a href="http://shimz.me/blog/google-map-api/3445">Google Map上にGeoJSONデータを表示する</a>

手軽に扱えるので、GeoJSON形式での出力をサポートするGPSロガーが増えることを期待しています。

<h2>サンプル</h2>
<a href="https://github.com/shimizu/GPSCatcherTest">shimizu/GPSCatcherTest</a>

・ポイントデータ
<iframe width="100%" height="300" scrolling="no" frameborder="0" src="https://render.githubusercontent.com/view/geojson?url=https%3A%2F%2Fraw.githubusercontent.com%2Fshimizu%2FGPSCatcherTest%2Fmaster%2Fpoint.json#8436a07d-b8e1-4d16-8b65-7436e35e12be"></iframe>

・ライン化したデータ
<iframe width="100%" height="300" scrolling="no" frameborder="0" src="https://render.githubusercontent.com/view/geojson?url=https%3A%2F%2Fraw.githubusercontent.com%2Fshimizu%2FGPSCatcherTest%2Fmaster%2Flinearize.json#11943a19-307f-4cc4-bfb9-06b42bded3fb"></iframe>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3771</wp:post_id>
		<wp:post_date>2014-10-02 10:01:05</wp:post_date>
		<wp:post_date_gmt>2014-10-02 01:01:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3771</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3773]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427310091;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:2670;}i:2;a:1:{s:2:"id";i:2942;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Googleが「Physical Web」という面白いことを考えているらしい。</title>
		<link>http://shimz.me/blog/other/3776</link>
		<pubDate>Fri, 03 Oct 2014 03:35:45 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3776</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="Physical Web "><img src="http://shimz.me/blog/wp-content/uploads/2014/10/google-Physical-Web.png" alt="google-Physical-Web" width="590" height="473" class="aligncenter size-full wp-image-3777" /></a>

<a href="http://jp.techcrunch.com/2014/10/03/20141002google-the-physical-web/">Google、アプリを介さずモノのインターネットと会話できる標準規格Physical Webを開発中 - TechCrunch</a>

Githubにドキュメントやサンプルが公開されていました。

<a href="https://github.com/google/physical-web">google/physical-web</a>

とりあえず、ざっと読んでみた感じだとモノ（自販機とか車とか）が、常に周囲に対してBluetoothを使ってURLをブロードキャストしていて、それをデバイス（スマホとか）がキャッチするとアプリ上に一覧表示するという仕組みみたい。
現時点ではアプリだけれど、最終的にはデバイスの組み込み機能になるべき！だそうな。Bluetoothを使うのも今のところ一番現実的だからって理由らしい。
で、一覧表示されたリストの中から対象のURLをタップするとモノにアクセスできる。後は当事者どうしご自由にご歓談くださいとのこと。アクセスする方法は、別にブラウザを使うなど決まっているわけでは無いのであくまで識別子としてURLを使うってことらしい。

簡単だし分かり易いし、普及したら面白そう。

「セキュリティとか危なくね？」とか、「普及したら街あるいてるだけで大量に通知がきてうるさくね？」みたいなことについても先回りしてドキュメントで回答しているので、興味のある方は読んでみるといいかも。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3776</wp:post_id>
		<wp:post_date>2014-10-03 12:35:45</wp:post_date>
		<wp:post_date_gmt>2014-10-03 03:35:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3776</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3777]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427381136;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4025;}i:1;a:1:{s:2:"id";i:4110;}i:2;a:1:{s:2:"id";i:2670;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「大いなる沈黙へ」観てきました。</title>
		<link>http://shimz.me/blog/movie/3780</link>
		<pubDate>Mon, 06 Oct 2014 00:52:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3780</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="//www.youtube.com/embed/vU9FTzbl6Z0" frameborder="0" allowfullscreen></iframe>

<a href="http://www.ooinaru-chinmoku.jp/">大いなる沈黙へ　グランド・シャルトルーズ修道院</a>

<blockquote>カトリック教会の中でもとりわけ厳格な戒律で有名なグランド・シャルトルーズ修道院で、日々の務めに励む男子修道士たちの姿を追ったドキュメンタリー。人里離れた場所で自給自足の生活を送りながら毎日祈りをささげ、質素な生活の中で生涯を過ごす修道士たちの日常をカメラが捉える。メガホンを取るのは、ドイツ出身のフィリップ・グルーニング。構想から実に21年を経て実現した、中世から変わらぬ修道院のありのままの映像が心を揺さぶる。</blockquote>

2時間49分におよぶ長編ドキュメンタリー、しかもBGM無し、ナレーション無しという異色作です。
この作品の撮影のために監督は約半年間、シャルトルーズ修道院で修道士たちと寝食を共にしたそうですが、その６ヶ月間の生活がこの2時間49分にギュッと凝縮されているため、視聴者も監督同様この修道院のなかでともに生活している気分になれるからでしょうか、非常に長い作品ですが不思議と退屈することなく楽しめました。かといって、「あっという間に時間が過ぎてしまった」というような興奮がある映画でもありません。
この映画を楽しむには、ひとえにシャルトルーズ修道院や修道士の生活に興味が持てるかどうかにかかっています。

修道士の生活はとにかく極端に研ぎ澄まされています。
一日の大半を一人で過ごし、他の修道士との会話は日曜日に行われる4時間のウォーキングの時にのみ許され、それ以外では私語厳禁。
もちろんインターネットはおろか、テレビもラジオもなく、日中の大半は祈りと聖書を精読することに費やされます。
この繰り返しの日々が生涯続きます。

日々雑多な情報に囲まれ、一分たりともネットのない生活なんて考えられない！というネット中毒な自分にはたとえ１日でも耐えられないと思いつつも、どこかこんな世俗から切り離された生活へのあこがれが自分の中にあることに気付かされます。

とにかく自然光で撮影された映像がまるでレンブラントの絵画のように美しく、また静寂の中に響くさまざまな音がホント耳に心地よく……心地よすぎて、万全の体制で観に行かないと抗いがたい眠りに誘いこまれますｗ

私は平日の夜に観にいったため、あまり他にお客さんもおらず静かな環境で観ることができたのですが、この映画を楽しむにはそういった環境もとても重要です。複数人で見に行くような映画でもないので、独りで空いている時間を見計らって観に行くのが良いと思います。前日は早めに寝ましょう、寝不足の状態で観に行ったら確実に寝ます。

美しい映像と心地良い生活音が好きな方なら間違いなく楽しめる一作です。

<h3>余談</h3>

ちなみに、フィリップ・グレーニング監督インタビュー記事があるのですが、下記エピソードが微笑ましくて好きです。

<a href="http://dotplace.jp/archives/10951">フィリップ・グレーニング監督インタビュー</a>



<blockquote>―――猫に話しかけている修道士もいました。

PG：彼はずいぶん猫と喋っていましたよね（笑）。あれは厳密に言えば戒律を破ったことになりますが、私はあのシーンを使いたいと思ったので編集で残したんです。それで映画が完成した時に修道院側に見ていただいて、もし「カットしてくれ」と言われたらそうするつもりでいたんですが、そのシーンを見ると彼らは大笑いをして、「本当はこれは駄目なことだけど、もうやったことだからそのままでいいですよ」と言われました。</blockquote>

やっぱり、猫は偉大だｗ

<a href="http://www.ooinaru-chinmoku.jp/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/oinaruchinmoku.jpg" alt="大いなる沈黙へ　グランド・シャルトルーズ修道院" width="283" height="400" class="alignleft size-full wp-image-3781" /></a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3780</wp:post_id>
		<wp:post_date>2014-10-06 09:52:59</wp:post_date>
		<wp:post_date_gmt>2014-10-06 00:52:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3780</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[「大いなる沈黙へ」観てきました。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427260790;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3694;}i:1;a:1:{s:2:"id";i:2743;}i:2;a:1:{s:2:"id";i:3293;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON.stringifyの第２引数を使って出力結果(JSON)を整形する</title>
		<link>http://shimz.me/blog/javascript/3783</link>
		<pubDate>Wed, 08 Oct 2014 02:34:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3783</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><a href="https://developer.mozilla.org/ja/docs/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify() </a>メソッドは値を JSON に変換します。置き換え関数を指定して値を置き換えたり、置き換え配列を指定して指定されたプロパティのみを含むようにしたりします。</blockquote>

JavaScriptで値をJSONに変換するのにとても便利なメソッドですが、細かい使い方をしらなかったので調べてみました。

<h3>インデントを指定する</h3>
stringifyメソッドは三つの引数を受け取りますが、3番目の引数に空白文字を指定することで出力結果のインデントを付加することができます。
わりとよく使います。
 
<pre class="lang:js decode:true " >var a = {"number":100, "string":"hoge", "date":new Date, "array":[10,20,30], "object":{"hellow": "world"}, "function":function(){ alert("test") } };

JSON.stringify(a);
-&gt; '{"number":100,"string":"hoge","date":"2014-10-08T02:04:02.416Z","array":[10,20,30],"object":{"hellow":"world"}}'

//タブでインデント
JSON.stringify(a, null , "\t");
-&gt;
'{
	"number": 100,
	"string": "hoge",
	"date": "2014-10-08T02:04:02.416Z",
	"array": [
		10,
		20,
		30
	],
	"object": {
		"hellow": "world"
	}
}'</pre> 

ちなみにstringifyメソッドではfunctionは出力されません。

<h3>replacerを使う</h3>
今回のメイン。ほとんど使ったことがありません。
stringifyメソッドの2番目の引数にはreplacerと呼ばれるコールバックを指定できます。replacerにはキーと値が引数として受け渡されるので、それらを使って出力されるJSONを整形することができます。
下記は、dateの値を<a href="http://momentjs.com/">moment.js</a>を使って整形しJSONとして出力しています。

 
<pre class="lang:js mark:5,15 decode:true " >var a = {"number":100, "string":"hoge", "date":new Date, "array":[10,20,30], "object":{"hellow": "world"}, "function":function(){ alert("test") } };

var res = JSON.stringify(a, function(key, val){
	if (key === "date") {
		return moment(new Date(val)).format('YYYY/MM/DD h:mm:ss');
	}
	return val;	
}, "\t");

console.log(res);
-&gt;
'{
	"number": 100,
	"string": "hoge",
	"date": "2014/10/08 11:14:21", //整形された値
	"array": [
		10,
		20,
		30
	],
	"object": {
		"hellow": "world"
	}
}'</pre> 

……ぶっちゃけ、あまり使いどころがない気がします。
ちなみにreplacerの中でnullやundefinedを返すとstringifyメソッドの戻り値はundefinedになってしまうので、値を削ったり削除したりするのには使えません。

個人的にこういう用途不明な機能が大好きなので、なんか面白い使い方ができないか研究中です。

<h3>余談</h3>
stringifyメソッドはオブジェクト内にfunctionがあってもJSONとして出力しませんが、上記replacerを使って文字列に変換することで出力することができます。

 
<pre class="lang:js mark:24 decode:true " >var a = {"number":100, "string":"hoge", "date":new Date, "array":[10,20,30], "object":{"hellow": "world"}, "function":function(){ alert("test") } };

var res = JSON.stringify(a, function(key, val){
	if (typeof val === "function") {
		return val.toString();
	}
  return val;	
}, "\t");
	
console.log(res);
-&gt;
\"{
	"number": 100,
	"string": "hoge",
	"date": "2014-10-08T02:24:40.354Z",
	"array": [
		10,
		20,
		30
	],
	"object": {
		"hellow": "world"
	},
	"function": "function (){ alert(\"test\") }"
}\" </pre> 

でも、関数をjsonで渡すのはセキュリティ的に問題があるのでやめましょう。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3783</wp:post_id>
		<wp:post_date>2014-10-08 11:34:57</wp:post_date>
		<wp:post_date_gmt>2014-10-08 02:34:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3783</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3784]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[JSON.stringifyの第２引数を使って出力結果(JSON)を整形する]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388660;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3015;}i:1;a:1:{s:2:"id";i:3319;}i:2;a:1:{s:2:"id";i:3501;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Webixとsnap.jsを組み合わせる。</title>
		<link>http://shimz.me/blog/webix/3785</link>
		<pubDate>Thu, 09 Oct 2014 00:46:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3785</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://webix.com/">Webix</a>は、スマートフォンでの表示に対応したUIフレームワークですが、いわゆるスライドメニューと呼ばれるコンポーネントをもっていません。

<a href="http://webix.com/demos/touch.html" target="_blank">Webixモバイル　Demo</a>

そこでスライドメニューは<a href="http://jakiestfu.github.io/Snap.js/demo/apps/default.html">snap.js</a>を使って実装しそれ以外はwebixを組み合わせて画面をつくってみました。
良い感じで組み合わさったので、今後利用していきたいと思います。

<h2>サンプル</h2>
<iframe id="demo" src="http://shimz.me/example/snapjs/webix/" width="320" height="512"></iframe>    
  
<pre class="lang:xhtml decode:true " >&lt;!DOCTYPE HTML&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
&lt;title&gt;snap.js + Webix&lt;/title&gt;
&lt;meta charset="utf-8"&gt;
&lt;meta http-equiv="x-ua-compatible" content="IE=edge"&gt;
&lt;meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"&gt;
&lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
&lt;meta name="apple-touch-fullscreen" content="yes"&gt;
	
&lt;!-- snap.js用スタイルシート--&gt;	
&lt;link rel="stylesheet" type="text/css" href="../css/snap.css"&gt;
&lt;link rel="stylesheet" type="text/css" href="../css/snap_opt.css"&gt;

&lt;!-- webix用スタイルシート --&gt;
&lt;link rel="stylesheet" href="http://shimz.me/libs/webix/codebase/webix.css" type="text/css" charset="utf-8"&gt;

&lt;style&gt;
html, body{
    margin: 0px;
    padding: 0px;
}
html, body, #webix-view {
	width: 100%;
	height: 100%;
}	
&lt;/style&gt;

&lt;/head&gt;
&lt;body&gt;
	
&lt;!-- slide menu --&gt;
&lt;div class="snap-drawers"&gt;
	&lt;div class="snap-drawer snap-drawer-left"&gt;
		&lt;div&gt;
			&lt;h3&gt;メニュー&lt;/h3&gt;
			
			&lt;h4&gt;サブメニュー１&lt;/h4&gt;
			&lt;ul&gt;
				&lt;li&gt;&lt;a&gt;ほげ１&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a&gt;ほげ２&lt;/a&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class="snap-drawer snap-drawer-right"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- slide menu end --&gt;

&lt;!-- mein contents --&gt;	
&lt;div id="content" class="snap-content"&gt;
	&lt;div id="toolbar"&gt;
		&lt;a  id="open-left"&gt;&lt;/a&gt;
		&lt;h1&gt;Webix &amp; Snap.js&lt;/h1&gt;
	&lt;/div&gt;
	&lt;div id="webix-view" data-snap-ignore="true"&gt;&lt;/div&gt;			
&lt;/div&gt;
&lt;!-- mein contents end --&gt;
		
		
&lt;!-- snap.js(スライドメニューライブラリ) --&gt;		
&lt;script type="text/javascript" src="../js/snap.js"&gt;&lt;/script&gt;
&lt;!-- webix.js --&gt;
&lt;script src="http://shimz.me/libs/webix/codebase/webix.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script&gt;
/* snap.js初期化*/
(function(){
	snapper = new Snap({
		element: document.getElementById('content')
	});	
	
	var addEvent = function addEvent(element, eventName, func) {
		if (element.addEventListener) {
			return element.addEventListener(eventName, func, false);
		} else if (element.attachEvent) {
			return element.attachEvent("on" + eventName, func);
		}
	};
	
	addEvent(document.getElementById('open-left'), 'click', function(){
		if( snapper.state().state=="left" ){
			snapper.close();
		} else {
			snapper.open('left');
		}
	});
	
})();

/* モバイルsafariがリンクを開くのを防ぐ */
(function (a, b, c) {
    if(c in b &amp;&amp; b[c]) {
        var d, e = a.location,
            f = /^(a|html)$/i;
        a.addEventListener("click", function (a) {
            d = a.target;
            while(!f.test(d.nodeName)) d = d.parentNode;
            "href" in d &amp;&amp; (d.href.indexOf("http") || ~d.href.indexOf(e.host)) &amp;&amp; (a.preventDefault(), e.href = d.href)
        }, !1)
    }
})(document, window.navigator, "standalone");	

/* webix初期化*/	
(function(){
	webix.ui.fullScreen();
	webix.ui({
		//webixコンポーネントを表示する要素のid属性を指定
		container:"webix-view",
		rows:[
			{template:"header", height:35 },
			{template:"row 1"},
			{view:"resizer"},
			{template:"row 2"},
			{view:"resizer"},
			{
				cols:[
					{ template:"column 1", width:150},
					{ view:"resizer" },
					{ template:"column 2"},
					{ template:"column 3"}
				]
			}
		]
	}).show();
})();	
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3785</wp:post_id>
		<wp:post_date>2014-10-09 09:46:43</wp:post_date>
		<wp:post_date_gmt>2014-10-09 00:46:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3785</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3786]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427300035;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3747;}i:1;a:1:{s:2:"id";i:3937;}i:2;a:1:{s:2:"id";i:3907;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬県視覚化プロジェクト！</title>
		<link>http://shimz.me/blog/datavis/3788</link>
		<pubDate>Fri, 10 Oct 2014 01:05:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3788</guid>
		<description></description>
		<content:encoded><![CDATA[……なんて、たいそうなモノではないですが。

<a href="http://shimz.me/gunmaviz.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/gunmaviz141010.jpg" alt="群馬県視覚化プロジェクト" width="590" height="412" class="aligncenter size-full wp-image-3787" /></a>

<a href="http://shimz.me/gunmaviz.html">Gunma Datavisualization Gallery</a>

今まで、ちょこちょこ作っていたものを並べてみただけです。

D3.jsなどを勉強しながら「できそうなのでやってみた」という感じで作成したものが多いので、あまり出来はよろしくありません。

今後は、「群馬県はこんな所です」と紹介できるようなデータビジュアライゼーションを作成したいですね。

なにかとグンマーとネタにされがちな群馬県、ネタでない情報ももっと伝えていきたいと思います。

視覚化した結果やっぱりグンマーだったなという結論に至るかもしれませんが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3788</wp:post_id>
		<wp:post_date>2014-10-10 10:05:07</wp:post_date>
		<wp:post_date_gmt>2014-10-10 01:05:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3788</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3787]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426886048;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3624;}i:1;a:1:{s:2:"id";i:2570;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GeoJSONを使いこなすためのWebサービスまとめ</title>
		<link>http://shimz.me/blog/web/3789</link>
		<pubDate>Mon, 13 Oct 2014 06:24:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3789</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/10/geojsontoos141013.jpg" alt="geoJSON Tools" width="590" height="348" class="aligncenter size-full wp-image-3790" />

GitHubが地図表示に対応したり、Google Maps APIでも直接読み込めるようになったりと、着々と利用が進むGeoJSON。
D3.jsで地理情報を視覚化する際にも欠かせないものですが、そんなGeoJSONを扱うのに便利なWebサービスを集めてみました。

<h3>資料</h3>

<a href="http://s.kitazaki.name/docs/geojson-spec-ja.html">GeoJSON フォーマット仕様</a>
GeoJSONの仕組みを理解したい場合は、まずこれを読みましょう。

<h3>コンバーター</h3>
・<a href="http://www.mapshaper.org/">mapshaper</a>
地理情報の簡素化を行うためのサービスですが、Shape,geojson,topojsonを相互に変換するWebサービスとしても利用できます。

・<a href="https://github.com/mapbox/csv2geojson">mapbox/csv2geojson</a>
緯度経度を含んだcsvファイルをGeoJSONに変換するnode.jsツール。ポイントデータのみならず、ラインデータやポリゴンデータへの変換も可能。フロントエンドでも動作し、web上でコンバートを提供しているページもあります。
<a href="http://mapbox.github.io/csv2geojson/">csv2geojson</a>(web)

・<a href="http://mapbox.github.io/togeojson/">toGeoJSON</a>
KMLやGPXをGeoJSONに変換するWebサービス。

・<a href="http://ogre.adc4gis.com/">Ogre - ogr2ogr web client</a>
ogr2ogrのWebクライアント。様々なフォーマットに対応。

・<a href="http://shpescape.com/">Shape Escape</a>
ShapeファイルをGeoJSONやTopoJSONに変換できるほか、Google Fusion Tablesへインポートできます。

<h3>エディター</h3>
・<a href="http://geojson.io/#map=7/35.996/138.944">geojson.io</a>
GeoJSONをブラウザ上で作成・編集することができるWebサービス。


<h3>簡素化</h3>
・<a href="http://www.mapshaper.org/">mapshaper</a>

・<a href="http://shancarter.github.io/distillery/">The Distillery</a>
GeoJSONを簡素化することができるWebサービス


<h3>テスト</h3>
・<a href="http://geojsonlint.com/">GeoJSONLint - Validate your GeoJSON</a>
いわゆるLintツールのGeoJSON版。作成したGeoJSONが正しい書式になっているか確認するためのWebサービス。

<h3>関連</h3>
<a href="http://shimz.me/blog/google-map-api/3445">Google Map上にGeoJSONデータを表示する</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3789</wp:post_id>
		<wp:post_date>2014-10-13 15:24:37</wp:post_date>
		<wp:post_date_gmt>2014-10-13 06:24:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3789</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3790]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427392789;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4052;}i:1;a:1:{s:2:"id";i:3406;}i:2;a:1:{s:2:"id";i:3202;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>複数のFusion Tablesを一つの地図上に重ねて表示する。</title>
		<link>http://shimz.me/blog/map/3793</link>
		<pubDate>Tue, 14 Oct 2014 00:55:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3793</guid>
		<description></description>
		<content:encoded><![CDATA[下記は群馬県のバスルートデータとバス停留所データのFusion Tablesを重ねて表示した例。

<a href="http://shimz.me/datavis/gunma/bussmap/"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/FusionTables141014.jpg" alt="FusionTables" width="590" height="308" class="aligncenter size-full wp-image-3794" /></a>

<a href="http://shimz.me/datavis/gunma/bussmap/">example</a>

以前も紹介したことがある<a href="http://shimz.me/blog/map/2670">Fusion Tables</a>。手軽に地理情報の視覚化が行えて非常に便利なのですが、Googleドライブの中では基本一つの地図に１種類のデータしか表示できません。

Google Maps APIコードエクスポート機能を使うと、複数のFusion Tablesを組み合わせて使うことができます。

<h2>サンプル</h2>
<h3>Google Maps APIコード出力</h3>
「Tools」メニューから「Publish」を選択し「Get HTML and JavaScript」をクリックするとGoogle Maps APIコードが取得できます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000008.jpg" alt="Fusion Tablesエクスポート" width="473" height="622" class="alignnone size-full wp-image-2689 border" />

出力されるコードにはGoogle Mapsの初期化などが含まれますが、Fusion Tablesを表示しているのは以下の部分となります。
 
<pre class="lang:js decode:true " >layer = new google.maps.FusionTablesLayer({
  map: map,
  heatmap: { enabled: false },
  query: {
	select: "col6",
	from: "1jKSH39amF5BDFE0YZBJn0KZZPeX8oOMKpuwu0X1F",
	where: ""
  },
  options: {
	styleId: 2,
	templateId: 2
  }
});
</pre> 

google.maps.FusionTablesLayerで指定したFusion Tablesを生成しGoogle Maps上に表示しているわけですが、この部分をコピペして一つのGoogle Mapsに追加すれば複数のFusion Tablesを１つの地図上に重ねて表示できます。
（一部webixを使ってます。divエレメントを生成しているだけです。)
 
<pre class="lang:js mark:31-59 decode:true " >webix.ui({
	rows:[
		{css: "header",template:"群馬県バス停留所", height:35 },
		{css:"map_view", template:' &lt;div id="googft-mapCanvas"&gt;&lt;/div&gt;'},
		{css:"footer", template:"@_shimizu", height:35 },
	]
}).show();
 
 
 function initialize() {
    google.maps.visualRefresh = true;
    var isMobile = (navigator.userAgent.toLowerCase().indexOf('android') &gt; -1) ||
      (navigator.userAgent.match(/(iPod|iPhone|iPad|BlackBerry|Windows Phone|iemobile)/));
    if (isMobile) {
      var viewport = document.querySelector("meta[name=viewport]");
      viewport.setAttribute('content', 'initial-scale=1.0, user-scalable=no');
    }
    var mapDiv = document.getElementById('googft-mapCanvas');
	
	var style_array_from_above_here =  [{"featureType":"water","elementType":"all","stylers":[{"hue":"#e9ebed"},{"saturation":-78},{"lightness":67},{"visibility":"simplified"}]},{"featureType":"landscape","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"simplified"}]},{"featureType":"road","elementType":"geometry","stylers":[{"hue":"#bbc0c4"},{"saturation":-93},{"lightness":31},{"visibility":"simplified"}]},{"featureType":"poi","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"off"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"hue":"#e9ebed"},{"saturation":-90},{"lightness":-8},{"visibility":"simplified"}]},{"featureType":"transit","elementType":"all","stylers":[{"hue":"#e9ebed"},{"saturation":10},{"lightness":69},{"visibility":"on"}]},{"featureType":"administrative.locality","elementType":"all","stylers":[{"hue":"#2c2e33"},{"saturation":7},{"lightness":19},{"visibility":"on"}]},{"featureType":"road","elementType":"labels","stylers":[{"hue":"#bbc0c4"},{"saturation":-93},{"lightness":31},{"visibility":"on"}]},{"featureType":"road.arterial","elementType":"labels","stylers":[{"hue":"#bbc0c4"},{"saturation":-93},{"lightness":-2},{"visibility":"simplified"}]}];
    var map = new google.maps.Map(mapDiv, {
		center: new google.maps.LatLng(36.322356, 139.013057),
		zoom: 14,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		styles: style_array_from_above_here
    });
    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(document.getElementById('googft-legend-open'));
    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(document.getElementById('googft-legend'));

	
	//バスルートデータのFusion Tablesを表示
	var buss_route = new google.maps.FusionTablesLayer({
		map: map,
		heatmap: { enabled: false },
		query: {
			select: "col8",
			from: "1x3vlOo5wVXoMjsbS3sRT75LdSZ4KMeo5JGMNKGeQ",
			where: ""
		},
		options: {
			styleId: 2,
			templateId: 2
		}
    });
	
	//バス停留所データのFusion Tablesを表示	
	var buss_stop = new google.maps.FusionTablesLayer({
		map: map,
		heatmap: { enabled: false },
		query: {
			select: "col6",
			from: "1jKSH39amF5BDFE0YZBJn0KZZPeX8oOMKpuwu0X1F",
			where: ""
		},
		options: {
			styleId: 2,
			templateId: 2
		}
	});

	
    if (isMobile) {
		var legend = document.getElementById('googft-legend');
		var legendOpenButton = document.getElementById('googft-legend-open');
		var legendCloseButton = document.getElementById('googft-legend-close');
		legend.style.display = 'none';
		legendOpenButton.style.display = 'block';
		legendCloseButton.style.display = 'block';
		legendOpenButton.onclick = function() {
			legend.style.display = 'block';
			legendOpenButton.style.display = 'none';
		}
		legendCloseButton.onclick = function() {
			legend.style.display = 'none';
			legendOpenButton.style.display = 'block';
		}
    }
  }

  google.maps.event.addDomListener(window, 'load', initialize);</pre> 

FusionTablesLayerのsetQueryメソッドを使って表示するデータの絞り込みなども行えるのですが、それについてはまた後日書きます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3793</wp:post_id>
		<wp:post_date>2014-10-14 09:55:34</wp:post_date>
		<wp:post_date_gmt>2014-10-14 00:55:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3793</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3794]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372790;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2151;}i:1;a:1:{s:2:"id";i:2703;}i:2;a:1:{s:2:"id";i:3540;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「ぐんまちゃん」が優勝したので素材の使い方や利用規約、ダウンロードサイトなどを調べてみた。</title>
		<link>http://shimz.me/blog/other/3798</link>
		<pubDate>Mon, 03 Nov 2014 23:29:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3798</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/10/000010341.gif" alt="ぐんまちゃん　規約など" width="400" height="300" class="aligncenter size-full wp-image-3799" />

<a href="http://www.yurugp.jp/ranking2014/">ゆるきゃらグランプリ</a>の１位にもなったことだし、たぶん今後いろいろ必要になるかもしれないので調べてみました。

ちなみに「ぐんまちゃん」が正式名称。「群馬ちゃん」でも「グンマちゃん」でもない。「<a href="https://twitter.com/gunmar_chan">グンマーちゃん</a>」だとたぶん別のキャラになる。


「ぐんまちゃん」のデザインを利用するには申請が必要。申請は以下から。

<a href="http://www.pref.gunma.jp/01/b0110160.html">「ぐんまちゃん」のデザインを利用するには</a>

<a href="http://www.pref.gunma.jp/01/b0100124.html">利用手続きの流れ</a>

ダウンロードしたデザインをチラシやパンフレットなどにそのまま利用する場合にはデザインチェックは不要。
素材のダウンロードは以下から。

<a href="http://www.pref.gunma.jp/01/b0110209.html">群馬県 - デザインいろいろ</a>

見落としがちだけれど上記ページ下位にある「ぐんまちゃんデザインいろいろ」項目で、５６種類のぐんまちゃん素材がダウンロードできる。

【追記】
キャラクター利用について、<a href="https://www.facebook.com/GunmaGisGeek/posts/708877432541943">Facebook</a>にていろいろ教えていただいた。
<ul>
<li>吹き出しは付けてはいけない（ぐんまちゃんは話さないので）</li>
<li>二人以上のぐんまちゃんを並べて表示しない（基本、ぐんまちゃんはひとり）</li>
<li>見開きページに男の子と女の子を配置しない</li>
</ul>
というルールがあるそうです。

ぐんまちゃんの着ぐるみも借りられる。
最近ベストがついてくるようになったらしい。
(※土日に着ぐるみを借りるのは、かなり困難な状況だそうです）

<a href="http://www.pref.gunma.jp/01/c0110157.html">ぐんまちゃん着ぐるみの貸出し</a>

壁紙なども配布されている。

<a href="http://www.pref.gunma.jp/01/b2110037.html">季節ごとの「ぐんまちゃん」の壁紙ダウンロード</a>

<a href="http://www.gunmachan-navi.pref.gunma.jp/room/download02.php">ご当地ぐんまちゃん壁紙 ぐんまちゃんの部屋</a>

<h2>公式サイトとか</h2>
<a href="https://www.facebook.com/gunmachan.official">群馬県のマスコット「ぐんまちゃん」 | Facebook</a>

<a href="http://plaza.rakuten.co.jp/machi10gunma/">ぼく、ぐんまちゃん♪　～ぐんまちゃんのお仕事日記～ 公式ブログ</a>

<a href="https://www.youtube.com/user/gunmakikaku">YouTube ぐんまちゃん群馬県のマスコットのチャンネル</a>

<a href="http://www.pref.gunma.jp/01/b0110220.html">ぐんまちゃんの出演スケジュール</a>

<a href="http://www.gunmachan-navi.pref.gunma.jp/">ぐんまちゃんナビ！｜群馬の情報サイト</a>

ぐんまちゃんグッズはこちらで買えます。
<a href="http://www.gunmachan-navi.pref.gunma.jp/room/goods.php">ぐんまちゃんグッズ ぐんまちゃんナビ！</a>

なんかダンスとかもあるらしい。

<iframe width="560" height="315" src="//www.youtube.com/embed/YRGcOhdjQQo" frameborder="0" allowfullscreen></iframe>

<a href="http://www.pref.gunma.jp/01/b0100130.html">ぐんまちゃんダンス</a>

おぉっおぅ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3798</wp:post_id>
		<wp:post_date>2014-11-04 08:29:57</wp:post_date>
		<wp:post_date_gmt>2014-11-03 23:29:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3798</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3799]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308342;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4104;}i:1;a:1:{s:2:"id";i:3654;}i:2;a:1:{s:2:"id";i:3305;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】ノードをドラッグできる静的なForceレイアウト</title>
		<link>http://shimz.me/blog/d3-js/3803</link>
		<pubDate>Wed, 22 Oct 2014 12:21:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3803</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/10/Draggable_Static_Force_Layout.jpg" alt="Draggable_Static_Force_Layout" width="444" height="362" class="aligncenter size-full wp-image-3802 border" />

<h2>アニメーションForceレイアウト</h2>
D3.jsの<a href="http://shimz.me/blog/d3-js/948">Forceレイアウト</a>は、tickイベント内でノードとリンクの描画をアップデートすることで、簡単にアニメーションが行えます。

 
 
<pre class="height-set:true height:200 lang:js mark:56-65 decode:true " >var nodes = [
	{lable:"hello"},
	{lable:"text"},
	{lable:"hoge"}
]

var links = [
	{ source : 0, target : 1 },
	{ source : 0, target : 2 },
	{ source : 1, target : 2 },
]

var svg = d3.select('svg');
var w = document.querySelector("body").clientWidth;
var h = document.querySelector("body").clientHeight;

// Force Layoutを設定
var force = d3.layout.force()
	.nodes(nodes)
	.links(links)
	.size([w, h])
	.gravity(0.1)
	.charge(-30)
	.friction(0.95)
	.linkDistance(220)
	.linkStrength(1);
	
//force レイアウトの計算を開始	
force.start(); 
 
var line = svg.selectAll("line")
	.data(links)
	.enter()
	.append("line")
	.attr({
		"stroke": "black",
		"x1":function(d){ return d.source.x },
		"y1":function(d){ return d.source.y },
		"x2":function(d){ return d.target.x },
		"y2":function(d){ return d.target.y },
	});
 
var node = svg.selectAll("circle")
	.data(nodes)
	.enter()
	.append("circle")
	.attr({
		"r":8,
		"fill": "black",
		"cx": function(d){ return d.x },
		"cy": function(d){ return d.y } 
	})
	.call(force.drag); ;
 
//update
force.on("tick", function() {
	line
		.attr("x1", function(d) { return d.source.x; }) // ソースとターゲットの要素座標を指定していく
		.attr("y1", function(d) { return d.source.y; })
		.attr("x2", function(d) { return d.target.x; })
		.attr("y2", function(d) { return d.target.y; });
	node
		.attr("cx", function(d) { return d.x; })    // ノードの座標を指定していく
		.attr("cy", function(d) { return d.y; });
});
</pre> 
 

<a href="http://shimz.me/example/d3js/forcelayout/01/index.html">example</a>


<h2>スタティックForceレイアウト</h2>

しかし用途によっては、アニメーションを行わず静的なグラフとして表示したい場合があります。
その場合は、tickイベントを使わず、forceオブジェクトのtickメソッドを実行することで描画ステップを進め、好みのところでstopメソッドを実行しアニメーションを止めることで静的なグラフとして表示できます。
 
<pre class="height-set:true height:200 lang:js mark:28-30 decode:true " >
var nodes = [
	{lable:"hello"},
	{lable:"text"},
	{lable:"hoge"}
]

var links = [
	{ source : 0, target : 1 },
	{ source : 0, target : 2 },
	{ source : 1, target : 2 },
]

var svg = d3.select('svg');
var w = document.querySelector("body").clientWidth;
var h = document.querySelector("body").clientHeight;

// Force Layoutを設定
var force = d3.layout.force()
	.nodes(nodes)
	.links(links)
	.size([w, h])
	.gravity(0.1)
	.charge(-30)
	.friction(0.95)
	.linkDistance(220)
	.linkStrength(1);
	
force.start(); //force レイアウトの計算を開始
for (var i = 10000; i > 0; --i) force.tick(); //ワンステップ進める
force.stop(); //force レイアウトの計算を終了

var line = svg.selectAll("line")
	.data(links)
	.enter()
	.append("line")
	.attr({
		"stroke": "black",
		"x1":function(d){ return d.source.x },
		"y1":function(d){ return d.source.y },
		"x2":function(d){ return d.target.x },
		"y2":function(d){ return d.target.y },
	});
 
var node = svg.selectAll("circle")
	.data(nodes)
	.enter()
	.append("circle")
	.attr({
		"r":8,
		"fill": "black",
		"cx": function(d){ return d.x },
		"cy": function(d){ return d.y } 
	})
	.call(force.drag); ;

</pre> 
<a href="http://shimz.me/example/d3js/forcelayout/static1/index.html">example</a>


<h2>スタティックForceレイアウト（ドラッグ可能）</h2>

しかし、この場合アニメーションが停止しているため、各ノードをドラッグしても動きません。
ノードを静止させたままドラッグに対応させるには、ノード要素に束縛されたデータのfixedプロパティの値をtrueに設定します。
 
<pre class="lang:js mark:58 decode:true " >var nodes = [
	{lable:"hello"},
	{lable:"text"},
	{lable:"hoge"}
]

var links = [
	{ source : 0, target : 1 },
	{ source : 0, target : 2 },
	{ source : 1, target : 2 },
]

var svg = d3.select('svg');
var w = document.querySelector("body").clientWidth;
var h = document.querySelector("body").clientHeight;

// Force Layoutを設定
var force = d3.layout.force()
	.nodes(nodes)
	.links(links)
	.size([w, h])
	.gravity(0.1)
	.charge(-30)
	.friction(0.95)
	.linkDistance(220)
	.linkStrength(1);
	
//force レイアウトの計算を開始
force.start(); 
for (var i = 10000; i > 0; --i) force.tick(); //ワンステップ進める	

 
var line = svg.selectAll("line")
	.data(links)
	.enter()
	.append("line")
	.attr({
		"stroke": "black",
		"x1":function(d){ return d.source.x },
		"y1":function(d){ return d.source.y },
		"x2":function(d){ return d.target.x },
		"y2":function(d){ return d.target.y },
	});
 
var node = svg.selectAll("circle")
	.data(nodes)
	.enter()
	.append("circle")
	.attr({
		class:"node",
		"r":8,
		"fill": "black",
		"cx": function(d){ return d.x },
		"cy": function(d){ return d.y } 
	})
	.call(force.drag); ;

d3.selectAll(".node").each(function(d){ d.fixed = true })
 
//update
force.on("tick", function() {
	line
		.attr("x1", function(d) { return d.source.x; }) // ソースとターゲットの要素座標を指定していく
		.attr("y1", function(d) { return d.source.y; })
		.attr("x2", function(d) { return d.target.x; })
		.attr("y2", function(d) { return d.target.y; });
	node
		.attr("cx", function(d) { return d.x; })    // ノードの座標を指定していく
		.attr("cy", function(d) { return d.y; });
});
</pre> 
<a href="http://shimz.me/example/d3js/forcelayout/static2/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3803</wp:post_id>
		<wp:post_date>2014-10-22 21:21:57</wp:post_date>
		<wp:post_date_gmt>2014-10-22 12:21:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3803</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3802]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387082;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3742;}i:1;a:1:{s:2:"id";i:948;}i:2;a:1:{s:2:"id";i:3161;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データベースのデータをD3.jsで使うには？</title>
		<link>http://shimz.me/blog/javascript/3804</link>
		<pubDate>Thu, 23 Oct 2014 03:17:56 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3804</guid>
		<description></description>
		<content:encoded><![CDATA[「データベースのデータをD3.jsで使うには？」という質問をいただいたので記事にしてみました。D3.jsの話というより、バックエンドとフロントエンドをどうやって繋ぐか？という話なりますが。

基本的にはバックエンド側で、データベースのデータを<a href="http://thinkit.co.jp/article/70/1/">JSON形式</a>で出力するAPIを作り、APIに対してJavaScriptから<a href="http://hakuhin.jp/js/xmlhttprequest.html">XMLHttpRequest</a>を使ってデータを受け取るという形が一般的だと思います。

「D3.js Tips and Tricks」にそのものズバリな記事が掲載されていますが、この記事ではphp部分をpdoを使ったコードにしています。

<a href="http://www.d3noob.org/2013/02/using-mysql-database-as-source-of-data.html">Using a MySQL database as a source of data</a>

<h3>バックエンド構成</h3>
<ul>
	<li>データベース：MySQL</li>
	<li>WEBサーバー：Apache</li>
	<li>API:PHP</li>
</ul>
だいたいこんな感じ。
<img src="http://shimz.me/blog/wp-content/uploads/2014/10/d32db141023.png" alt="d32db141023" width="590" height="226" class="alignnone size-full wp-image-3805" />
質問いただいた内容が「PHP+MySQL」ということだったのでこの構成になっていますが、バックエンド側は基本的にJSONで出力する仕組みさえつくれれば何でもOKです。

<h3>テーブルの内容(sample_tb)</h3>
今回使用するデータの内容は以下です。
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aaa;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aaa;color:#333;background-color:#fff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aaa;color:#fff;background-color:#f38630;}
.tg .tg-s6z2{text-align:center}
.tg .tg-z2zr{background-color:#FCFBE3}
</style>
<table class="tg">
  <tr>
    <th class="tg-s6z2">id</th>
    <th class="tg-s6z2">user</th>
    <th class="tg-s6z2">age</th>
    <th class="tg-s6z2">tel</th>
    <th class="tg-s6z2">mail</th>
    <th class="tg-s6z2">count</th>
  </tr>
  <tr>
    <td class="tg-z2zr">1</td>
    <td class="tg-z2zr">shimizu</td>
    <td class="tg-z2zr">12</td>
    <td class="tg-z2zr">00-0000-0000</td>
    <td class="tg-z2zr">sample@hoge.ne.jp</td>
    <td class="tg-z2zr">120</td>
  </tr>
  <tr>
    <td class="tg-031e">2</td>
    <td class="tg-031e">suzuki</td>
    <td class="tg-031e">23</td>
    <td class="tg-031e">00-0000-0000</td>
    <td class="tg-031e">sample@hoge.ne.jp</td>
    <td class="tg-031e">333</td>
  </tr>
  <tr>
    <td class="tg-z2zr">3</td>
    <td class="tg-z2zr">tanaka</td>
    <td class="tg-z2zr">33</td>
    <td class="tg-z2zr">00-0000-0000</td>
    <td class="tg-z2zr">sample@hoge.ne.jp</td>
    <td class="tg-z2zr">469</td>
  </tr>
  <tr>
    <td class="tg-031e">4</td>
    <td class="tg-031e">yamada</td>
    <td class="tg-031e">42</td>
    <td class="tg-031e">00-0000-0000</td>
    <td class="tg-031e">sample@hoge.ne.jp</td>
    <td class="tg-031e">530</td>
  </tr>
  <tr>
    <td class="tg-z2zr">5</td>
    <td class="tg-z2zr">uehara</td>
    <td class="tg-z2zr">26</td>
    <td class="tg-z2zr">00-0000-0000</td>
    <td class="tg-z2zr">sample@hoge.ne.jp</td>
    <td class="tg-z2zr">432</td>
  </tr>
</table>

<h3>API.php</h3>
テーブルの内容をそのままJSONとして出力するAPIを作ります。 
<pre class="lang:php decode:true " >&lt;?php
//データベースへの接続
define('DB_NAME', 'sampledb');
define('DB_HOST', 'localhost');
define('DB_USER', 'user');
define('DB_PASS', 'password');
 
$dsn = 'mysql:dbname=' . DB_NAME . ';host=' . DB_HOST . ';charset=utf8';
$option = array(
    PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,
    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY =&gt; true,
    PDO::ATTR_EMULATE_PREPARES =&gt; false,
    PDO::ATTR_STRINGIFY_FETCHES =&gt; false
);
 
try {
    $db = new PDO($dsn, DB_USER, DB_PASS, $option);
} catch (PDOException $e){
    echo $e-&gt;getMessage();
}

//クエリ送信
$sql = "SELECT * FROM sample_tb";
$result　= $db-&gt;query($sql);

//jsonとして出力
$json = json_encode($result);
header('Content-type: application/json; charset=UTF-8');
//header('Access-Control-Allow-Origin:*');  //*1
echo($json);</pre> 

APIを作成したらブラウザからアクセスできるディレクトリにapi.phpを置き、実際にブラウザでアクセスしてみてJSONがちゃんと出力されているか確認すると良いでしょう。

*1 Access-Control-Allow-Originについては下記記事を、
<a href="http://otiai10.hatenablog.com/entry/2013/04/04/233057">【何ぞ？】Access-Control-Allow-Origin, クロスドメイン制約, 同一生成元ポリシーって何ぞ【XMLHttpRequest】【JavaScript】【Apache】 - DRYな備忘録</a>

*2 PDOの使い方については下記記事を参照ください。
<a href="http://php-archive.net/php/pdo-mysql/">[PHP]PDOを使ったMySQLデータベースへの接続と基本操作 | PHP Archive</a>

<h3>フロントエンド側</h3>
D3.jsでAPIからデータを受け取ります。
 
<pre class="lang:js decode:true " >d3.json("api.php", function(dataSet){
	console.log(dataSet);
});</pre> 
受け取ったデータの内容はこんな感じ。
 
<pre class="lang:js decode:true " >console.log(dataSet)
&gt;
[
	{"id":1,"user":"shimizu","age":12,"tel":"00-0000-0000","mail":"sample@hoge.ne.jp","count":120},
	{"id":2,"user":"suzuki","age":23,"tel":"00-0000-0000","mail":"sample@hoge.ne.jp","count":333},
	{"id":3,"user":"tanaka","age":33,"tel":"00-0000-0000","mail":"sample@hoge.ne.jp","count":469},
	{"id":4,"user":"yamada","age":42,"tel":"00-0000-0000","mail":"sample@hoge.ne.jp","count":530},
	{"id":5,"user":"uehara","age":26,"tel":"00-0000-0000","mail":"sample@hoge.ne.jp","count":432}
]</pre> 
d3.jsonを使った通信は基本GETリクエストになります。
POSTリクエストでパラメーターなどもAPI側に送りたいという場合は以下を。

<a href="http://qiita.com/_shimizu/items/9f53935c6e62ae0d0de6">JavaScript - d3.jsonでpostリクエストを送信する - Qiita</a>


<h2>補足</h2>
バックエンドとフロントエンドのつなぎ方は大体こんな感じですかね。
データベース絡めてもっと複雑な事がしたいという意場合は上記のような簡易的なAPIでなく、ちゃんと「<a href="http://www.atmarkit.co.jp/ait/articles/1310/23/news078.html">RESTful API</a>」を作成するのが良いと思います。
FuelPHPなどのフレームワークを使うとRESTコントローラーが簡単に作れるらしいです。
<a href="http://blog.ko31.com/201408/fuelphp-book-review/">「はじめてのフレームワークとしてのFuelPHP 第2版」が当選したのでFuelPHPを軽くいじってみました</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3804</wp:post_id>
		<wp:post_date>2014-10-23 12:17:56</wp:post_date>
		<wp:post_date_gmt>2014-10-23 03:17:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3804</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3805]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427378579;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3181;}i:1;a:1:{s:2:"id";i:3425;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「NEVERまとめ」でまとめていたD3 Geo関連記事のまとめが“非表示”にされてしまいました。</title>
		<link>http://shimz.me/blog/other/3810</link>
		<pubDate>Fri, 24 Oct 2014 01:18:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3810</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/10/nevermatome1410241.jpg" alt="nevermatome1410241" width="590" height="109" class="aligncenter size-full wp-image-3807" />

自ブログで書いていたD3を用いて地理情報を扱うチュートリアル記事などのまとめページが、いつの間にか非表示とされていました。

非表示とされたまとめは以下。
<a href="http://matome.naver.jp/odai/2136791241493514301">D3.js Geo(Geography) チュートリアル - NAVER まとめ</a>
<a href="http://shimz.me/blog/wp-content/uploads/2014/10/nevermatome1410243.png"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/nevermatome1410243-658x1024.png" alt="nevermatome1410243" width="546" height="849" class="aligncenter size-large wp-image-3809" /></a>

『このまとめは、権利者からの要請または運営者の判断により非表示にされています。』……権利者って誰だ？

下記を確認したも、どれに当てはまって非表示になったのが分かりません。
<a href="http://help.naver.jp/faq?itemNo=411">まとめの閲覧制限基準について教えてください - NAVERヘルプセンター</a>


ひとまず制限理由をお問い合わせしてみました。
<a href="http://matome.naver.jp/odai/2130812973064485801">NAVER「この投稿は、権利者からの要請または運営者の判断により非表示にされています」の対処 - NAVER まとめ</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3810</wp:post_id>
		<wp:post_date>2014-10-24 10:18:58</wp:post_date>
		<wp:post_date_gmt>2014-10-24 01:18:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3810</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3807]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427372218;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3356;}i:1;a:1:{s:2:"id";i:2772;}i:2;a:1:{s:2:"id";i:3425;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Instagram再開</title>
		<link>http://shimz.me/blog/other/3813</link>
		<pubDate>Tue, 28 Oct 2014 01:23:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3813</guid>
		<description></description>
		<content:encoded><![CDATA[なんやかんやと忙しかったりします。


<a href="http://instagram.com/_shimizu"><img src="http://shimz.me/blog/wp-content/uploads/2014/10/Instagram141028.jpg" alt="Instagram" width="590" height="691" class="aligncenter size-full wp-image-3814" /></a>

<a href="http://instagram.com/_shimizu">_shimizu on Instagram</a>

とくにこれと言った理由もないのですが、iPhone機種変してカメラ画質も上がったことですし、以前ちょこっとだけ利用していたInstagramを再開しました。
適当にぼちぼちアップしているので、よかったらふぉろーみーしてください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3813</wp:post_id>
		<wp:post_date>2014-10-28 10:23:40</wp:post_date>
		<wp:post_date_gmt>2014-10-28 01:23:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3813</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3814]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427073660;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4110;}i:1;a:1:{s:2:"id";i:3528;}i:2;a:1:{s:2:"id";i:3004;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FOSS4G Tokyo 2014に参加します。</title>
		<link>http://shimz.me/blog/other/3816</link>
		<pubDate>Wed, 29 Oct 2014 00:57:55 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3816</guid>
		<description></description>
		<content:encoded><![CDATA[今年６月に行われた<a href="http://shimz.me/blog/d3-js/3595">FOSS4G 2014Hokkaido</a>に引き続き、東京でのイベントにも参加させていただくことになりました。

<a href="http://www.osgeo.jp/">FOSS4G 2014 Osaka/Tokyo</a>

<blockquote>FOSS4G(フォス・フォー・ジー)とは

FOSS4GとはFree Open Source Software for GeoSpatialの略で、オープンソースの地理情報ソフトウェア(GIS)群です。
FOSS4Gはソースコードも含めて無償で公開され入手・再配布が自由であり、導入・運用が低コストで行えるだけではなく、利用者が自らソフトウェアの検証・改善・メンテナンスを行うことが出来ます。</blockquote>


コアデイ(11/1)の最後に行われる「全体セッション」にパネラーとして出ます。
テーマは「“初心者”が GIS を使うために必要なこと 〜GIS がキャズムを超えるためにはどうすればいいのか〜 」

初心者代表として、主に「GIS難しすぎるよ。。・゜・(/Д`)・゜・。うわぁぁぁぁん」と泣いてきます。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009KYCL9K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51hmA0ERckL._SL160_.jpg" alt="主に泣いてます（１） (モーニングKC)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009KYCL9K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">主に泣いてます（１） (モーニングKC)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.10.29</div></div><div class="amazlet-detail">講談社 (2012-09-28)<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009KYCL9K/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3816</wp:post_id>
		<wp:post_date>2014-10-29 09:57:55</wp:post_date>
		<wp:post_date_gmt>2014-10-29 00:57:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3816</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3817]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1424628050;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3549;}i:1;a:1:{s:2:"id";i:2321;}i:2;a:1:{s:2:"id";i:3595;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Excel上でD3.jsを使ったグラフを表示する「E2D3」を使ってオリジナルなグラフを表示してみた。</title>
		<link>http://shimz.me/blog/d3-js/3820</link>
		<pubDate>Wed, 29 Oct 2014 11:11:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3820</guid>
		<description></description>
		<content:encoded><![CDATA[ファーストインプレッション！

<a href="http://mashupaward.jp/works/622">E2D3 ver. 0.2 (Excel to D3) | MA【エム・エー】 by Mashup Awards</a>

<blockquote>Excelでいつも作っているグラフをもっと恰好良くしたくないですか？でも，デザインソフトを自分で習得するには時間がかかりますし，グラフ作成をデザイナーに依頼にはお金がかかります．そこで我々は，ExcelからD3ライブラリーを簡単に呼び出せるOffice用アプリE2D3（Excel to D3）を開発しました．D3は2014年，世界で最も注目されているグラフィックライブラリーです．E2D3を使えば，D3の詳細な中身を理解する必要なく，簡単なExcel操作のみでビジュアルインパクトが強烈なグラフを作成できるようになります！</blockquote>

以前から注目していた「E2D3」がリリースされたそうなので使ってみました。

詳しい内容は以下の動画をご覧ください。

<iframe width="560" height="315" src="//www.youtube.com/embed/U_Zc7CbfAbE" frameborder="0" allowfullscreen></iframe>

<strong>※注意</strong>
ほんの触りだけちょこっと弄ってみた状態で書いている記事なので、間違った内容を掲載している可能性があります。

<h2>インストールの方法</h2>
下記ページを参照のこと。現時点では手動でインストールする必要がありますがアプリストアに登録されれば、もっと簡単に導入することができるようです。
<a href="http://apps-office.pita-ri.jp/install-document.html">E2D3 インストール手順</a>

<h2>オリジナルのグラフを表示</h2>
インストールすればサンプルのグラフを利用できるようになるのですが、自分でD3.jsを使ってグラフを表示したい方は以下ページに公開されているスライドに開発方法が記載されています。
<a href="http://e2d3.azurewebsites.net/index.html">E2D3 開発資料</a>

なお、これ以降の内容は自分でD3.jsのコードを書いてオリジナルなグラフを表示させたいコントリビューター向けの情報です。一般の方が「E2D3」を使うのに下記のような作業を行う必要はありません。


<h2>やってみた</h2>
とりあえずシンプルに円グラフを表示してみました。

<img src="http://shimz.me/blog/wp-content/uploads/2014/10/e2d31410291.jpg" alt="E2D3円グラフ" width="590" height="349" class="alignnone size-full wp-image-3818" />

<h3>サンプルコード(未完)</h3>
 まだちょっと、セルの値を変更した際にグラフのアップデートが上手くいっていないのですが、何となく雰囲気は伝わるかと思うので載せておきます。
 
<pre class="height-set:true lang:js decode:true " >//サンプルデータ
var sample_data = [ 
	[ "label",  "size" ],
	[ "test",  3812 ],
	[ "hoge", 6714 ],
	[ "Hello",743 ],
	[ "World",  3534 ],
	[ "GUNMA", 5731 ]
];

var colorScale = d3.scale.category10();

//on click
var bindSetting = { dimension: "2d" }; //jsonデータ構造
var setBindId = $("#test_data").attr("data-bind-source"); //バインドID

//右上のリセットボタンおよび、トップへ戻るボタンの処理
$(".reset_data").on("click", function () {
		e2d3.releaseBindDataById(
		{ id: setBindId, isDataDelete: 1 },
		function () { return; }
	);
});
$(".reset_and_index").on("click", function () {
	e2d3.releaseBindDataById(
		{ id: setBindId, isDataDelete: 1 },
		function () {
			location.href("index.html");
		});
});
//サンプルデータのセット
$("#set_sample_data").on("click", function () {
	//サンプルデータをセルにセット
	e2d3.json2Excel(sample_data,
		function (result) {
			//コールバックでバインドに登録
			e2d3.setBindData(
				{ id: setBindId },
					function (binding) {
						//さらにコールバックで不要な部分を非表示（hideはBootstrapの標準クラス）
						$(".show_hide").addClass("hide");
						//バインドされたデータをJSONで取得し、コールバックでShowを実行
						e2d3.bind2Json(setBindId, bindSetting, show);
						//値変更時の処理を登録。この場合はdataUpdateをコールバックに指定
						e2d3.addChangeEvent(binding, dataUpdate);
					});
		});
});
//手動でデータを選択する場合の処理
$(".jrockets-data-binder").on("click", function () {
	e2d3.setBindData(
		{ id: setBindId, is_prompt: 1 }
		, function (binding) {
			e2d3.bind2Json(setBindId, bindSetting, show);
			e2d3.addChangeEvent(binding, dataUpdate);
		});
});
//手動でデータを選択し、バインドした場合に、Showを実行するためのアクションを定義
$("#jrockets-visualize").on("click", function () {
	$(".show_hide").addClass("hide");
	e2d3.bind2Json(setBindId, bindSetting, show);
});


function dataUpdate(binding) {
	console.log("dataUpdate =&gt; ", binding); // binding == false?
	e2d3.bind2Json(binding.id, bindSetting, showUpdate); // showUpdateが実行されない。
}

//円グラフ描画
function show(data){
	console.log("show", data);
	var w=860,h=500, r= 200;
	
	d3.select(".pie").remove();
	
	var svg = d3.select("svg.chart")
		.append("g")
		.attr("class", "pie")
	
	var arcsGroup = svg
		.data([data])   //pieで変換するために要素１の配列としてデータを渡す
		.append("svg:g")
		.attr("transform", "translate(" + Math.floor(w/2) + "," + Math.floor(h/2) + ")")

	var pie = d3.layout.pie().value(function(d) { return d.size; });        
	var arc = d3.svg.arc().outerRadius(r).innerRadius(Math.floor(r/2));

	var sliceGroup = arcsGroup.selectAll("g.slice")     
		.data(pie)
		.enter()
		.append("svg:g")
		.attr("class", "slice");
	   
	var slicePaths = sliceGroup.append("svg:path")
		.attr({
			fill: function(d, i){ return colorScale(i); },
			stroke:"white",
			d: arc
		});
		
	//テキスト表示
	 var textStyle = {
		 "transform":function(d) {                  
				d.innerRadius = 0;
				d.outerRadius = r;
				return "translate(" + arc.centroid(d) + ")";       
		   },
		 fill:"white",
		 "text-anchor":"middle"
	 }
	 var text =  sliceGroup.append("svg:text")
	 .attr(textStyle)
	.attr("text-anchor", "middle")
	.text(function(d){ return d.data.label }); 
		
}

function showUpdate(data){
	console.log("showUpdate", data);
}
</pre> 

なぜか、以下個所でshowUpdateが呼ばれない。 orz
 
<pre class="lang:js decode:true " >e2d3.bind2Json(binding.id, bindSetting, showUpdate); </pre> 


<h2>やってみて分かったこと</h2>
実際にグラフを表示しているのはWebアプリです。いつの間にかExcelにはいわゆる「Web View」(iframeみたいなもの)機能が備わっていたらしく、その中でD3.jsを用いでグラフを表示しています。
Excel上でWebアプリを使用するのでマニフェストファイルによる承認が必要なんですね。
E2D3はExcelシートとWebアプリ間でデータの受け渡しを行うOffice APIを簡単に利用できるようにするライブラリとのこと。
まだ、ほんの少し触ってみただけなので、ちゃんと把握しているわけではないですが、これ多分D3.js以外にもいろいろ使えますね。

<h2>注意点</h2>
Excel上にWebアプリを読み込むわけですが、その際のエンジンはIEのエンジンを使っています。なので、インストールしているIEのバージョンに依存して動作する部分がありそうです。
確認していませんが、Windows7でIEのバージョンが８だとSVGが表示されないかも？

あとExcel上では開発者ツールが使えないのでデバッグが結構大変です。
今回はFire bugs liteを読み込んでみましたが、やはり取りこぼすエラーがあるようでした。

<img src="http://shimz.me/blog/wp-content/uploads/2014/10/e2d31410292.jpg" alt="E2D3デバッグ" width="590" height="349" class="alignnone size-full wp-image-3819" />

この辺、上手いやりかたを見つけたい。

<h2>総括</h2>
シートに登録された値をデータセットとして、Excel上にD3を使ってグラフを表示するのはなかなか新鮮な体験で楽しかったです。今はまだ、利用できるグラフの種類が限られていますが、今後グラフの種類が増えていくと実用的なアプリになりそうです。コントリビューターが作成したデータビジュアライゼーションを投稿できるアセットストア的なサービス展開などあると面白いかも。
個人的に可能性を感じるライブラリなので、しばらくいろいろ弄ってみたいと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3820</wp:post_id>
		<wp:post_date>2014-10-29 20:11:27</wp:post_date>
		<wp:post_date_gmt>2014-10-29 11:11:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3820</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="e2d3"><![CDATA[E2D3]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3821]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369707;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3356;}i:1;a:1:{s:2:"id";i:2977;}i:2;a:1:{s:2:"id";i:2990;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「E2D3」を使ってExcel上にGoogle Mapsを表示してみた。</title>
		<link>http://shimz.me/blog/google-map-api/3824</link>
		<pubDate>Thu, 30 Oct 2014 10:58:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3824</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/d3-js/3820">昨日</a>に引き続き「E2D3」を弄ってます。

<h2>Google Maps表示してみた</h2>
昨日の記事に書いた「これ多分D3.js以外にもいろいろ使えますね」の複線回収。
<img src="http://shimz.me/blog/wp-content/uploads/2014/10/e2d3Gmap141030.jpg" alt="e2d3Gmap141030" width="590" height="349" class="alignnone size-full wp-image-3825" />
シート上の選択エリアからlat,lngフィールドを読み取りGoogle Maps上にマーカーでプロットするアプリです。
仕組みとしてはE2D3.jsで取得したデータをGeoJSONに変換してGoogle Mapsに渡しています。

多分Gmapをこんな感じで使うのは規約上駄目だと思うので、いづれleaflet.js版を作ろうと思います。

<h3>サンプルコード</h3>

 
<pre class="lang:js decode:true " >//サンプルデータ(県庁所在地)
var sample_data = [ [ 'code',  'pref' , 'city', 'lat', 'lng'],
	[1,"北海道","札幌市",43.063968,141.347899],
	[2,"青森県","青森市",40.824623,140.740593],
	/* 省略 */
	[46,"鹿児島県","鹿児島市",31.560148,130.557981],
	[47,"沖縄県","那覇市",26.212401,127.680932]						
];

//Google Maps初期化
var map = new google.maps.Map(document.getElementById('map'), {
	center: { lat: 36.3894816, lng: 139.0634281 },
	zoom: 12
});

//on click
var bindSetting = { dimension: '2d' }; //jsonデータ構造
var setBindId = $("#test_data").attr("data-bind-source"); //バインドID

//右上のリセットボタンおよび、トップへ戻るボタンの処理
$('.reset_data').on('click', function () {
	e2d3.releaseBindDataById(
		{ id: setBindId, isDataDelete: 1 },
		function () { return;});
});
$('.reset_and_index').on("click", function () {
	e2d3.releaseBindDataById(
		{ id: setBindId, isDataDelete: 1 },
		function () {
			location.href("index.html");
		});
});
//サンプルデータのセット
$('#set_sample_data').on('click', function () {
	//サンプルデータをセルにセット
	e2d3.json2Excel(sample_data,
		function (result) {
			//コールバックでバインドに登録
			e2d3.setBindData(
				{ id: setBindId },
					function (binding) {
						//さらにコールバックで不要な部分を非表示（hideはBootstrapの標準クラス）
						$(".show_hide").addClass('hide');
						//バインドされたデータをJSONで取得し、コールバックでShowを実行
						e2d3.bind2Json(setBindId, bindSetting, show);
						//値変更時の処理を登録。この場合はdataUpdateをコールバックに指定
						e2d3.addChangeEvent(binding, dataUpdate);
					});
		});
});
//手動でデータを選択する場合の処理
$('.jrockets-data-binder').on('click', function () {
	e2d3.setBindData(
		{ id: setBindId, is_prompt: 1 }
		, function (binding) {
			$(".show_hide").addClass('hide');
			e2d3.bind2Json(setBindId, bindSetting, show);
			e2d3.addChangeEvent(binding, dataUpdate);
		});
});
//手動でデータを選択し、バインドした場合に、Showを実行するためのアクションを定義
$('#jrockets-visualize').on('click', function () {
	$(".show_hide").addClass('hide');
	e2d3.bind2Json(setBindId, bindSetting, show);
});


function dataUpdate(binding) {
	console.log('dataUpdate =&gt; ', binding); // binding == false?
	e2d3.bind2Json(binding.id, bindSetting, showUpdate); // showUpdateが実行されない。
}

//地図上にプロット
function show(data){
	var geojson = geoJSON(data);
	//マーカー設置
	map.data.addGeoJson(geojson);
	//データにフィットするようにズームを調整
	var bounds = new google.maps.LatLngBounds();
	map.data.forEach(function(feature) {
	  processPoints(feature.getGeometry(), bounds.extend, bounds);
	});
	map.fitBounds(bounds);
}

function showUpdate(data){
	console.log("showUpdate", data);
}

//geoJSONに変換
function geoJSON(json){
	if (typeof json === "string") json = JSON.parse(json);
	//手抜き判別
	if(!json[0].lat || !json[0].lng) return "Not Fonud GeoData";		
			
	var geojson = {};
	geojson.type = "FeatureCollection";
	geojson.crs = { "type": "name", "properties": { "name": "urn:ogc:def:crs:EPSG::4612" } };
	geojson.features = [];

	geojson.features  = json.map(function(d){
		return {
			"type": "Feature",
			"geometry": {"type": "Point", "coordinates": [+d.lng,  +d.lat] } ,
			"properties":d
		}
	});

	return geojson;
}

function processPoints(geometry, callback, thisArg) {
	if (geometry instanceof google.maps.LatLng) {
		callback.call(thisArg, geometry);
	} else if (geometry instanceof google.maps.Data.Point) {
		callback.call(thisArg, geometry.get());
	} else {
		geometry.getArray().forEach(function(g) {
			processPoints(g, callback, thisArg);
		});
	}
}
</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3824</wp:post_id>
		<wp:post_date>2014-10-30 19:58:58</wp:post_date>
		<wp:post_date_gmt>2014-10-30 10:58:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3824</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="e2d3"><![CDATA[E2D3]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3825]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369836;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3445;}i:1;a:1:{s:2:"id";i:3841;}i:2;a:1:{s:2:"id";i:3733;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>E2D3 Tips あるいは、Officeアプリ Tips&amp;トラブルシュート</title>
		<link>http://shimz.me/blog/troubleshooting/3826</link>
		<pubDate>Fri, 31 Oct 2014 03:20:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3826</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>マニフェストファイル「SourceLocation」の指定先や指定したファイルを書き換えても更新されない。</h3>
一度セキュリティセンターで「信頼できるカタログのアドレス」として追加するとキャッシュされるみたいです。
SourceLocationを書き換えた場合は、一度「クリア」を行いExcelを再起動しましょう。それでも変わらない場合は、一度カタログから削除して再度追加すると更新されます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/10/officeapp141031.jpg" alt="officeapp141031" width="590" height="425" class="alignnone size-full wp-image-3827" />

<h3>デバッグ</h2>
window.onerrorにコールバックを仕込むことでjsのエラーを取得できます。
下記はE2D3に用意されているshowErrorにエラーメッセージを渡しています。
ちなみに、Officeアプリ内ではalertは使えないみたいです。
 
<pre class="lang:js decode:true " >window.onerror = function (errorMsg, url, lineNumber) {
	showError(errorMsg+"&lt;br&gt;"+url+":"+lineNumber, "danger");
}</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3826</wp:post_id>
		<wp:post_date>2014-10-31 12:20:43</wp:post_date>
		<wp:post_date_gmt>2014-10-31 03:20:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3826</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="e2d3"><![CDATA[E2D3]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3827]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427298769;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4043;}i:1;a:1:{s:2:"id";i:1561;}i:2;a:1:{s:2:"id";i:3382;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>自立のその先、ヒーロー化するヒロインを描いた「アナと雪の女王」</title>
		<link>http://shimz.me/blog/movie/3828</link>
		<pubDate>Mon, 03 Nov 2014 01:18:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3828</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/11/Some_people_are_worth_melting-for.jpg" alt="Some_people_are_worth_melting for" width="500" height="320" class="aligncenter size-full wp-image-3831" />

何週遅れかで「アナと雪の女王」を見たので感想を。あらすじとかいろんな考察とかについてはググれば沢山出てきますのでそちらを。
ちなみに以下ネタバレがあります。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00KLBPS1Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51mHpMTqjOL._SL160_.jpg" alt="アナと雪の女王 MovieNEX [ブルーレイ+DVD+デジタルコピー(クラウド対応)+MovieNEXワールド] [Blu-ray]" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00KLBPS1Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">アナと雪の女王 MovieNEX [ブルーレイ+DVD+デジタルコピー(クラウド対応)+MovieNEXワールド] [Blu-ray]</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.11.03</div></div><div class="amazlet-detail">ウォルト・ディズニー・ジャパン株式会社 (2014-07-16)<br />売り上げランキング: 11<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00KLBPS1Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<div style="margin-bottom:400px">
 
</div>

*以下、ネタバレあり。











前評判で「近代的な自立するプリンセス像を描いた」みたいな事が盛んに言われていて、「でも、自立したプリンセスなんてディズニーはずいぶん前からその路線だったしなー。むしろ、いまさなら典型的な<a href="http://ja.wikipedia.org/wiki/Damsel_in_distress">DID</a>を描いたら、そっちの方がびっくりだろうに」なんて思って居たのでさほど期待していなかったのですが、エルサが思っていた以上に興味深いキャラクターだったので結構楽しめました。

とりあえず観終わった後の感想は「流れがアメコミっぽい」でした。

一部では「アメコミ＝勧善懲悪」みたいな印象を持たれているらしいですが、ベトナム戦争以降の物語ではむしろ「正義とは何ぞや」などに思い悩むヒーロー像が描かれました。その中の一つ「スパイダーマン」では、「大いなる力には大いなる責任が伴う」というテーマが主軸となっているのですが、これがエルサの物語にまんま適用されるなと。

エルサは一部で「マイノリティを象徴するキャラクター」として語られていたりもしますが、特殊な能力を持った物として少数派ではあっても決して弱者ではありません。国一つを凍り付かせるだけの魔力を持ち、なおかつ権力者でもあるわけですから。しかし、この２つの力はエルサが望んで得たものではなく押し付けられたもので、ある意味「呪い」です。

本人は望んでいないにも関わらず両親は海難事故でなくなり、否応もなく女王の座につかねばならなくなります。なんとか自分を抑えて戴冠式臨むわけですが、妹は何かよくわからん男を連れてきていきなり「結婚する」とか言い出すし、プチ切れて魔法を使ってしまい結果守るべき者たち「モンスター」と恐れられてしまう。

この辺の流れがまさにアメコミのヒーローっぽい。

もっとも有名な「ありのままの〜♪」シーンも、「もう、あいつらの事なんか知るかボケ」というある種やけっぱちに開き直った姿なわけです。
デスマの現場をバックれて辞める決意をしたエンジニアがよくあんな顔をしてます。しかし、結局ありのままに生きることはかなわず、エルサはアナに呪いをかけてしまいます。

エルサとアナ、ダブルヒロインにそれぞれ呪いがかけられているわけです。

ディズニーにおけるお約束は「王子様のキス」ではなく、実のところ「呪いからの解放」にあります。
「呪いが解けてハッピーエンド」が定例のパターンであるのですがアナと雪の女王において、アナに掛けられた呪いは解かれますがエルサを苦しめている呪い（女王になるという重圧と魔力）は物語の中で解かれることがありません。

むしろこの物語は全体通してエルサが重荷を受け止める覚悟する姿を描いているようにも見えます。

単純に物語として考えるならアナの呪いがとけると同時にエルサの呪い（魔力）も消えてしまっても構わないはずなんですよね。
その場合オラフが消えてしまうことになりますが、中盤に張った「大切な人のためなら溶けてもいい」という複線の回収という意味では、そちらの方が感動的な演出になったはずです。

しかし結局のところエルサの魔力は消えることなく女王という立場も変わらず。
なので、エルサ視点で感情移入してしまうと「なんかエルサだけ割りに合わない」と感じてしまうのもある意味当然かもしれません。

<a href="http://togetter.com/li/667542">【ネタバレ注意】「アナと雪の女王」を見た長女が感じた長子の悲哀</a>

この物語が「ヒーローが自らの力と立場を受け入れ、その責務を負う覚悟を決めるまでの物語」であるならば、この割に合ってない感も当然のモノなのかもしれません。「巨大な力を持つのだから、その社会的責任を果たしなさい」というわけです。

ラストでは、民のためにスケートリンクとか作ってるわけですしねエルサは。
まさに<a href="http://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%96%E3%83%AC%E3%82%B9%E3%83%BB%E3%82%AA%E3%83%96%E3%83%AA%E3%83%BC%E3%82%B8%E3%83%A5">ノブレス・オブリージュ</a>。

「ただ守られるだけのヒロインからの自立」のみならず「守る者としての責任を負うヒロイン」という自立の一歩先を行くヒロイン像を描いた面白い作品だなと思いました。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3828</wp:post_id>
		<wp:post_date>2014-11-03 10:18:34</wp:post_date>
		<wp:post_date_gmt>2014-11-03 01:18:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3828</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[自立のその先、ヒーロー化するヒロインを描いた「アナと雪の女王」]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3831]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427080011;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3000;}i:1;a:1:{s:2:"id";i:3726;}i:2;a:1:{s:2:"id";i:3004;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FOSS4G 2014 Tokyoに参加してきました。</title>
		<link>http://shimz.me/blog/map/3829</link>
		<pubDate>Mon, 03 Nov 2014 01:19:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3829</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/11/A4_flyer_2014TOKYO_ol_01.jpg" alt="FOSS4G 2014 Tokyo" width="298" height="398" class="aligncenter size-full wp-image-3830" />

FOSS4G 2014 Tokyoに参加してきました。
「全体セッション」にパネラーとして参加してきたわけですが、予告通り「GIS分かんないっス！」と主張してまいりました。
実のところ、「こんな低レベルな話でいいのかしら？」とか思っていたのですが、懇談会で何人かの方から「凄い共感しました！」といっていただけたのでよかったかなと。

以外とフロントエンジニアの方が多かったですね、今回。
それだけWeb上で地理空間情報を扱う需要が増えているのかもしれません。

ひとまず、自分が発表した「GIS分かんないです」資料を掲載しておきます。

<a href="http://shimz.me/slide/foss4gTokyo2014/#/">IT エンジニアからみたGIS の難しいところ</a>

<iframe width="100%" height="350" scrolling="no" src="http://shimz.me/slide/foss4gTokyo2014/#/"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3829</wp:post_id>
		<wp:post_date>2014-11-03 10:19:58</wp:post_date>
		<wp:post_date_gmt>2014-11-03 01:19:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3829</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3830]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[FOSS4G 2014 Tokyoに参加してきました。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427358810;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3595;}i:1;a:1:{s:2:"id";i:3549;}i:2;a:1:{s:2:"id";i:3816;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>スーパーエンジニアの予想は当てにならない</title>
		<link>http://shimz.me/blog/other/3834</link>
		<pubDate>Thu, 06 Nov 2014 02:40:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3834</guid>
		<description></description>
		<content:encoded><![CDATA[<div style="text-align:center;margin-bottom:60px"><iframe src="http://giphy.com/embed/Q7y3K35QjxCBa?html5=true" width="480" height="294" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>

 

「あの凄い人の言っていたことは結局一つも当たっていなかったなー」と思うことが最近多くて、どうしてそうなるのか考えてみた。
技術力の高い人ほど純粋に出来や性能などで将来性を評価してしまいがちなのだけれど、あるテクノロジーや言語、規格、フレームワーク、ライブラリなどが普及するかしないかと言ったことは、対象そのものとはほとんど関係なくもっと政治的な理由で決まったりするからなのではないかと思った。

あるモノがキャズムを超えたりデファクトスタンダードになったりするのを決定するのは、強力なプラットフォーマーの政治力やFizzBuzzの書けないエンジニア達だったりするのだろう。

ようするに、普及するかどうかに「良い悪い」はほとんど関係ないので、その辺りを見極めたいのならむしろ業界内の政治の流れを追った方が的中率は高くなりそうだ。

「素晴らしい」はずだったのに跡形もなく消えていった屍の山の上に未来はあるのだなーと思っている。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3834</wp:post_id>
		<wp:post_date>2014-11-06 11:40:57</wp:post_date>
		<wp:post_date_gmt>2014-11-06 02:40:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3834</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3835]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427146616;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2609;}i:1;a:1:{s:2:"id";i:3685;}i:2;a:1:{s:2:"id";i:3861;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>憶えておくための権利は著作権より優先されるべき……ということらしい。</title>
		<link>http://shimz.me/blog/web/3836</link>
		<pubDate>Thu, 06 Nov 2014 09:22:14 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3836</guid>
		<description></description>
		<content:encoded><![CDATA[※きっちり調べたわけじゃないんで間違ってるかも。
あと「いちおうアメリカの国内法ではOKらしいよ」というツイートも見かけたのでもしかしたら問題ないのかも？
<hr />
<br/>

<a href="https://archive.org/details/internetarcade"><img src="http://shimz.me/blog/wp-content/uploads/2014/11/Internet_Arcade.jpg" alt="Internet_Arcade" width="590" height="353" class="aligncenter size-full wp-image-3837" /></a>


<a href="http://wired.jp/2014/11/05/internet-archive-900-retro-games/">昔のアーケードゲームをブラウザーで楽しめる「Internet Arcade」 « WIRED.jp</a>

なんか、Internet Archive が面白いことを始めたらしいのだけど「こんなん、ぜったい権利関係なんてクリアしてないよなー」と思ってちょっと検索してみたけれどどうもそんな感じがする。


<blockquote>While most of the arcade games on offer are still under copyright, with some still seeing re-releases on modern consoles, the browser-based versions are being offered as part of what the Archive calls "exercising our right to remember." 

<div style="text-align:right"><a href="http://arstechnica.com/gaming/2014/11/internet-archive-offers-900-classic-arcade-games-for-browser-based-play/">Internet Archive offers 900 classic arcade games for browser-based play</a></div>
</blockquote>


『大部分のアーケードゲームが著作権下にありますが、Internet Archive いうところの「"憶えておくための権利"の行使」の一部として提供されています』

さすが、Internet Archiveだｗ

とりあえず公開して、訴えられたら訴えられたで、そこから対話を始めようとい感じっぽい。こういうことは日本ではできないねぇ。

<a href="http://ja.wikipedia.org/wiki/Crunchyroll">クランチロール</a>といい、とりあえずルールを破ってみせてから交渉していつの間にか公式になっているみたいな成長のしかたって海外の企業（というかアメリカ）でしか成立しないと思うのだけど、それだけに強力で怖いね。



<blockquote>おもしろいことに、著作権法に関しては最悪の違反者が往々にして順調なビジネスを展開している。

<div style="text-align:right"><a href="http://jp.techcrunch.com/2007/08/31/crunchyroll-pushes-the-envelope-on-video-copyright/">Crunchyroll、アニメビデオで著作権法上の合法的引用の限界を試す</a></div></blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3836</wp:post_id>
		<wp:post_date>2014-11-06 18:22:14</wp:post_date>
		<wp:post_date_gmt>2014-11-06 09:22:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3836</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3837]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427349524;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1538;}i:1;a:1:{s:2:"id";i:2747;}i:2;a:1:{s:2:"id";i:1031;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>点集合を包むパスを描画する（hull.js + D3.js）</title>
		<link>http://shimz.me/blog/d3-js/3841</link>
		<pubDate>Fri, 14 Nov 2014 06:14:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3841</guid>
		<description></description>
		<content:encoded><![CDATA[表示されている点の集合を包むパスを作成します。
D3では、「<a href="https://github.com/mbostock/d3/wiki/Hull-Geom">d3.geom.hull</a>」というメソッドを使用することでシンプルな<a href="http://bl.ocks.org/mbostock/4341699">凸包</a>を作成できますが、今回は凹面を含むパスを作成したいのでhull.jsを組み合わせて使ってみました。

<a href="http://andreygeonya.github.io/hull/">Hull.js</a>


<h2>サンプル</h2>
とりあえずhull.jsにあった馬のサンプルをD3.jsを使ってsvgで描画してみました。（元はcanvas上に描画)
青色のパスがhull.jsで算出したものです。

<a href="http://shimz.me/example/hulljs/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/11/d3andhulljs141114.jpg" alt="D3.js + hull.js" width="590" height="402" class="aligncenter size-full wp-image-3842" /></a>

<a href="http://shimz.me/example/hulljs/01/index.html">example</a>

 
<pre class="lang:js decode:true " >
//馬ポイントデータ
var horse13k = [[135,141],
[132,142],
[134,143],
[141,144],
/* 省略 */
[958,272],
[959,277]];

var svg = d3.select("svg");

 //ポイントを表示
var point = svg.selectAll(".point")
	.data(horse13k)
	.enter()
	.append("circle")
	.attr({
		"class": "point",
		"cx":function(d){ return d[0] },
		"cy":function(d){ return d[1] },
		"r":2,
		"fill":"gray"
	});

//パスを用意
var hullpath = svg.append("path")
	.attr({
		"class":"hull",
		"stroke": "blue",
		"stroke-width": 2,
		"fill": "none"
	});

	//hull.jsを使って点集合を包む座標を算出
	var distPointset = hull(horse13k , 20);
	//取得した座標をsvg pathのパスデータに変換してd属性に渡す
	hullpath.datum(distPointset).attr("d", function(d) { return "M" + d.join("L") + "Z"; });

</pre> 

Google Maps上のポイントを囲むパスを描画するのに使えそうなのですが、今のところ上手くいってません。
地図上でうまく使えるようになったら、また記事にしようと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3841</wp:post_id>
		<wp:post_date>2014-11-14 15:14:13</wp:post_date>
		<wp:post_date_gmt>2014-11-14 06:14:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3841</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3842]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427295903;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3548;}i:1;a:1:{s:2:"id";i:2819;}i:2;a:1:{s:2:"id";i:3733;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsで作成されたグラフからデータを抜き出すChromeエクステンション「D3 Deconstructor」</title>
		<link>http://shimz.me/blog/d3-js/3843</link>
		<pubDate>Mon, 17 Nov 2014 00:39:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3843</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/11/vallandingham-vis.png" alt="D3 Deconstructor " width="590" height="423" class="aligncenter size-full wp-image-3844" />

<img src="http://shimz.me/blog/wp-content/uploads/2014/11/deconstruction-view.png" alt="D3 Deconstructor " width="590" height="423" class="aligncenter size-full wp-image-3845" />

<a href="D3 Deconstructor ">公式サイト</a>

海外のD3クラスタで話題になっていたGoogle Chromeエクステンション。
D3で作成されたグラフから、元データを抽出しテーブルとして表示。
csvやJSONデータとしてダウンロードできる……らしいのだけれど、複雑なグラフからは無理っぽい。

どうも、エレメントの__data__プロパティを探し回ってデータを再構築する仕組みっぽいです。
モノによっては、ソースから読み込んでいるデータファイルを見つけ出す方が早いけれど、今後のアップデート次第では面白いツールになるかもしれません。

インストールは以下から。

<a href="https://chrome.google.com/webstore/detail/d3-deconstructor/papagkpjldglcaifeipgcfkhddlefnkk">Chrome Web Store.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3843</wp:post_id>
		<wp:post_date>2014-11-17 09:39:34</wp:post_date>
		<wp:post_date_gmt>2014-11-17 00:39:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3843</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3845]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427092093;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3564;}i:1;a:1:{s:2:"id";i:2619;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ゼンリンの「いつもNAVI－API」を使って地図を表示してみた。</title>
		<link>http://shimz.me/blog/map/3847</link>
		<pubDate>Wed, 19 Nov 2014 05:40:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3847</guid>
		<description></description>
		<content:encoded><![CDATA[ホントにただ表示しただけだけど。

<a href="http://shimz.me/example/zenrinMap/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/11/aenrinmap1411193.jpg" alt="ゼンリン地図API" width="590" height="367" class="alignnone size-full wp-image-3850" /></a>

<a href="http://shimz.me/example/zenrinMap/01/index.html">example</a>

<blockquote>ゼンリンデータコムは、1カ月当たり5000ページビュー（PV）内であれば、地図を無料で商用利用できる「いつもNAVI－API（無償版）」の提供を開始していることを明らかにした。既に2014年9月末から提供を始めているとする。
<div style="text-algin:right"><a href="http://techon.nikkeibp.co.jp/article/NEWS/20141117/389392/">地図の商用利用が無料、ゼンリンデータコムから「いつもNAVI－API（無償版）」が登場</a></div></blockquote>

上記の記事を見かけたので触ってみました。（ゼンリンが地図APIを提供していたなんて知りませんでした）

<h2>登録</h2>
APIを利用するには、下記ページから無料アカウントを作成する必要があります。
<a href="http://www.zenrin-datacom.net/business/develop/index.html">ゼンリン地図　いつもNAVI API / SDK</a>

登録の手続きが終わったら、管理画面の企業情報で「企業ID」の確認とリファラの登録を行ってください。

■「企業ID」はライブラリを呼び出す際のkeyになります。
<img src="http://shimz.me/blog/wp-content/uploads/2014/11/zenrinmap1411191.jpg" alt="ゼンリン地図API" width="590" height="368" class="alignnone size-full wp-image-3849" />

■リファラに地図を表示させるサイトのドメインを登録します
<img src="http://shimz.me/blog/wp-content/uploads/2014/11/zenrinmap1411192.jpg" alt="ゼンリン地図API" width="590" height="368" class="alignnone size-full wp-image-3848" />

<h2>サンプルコード</h2>
公式にあったサンプルがエンコードやキャラクタセットに「EUC」を指定していたので、ちょっと変えてます。今のところ特に問題なし。
APIライブラリ読み時のkeyパラメーターに管理画面で確認した企業IDを渡してください。
<pre class="lang:js decode:true " >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF8"&gt;
&lt;title&gt;ゼンリンMAP API&lt;/title&gt;	
&lt;style&gt;
html, body {
	padding: 0px;
	margin:  0px;
}	
html, body, #ZMap {
	width:100%;
	height: 100%;
}	
&lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id="ZMap"&gt;&lt;/div&gt;


&lt;script src="http://api.its-mo.com/cgi/loader.cgi?key=＜企業ID＞&amp;ver=2.0&amp;api=zdcmap.js&amp;enc=UTF8&amp;force=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
var map;
var lat = 36.3219088, lon = 139.0032936;

map = new ZDC.Map(
	document.getElementById('ZMap'),
	{
		latlon: new ZDC.LatLon(lat, lon),
		zoom: 10
	}
);
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</pre> 

とりあえず、公式のチュートリアルとリファレンスを眺めています。
緯度経度を画面上の座標に変換する関数があれば、D3と連動させたりすることができるのですが、今のところそういったモノは無いみたい。
でも、わりと面白そうな機能がいろいろあるので時間があったら引き続き弄ってみようと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3847</wp:post_id>
		<wp:post_date>2014-11-19 14:40:20</wp:post_date>
		<wp:post_date_gmt>2014-11-19 05:40:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3847</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3850]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3789;}i:1;a:1:{s:2:"id";i:3684;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>高崎市からオープンデータへの取り組みについて回答がきました。</title>
		<link>http://shimz.me/blog/other/3851</link>
		<pubDate>Thu, 20 Nov 2014 01:36:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3851</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/09/takasaki.jpg" alt="takasaki" width="256" height="148" class="aligncenter size-full wp-image-3761" />

以前書いた「<a href="http://shimz.me/blog/other/3760">高崎市にオープンデータへの取り組みについて聞いてみた。</a>」のその後。

<blockquote>全国的にみると、オープンデータを公開している市区町村は、約1,700ある市区町村のうち、およそ50ほど（約2.6％）となっています。
　本市におけるオープンデータの公開については、その意義・目的等を十分に踏まえ、市民の皆様からの要望をはじめ、オープンデータを公開している市区町村の運用実績などを参考にした上で、公開すべき情報や方法を検討していきたいと考えています。</blockquote>

とのことで、今のところオープンデータに関しては行う予定はないとのことです。

<a href="http://www.city.takasaki.gunma.jp/docs/2014121000021/">回答全文</a>

<h3>関連記事</h3>
<a href="http://shimz.me/blog/datavis/3788">群馬県視覚化プロジェクト！ </a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3851</wp:post_id>
		<wp:post_date>2014-11-20 10:36:52</wp:post_date>
		<wp:post_date_gmt>2014-11-20 01:36:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3851</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3761]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1426886033;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3340;}i:1;a:1:{s:2:"id";i:3760;}i:2;a:1:{s:2:"id";i:3706;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[オープンデータ+QGIS] 統計・防災・環境情報がひと目でわかる地図の作り方、感想</title>
		<link>http://shimz.me/blog/book/3853</link>
		<pubDate>Fri, 21 Nov 2014 00:48:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3853</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774169137/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61jeKqbaAgL._SL160_.jpg" alt="[オープンデータ+QGIS] 統計・防災・環境情報がひと目でわかる地図の作り方" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774169137/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">[オープンデータ+QGIS] 統計・防災・環境情報がひと目でわかる地図の作り方</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.11.20</div></div><div class="amazlet-detail">朝日 孝輔 大友 翔一 水谷 貴行 山手 規裕 <br />技術評論社 <br />売り上げランキング: 1,464<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774169137/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<blockquote>2012年7月にIT総合戦略本部は「電子行政オープンデータ戦略」を取りまとめ，総務省が中心となって公共データ（オープンデータ）が積極的に公開されています。また，データを可視化できる地理情報システムにはバージョンアップしたオープンソースソフトウェアの「QGIS」が使えるため，企業や自治体などで地図に関連したオープンデータ活用が見込まれています。そこで本書では，各組織の担当者が一から学べるように，地理情報の基本から収集したデータの扱い方，さらに具体的な防災地図や年齢別人口分布図などの作り方や見せ方まで解説しています。</blockquote>


技術評論社および北海道地図の朝日孝輔様より献本いただきました。
ありがとうございます。

<h3>感想</h3>
カバー裏(前そで)に「本書をお勧めしたい方」が記載されいたので引用します。

<ul>
<li style="font-size:0.8em">Excelのシートで管理しているデータを地図に載せてビジュアライゼーションしたい</li>
<li style="font-size:0.8em">自分のお店を開いたので、ホームページにわかりやすいアクセス情報を載せたい</li>
<li style="font-size:0.8em">新規店舗の出店に関する計画を行いたい</li>
<li style="font-size:0.8em">昨日、娘が河童を見たと言っています。本当でしょうか？</li>
<li style="font-size:0.8em">オープンデータって最近よく聞くけどなんだろう、どうやって使うのだろう</li>
<li style="font-size:0.8em">災害情報を可視化して住民に提供したい</li>
</ul>

河童……すげー気になる。

上記に追加して「D3で地理情報を使ったデータビジュアライゼーションを行いたいのだけど、可視化する以前の地理情報を編集したい。でも地理情報に関する知識が無い……こまった！」という人にお勧めです。

本書では、QGISの使い方に入る前に地理空間情報を扱うために必要な「測地系」や「空間参照系」などの基本的な知識に関して非常に分かり易く説明されています。（これらの知識はD3でgeovisualizationを行う際にも必須となります）

QGISを使っての可視化も、オープンデータを使ったサンプルになっているので実際に手を動かしながら学ぶことができます。

とにかく地理情報を使うにあたって初学者が詰まりやすいところ、「参照系ってなに？」「データはどこにあるの！」「そもそもQGISって何ができるの？」などについて先回りして教えてくれるので、途中で手が止まることなく読み進めていくことができて学習意欲を維持しやす作りになっているなと感じました。

個人的に嬉しいかったのはカラーページが非常に多いことで、地理情報を可視化する際色を用いて表現することが多々あるのですが、それらがちゃんと書籍上で確認できるのがとても分かり易いです。色鮮やかな地図は見ているだけでも楽しいですね。

以前、「<a href="http://shimz.me/blog/map/3228">GISの参考書はどこにあるのか？</a>」という記事を書いたことがあるのですが、GIS関連の参考書というのはなかな見つけ出すのが大変で、特に最新バージョンに対応したものは今のところ数えるほどしかありません。

地理情報を利用したデータビジュアライゼーションに興味がありGISの入門書を探している方は、ぜひ手に取ってみてください。




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3853</wp:post_id>
		<wp:post_date>2014-11-21 09:48:27</wp:post_date>
		<wp:post_date_gmt>2014-11-21 00:48:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3853</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3854]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427358798;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3228;}i:1;a:1:{s:2:"id";i:3564;}i:2;a:1:{s:2:"id";i:3178;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ピクトグラムとバックグランドを選ぶだけで自由にアイコンが作成できるWebサービス「FreeIconMaker」</title>
		<link>http://shimz.me/blog/web/3857</link>
		<pubDate>Mon, 24 Nov 2014 03:00:27 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3857</guid>
		<description></description>
		<content:encoded><![CDATA[地図上に表示するアイコンを探し回っていたのだけれど、なかなか目的にかなうアイコン素材が見つからなくて彷徨って際に見つけたサイト。

<a href="http://freeiconmaker.com/"><img src="http://shimz.me/blog/wp-content/uploads/2014/11/freeiconmaker1.jpg" alt="freeiconmaker" width="590" height="214" class="aligncenter size-full wp-image-3858" /></a>


<a href="http://freeiconmaker.com/">FreeIconMaker</a>


Web上でピクトグラムとバッググランドを選択するだけでアイコンを作成できる。

<a href="http://freeiconmaker.com/"><img src="http://shimz.me/blog/wp-content/uploads/2014/11/freeiconmaker.jpg" alt="freeiconmaker" width="590" height="401" class="aligncenter size-full wp-image-3859 border" /></a>


ログインするとSVGファイルをアップロードしてピクトグラムとして使用できる。<a href="http://www.flaticon.com/">flaticon</a>で配布されているSVGファイルを登録できるので、様々なアイコンをこのサービス一つで作成することがでてとても便利。
ただ、作成したアイコンをpngファイルとしてしかダウンロードできないのが難点かな。svgでダウンロードできたらいうことなしなのだけれど。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3857</wp:post_id>
		<wp:post_date>2014-11-24 12:00:27</wp:post_date>
		<wp:post_date_gmt>2014-11-24 03:00:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3857</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3859]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427202288;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2730;}i:1;a:1:{s:2:"id";i:3075;}i:2;a:1:{s:2:"id";i:2787;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>未開の地のエンジニアが３年間ブログをやってみた結果。</title>
		<link>http://shimz.me/blog/analytics/3861</link>
		<pubDate>Wed, 03 Dec 2014 09:04:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3861</guid>
		<description></description>
		<content:encoded><![CDATA[ども。グンマー(未開の地)の片隅でオープンデータとデータビジュアライゼーションとGISに戯れているエンジニアです。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/gunmagisgeek-ss.png" alt="gunmagisgeek" width="590" height="391" class="aligncenter size-full wp-image-3878" />


「<a href="https://atnd.org/events/58649">WordPressもくもく勉強会@群馬</a>」で書いた記事なのですが公開するのを忘れていました...orz

勉強会の内容については、「たらハコ」さんが<a href="http://tarahako.com/gunmokuwp-141127">レポート</a>を上げていますのでそちらをご覧ください。(興味ある方は是非勉強会にご参加ください！)

<h2>３年間を振り返る</h2>

はてブを見ていたら、ブログ開設からの推移を振り返る記事が何件か上がっていたので、自分もやってみることにしました。
とりあえずデータから。

<h2>ブログのデータ</h2>
<h3>ブログ開始</h3>
一番最初の記事の日付が「2010/12/08」なのですが、これは以前ブログをやっていたBloggerからインポートした記事なので実際の開始日ではありません。このブログを初めて一番最初に書いた記事を覚えていないのですが、多分「2011/11/24」に書いた「<a href="http://shimz.me/blog/editor/74">エディタをKomodo Editに変えた10の理由</a>」だと思います。なので、だいたい３年目で正しいはず！

<h3>記事数</h3>
この記事を含めて471件でした。
<code>365×3÷471=2.32</code>
毎日は書けていないけれど、それなりに数はこなせているっぽいですね。
<h3>アクセス数</h3>
<strong>・直近１ヶ月</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/11/volonoilabel000001.jpg" alt="2014アクセス" width="590" height="264" class="alignnone size-full wp-image-3862 border" />

おおよそ、月間40000PV〜50000PVぐらいです。

<strong>・全期間</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/11/volonoilabel000002.jpg" alt="volonoilabel000002" width="590" height="257" class="alignnone size-full wp-image-3863 border" />

<h3>フィード登録</h3>
FaceBookページの「いいね」が246件、feedlyの登録が237件。
PV以上に、継続して記事を読んでいただける数が増えるとより嬉しいですね！

<h3>ＴＯＰ５</h3>
<strong>・最も流入数が多かったリファラ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/12/top52.jpg" alt="最も流入数が多かったリファラ" width="493" height="258" class="alignnone size-full wp-image-3876 border" />
「検索エンジン」はほとんどGoogleです。全体の流入数の９割はGoogle。Google依存変わらず。
<br />
<strong>・最も流入数が多かったキーワード</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/12/top53.jpg" alt="最も流入数が多かったキーワード" width="493" height="258" class="alignnone size-full wp-image-3877 border" />
ウチのブログは「iPadでプログラミングをしたい！」という奇特な方によって支えられております。
<br />
<strong>・最も読まれた記事</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2014/12/top51.jpg" alt="最も読まれた記事" width="493" height="263" class="alignnone size-full wp-image-3875 border" />
<br />
トップの「ホームページ／アーカイブ」はブログのトップページです。なので実質一位は「<a href="http://shimz.me/blog/jquery/1265">FullCalendar のカスタマイズ</a>」、特にはてブされたりソーシャルメディアでバズったりしたわけではないのですが、常にコンスタントにアクセス数を集めるスタメン記事だったりします。

<h3>ソーシャルメディア</h3>
<ul>
	<li><strong>最もはてブされた記事</strong><br />
<a href="http://shimz.me/blog/d3-js/2772">ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ</a></li>

	<li><strong>最もツイートされた記事</strong><br />↑と同じ</li>

	<li><strong>最もいいねされた記事</strong><br />
<a href="http://shimz.me/blog/d3-js/3178">福岡市のオープンデータを使用して交通危険個所マップを作成しました。</a></li>
「はてブ」と「ツイート」数は相関関係に、「いいね」は「はてブ」とはあまり連動していません。クラスタが違うっぽいですね。
</ul>
<h3>収益</h3>
このブログに貼っているアフェリエイトはGoogle Adsense、Amazonアソシエイト、Appleアフェリエイトですが、全部合わせて月10000円〜20000円くらいですね。20000円までいくことはほとんどないですが。

<h3>支出</h3>
サーバー代：月額3003円
さくらクラウドを使っています。
「もっと安いVPSでいいんじゃね？」とよくいわれるのですが、ブログ以外にもいろいろと使っていたりするのと、環境を丸ごとコピーして別マシンとして起ち上げてテストできたりするのが便利なのでクラウドを使っています。

【追記】ドメイン代忘れてた。年間760円です。

<h2>ブログをやってよかったこと</h2>
さて、３年間それなりに力をいれてブログをやってきて「ブログやっててよかったな」と感じることが増えてきたので思うところ書いてみます。

<h3>学習する動機づけになってきた</h3>	
もともと自分が学んだことを掲載していく備忘録として始めたわけですが、ブログを書くことが習慣付いていくなかで、「記事を書くためになにか勉強しよう」と独学を行うためのインセンティブになってきています。
ある意味本末転倒な気もしますが、気を抜くとすぐ怠ける癖があるのでブログを使うことで学習意欲を失わずにいれている気がします。

<h3>情報発信のノウハウが分かってきた</h3>
このブログでは当初より意識してアクセスアップなどを行ってきたのですが、そういった中で得たノウハウや同時に自分の限界などが把握できたのが結構仕事に役立っています。
SEO含め、ソーシャルメディア活用など「この辺りまでの数なら、自分の努力で集められる。それ以上はなにか爆発的に注目されるようなイベントが発生しないと無理だなー」とある程度の目安を立てられるようになったのがWeb系のエンジニアとしてもスキルアップにつながったかなと思います。（どんなことをやってきたかは下記記事を参照ください）

<a href="http://shimz.me/blog/other/3306">技術系ブログのアクセスアップ術</a>

<h3>名前を覚えてもらえた</h3>
特に今年にはいってからですが、「ブログ読んでます」といってもらえることが増えました。
勉強会に参加したりするわりには、知らない人にはなかなか話しかけられない性格なので、こういったきっかけが生まれたのがとてもありがたいです。
<h3>色んな人に出会えた</h3>
おそらくこのブログをやっていなければまったく出会うことが無かったであろう方々と沢山知り合えました。
世界が広がった気がします。
<h3>イベントに呼ばれた</h3>
ありがたいことに、声をかけていただきイベントにて登壇させていただくことがありました。
パネルディスカッションとか今までは完全に観る側だったので、実際に自分で参加してみると不思議な感じでした。
そして何よりも「北海道」ですね！　基本、群馬に引きこもっているのでひさびさに旅行できてとても楽しかったです。

<ul>
	<li style="font-size:0.79em"><a href="http://shimz.me/blog/d3-js/3595">FOSS4G 2014 Hokkaidoに行ってきました。</a></li>

	<li style="font-size:0.79em"><a href="http://shimz.me/blog/map/3829">FOSS4G 2014 Tokyoに参加してきました。</a></li>

</ul>

【追記】12月25日に行われる「<a href="http://data-visualization-japan.doorkeeper.jp/events/18551">Data Visualization Japan meetup#2</a>」にて登壇させていただくこととなりました。


<h3>本がもらえた</h3>
今年、初めて「献本」というものをいただきました。たまにブログで見かけてあこがれだった献本！
実際いただいてみると「どんな風に紹介しよう？」とそれなりにプレッシャーもあるなと感じたりもしましたがｗ
ありがとうございました。

<ul>
	<li style="font-size:0.79em"><a href="http://shimz.me/blog/d3-js/3405">「エンジニアのための データ可視化[実践]入門 ~D3.jsによるWebの可視化」感想</a></li>

	<li style="font-size:0.79em"><a href="http://shimz.me/blog/d3-js/3425">【D3.js】デザイナーにお勧め「インタラクティブ・データビジュアライゼーション」感想</a></li>

	<li style="font-size:0.79em"><a href="http://shimz.me/blog/d3-js/3564">「データビジュアライゼーションのためのD3.js徹底入門」感想</a></li>

	<li style="font-size:0.79em"><a href="http://shimz.me/blog/book/3853">[オープンデータ+QGIS] 統計・防災・環境情報がひと目でわかる地図の作り方、感想</a></li>

</ul>


<h3>総括</h3>
自分が予想していた以上にブログから得られたもの・得られるものが大きかったなぁと感じています。
自分のなかで、勝手な定義ですが「エンジニアの技術」を「スキル」と「キャリア」と２種類に分けて考えていて、「スキル」は出来ること「キャリア」はやってきたこと、という区分けなのですが、スキルは独学で学ぶことができるけれどキャリアは仕事をすることでしか積み上げていけないと思っています。
ようするに職歴書に書けるものがキャリアで、それ以外のできることがスキルなわけですが、この「スキル」をアピールする場があまりないなと思って始めたのがこのブログでした。
当然ながらキャリアの方がスキルより重視される場面が多いわけですが、「やってきたこと」をアピールした先に見える道はどうしても"やってきたことの延長線上"から外れることができなかったりするなかで、このブログは先々に見える世界を広げてくれたなーなんて感じています。
とくに地方では開催される勉強会など数も限られてくるので、ブログを通じていろいろな方に知ってもらえたり出会えたりするのは非常に貴重な機会だなぁと。

なんだかんだ言ってもブログやってて良かった。

もし誰かに聞かれたら自信を持ってこう答えたいと思います。

<strong>「エンジニアはブログをやるべきだ！」</strong>

以上です。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3861</wp:post_id>
		<wp:post_date>2014-12-03 18:04:38</wp:post_date>
		<wp:post_date_gmt>2014-12-03 09:04:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3861</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[ブログ運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3878]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427128434;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2990;}i:1;a:1:{s:2:"id";i:3170;}i:2;a:1:{s:2:"id";i:3306;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[42.986774694129]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Webixの使い方入門</title>
		<link>http://shimz.me/blog/webix/3864</link>
		<pubDate>Mon, 01 Dec 2014 02:02:57 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3864</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://webix.com/"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/webix141201.jpg" alt="webix" width="590" height="280" class="aligncenter size-full wp-image-3865" /></a>

<a href="http://webix.com/">Webix</a>


以前も紹介したことがあるUIライブラリ「Webix」ですが、個人的に気に入ってしまい勢い余って<a href="http://qiita.com/advent-calendar/2014/webix">Advent Calendar</a>まで作ってしまいました。
ぶっちゃけ独りでどこまで続けられるか疑問ですが、なるべく間があかないように記事にしていきたいと思います。

過去Webixを紹介した記事
<a href="http://shimz.me/blog/webix/3698">サクサク書けて柔軟なカスタマイズが可能な、UIフレームワーク「Webix」</a>

<h2>Webixとは？</h2>
WebixはリッチなUIコンポーネントを備えたウィジェットフレームワークです。
まだ公開されて間もないため、あまりドキュメントがありませんが、後発なだけあって既知のUIライブラリの良いところを貪欲に取り入れたライブラリです。
いろいろと面白い機能があるので、その辺もアドベントカレンダーの中で紹介していけたら良いなとおもっています。


<h2>インストール</h2>
Webixライブラリはこちらから<a href="http://webix.com/download/">ダウンロード</a>することができます。
解答したファイルの中から「codebase」フォルダをサーバーにアップロードし、webix.cssとwebix.jsを読み込むことで使用します。
<pre class="lang:js mark:4,5 decode:true " >&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;link rel="stylesheet" href="./codebase/webix.css" type="text/css"&gt; 
&lt;script src="./codebase/webix.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;/head&gt;
&lt;body&gt;


	&lt;script type="text/javascript" charset="utf-8"&gt;
	// webixのコードをここに書きます。

	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre> 

webixは.netのパッケージマネージャー「Nuget」や「Bower」を使ってインストールすることもできます。

 
<pre class="lang:sh decode:true " title="Nuget" >nuget install Webix

//Microsoft Visual Studioを使用する場合はパッケージ・マネージャ・コンソールから下記コマンドを実行してください
install-package Webix</pre> 

 
<pre class="lang:sh decode:true " title="Bower" >bower install webix</pre> 

<h2>コンポーネントの初期化</h2>
webix.uiを実行することでコンポーネントが初期化されます。 
<pre class="lang:js decode:true " >webix.ui({
    //コンポーネント
});</pre> 

ページの読み込みが完了してからコードが実行されるようにするには、webix.readyを使用します。
 
<pre class="lang:js decode:true " >webix.ready(function(){
    webix.ui({
            ....
    });
});</pre> 

<h3>コンポーネントを生成</h3>
シンプルな「データビュー」コンポーネントを表示してみます。
<a href="http://shimz.me/example/webix/quick_start/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/simple_dataview.jpg" alt="simple_dataview" width="524" height="304" class="alignnone size-full wp-image-3867" /></a>

<a href="http://shimz.me/example/webix/quick_start/index.html">example</a>

 
<pre class="lang:js decode:true " >webix.ui({
    view:"dataview",
    id:"my_dataview",
    width: 500, height: 300, //コンポーネント全体のサイズ
    template:"<div class='webix_strong'>#title# </br> #year#.</div> Rank: #rank#",
    type:{
        width: 250, height: 100 //dataviewアイテムのサイズ
    },
    data:[
        { id:1, title:"ショーシャンクの空に", year:1994, rank:1},
        { id:2, title:"ゴッドファーザー", year:1972, rank:2},
        { id:3, title:"ゴッドファーザー: Part II", year:1974, rank:3},
        { id:4, title:"続・夕陽のガンマン", year:1966, rank:4},
        { id:5, title:"マイフェアレディー", year:1964, rank:5},
        { id:6, title:"12の怒れる男", year:1957, rank:6},
    ],
    datatype:"json"
});</pre> 

とりあえず今日はここまで。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3864</wp:post_id>
		<wp:post_date>2014-12-01 11:02:57</wp:post_date>
		<wp:post_date_gmt>2014-12-01 02:02:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3864</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3868]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427326158;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3698;}i:1;a:1:{s:2:"id";i:3874;}i:2;a:1:{s:2:"id";i:3306;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[2.0621859153082]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]レイアウトシステム</title>
		<link>http://shimz.me/blog/webix/3870</link>
		<pubDate>Tue, 02 Dec 2014 02:45:53 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3870</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> ２日目の記事です。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/webixlayoute141202.jpg" alt="Webix Layoute" width="590" height="479" class="aligncenter size-full wp-image-3871" />

Webixには、簡単に使えて様々なコンポーネントを自在に配置できる優れたレイアウトシステムがあります。本日はWebixのレイアウトシステムについて紹介します。

<a href="http://docs.webix.com/desktop__layout.html">Layout and Resizer Webix Docs</a>

<h2>レイアウト</h2>
Webixにおけるレイアウトとは、コンポーネントとの配置を決定するだけの概念的な要素となります。JSON形式でrowsやcolsキーにコンポーネントを含んだ配列を渡すことで設定します。


<h3>Horizontal layout</h3>
rowsは、コンポーネントを垂直に配置する際に使用します。
<pre class="lang:js decode:true " >webix.ui({
    id:"layout", 
    rows:[
        { template:"row 1" }, 
        { template:"row 2" },
        { template:"row 3" }
    ]
});</pre> 
<iframe width="100%" height="200" scrolling="no" src="http://shimz.me/example/webix/layout/horizontal/index.html"></iframe>
 
<a href="http://shimz.me/example/webix/layout/horizontal/index.html">example</a>

<h3>Vertical layout</h3>
colsは、コンポーネントを水平に配置する際に使用します。
<pre class="lang:js decode:true " >webix.ui({
    id:"layout",
    cols:[
        { template:"col 1" }, 
        { template:"col 2" },
        { template:"col 3" }
    ]
});</pre> 
<iframe width="100%" height="200" scrolling="no" src="http://shimz.me/example/webix/layout/vertical/index.html"></iframe>

<a href="http://shimz.me/example/webix/layout/vertical/index.html">example</a>

<h3>Complex layout</h3>
任意の行(rows)を列(cols)で分割することができます。
ネストすることで複雑なレイアウトを設定することができます。 
<pre class="lang:js decode:true " >webix.ui({
    id:"layout", 
    rows:[
        {template:"row 1"}, 
        {template:"row 2"},
        { cols:[
            { template:"col 1" },
            { template:"col 2" },
            { template:"col 3" }
        ]}
    ]
});</pre> 
<iframe width="100%" height="200" scrolling="no" src="http://shimz.me/example/webix/layout/complex/index.html"></iframe>

<a href="http://shimz.me/example/webix/layout/complex/index.html">example</a>

<h2>リサイズビュー</h2>
リサイズビューは、レイアウトによって配置されたコンポーネント間でサイズの変更を可能にします。
<pre class="lang:js decode:true " >webix.ui({
	rows:[
		{template:"header", height:35 },
		{template:"row 1"},
		{view:"resizer"},	//row1とrow2の境界をリサイズ可能に
		{template:"row 2"},
		{view:"resizer"},	//row2とrow3の境界をリサイズ可能に
		{
			id:"row3",
			cols:[
			{
				template:"col 1",
				minWidth:150		//col1の最少サイズ(幅)
			},
			{
				view:"resizer",	//col1とcol2の境界をリサイズ可能に
			},
			{   
				template:"col 2"
			},
			{
				template:"col 3"
			}
		]
		}
	]
});</pre> 

<iframe width="100%" height="400" scrolling="no" src="http://shimz.me/example/webix/layout01/index.html"></iframe>

<a href="http://shimz.me/example/webix/layout01/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3870</wp:post_id>
		<wp:post_date>2014-12-02 11:45:53</wp:post_date>
		<wp:post_date_gmt>2014-12-02 02:45:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3870</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3871]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427326222;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3907;}i:1;a:1:{s:2:"id";i:3902;}i:2;a:1:{s:2:"id";i:3909;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-19.699097541963]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]Listコンポーネント入門</title>
		<link>http://shimz.me/blog/webix/3874</link>
		<pubDate>Thu, 04 Dec 2014 09:41:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3874</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/12/webixlist141204.jpg" alt="webix list view" width="509" height="473" class="aligncenter size-full wp-image-3882 border" />

<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> ４日目の記事です。

昨日は突然過去を振り返りたくなって<a href="http://shimz.me/blog/analytics/3861">別の記事</a>を書いていたためお休みしました。

さて、今回はWebixのListコンポーネントを使ってみます。
WebixのコンポーネントはJavaScriptオブジェクトとして必要な要素を指定してwebix.uiに渡してあげれば、後はWebixが良い感じに表示してくれます。

<h2>リストの表示</h2>
基本的には、viewプロパティで"list"を指定し、dataプロパティにリストとして表示したいデータ(JSON)を渡してtemplete内で表示する内容の書式を設定すればリストとして表示されます。
templateの中では「#key名#」で渡したデータの値を表示することができます。またHTMLタグも指定可能です。
（なおリストに渡しているtestDataはtestData.js内で宣言し外部スクリプトとして読み込んでいます。データの内容は以下を）

<a href="http://shimz.me/example/webix/list/testData.js">testData.js</a>

<pre class="lang:js decode:true " >//console.log(testData); //テスト用データ

webix.ui({
	view:"list",
	template:"#pref#. - 人口#people#人", //書式指定
	select:"multiselect",		//行を選択可能にする(複数選択可)
	data:testData	//リストで表示するデータ
});</pre> 
<iframe width="200" height="300" scrolling="no" src="http://shimz.me/example/webix/list/01/"></iframe>

<a href="http://shimz.me/example/webix/list/01/">example</a>

<h2>Horizontalリスト</h2>
リストビューではレイアウト方向とスクロール方向を「x軸」に指定するこができます。 
<pre class="lang:js decode:true " >webix.ui({
	view:"list",
	height:60, //コンポーネント全体の高さ
	width:700, //コンポーネント全体の幅
	scroll:"x", //x軸にスクロール
	layout:"x", //x軸にレイアウトして表示
	select:true,
	type:{
		height:60, //各アイテムの高さ
		width:170  //各アイテムの幅
	},
	template:"#pref# &lt;br&gt; 人口#people#人", //書式指定
	data:testData
});</pre> 
<iframe width="100%" height="77" scrolling="no" src="http://shimz.me/example/webix/list/HorizontalLists/"></iframe>

<a href="http://shimz.me/example/webix/list/HorizontalLists/">example</a>

<h2>グルーピング</h2>
grouplistビューを利用すると、渡したデータの特定の項目を元にグルーピングしてリストを表示することができます。
この機能を利用するとモバイル向けのスライドメニューなどが簡単に作成することができます。
(タッチイベントにも対応しています）
<pre class="lang:js decode:true " >webix.ui({
	view:"grouplist",  //grouplistビューを指定
	templateBack:"戻る",
	templateGroup:"#value#",　//グルーピング対象としたキーの値を表示指定
	templateItem:"#pref# - 人口#people#人", //グループ選択後に表示指定
	select:true,
	scheme:{
		$group:{
			by:'group' //グルーピング対象とするキーを指定
		},
		$sort:{ by:"value", dir:"desc" } //グルーピングしたキーの値でソート
	},
	data:testData
});</pre> 

<iframe width="200" height="300" scrolling="no" src="http://shimz.me/example/webix/list/grouping/"></iframe>

<a href="http://shimz.me/example/webix/list/grouping/">example</a>


<h2>リストのスタイリング</h2>
リストビューではtypeプロパティ内で各itemのスタイルなどをカスタマイズすることができます。
template内で使用する、カスタム変数などの設定もtypeプロパティの中で行えます。
<pre class="lang:js decode:true " >
//カードっぽいリスト
var listA = {
	view:"list",
	type:{
		templateStart:"&lt;div class='custom_item'&gt;",　//各itemを包む要素を指定
		template:"#pref#&lt;br&gt;&lt;div style='text-align:right;'&gt;#group#&lt;/div&gt;",
		templateEnd:"&lt;/div&gt;" //各アイテムを包む要素のエンドタグ等を指定
	},
	data:testData
}

//データの値に応じてスタイルを変更するリスト
var listB = {
	view:"list",
	template:"{common.itemIcon} #pref# {common.itemPopulation()}", //type内で設定したカスタム変数を利用
	type:{
		itemIcon:"&lt;span class='webix_icon fa-map-marker'&gt;&lt;/span&gt;", //アイコンを指定
		itemPopulation:function(obj){ //カスタム変数　人口密度によって文字カラーを変えている
			if(+obj.population&gt;=1000){
				return "&lt;div class='mark red'&gt;"+obj.population+"&lt;/div&gt;";
			} else if(+obj.population&lt;100){
				return "&lt;div class='mark blue'&gt;"+obj.population+"&lt;/div&gt;";
			} else
				return "&lt;div class='mark'&gt;"+obj.population+"&lt;/div&gt;";
		}
	},
	select:true,
	data:testData
}

//レイアウトする
webix.ui({
	cols:[listA, listB] //リストAとリストBを横に並べて表示
});</pre> 

<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/webix/list/styling/"></iframe>

<h2>備考</h2>
webixのコンポーネントは一つ一つが非常に多機能なため、全ての利用法をお伝えすることができません。
公式サイトに非常に充実したサンプルとドキュメントが公開されていますので、興味のある方はそちらを参照してみてください。

<a href="http://docs.webix.com/desktop__list.html">document</a>
<a href="http://docs.webix.com/samples/05_list/index.html">sample</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3874</wp:post_id>
		<wp:post_date>2014-12-04 18:41:50</wp:post_date>
		<wp:post_date_gmt>2014-12-04 09:41:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3874</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3882]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427291356;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3907;}i:1;a:1:{s:2:"id";i:3698;}i:2;a:1:{s:2:"id";i:4052;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-16.251320313154]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「感染地図」感想</title>
		<link>http://shimz.me/blog/map/3880</link>
		<pubDate>Sat, 06 Dec 2014 03:22:39 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3880</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/foss4goss4g">FOSS4G Advent Calendar 2014</a> と<a href="http://qiita.com/advent-calendar/2014/dataviz">Data Visualization Advent Calendar 2014</a>の、
６日目の参加記事です。

<br />
<hr />
<br />

なんかもう本書に関しては語りたいことが多すぎて結果まとまらず、やたら長くなりました。
この本は、原因不明の病にたいしてデータを集め分析するという手法で立ち向かうことを発見した始まりの物語でもあり、強固な固定概念を打ち砕きパラダイムシフトを起こし世界を変えた視覚化によるジャーナリズムの先駆けの記録であり、オープンな地図システムと市民参加によって今後可能になるであろう未来を思い描くサイエンスノンフィクションです。

ウチのブログがよくとり上げるテーマがこの一冊の本の中に全て詰まっているので、その辺りに興味のある方は是非読んでみてください。


<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4309252184/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51FgagbhABL._SL160_.jpg" alt="感染地図―歴史を変えた未知の病原体" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4309252184/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">感染地図―歴史を変えた未知の病原体</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.12.05</div></div><div class="amazlet-detail">スティーヴン・ジョンソン <br />河出書房新社 <br />売り上げランキング: 427,250<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4309252184/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<blockquote>この物語には、致死的な細菌と、超成長する都市、そして天賦の才をもった二人の男という四つの主役が登場する。百五十年前のある一週間、底知れぬ恐怖と苦痛に見舞われたロンドン、ソーホーにあるブロードストリートでこの四つの主役たちは交差した。
（中略）
この本は、そうしたさまざまなベクトルの交差点が無数に存在する地図の話、知覚で把握出来ないことを道理で説明するために作られた地図の話である。</blockquote>

「感染地図」はアメリカのサイエンスジャーナリストであるスティーヴン・ジョンソンが、1854年ロンドンで発生したコレラ禍の拡大を止めるために奔走した医師ジョン・スノウと牧師ホワイトヘッドの1週間における戦いを、当時の証人による文献や現存する調査報告書など多くの資料をもとに小説仕立てに描いたドキュメンタリーです。したがって、登場人物のモノローグはすべて作者が当時の記録を元に作成したものですが、結果的にただ事実を追った記録文学ではなくエンターテイメント性の高い作品となっています。

とにかく読んでいてめちゃくちゃ面白い！

当時のロンドンは人口２５０万を超える大都市でしたが、公衆衛生という概念のないままに拡大した都市はまさにカオスと言った感じで、いたる所に汚物が散乱し悪臭にまみれた空間であったかが詳細な描画で臨場感たっぷりに描かれます。

<blockquote>八月の終わりの暑さと湿気にあたっては、ソーホーの汚水溜めや下水、工場や炉から立ちのぼる悪臭は避けようがなかった。においの一部は、都会のど真ん中だというのにあちこちにいる家畜から出ていた。
（中略）
きちんとした納屋などない環境で、本来は人間のための住居だったところが牛小屋にされ、一部屋に二十五頭から三十頭の牛がつめこまれていた。巻き上げ機で屋根裏部屋に運ばれ、乳を搾るとき以外は暗がりに押し込められている牛もいた。</blockquote>

カオス、カオスすぎる大都市ロンドン！

そんな中で発生したパンデミックは結果的に住民の一割が命を落とすという大災害となりました。
原因不明のまま隣人たちが次々と亡くなっていく、都市全体をある種終末論にもにた諦観が蓋う中敢然と立ち向かったのが本書の主人公、医師ジョン・スノウと牧師ホワイトヘッドです。

このジョン・スノウのキャラクターもぶっ飛んでいて、もともとは麻酔科医として名を上げた人なのですが、当時まだ確立していなかった麻酔技術を自らの体で試し、クロロホルムを吸い込んでは目覚めるまでの時間を測って身に付けたというとんでもない人物であったりもします。

そんなジョン・スノウやホワイトヘッドなどの様々な視点を切り替えながら、疫病がはびこる巨大都市の一週間が色鮮やに描かれます。

<h2>世界を変えた地図</h2>
<img src="http://shimz.me/blog/wp-content/uploads/2014/12/800px-Snow-cholera-map.jpg" alt="感染地図" width="400" height="391" class="aligncenter size-full wp-image-3900 border" />

当時はコレラの原因は「瘴気」だと考えられていました、つまり悪臭によってコレラは感染すると。
その説に異論を抱き独自の調査を行って飲料水媒介説にたどり着いたのがスノウだったのです。しかし、当然のことながらスノウの説はそう簡単には受け入れてもらえません。

そこでスノウは、コレラにて死亡した死者のデータを地図上に視覚化し自らの説を世間に訴えました。

これは原因不明の病に対してデータを収集し分析することで対抗する<a href="http://ja.wikipedia.org/wiki/%E7%96%AB%E5%AD%A6">疫学</a>の始まりでもあり、固定概念に対してデータを視覚化することで異を唱えた<a href="http://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%8A%E3%83%AA%E3%82%BA%E3%83%A0">データジャーナリズム</a>の先駆けだといわれています。

しかし、スノウの地図はその後の影響力の大きさゆえに一人歩きし、ある種のシンボルとして語られることになるのですが、実際にはスノウ以外にも様々な人の協力と活動によって行われたパラダイムシフトだったのです。

<h2>視覚化とCivic Hack</h2>
本書は、単にスノウとホワイトヘッドの活躍を描くのみで終わらず、後半では独自の都市論とともにデータビジュアライゼーションなどの観点から、スノウとホワイトヘッドが作りだした地図の分析と、この地図が社会に与えた影響も明らかにしていきます。
<blockquote>ウィリアム・ファーの死亡週報からドットマップを作るだけなら、だれにだってできただろう。だがスノウの地図には、二人のソーホー住人がひたすら近所を訪ねあるき、とっくに脱出してしまった人まで追いかけて集めた情報が入っている。人口統計データだけに基づいて地図を作ったなら、公衆衛生局の視点から見た地図で終わっていただろう。しかし、地元に精通していたホワイトヘッドの知識が加わったスノウの地図は、住民の実際の生活を投影していた。<strong>この地図は、方法論としての地図化と新しい情報デザインの採用に加えて、地域社会の強みを浮き彫りにしたところに独創性があった。</strong>
（中略）
スノウの地図は、彼自身が望んだほど直接的な影響力はなかったかもしれないが、その後の文化の中でさまざまに語り継がれる影響力を持っていた。コレラ菌がそうだったように、スノウの地図もまた人間を通じて自身を繁殖させたのだ。
</blockquote>
どんな情報を掲載しどんな情報をそぎ落とすか表現方法の選択はデータの視覚化にはとても重要な要素ではあるのですが、それ以上にそもそものどんな情報を集めるかがいかに大事かということが見て取れます。地域社会に根付いて活動していたホワイトヘッドがいたからこそ、スノウの地図はそれまでの固定観念を打ち砕くことができたのでした。

当時のスノウは、主流の科学者や医師からみればとても異端な存在でした。

統計学者としても有名な、かのナイチンゲールでさえ「瘴気説」には疑いを抱いていなかったということですから、それらがどれほど強固な固定概念だったかがわかります。固定概念に囚われていた行政を動かしたのはホワイトヘッドによって集められた市民のデータと、スノウの手によって作られた優れた視覚化地図だったのです。

スノウたちの活動は、まさに「Civic Hack」と呼ばれるもでした。

<h2>民主化された地図</h2>
最後の章では、現代において地図システムや市民ボランティアによるデータの提供などが災害時に以下に重要かが様々な事例とともに語られます。
<blockquote>
ブロード・ストリート・マップの波紋は、病気の領域をとっくに超えている。グーグルアースやヤフーマップなどのサービスのおかげで、ウェブ上には素人地図製作者による新しい形の地図があふれかえっている。スノウが街路図の上にポンプと死者の出た場所をマークしたように、今日の地図製作者は評判のいい公立高校、お勧めの中華惣菜店や遊園地、同性愛者向けのバー、見学自由の売却予定の家などの場所にマークをつける。近隣の人しか知らないはずの情報が、いまや地図の形で世界中に知らされるのだ。一八五四年のときのように、地元に精通している素人の方がすばらしい地図を作ることができる時代になった。
（中略）
こうしたすばらしい最新ツールはどれも、ブロード・ストリートの調査とその地図の子孫だ。
</blockquote>

オープンな地理システムや、市民自身が行政が提供する様々な計画に参加し地域全体に貢献していると実感をもてるようにするシステムや活動などスノウの感染地図の子孫と言うべきツールがいかに重要で可能性に満ちた物であるか、本書の中で紹介される多数の事例を読むと期待を抱かざるおえません。

<h2>総括</h2>
ここ数年間、私が興味を持っていたもの全てが詰まった本だっただけに熱くなってしましいましたが、とにかく「<a href="http://ja.wikipedia.org/wiki/%E5%8F%AF%E8%A6%96%E5%8C%96">データビジュアライゼーション</a>」「<a href="http://ja.wikipedia.org/wiki/%E5%9C%B0%E7%90%86%E6%83%85%E5%A0%B1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0">GIS</a> & <a href="http://d.hatena.ne.jp/wata909/20131203">FOSS4G</a>」「Civic Hack」など、私と興味の方向性が似ている方にはたまらない一冊になっています。

単純に読み物としてもスリリングで、パンデミックを扱ったパニック小説としても楽しんで読める作品なので、とにかくと・に・か・く！お勧めですよ！

<h2>関連資料</h2>
<h3>作者講演</h3>
作者スティーヴン・ジョンソンがTEDにて行った感染地図に関する講演です。
日本語字幕付き。
[ted id=61 lang=ja]

<h3>ガーディアン紙による特集</h3>
データジャーナリズムへの取り組みに力を入れていることで有名なガーディアン紙のDATA BLOGでも「ジョン・スノウのデータジャーナリズム: 世界を変えたコレラ地図」というジョンスノウに関する特集記事が掲載されています。

<a href="http://www.theguardian.com/news/datablog/2013/mar/15/john-snow-cholera-map">John Snow's data journalism: the cholera map that changed the world</a>

<h3>他の参考図書</h3>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4535585415/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51m9xjRf9mL._SL160_.jpg" alt="医学探偵ジョン・スノウ―コレラとブロード・ストリートの井戸の謎" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4535585415/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">医学探偵ジョン・スノウ―コレラとブロード・ストリートの井戸の謎</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.12.06</div></div><div class="amazlet-detail">サンドラ ヘンペル <br />日本評論社 <br />売り上げランキング: 443,264<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4535585415/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3880</wp:post_id>
		<wp:post_date>2014-12-06 12:22:39</wp:post_date>
		<wp:post_date_gmt>2014-12-06 03:22:39</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3880</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datavis"><![CDATA[datavis]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3897]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_daf69742e1b305982b628f4796dad389</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe src="https://embed-ssl.ted.com/talks/lang/ja/steven_johnson_tours_the_ghost_map.html" width="546" height="307" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_daf69742e1b305982b628f4796dad389</wp:meta_key>
			<wp:meta_value><![CDATA[1417755429]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_21f70502565967eb22d94d9474c799af</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe src="https://embed-ssl.ted.com/talks/lang/ja/steven_johnson_tours_the_ghost_map.html" width="500" height="281" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_21f70502565967eb22d94d9474c799af</wp:meta_key>
			<wp:meta_value><![CDATA[1418885926]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9d475745afece2f686cc6210f0520728</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe src="https://embed-ssl.ted.com/talks/lang/ja/steven_johnson_tours_the_ghost_map.html" width="580" height="326" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_9d475745afece2f686cc6210f0520728</wp:meta_key>
			<wp:meta_value><![CDATA[1418932711]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427358806;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4015;}i:1;a:1:{s:2:"id";i:3178;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[32.081049644123]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[iPhone]いつでも、どんなアプリにもスニペット(定型文)を呼び出して貼付けられるカスタムキーボード「Snipboard」</title>
		<link>http://shimz.me/blog/iphoneipad/3883</link>
		<pubDate>Thu, 04 Dec 2014 23:00:41 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3883</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://itunes.apple.com/jp/app/snipboard-keyboard-for-custom/id918395402?mt=8&uo=4&at=10lMp5" target="itunes_store"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/screen322x572.jpeg" alt="Snipboard" width="322" height="572" class="aligncenter size-full wp-image-3896" /></a>

<blockquote>Snipboardは、あなた自身のスニペットをフルに利用できるカスタムキーボードです。電子メール、アドレス、署名、またはテキストの任意の部分、あなたの指先で、何度も何度も入力する必要はありません。</blockquote>

登録した定型文をタップするだけで、あらゆる場所に張り付けられるシンプルなスニペット機能を搭載したカスタムキーボードです。
長文や改行、絵文字を使った文章も登録できるのでユーザー辞書より少しだけ便利かもしれません。
スニペットをカテゴライズして管理するなどの機能はないので、登録した定型文の数が増えてくると管理が大変かもしれませんが、十分実用的で今後のアップデートに期待が募るアプリです。

<h2>インストールと初期設定</h2>

Appストアよりダウンロード/インストールしてください。

<a href="https://itunes.apple.com/jp/app/snipboard-keyboard-for-custom/id918395402?mt=8&uo=4&at=10lMp5" target="itunes_store" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a>


インストールが終わったら、iPhone設定画面からカスタムキーボードとして「Snipboard」を登録します。
「一般」→「キーボード」→「キーボード」→「新しいキーボードを追加...」→「Snipboard」を追加する

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/snipboard2.png" alt="snipboard" width="263" height="467" class="alignnone size-full wp-image-3892" />

追加された「Snipboard - Snipboard」をタップし、フルアクセスを許可します。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/snipboard3.png" alt="snipboard" width="263" height="467" class="alignnone size-full wp-image-3895" />

参考：
<a href="http://www.b-chan.jp/entry/iPhone/keyboard-full-access">iPhoneで他社製キーボードのフルアクセスを許可すると個人情報が送信されるという誤解</a>

<h2>定型文の登録</h2>
Snipboardアプリを起動し定型文を登録します。
アプリ右上の緑色の＋ボタンから定型文の追加が行えます。
デフォルトでいくつか英語の定型文(操作方法)が登録されていますが、削除してしまってもかまいません。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/snipboard0.png" alt="snipboard" width="263" height="467" class="alignnone size-full wp-image-3890 border" />

<h2>使い方</h2>
文字入力の際にキーボードが表示されたら「キーボード切換えボタン」を押してSnipboardを表示します。
デフォルトでは下記のような英字キーボードが表示されるので、キーボード上で左にスワイプしてスニペット画面を表示します。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/snipboard42.png" alt="snipboard" width="263" height="467" class="alignnone size-full wp-image-3894 border" />

スニペットを選んでタップすると、定型文が貼付けけされます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/snipboard1.png" alt="snipboard" width="263" height="467" class="alignnone size-full wp-image-3891 border" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3883</wp:post_id>
		<wp:post_date>2014-12-05 08:00:41</wp:post_date>
		<wp:post_date_gmt>2014-12-04 23:00:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3883</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3896]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427388759;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2519;}i:1;a:1:{s:2:"id";i:1443;}i:2;a:1:{s:2:"id";i:1561;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[26.715069411379]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]Formコンポーネント入門</title>
		<link>http://shimz.me/blog/webix/3902</link>
		<pubDate>Mon, 08 Dec 2014 06:16:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3902</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/12/webform141208.jpg" alt="web formコンポーネント" width="349" height="466" class="aligncenter size-full wp-image-3903 border" />

<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> ８日目の記事です。

間が少し空きましたが、今回はFormコンポーネントを使ってみます。
Webixのフォーム昨日は、他のコンポーネントにデータを束縛して連動させたり、変更内容から差分だけを取り出すなど様々な機能があるのですが、とりあえず基本的なところだけを。
いづれまた詳しい内容を掲載するつもりです。

<h2>基本</h2>
ログインフォームを作ります。
基本的には、Webixのレイアウトシステムに合わせた形でFormパーツを設置していくだけです。
formビューのelemetsの中にパーツを設置していくことで、入力された値の取得などが簡単に行えます。 
<pre class="lang:js decode:true " >webix.ui({
    view:"form", 
    id:"log_form",
    width:300,
    elements:[
        { view:"text", label:"メール"},	// input text 
        { view:"text", type:"password", label:"パスワード"}, // input password
        { margin:5,
			cols:[
				//ボタン
				{ view:"button", value:"ログイン" , type:"form" },
				{ view:"button", value:"キャンセル" }
			]
		}
    ]
});</pre> 

<iframe width="400" height="200" scrolling="no" src="http://shimz.me/example/webix/form/login/"></iframe>

<a href="http://shimz.me/example/webix/form/login/">example</a>

<h2>パーツ</h2>
Webixにはデータピッカーやカラーピッカーなどのコンポーネントが用意されていて、簡単に扱うことができます。 
<pre class="lang:js decode:true " >webix.ui({ view:"form",width:300,
	elements:[
		{rows:[
			{
				rows:[
					{view:"text", label:"テキスト"},
					{view:"checkbox", label:"チェックボックス" ,labelWidth:110},
					{ view:"radio", name:"gender", label:"ラジオボタン", labelWidth:110,
						value:"man", //初期選択値
						options:[	//選択肢
							{ value:"男", id:"man" },
							{ value:"女", id:"woman" }
						]
					},				
					{ view:"select", name: "country", label:"セレクトボックス",
						options:[
							{ value:"日本", id: "JP" },
							{ value:"アメリカ", id: "US" },
							{ value:"イタリア", id: "IT"},
							{ value:"ドイツ", id: "DE"},
						]
					},
					{view:"datepicker", label:"日時"},
					{ view:"colorpicker", label:"カラー", name:"color", value:"#ffaadd" },
					{ view:"counter", label:"スピンボックス", align:"center",  labelWidth:110},
					{ view:"textarea" , height:100, label:"テキストエリア", labelPosition:"top" }
				]
			},
			{view:"button", value:"ボタン"}
		]},
	]
});</pre> 

<iframe width="100%" height="420" scrolling="no" src="http://shimz.me/example/webix/form/parts/"></iframe>

<a href="http://shimz.me/example/webix/form/parts/">example</a>

<h2>入力値を取得</h2>
webixのセレクション($$)にてフォーム要素を指定し、getValuesメソッドを実行することで、フォームに入力されたデータを取得することができます。
 <pre class="lang:js decode:true " >//ボタンクリック時のコールバック
var preview = { 
    "onItemClick":function(e, id, trg){
		var formData = $$("my_form").getValues();//フォームの値を取得
        alert(JSON.stringify(formData)); 
    }
}

//入力フォームレイアウト	
webix.ui({
    view:"form", 
    id:"my_form",
    width:300,
    elements:[
        { view:"text", name:"name", label:"名前"},	 
        { view:"text", name:"mail", label:"メール"},
		{ view:"radio", name:"gender", label:"性別",
			value:"man", //初期選択値
			options:[	//選択肢
				{ value:"男", id:"man" },
				{ value:"女", id:"woman" }
			]
		},
		{ view:"select", name: "country", label:"国",
			options:[
				{ value:"選択してください", id: ""},
				{ value:"日本", id: "JP" },
				{ value:"アメリカ", id: "US" },
				{ value:"イタリア", id: "IT"},
				{ value:"ドイツ", id: "DE"}
			]
		},
        { margin:5,
			cols:[
				//ボタン
				{ view:"button", value:"入力値を表示", on:preview }
			]
		}
        ]
});</pre> 

<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/webix/form/getValue/"></iframe>

<a href="http://shimz.me/example/webix/form/getValue/">example</a>

<h2>値を反映する</h2>
編集画面などでは、すでに設定されている値を入力フォームに反映する必要がありますが、WebixではsetValuesメソッドを実行するだけで簡単に値を入力フォームに反映できます。
セレクトボックスやラジオボタンの選択なども自動的に反映してくれます。 
<pre class="lang:js decode:true " >//フォームに反映するデータ	
var data = {
		"name": "GUNMA GIS GEEK",
		"mail": "hoge@hoge.me",
		"gender": "woman",
		"country": "IT"
	}	


//ボタンクリック時のコールバック	
var setData = { 
    "onItemClick":function(e, id, trg){
		$$("log_form").setValues(data); //フォームに値を反映する
    }
}

//入力フォームレイアウト	
webix.ui({
    view:"form", 
    id:"log_form",
    width:300,
    elements:[
        { view:"text", name:"name", label:"名前"},	 
        { view:"text", name:"mail", label:"メール"},
		{ view:"radio", name:"gender", label:"性別",
			value:"man", //初期選択値
			options:[	//選択肢
				{ value:"男", id:"man" },
				{ value:"女", id:"woman" }
			]
		},
		{ view:"select", name: "country", label:"国",
			options:[
				{ value:"日本", id: "JP" },
				{ value:"アメリカ", id: "US" },
				{ value:"イタリア", id: "IT"},
				{ value:"ドイツ", id: "DE"},
			]
		},
        { margin:5,
			cols:[
				//ボタン
				{ view:"button", value:"データを反映", on:setData }
			]
		}
        ]
});</pre> 

<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/webix/form/setValue/"></iframe>

<a href="http://shimz.me/example/webix/form/setValue/">example</a>

<h2>備考</h2>
公式のドキュメントは以下より。

<a href="http://docs.webix.com/desktop__form.html">document</a>
<a href="http://docs.webix.com/samples/13_form/index.html">sample</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3902</wp:post_id>
		<wp:post_date>2014-12-08 15:16:34</wp:post_date>
		<wp:post_date_gmt>2014-12-08 06:16:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3902</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3903]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427198839;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3909;}i:1;a:1:{s:2:"id";i:3907;}i:2;a:1:{s:2:"id";i:3870;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-24.063871981232]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]サイドメニュー</title>
		<link>http://shimz.me/blog/webix/3907</link>
		<pubDate>Tue, 09 Dec 2014 05:35:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3907</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/webix/sidemenu/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/webix141209.jpg" alt="webix サイドメニュー" width="590" height="370" class="alignnone size-full wp-image-3908" /></a>

<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> ９日目の記事です。

今回は管理画面などでよくつかわれるサイドメニューを作ってみます。
Webixでサイドメニューを作成するのはひじょうに簡単で<a href="http://shimz.me/blog/webix/3874">Listコンポーネント</a>を少しカスタマイズするだけで作成できます。

<h2>サンプル</h2>

<iframe width="100%" height="400" scrolling="no" src="http://shimz.me/example/webix/sidemenu/01/"></iframe>

<a href="http://shimz.me/example/webix/sidemenu/01/">example</a>
 
<pre class="lang:js decode:true " >//メニューデータ
var menuList = [
	{title:"メニュー１", targetView: "mv1"},	//title:メニュー名, targetView:対象とするmainView
	{title:"メニュー２", targetView: "mv2"},
	{title:"メニュー３", targetView: "mv3"},
	{title:"メニュー４", targetView: "mv4"},
	{title:"メニュー５", targetView: "mv5"}
];

//サイドメニュ―要素
var sideMenu = {
	header:"Menu",	//リストビューにヘッダを付ける
	body:{
		view:"list",
		width:300,
		template:"#title#", 
		select:"select",	//セレクト可に設定	
		on:{
			onAfterSelect:function(id){	//リスト選択後に発火するイベント
				var targetView = this.getItem(id).targetView; //選択されたitemのtagetViewを取得
				$$(targetView).show();	//対象となるmainViewを表示
			}
		},
		data:menuList,	//メニューデータを反映
	}
};

//メインビュー要素
var meinView = {
	//animate:{type:"flip", subtype:"vertical"}, //切り替え時のアニメーション指定
	cells:[
	{id:"mv1", template:"&lt;h1&gt;Main View 1&lt;/h1&gt;"},
	{id:"mv2", template:"&lt;h1&gt;Main View ２&lt;/h1&gt;"},
	{id:"mv3", template:"&lt;h1&gt;Main View ３&lt;/h1&gt;"},
	{id:"mv4", template:"&lt;h1&gt;Main View ４&lt;/h1&gt;"},
	{id:"mv5", template:"&lt;h1&gt;Main View ５&lt;/h1&gt;"},
]};


//レイアウト指定
webix.ui({
	rows:[
		{template:"header", css: "bkbg", height:35 },
		{cols:[sideMenu, meinView]}	,
		{template:"fotter", css:"bkbg", height:35 },
	]
});
</pre> 

基本的にはリストビューにonプロパティを設定しクリックされた際にtagetViewの値で指定されたidのメインビューを開いているだけです。
webixではコンポーネントにidを指定すれば、$$("id名")でコンポーネントを選択し操作することができます。（HTML要素のid属性とは別のものなので注意）
今回の場合mainViewとして五つのtemplateコンポーネントをcellsに配列として渡しています。cellsに渡されたコンポーネントは画面初期表示時にはcells[0]のコンポーネントだけが表示されます。
$("id名").show()でcellsの中身を入れ替えることができます。

 
<pre class="lang:js decode:true " title="例" >$$("mv3").show(); //id:mv3のコンポーネントが表示される</pre> 


<h2>複雑な例</h2>
Webixのレイアウトシステムと組み合わせれば、下記のような複雑な配置も簡単に設定することができます。
<iframe width="100%" height="500" scrolling="no" src="http://shimz.me/example/webix/sidemenu/02/"></iframe>

<a href="http://shimz.me/example/webix/sidemenu/02/">example</a>

 
<pre class="lang:js decode:true " >/** サイドメニューデータ *************************************/
var a_List = [
	{title:"メニュー１", targetView: "a_mv1"},	
	{title:"メニュー２", targetView: "a_mv2"},
	{title:"メニュー３", targetView: "a_mv3"}
];

var b_List = [
	{title:"メニュー１", targetView: "b_mv1"},
	{title:"メニュー２", targetView: "b_mv2"},
	{title:"メニュー３", targetView: "b_mv3"}
];


/** メインビュー *************************************/
var a_view = {
	animate:{type:"flip", subtype:"vertical"}, //切り替え時のアニメーション指定
	cells:[
	{id:"a_mv1", template:"<h1>A Main View 1</h1>"},
	{id:"a_mv2", template:"<h1>A Main View ２</h1>"},
	{id:"a_mv3", template:"<h1>A Main View ３</h1>"}
]};

var b_view = {
	animate:{type:"flip", subtype:"horizontal"}, //切り替え時のアニメーション指定
	cells:[
	{id:"b_mv1", template:"<h1>B Main View 1</h1>"},
	{id:"b_mv2", template:"<h1>B Main View ２</h1>"},
	{id:"b_mv3", template:"<h1>B Main View ３</h1>"}
]};


/** サイドメニュービュー *************************************/
var sideMenu = {
	body:{
		view:"list",
		template:"#title#",
		autoheight:true,
		select:"select",	//セレクト可に設定	
		on:{
			onAfterSelect:function(id){	//リスト選択後に発火するイベント
				var targetView = this.getItem(id).targetView; //選択されたitemのtagetViewを取得
				$$(targetView).show();	//対象となるmainViewを表示
			}
		}
	},
};

//メニューオブジェクトをコピー
var a_sideMenu = webix.copy(sideMenu);
var b_sideMenu = webix.copy(sideMenu);

a_sideMenu.header = "A MENU";	//メニューヘッダー設定
a_sideMenu.body.data = a_List;	//メニューデータを適用
b_sideMenu.header = "B MENU";
b_sideMenu.body.data = b_List;



/** レイアウト指定 *************************************/
webix.ui({
	rows:[
		{template:"header", css: "bkbg", height:35 },
		{
			type:"space",
			cols:[
			   {rows:[a_sideMenu, a_view]},
			   {rows:[b_view, b_sideMenu]},
			]
		},
		{template:"fotter", css:"bkbg", height:35 },
	]
});
</pre> 


 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3907</wp:post_id>
		<wp:post_date>2014-12-09 14:35:44</wp:post_date>
		<wp:post_date_gmt>2014-12-09 05:35:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3907</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3908]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427198379;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3785;}i:1;a:1:{s:2:"id";i:3874;}i:2;a:1:{s:2:"id";i:3909;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-29.89335565996]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]コンポーネント間のデータバインディング入門</title>
		<link>http://shimz.me/blog/webix/3909</link>
		<pubDate>Wed, 10 Dec 2014 07:27:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3909</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> １０日目の記事です。

これまで、<a href="http://shimz.me/blog/webix/3874">Listコンポーネントの作成</a>や、<a href="http://shimz.me/blog/webix/3902">Formコンポーネントを使い方</a>を掲載してきましたが、本日はこの二つのコンポーネント間でデータを束縛し、片方で行われた操作がもう一方のコンポーネントに反映されるようにしてみます。

Webixでは簡単にコンポーネント同士を結びつけることができます。

<h2>リストとフォームの相互作用</h2>
リストを選択すると選択されたアイテムのデータがフォームに反映され編集できるように、またアイテムが選択されていない際にはフォームに入力されたデータが新規アイテムとしてリストに追加されるという相互作用の仕組みを作成します。

<iframe width="400" height="500" scrolling="no" src="http://shimz.me/example/webix/dataBinding/Lsit_Form/"></iframe>

<a href="http://shimz.me/example/webix/dataBinding/Lsit_Form/">example</a>

 
<pre class="lang:js decode:true " >	
/*** リストコンポーネント***********************************************/	
var LISTDATA = [
	{last_name:"清水", first_name: "正行", gender:"man" },
	{last_name:"山田", first_name: "花子", gender:"woman" },
	{last_name:"鈴木", first_name: "士郎", gender:"man"  }
];

//アイテム選択を外す処理
var list_unselect = "$$('list_comp').unselectAll()";

var list_component = {
	rows:[
		{ view:"button", value:"選択しない", click:list_unselect},
		{
			id: "list_comp",
			view: "list",
			template:"#last_name# #first_name# - {common.itemGender()}",
			select: true,
			type:{
				itemGender:function(obj){
					switch (obj.gender) {
						case "man":  return "男"; break;
						case "woman": return "女"; break;							
					}
				}
			},
			data:LISTDATA
		}
	]
};


/*** フォームコンポーネント***********************************************/	
var form_save = "if($$('form_comp').isDirty()) $$('form_comp').save();";
var form_clear = "$$('form_comp').clear();";

var form_component = {
	id:"form_comp",
	view:"form",
	elements:[
		{ view:"text", name:"last_name", label:"苗字"},
		{ view:"text", name:"first_name", label:"名前"},
		{ view:"radio", name:"gender", label:"性別",
			value:"man", //初期選択値
			options:[	//選択肢
				{ value:"男", id:"man" },
				{ value:"女", id:"woman" }
			]
		},
		{cols:[
			{ view: "button", label:"保存する", type:"form", click:form_save },
			{ view: "button", label:"クリア", click:form_clear },
		]}
	]
};

/*** レイアウト***********************************************/	
webix.ui({
	rows:[
		list_component,
		form_component
	] 
});


/*** データバインディング***********************************************/
$$('form_comp').bind($$('list_comp'));
</pre> 

<h2>束縛</h2>
コンポーネント同士を結びつけるのは下記のたった一行ですみます。
 
<pre class="lang:js decode:true " >$$('form_comp').bind($$('list_comp'));</pre> 

これだけで、リスト上でアイテムを選択した際にフォームにデータが反映され、フォーム側では、
 
<pre class="lang:js decode:true " >$$('form_comp').save();</pre> 

上記メソッドを実行するだけでアイテムデータの編集／追加がリストへ反映されます。

<h2>備考</h2>
Webixには他にも便利なコンポーネント間のデータバインディングやシンク(同期)の仕組みがありますので、興味のある方は下記ドキュメントをご覧ください。

<a href="http://docs.webix.com/desktop__data_binding.html">Data Binding and Syncing</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3909</wp:post_id>
		<wp:post_date>2014-12-10 16:27:54</wp:post_date>
		<wp:post_date_gmt>2014-12-10 07:27:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3909</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3910]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427317586;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3907;}i:1;a:1:{s:2:"id";i:3902;}i:2;a:1:{s:2:"id";i:3874;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-8.5445261604566]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]Skinを使ってコンポーネントのデザインを変更・カスタマイズする</title>
		<link>http://shimz.me/blog/webix/3911</link>
		<pubDate>Thu, 11 Dec 2014 00:54:41 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3911</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> １１日目の記事です。

今日は軽めのネタです。

Webixはデフォルトでフラットデザインが採用されていますが、Skinを入れ替えることでコンポーネントのルックアンドフィール(見た目)を自在に変更することができます。初めから、いくつかのSkinが用意されているので読み込むcssファイルを変えるだけでまったく違った印象のデザインに変更できます。

<img src="http://shimz.me/blog/wp-content/uploads/2014/12/webix141211.jpg" alt="webix141211" width="590" height="355" class="aligncenter size-full wp-image-3912" />

公式サイトにSkinを使ったサンプルが公開されていますのでそちらをご覧ください。

<a href="http://docs.webix.com/samples/16_skins/index.html">Webix : Samples</a>

また、各Skinをカスタマイズするためのサービス「<a href="http://webix.com/skin-builder/">Webix Skin Builder</a>」が提供されています。
各Skinのカラーなどを簡単にカスタマイズすることができます。

<a href="http://webix.com/skin-builder/"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/webix141211skbilder.jpg" alt="Webix Skin Builder" width="590" height="334" class="aligncenter size-full wp-image-3913 border" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3911</wp:post_id>
		<wp:post_date>2014-12-11 09:54:41</wp:post_date>
		<wp:post_date_gmt>2014-12-11 00:54:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3911</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3913]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427199532;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3698;}i:1;a:1:{s:2:"id";i:3864;}i:2;a:1:{s:2:"id";i:3874;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-27.259500035575]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebixとD3.jsを使ってレスポンシブなグラフを作成する</title>
		<link>http://shimz.me/blog/d3-js/3935</link>
		<pubDate>Tue, 16 Dec 2014 04:54:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3935</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> １６日目の記事です。

今回はWebixにD3.jsを組み込んでグラフを表示します。

<a href="http://shimz.me/example/webix/d3/chart/"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/webixAndD3js141216.jpg" alt="webixAndD3js141216" width="590" height="309" class="aligncenter size-full wp-image-3936 border" /></a>

<a href="http://shimz.me/example/webix/d3/chart/">example</a>

コンポーネントとして表示したグラフはウインドウや境界線を移動した際に、自動的にコンポーネントのサイズにグラフがリサイズされます。

<h2>カスタムコンポーネント</h2>
WebixのコンポーネントとしてD3を利用できるカスタムコンポーネントを作成します。カスタムコンポーネントの作り方についてはまた別途説明するので、今回は下記コードを保存しWebixライブラリとともに外部ファイルとして読み込んでください。
 
<pre class="lang:js decode:true " title="d3-chart.js" >webix.protoUI({
	name:"d3-chart",
	defaults:{
	},
	$init:function(){
		this._ready_awaits = 0;
		this.attachEvent("onAfterLoad", function(){
			if (this._ready_awaits == 2){
				if (this.config.ready){
					this.config.ready.call(this, this.data);
					this._ready_awaits = 3;
				}
			} else this._ready_awaits = 1;
		});

		webix.delay(webix.bind(this._render_once, this));
	},
	_render_once:function(){
		//ライブラリが読み込まれていない時の読み込み先を指定
		webix.require("d3.v3.min.js", function(first_init){

			if (this.config.init)
				this.config.init.call(this);
			if (this._ready_awaits == 1 &amp;&amp; this.config.ready){
				this.config.ready.call(this, this.data);
				this._ready_awaits = 3;
			} else 
				this._ready_awaits = 2;


  		}, this);
	},
	$setSize:function(x,y){
		if (webix.ui.view.prototype.$setSize.call(this,x,y)){
			if (this._ready_awaits == 3 &amp;&amp; this.config.resize){
				this.$view.innerHTML = "";
				this.config.ready.call(this, this.data);
			}
		}
	}
}, webix.AtomDataLoader, webix.EventSystem, webix.ui.view );</pre> 


<h2>サンプル</h2>

今回はD3ライブラリをwebixコンポーネントとは別に読み込みます。
(コンポーネント側で読み込むことも可能です)
 
<pre class="lang:xhtml decode:true " >&lt;script src="http:////cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js"&gt;&lt;/script&gt;
&lt;script src="http://shimz.me/libs/webix/codebase/webix.js"&gt;&lt;/script&gt;
&lt;script src="../d3-chart.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
webix.require.disabled = true; //ライブラリの自働読み込みを無効にする
&lt;/script&gt;</pre> 

<strong>■ 折れ線グラフを表示する</strong>
 
<pre class="lang:js decode:true " >var line_chart = {
	view:"d3-chart",
	resize:true,
	url:"../_data/test.json",
	ready:function(){
		var dataSet = this.data.test;
		//折れ線グラフを表示するエリアのマージン
		var margin = {
			top: 10, right: 40,
			bottom: 30, left: 80
		}		

		//折れ線グラフを表示するステージのサイズ
		var stageW = this.$width - margin.left - margin.right;
		var stageH = this.$height - margin.top - margin.bottom;

		//ステージ追加
		var svg = d3.select(this.$view)
			.append("svg")
			.attr({
				"width": this.$width,
				"height": this.$height
			});
		
		//svg要素の中にg(グループ)要素を追加	
		var stage = svg.append("g") 
			.attr("transform", "translate(" + [margin.left, margin.top] + ")");

		//スケール設定
		var xScale = d3.scale.linear().range([0, stageW]);
		var yScale = d3.scale.linear().range([stageH, 0]);

		//スケールのドメイン範囲を設定(手抜き)
		xScale.domain([2000, 2014]);
		yScale.domain([0, 150000]);
		
		//ライン描画関数を作成
		var valueLine = d3.svg.line()
			.x(function(d){ return xScale(+d['year']) })
			.y(function(d){ return yScale(+d['count']) })
		
		//折れ線グラフを描画
		stage.append("path")
			.attr({
				"d": valueLine(dataSet),
				fill: "none",
				stroke: "blue",
				"stroke-width": 2
			});
			
		//x軸の目盛りを描画
		var xAxis = d3.svg.axis().scale(xScale).orient('bottom')
		.ticks(10)
		.tickFormat(d3.format("0f"))
		.innerTickSize(-stageH)  // 目盛線の長さ（内側）
		.outerTickSize(0) // 目盛線の長さ（外側）
		.tickPadding(10); // 目盛線とテキストの間の長さ		
		
		stage.append("g")
			.attr({
				"class": "x axis",
				"transform": "translate("+[0, stageH]+")",
			})			
			.call(xAxis);			

		//y軸の目盛りを描画
		var yAxis = d3.svg.axis().scale(yScale)
		.orient('left')
		.ticks(10)
		;
		stage.append("g")
			.attr({
				"class": "y axis",
			}).call(yAxis);
			
	}

}	</pre> 

<strong>■ 円グラフを表示する</strong>
 
<pre class="lang:js decode:true " >var pie_chart = {
	view:"d3-chart",
	resize:true,
	url:"../_data/test.json",
	ready:function(){
		var colorScale = d3.scale.category10();
		var dataSet = this.data.test;
		//折れ線グラフを表示するエリアのマージン
		var margin = {
			top: 10, right: 10,
			bottom: 10, left: 10
		}		

		//折れ線グラフを表示するステージのサイズ
		var stageW = this.$width - margin.left - margin.right;
		var stageH = this.$height - margin.top - margin.bottom;
		var r = (stageW &gt; stageH) ? Math.floor(stageH/2) : Math.floor(stageW/2);

		//ステージ追加
		var svg = d3.select(this.$view)
			.append("svg")
			.attr({
				"width": this.$width,
				"height": this.$height
			});
		


		var arcsGroup = svg
			.data([dataSet])   //pieで変換するために要素１の配列としてデータを渡す
			.append("svg:g")
			.attr("transform", "translate(" + Math.floor( this.$width/2) + "," + Math.floor( this.$height/2) + ")")
	 
		var pie = d3.layout.pie().value(function(d) {console.log(d); return +d.count; });        
		var arc = d3.svg.arc().outerRadius(r).innerRadius(Math.floor(r/2));
	 
		var sliceGroup = arcsGroup.selectAll("g.slice")     
			.data(pie)
			.enter()
			.append("svg:g")
			.attr("class", "slice");
		   
		var slicePaths = sliceGroup.append("svg:path")
			.attr({
				fill: function(d, i){ return colorScale(i); },
				stroke:"white",
				d: arc
			});	
			
	}

}	</pre> 


<strong>■ レイアウト</strong>
 
<pre class="lang:js decode:true " >webix.ui({
    id:"layout", 
    rows:[
        {template:"header", height:40}, 
		{view:"resizer"},
        { cols:[
            line_chart,  //折れ線グラフを表示
			{view:"resizer"},
            pie_chart	//円グラフを表示
        ]},
		{view:"resizer"},
		{template:"fotter", height:40}
    ]
});
</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3935</wp:post_id>
		<wp:post_date>2014-12-16 13:54:31</wp:post_date>
		<wp:post_date_gmt>2014-12-16 04:54:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3935</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3936]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427284507;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3937;}i:1;a:1:{s:2:"id";i:3939;}i:2;a:1:{s:2:"id";i:3319;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-2.8469270093463]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Webix]HTML要素にWebixコンポーネントを埋め込む</title>
		<link>http://shimz.me/blog/webix/3937</link>
		<pubDate>Wed, 17 Dec 2014 01:00:30 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3937</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> ３日目の穴埋め記事です。

WebixではUIをすべてJavaScriptで作成する以外に、HTML要素(主にdiv)を元にコンポーネントを埋め込んで画面を作成することができます。
画面内の一部の要素にWebixをコンポーネントを使用したい場合に便利です。

<h2>サンプル</h2>
カレンダーコンポーネントとチャートコンポーネントをdiv要素を元に表示します。
<a href="http://shimz.me/example/webix/html/01/"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/webix141217.jpg" alt="webix div layout" width="590" height="368" class="aligncenter size-full wp-image-3938 border" /></a>

<a href="http://shimz.me/example/webix/html/01/">example</a>
 
<pre class="lang:xhtml mark:23,25 decode:true " title="html" >&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;link rel="stylesheet" href="http://shimz.me/libs/webix/codebase/webix.css" type="text/css" charset="utf-8"&gt;
	&lt;script src="http://shimz.me/libs/webix/codebase/webix.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
	&lt;style&gt;
	#chart {
		position: absolute;
		top:10px;
		left: 10px;
		width:600px;
		height: 250px;
		margin: 20px;
	}
	#calendar {
		position: absolute;
		top:300px;
		left: 650px;
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div id="calendar"&gt;&lt;/div&gt;

	&lt;div id="chart"&gt;&lt;/div&gt;


&lt;/body&gt; 
&lt;/html&gt;</pre> 

コンポーネントをHTML要素に結びつけるのにはcontainerプロパティを使用します。
束縛したいHTML要素のID属性値を指定すればコンポーネントが埋め込まれます。
 
<pre class="lang:js mark:3,28 decode:true " title="javascript" >//カレンダーコンポーネントをdiv#calendarに埋め込む	
webix.ui({
	container:"calendar",
	view:"calendar",
	weekHeader:true,
	date:new Date(2012,3,16),
	events:webix.Date.isHoliday,
	timepicker:true
});
	

//chartview用データセット
var dataset = [
	{ id:1, sales:20, year:"02"},
	{ id:2, sales:55, year:"03"},
	{ id:3, sales:40, year:"04"},
	{ id:4, sales:78, year:"05"},
	{ id:5, sales:61, year:"06"},
	{ id:6, sales:35, year:"07"},
	{ id:7, sales:80, year:"08"},
	{ id:8, sales:50, year:"09"},
	{ id:9, sales:65, year:"10"},
	{ id:10, sales:59, year:"11"}
];

//チャートコンポーネントをdiv#chartに埋め込む	
webix.ui({
	container:"chart",
	view:"chart",
	type:"line",
	value:"#sales#",
	item:{
		borderColor: "#1293f8",
		color: "#ffffff"
	},
	line:{
		color:"#1293f8",
		width:3
	},
	xAxis:{
		template:"'#year#"
	},
	offset:0,
	yAxis:{
		start:0,
		end:100,
		step:10,
		template:function(obj){
			return (obj%20?"":obj)
		}
	},
	data: dataset
});
	</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3937</wp:post_id>
		<wp:post_date>2014-12-17 10:00:30</wp:post_date>
		<wp:post_date_gmt>2014-12-17 01:00:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3937</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3938]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427287552;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3785;}i:1;a:1:{s:2:"id";i:3935;}i:2;a:1:{s:2:"id";i:3907;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-16.859628238285]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebixとD3.jsを使ってレスポンシブな地図を作成する</title>
		<link>http://shimz.me/blog/d3-js/3939</link>
		<pubDate>Wed, 17 Dec 2014 05:54:34 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3939</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://qiita.com/advent-calendar/2014/webix">Webix Advent Calendar 2014</a> １７日目の記事です。

<a href="http://shimz.me/blog/d3-js/3935">グラフ</a>に引き続き、WebixとD3を使ってレスポンシブな地図を描画します。
コンポーネントとして表示した地図はウインドウや境界線を移動した際に、自動的にコンポーネントのサイズにグラフがリサイズされます。

<h2>サンプル</h2>
<a href="http://shimz.me/example/webix/d3/map/"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/webix1412171.jpg" alt="webix + D3 Responsive Map" width="590" height="286" class="aligncenter size-full wp-image-3940 border" /></a>

<a href="http://shimz.me/example/webix/d3/map/index.html">example</a>

<a href="http://shimz.me/blog/d3-js/3935">前回</a>作成したカスタムコンポーネントを使用します。

■ 地図を描画する
 
<pre class="lang:js mark:6,7,10 decode:true " >var japan_map = {
	view:"d3-chart", 
	resize:true,
	url:"http://shimz.me/example/d3js/_geodata/ken.geojson",
	ready:function(){
		var scale = Math.floor( (this.$width + this.$height) /2) ;//地図が収まるスケールを取得
		var regulate = 1.8; //スケールを調整
		var projection = d3.geo
			.mercator()		//投影法の指定
			.scale(scale * regulate)	//スケール（ズーム）の指定
			.translate([scale/2, scale/2]) //表示位置の指定
			.center([139.0032936, 36.3219088]); //中心の座標を指定

		//パスジェネレーター生成
		var path = d3.geo.path().projection(projection);　
		
		//コンポーネント内にsvgを埋め込む
		var svg = d3.select(this.$view)
			.append("svg")
			.attr({
				"width": this.$width,
				"height": this.$height
			});

		//地図を描画する	
		var map =  svg.append("svg:g")
			.selectAll("path")
			.data(this.data.features)
			.enter()
			.append("svg:path")
			.attr({
				"d": path,
				"fill": "green",
				"fill-opacity": 0.5,
				"stroke": "black"
			})

	}
}		
</pre> 
ポイントは６・７行目でのスケールの設定ぐらいです。
地形に合わせてregulateの値を調整してください。
日本のように縦に細長い地形だと、どうしてもコンポーネント内に余白ができてしまいます。この辺は、沖縄を移動して表示するなど試行錯誤する必要があります。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3939</wp:post_id>
		<wp:post_date>2014-12-17 14:54:34</wp:post_date>
		<wp:post_date_gmt>2014-12-17 05:54:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3939</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="webix"><![CDATA[webix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3940]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374430;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3935;}i:1;a:1:{s:2:"id";i:3698;}i:2;a:1:{s:2:"id";i:3720;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-0.55726754978673]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadの本格的な2Dゲーム開発環境「GamePress」</title>
		<link>http://shimz.me/blog/iphoneipad/3967</link>
		<pubDate>Tue, 23 Dec 2014 00:10:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3967</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://itunes.apple.com/jp/app/gamepress-create-share-play./id637370800?mt=8&uo=4&at=10lMp5" target="itunes_store">GamePress</a>は、物理演算、サウンドエフェクトエディター、パーティクルエディタなどゲーム開発に必要なツールを一通りそろえ、iPadのみでゲーム作成が行える本格的なゲーム開発環境です。アプリ内で開発したゲームをシェアする仕組みもあり、公開されているゲームを見る限りかなり複雑なゲームも作成されているようですが。（基本2Dのゲームになります)
詳しい作成方法については下記動画をご覧ください。

<iframe width="640" height="360" src="//www.youtube.com/embed/OZUNhviJLr8" frameborder="0" allowfullscreen></iframe>

基本的にはスプライトを設置し、ビヘイビアという動作などを付加する機能をペタペタ貼り付けていくだけでゲームが作成できます。
「サクサク簡単に…」とはいきませんが、YouTubeに公式チャンネルがありチュートリアル動画が公開されているので、そちらを見れば大体の作り方は学べるようになっています。

<a href="https://www.youtube.com/user/GamePressApp">GamePressApp - YouTube</a>

<a href="https://itunes.apple.com/jp/app/gamepress-create-share-play./id637370800?mt=8&uo=4&at=10lMp5" target="itunes_store" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a>

<h3>備考</h3>
同じデベロッパーから「<a href="https://itunes.apple.com/jp/app/hyperpad-interactive-app-maker/id886106438?mt=8&uo=4&at=10lMp5" target="itunes_store">hyperPad</a>」という開発環境が配布されていて、こちらの方がGamepPressより後発のプロジェクトになるようです。
こちらは、ゲーム開発環境というよりはハイパーカードに似たアプリ開発環境のようですが、開発したアプリをネイティブコードとしてエクスポートする機能があります。
公式のブログにGamePressで作成したゲームをhyperPadに移してネイティブコードとしてエクスポートする方法が掲載されています。

<a href="http://blog.gamepressapp.com/post/94022605630/moving-your-gamepress-game-to-hyperpad">GamePress — Moving your GamePress game to hyperPad</a>

最終的にはhyperPadに統合されるらしいのですが、今のところゲーム制作環境としてはGamePressの方がこなれていて、最初からついてくるリソースなども豊富です。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3967</wp:post_id>
		<wp:post_date>2014-12-23 09:10:49</wp:post_date>
		<wp:post_date_gmt>2014-12-23 00:10:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3967</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3968]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427377481;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3096;}i:1;a:1:{s:2:"id";i:3624;}i:2;a:1:{s:2:"id";i:2781;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[11.396899092747]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Visualization Japan meetup#2に参加しました。</title>
		<link>http://shimz.me/blog/map/3973</link>
		<pubDate>Fri, 26 Dec 2014 06:35:32 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3973</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2014/12/18551_normal_1418277833_dvj_cv2.jpg" alt="Data Visualization Japan meetup#2" width="714" height="264" class="aligncenter size-full wp-image-3975" />

<a href="http://data-visualization-japan.doorkeeper.jp/events/18551">Data Visualization Japan meetup#2 - Data Visualization Japan | Doorkeeper</a>


昨日行われた「Data Visualization Japan meetup#2」にて登壇させていただきました。
今回はD3からちょっと外れて、主に地理情報の視覚化をテーマにプレゼンを行ったのですが、椅子が足りなくなるほどの大盛況ということで緊張して、言おうとしていたことを一部忘れてたりとか内心いろいろあったのですが、まぁ、なんとかなったかな？と。

とりあえず、今回の経験の中で一番の学びは、

<strong>「円グラフは人を笑顔にする」</strong>

これですね(笑)

Facebookグループの方に、イベントの様子などを写した写真が掲載されいますのでイベントの雰囲気などを知りたい方はそちらい。特にアルタイムグラフィックレコーディングの画像は必見です！

<a href="https://www.facebook.com/groups/datavizjapan/">Data Visualization Japan</a>

プレゼンに使用したスライドは以下です。

<h2>スライド</h2>
<iframe width="100%" height="350" scrolling="no" src="http://shimz.me/slide/visualizing_japan_meetup2/#/"></iframe>
<a href="http://shimz.me/slide/visualizing_japan_meetup2/#/">たのしいジオビジュアライゼーション</a>


<h3>補足１ simtable</h3>
Simtableは、サンドテーブル(砂を敷き詰めた机)上に地理空間情報を投影するシステムです。単に映像を投影するだけでなく、砂上を赤外線でスキャンし高低差のデータを取得してシミュレートしたビジュアライゼーションを投影する仕組みだそうです。
公式サイトは以下。
<a href="http://www.simtable.com/">Simtable</a>
↓こちらの動画がわかりやすいです。
<iframe width="640" height="360" src="//www.youtube.com/embed/W-Pn-aV5DtE" frameborder="0" allowfullscreen></iframe>

<h3>補足２ 邪悪な地図</h3>
紹介した「How to Lie With Maps」はアマゾンで購入できます。
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534219/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51xCYJrVYKL._SL160_.jpg" alt="How to Lie With Maps" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534219/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">How to Lie With Maps</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.12.26</div></div><div class="amazlet-detail">Mark Monmonier <br />Univ of Chicago Pr (T) <br />売り上げランキング: 53,589<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534219/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<br />
日本語版はこちら。
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4794962185/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://shimz.me/blog/wp-content/uploads/2014/12/51Uv0ifqvfL._SL500_SY344_BO1204203200_.jpg" alt="地図は嘘つきである" style="border: none;width: 110px;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4794962185/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">地図は嘘つきである</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.12.26</div></div><div class="amazlet-detail">マーク モンモニア <br />晶文社 <br />売り上げランキング: 20,699<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4794962185/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
<br />
なお、余談ですが、著作のマーク・モンモニア氏は上記以外にも一風変わった視点から地図を分析した本を沢山出版されているので、興味ある方は是非。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534685/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41Hst8V8WVL._SL160_.jpg" alt="No Dig, No Fly, No Go: How Maps Restrict and Control" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534685/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">No Dig, No Fly, No Go: How Maps Restrict and Control</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.12.26</div></div><div class="amazlet-detail">Mark S. Monmonier <br />Univ of Chicago Pr (T) <br />売り上げランキング: 179,367<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534685/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>
<br />
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534197/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51lMqbug7pL._SL160_.jpg" alt="Cartographies of Danger: Mapping Hazards in America" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534197/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Cartographies of Danger: Mapping Hazards in America</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 14.12.26</div></div><div class="amazlet-detail">Mark Monmonier <br />Univ of Chicago Pr (Tx) <br />売り上げランキング: 210,717<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0226534197/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<h3>補足３ リソースの紹介</h3>
時間が押していたので端折った部分ですが、基本的には地図ライブラリ、ジオビジュアライゼーションライブラリとジオ系ブログの紹介になっています。

個人的には地図ライブラリとしては「<a href="http://cesiumjs.org/">cesium</a>」が今後注目かなと思っています。「Google Earth API」の廃止が決定されたので、そこに取って代わるかと。
ジオビジュアライゼーションライブラリとしては、「<a href="http://kartograph.org/">Kartograph</a>」が面白そうです。
ジオ系ブログに関しては、とりあえず「<a href="http://googlemapsmania.blogspot.jp/">Maps Mania</a>」を抑えておけば、ほぼ毎日話題のジオビジュアライゼーションが届きます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3973</wp:post_id>
		<wp:post_date>2014-12-26 15:35:32</wp:post_date>
		<wp:post_date_gmt>2014-12-26 06:35:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3973</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3975]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427308946;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4112;}i:1;a:1:{s:2:"id";i:2570;}i:2;a:1:{s:2:"id";i:3614;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[1.5533112832338]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ちびキャラがわらわらと動いて戦うステラテジーゲーム「タイニー軍団」</title>
		<link>http://shimz.me/blog/iphoneipad/3979</link>
		<pubDate>Fri, 02 Jan 2015 08:15:44 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3979</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/01/screen520x924.jpeg" alt="タイニー軍団" width="520" height="293" class="aligncenter size-full wp-image-3980" />

<a href="https://itunes.apple.com/jp/app/taini-jun-tuan/id550923627?mt=8&uo=4&at=10lMp5" target="itunes_store" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a>

諸事情により寝正月です。休み中にいろいろやりたいこともあったのですが、諸々あってゲームばかりやってます。
そんな中、サービス終了となった「<a href="http://shimz.me/blog/other/3493">ガルディアンズ</a>」に代わり心の隙間を埋めてくれた戦略ゲームが「タイニー軍団」です。
ぶっちゃけ、そんなに戦略性は高くないのですが、大量のちびキャラがわらわらと打つかっていく様は見ているだけでなかなか楽しいので暇にあかせて遊んでいます。スタミナの容量もかなり大きく(一日一回は無料で全回復できる)、あまり課金しなくても楽しめるのでお勧めです。
とりあえず、これと「<a href="https://itunes.apple.com/jp/app/terabatoru/id888628623?mt=8&uo=4&at=10lMp5" target="itunes_store">テラバトル</a>」をやっています。

<iframe width="560" height="315" src="//www.youtube.com/embed/Ms_XObVsXAw" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3979</wp:post_id>
		<wp:post_date>2015-01-02 17:15:44</wp:post_date>
		<wp:post_date_gmt>2015-01-02 08:15:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3979</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3980]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427326063;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3624;}i:1;a:1:{s:2:"id";i:3335;}i:2;a:1:{s:2:"id";i:3155;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-24.063871981232]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GitHubにいつの間にかSTLファイルビューア機能が実装されていた。</title>
		<link>http://shimz.me/blog/map/3981</link>
		<pubDate>Mon, 05 Jan 2015 06:51:13 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3981</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/shimizu/stlfiles/blob/master/japan.stl"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/githubstlviewer.jpg" alt="githubstlviewer" width="690" height="426" class="aligncenter size-full wp-image-3982 border" /></a>

<a href="https://github.com/shimizu/stlfiles/blob/master/japan.stl">example</a>
(約20MBほどあるので、表示されるまでにちょっと時間がかかります)

上記は、「<a href="http://www.esrij.com/products/japan-shp/">全国市区町村界データ | 製品 | ESRIジャパン株式会社</a>」のShapeファイルを各市区町村の人口数を高さに適用して3D化(STLに変換)したものです。

いつの間にかGithubにSTLファイルをアップすると、Web viewerを通して3D表示されるようになっていました。
これは便利ですね！


<h2>STLファイルとは</h2>
<a href="http://ja.wikipedia.org/wiki/Standard_Triangulated_Language">Standard Triangulated Language - Wikipedia</a>

<h2>ShapeファイルからSTLファイルへの変換</h2>
<a href="https://github.com/dougmccune/shp2stl">shp2stl</a>を使用しました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3981</wp:post_id>
		<wp:post_date>2015-01-05 15:51:13</wp:post_date>
		<wp:post_date_gmt>2015-01-05 06:51:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3981</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3982]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427203626;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3017;}i:1;a:1:{s:2:"id";i:3789;}i:2;a:1:{s:2:"id";i:2942;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-27.259500035575]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬県の小学校区とボロノイ図を重ね合わせてみた</title>
		<link>http://shimz.me/blog/d3-js/3984</link>
		<pubDate>Tue, 06 Jan 2015 04:49:14 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3984</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/voronoi/SchoolDistrict/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/SchoolDistrict.jpg" alt="群馬県 小学校区 ボロノイ図 重ね合わせ" width="690" height="375" class="aligncenter size-full wp-image-3985" /></a>

<a href="http://shimz.me/example/d3js/voronoi/SchoolDistrict/index.html">example</a>

以前紹介した「<a href="http://shimz.me/blog/book/3650">最適配置の数理</a>」という本の中で、学校区の範囲とボロノイ分割区域とを比較して、そのズレを検討した研究事例というのが載っていたので群馬県の小学校の上にボロノイ図をオーバレイしてみました。

ざっと見た感じ中心地ではほとんど近似しているようなのですが、沼田市周辺で学区とボロノイ図がズレまくっていて気になったので調べてみたところ、いくつかの小学校が廃統合された結果、ちょっと歪な形になっているようです。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/SchoolDistrict2.jpg" alt="沼田市　小学校区" width="690" height="417" class="aligncenter size-full wp-image-3986" />

いろいろ調べてみると面白いことがわかるかもしれません。

<h2>小学校区ポリゴン表示</h2>
小学校区に関しては<a href="http://shimz.me/blog/map/2135">以前Google Maps上にKMLを読み込んで表示</a>したことがあったので、今回はGeoJSONデータを使いました。元データは<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A27.html">国土数値情報</a>から、QGISを使ってGeoJSONに変換しています。

参考：<a href="http://blog.hitsuji.me/make-shape-file/">ShapeファイルからGeoJsonファイルを作成する</a>

Google Maps上に表示する方法は以下
 
<pre class="lang:js decode:true " >	//ポリゴンデータのスタイルを指定
	var styleFeature = function(feature){
		return {
			"strokeWeight": 2,
			"strokeColor": "green",
			"zIndex": 1,
			"fillColor": "lightgreen",　
			"fillOpacity": 0.5,
			"visible": true
		};			
	}	
	
	//小学校区データ読み込み
	d3.json("../../_geodata/SchoolDistrict.geojson", function(data) {		
		//データレイヤーに追加
		map.data.addGeoJson(data);
		//データレイヤのスタイルを指定
		map.data.setStyle(styleFeature);				
	});</pre> 

詳細は<a href="http://shimz.me/blog/google-map-api/3445">こちら</a>を。

<h2>ボロノイ図の表示</h2>
小学校の位置(母点)とボロノイ図はD3.jsで作成しGoogle Maps上にオーバレイしています。
 
<pre class="lang:js decode:true " >	/***************************************************************************
	 *  ボロノイ図表示
	 ***************************************************************************/
	var overlay = new google.maps.OverlayView(); //OverLayオブジェクトの作成	

	//小学校位置データ読み込み
	d3.json("../../_geodata/PublicElementarySchool.geojson", function(pointjson) {
		//オーバレイ追加
		overlay.onAdd = function () {
	 
			var layer = d3.select(this.getPanes().overlayMouseTarget).append("div").attr("class", "SvgOverlay");
			var svg = layer.append("svg");
			var svgoverlay = svg.append("g").attr("class", "AdminDivisions");
			var markerOverlay = this;
			var overlayProjection = markerOverlay.getProjection();
	 
			//Google Mapの投影法設定
			var googleMapProjection = function (coordinates) {
				var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
				var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
				return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
			}
			
				
				
			//再描画時に呼ばれるコールバック    
			overlay.draw = function () {
	 
	 
				//母点位置情報
				var pointdata = pointjson.features;
				
				//ピクセルポジション情報
				var positions = [];
	 
				pointdata.forEach(function(d) {		
					positions.push(googleMapProjection(d.geometry.coordinates)); //位置情報→ピクセル
				});
		
				//ボロノイ変換関数
				var polygons = d3.geom.voronoi(positions);
				
				var pathAttr = {
					"d":function(d, i) { return "M" + polygons[i].join("L") + "Z"},
					"stroke":"blue",
					"stroke-width": 2,
					"fill":"white",
					"fill-opacity":0
				};
	 
				//境界表示
				svgoverlay.selectAll("path")
					.data(pointdata)
					.attr(pathAttr)
					.enter()
					.append("svg:path")
					.attr("class", "cell")
					.attr(pathAttr)
					.append("title")
					.text(function(d, i){console.log(d); return d.properties.A27_003 +"区";   });
				
				var circleAttr = {
						"cx":function(d, i) { return positions[i][0]; },
						"cy":function(d, i) { return positions[i][1]; },
						"r":4,
						"fill":"red"			
				}
		
				//母点表示
				svgoverlay.selectAll("circle")
					.data(pointdata)
					.attr(circleAttr)
					.enter()
					.append("svg:circle")
					.attr(circleAttr);
		  
			};
	 
		};
	 
		//作成したSVGを地図にオーバーレイする
		overlay.setMap(map);		
	});</pre> 

<a href="http://shimz.me/blog/d3-js/2819">【D3.js】Google Map上にボロノイ図を描く | #GUNMA・GIS・GEEK</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3984</wp:post_id>
		<wp:post_date>2015-01-06 13:49:14</wp:post_date>
		<wp:post_date_gmt>2015-01-06 04:49:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3984</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3985]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373772;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3617;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:3841;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[33.108829117417]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>d3.scaleと要素の面積</title>
		<link>http://shimz.me/blog/d3-js/3991</link>
		<pubDate>Thu, 08 Jan 2015 02:09:01 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=3991</guid>
		<description></description>
		<content:encoded><![CDATA[小ネタです。d3には<a href="http://shimz.me/blog/d3-js/2020">scale</a>という値を正規化するのにとても便利な機能がありますが、それを要素に適用する際には気を付けないといけないことがあります。

<a href="http://shimz.me/example/d3js/rscale/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/circleScale0.jpg" alt="Circle Scale" width="690" height="679" class="aligncenter size-full wp-image-3992 border" /></a>

<a href="http://shimz.me/example/d3js/rscale/index.html">example</a>


上記は[10, 25, 50, 100, 200」というデータセットの値を二種類のスケールで正規化し円の大きさとそして表示したものです。
d3.scale.linearを用いて視覚化した図はデータセットの値それぞれの比率に対して、表示されている円の大きさの差が非常に大きく見えます。
これは、正規化した値をcircleのr属性に適用した際によく起きる問題です。
サンプルではcircle上にマウスオーバーすると面積を表示するようになっているので、実際の面積を比較してみます。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/circleScale1.jpg" alt="circleScale1" width="334" height="245" class="alignnone size-full wp-image-3989 border" />

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/circleScale2.jpg" alt="circleScale2" width="334" height="245" class="alignnone size-full wp-image-3990 border" />

100の値を示す円に対して、200の値を示す円の面積は４倍となっています。
circle要素のr属性は「半径」を指定する項目なので、そこにd3.scale.linearを使って正規化した数値を適用してしまうと、「半径 × 半径 × 3.14」となって実際の値の比率より、大きく表示されてしまいます。

このような場合は、d3.scale.sqrtを使うと正規化した値の平方根を戻り値として返してくれるので、こちらを利用しましょう。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3991</wp:post_id>
		<wp:post_date>2015-01-08 11:09:01</wp:post_date>
		<wp:post_date_gmt>2015-01-08 02:09:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-3991</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[3992]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427309174;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3307;}i:1;a:1:{s:2:"id";i:2020;}i:2;a:1:{s:2:"id";i:4052;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-19.272241424905]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>『もっと知りたい！「地図×ゲーム」の可能性』に参加してきました。</title>
		<link>http://shimz.me/blog/map/4015</link>
		<pubDate>Mon, 12 Jan 2015 01:31:16 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4015</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/01/1477340_822144364475778_8249820868881247983_n.jpg" alt=" もっと知りたい！「地図×ゲーム」の可能性" width="636" height="291" class="aligncenter size-full wp-image-4017" />

<a href="https://www.facebook.com/events/1583309791905771/?ref_dashboard_filter=calendar">もっと知りたい！「地図×ゲーム」の可能性</a>



地図も好きだしゲームも好き、そんな自分としては見逃せない！と思い参加してきました。

「みんなでIngressをやる」という１時間ほどのレクリエーションの後、第二部にて、地図とゲームに関するディスカッションが行われ、私も「地図組」と一人としてディスカッションに参加させていただき、なんかしゃべってきました。

イベントの内容はFacebookのページの他、当日のツイートをとめたのでそちらをご覧いただければ、どんな内容・雰囲気だったかが伝わるかと思います。

<a href="http://togetter.com/li/768920">もっと知りたい！「地図×ゲーム」の可能性、まとめ - Togetterまとめ</a>

Ingressの効果か、非常に多様なジャンルの方々が参加されていて懇談会でも様々な話題で盛り上がり色々な視点から地図とゲームの結びつきなどについて知ることができて非常に勉強なったと感じています。

今後もこういったイベントがあったら参加したいと思います。


<h2>補足</h2>
ディスカッションや懇談会の際に、思い付きでペラペラしゃべったことについて、思い出せる限り参考にさせていただいたドキュメントへのリンクを掲載しました。

<h3>地図の歴史</h3>
ディスカッションの第一部「地図からみたゲーム」の回で話題に上がった「地図の歴史」について。
個人的にも、最近興味をもっていろいろ調べて回っていたテーマだったのでタイムリーな話題でした。
その際に見つけたサイトを掲載。

<a href="http://atlas.cdx.jp/history/history.htm">地図の歴史</a>
<a href="http://ja.wikipedia.org/wiki/%E5%88%9D%E6%9C%9F%E3%81%AE%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9B%B3">初期の世界地図 - Wikipedia</a>
<a href="http://www2u.biglobe.ne.jp/~KA-ZU/home_2.html">第二章目次　古代プトレマイオスから狂乱の大航海時代　モーリシャス島の発見まで　ドードー発見</a>


<h3>Motherの地図</h3>
フィールドと街に境が無いというマップは、当時は衝撃的でした。
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/leaflet/image/full.html"></iframe>


<h3>ガリバー旅行記と日本</h3>
懇談会でどうしてガリバーの話を上げたのかよく覚えていないのですが、多分「現実の地理情報を元に作られたフィクション」といった話題からの流れだったと思います。

<a href="http://www.iju-oita.jp/modules/rensai/index.php?content_id=27">おおいた暮らし - 『ガリバー旅行記』の地図に豊後は載っている</a>
<a href="http://ci.nii.ac.jp/naid/120004739126">CiNii 論文 -  『ガリヴァー旅行記』にみられる日本語地名</a>

<h3>伝染病を蔓延させて人類を滅ぼすゲーム</h3>
地図をメインコンテンツに据えたゲームの話で紹介したもの。各国の環境などへの知識がそのままゲームの攻略法で繋がるというのが面白いかなと。
このゲーム、「エボラ出血熱」が話題になった際に非常にダウンロード数が増えたそうです。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/screen520x9241-300x169.jpeg" alt="Plague Inc. -伝染病株式会社-" width="300" height="169" class="alignnone size-medium wp-image-4016" />

<a href="https://itunes.apple.com/jp/app/plague-inc.-chuan-ran-bing/id525818839?mt=8&uo=4&at=10lMp5" target="itunes_store" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a>
<a href="http://app.famitsu.com/20130930_243062/">【注目アプリレビュー】バイオテロで人類滅亡を図る問題作『Plague Inc. -伝染病株式会社-』 [ファミ通app]</a>

<a href="http://shimz.me/blog/map/3880">感染地図</a>でもおなじみのコレラ菌を蔓延させて人類を滅ぼすミッションもあります。

<h3>架空の地図を集めた本</h3>
「フィクションの中の地図」という話題で思い出した、西洋のファンタジックな地図を集めた本。

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0847841219/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51i8HIJ5XUL._SL160_.jpg" alt="The Book of Legendary Lands" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0847841219/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">The Book of Legendary Lands</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.01.11</div></div><div class="amazlet-detail">Umberto Eco <br />Rizzoli Ex Libris (2013-11-05)<br />売り上げランキング: 120,606<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0847841219/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<br />

下記レビューにて本書に掲載されている地図の一部をみることができます。
<a href="http://www.brainpickings.org/2014/02/17/legendary-lands-umberto-eco/">Legendary Lands: Umberto Eco on the Greatest Maps of Imaginary Places and Why They Appeal to Us | Brain Pickings</a>



<h3>2005年ですら世界のたった15%しか地図には載っていなかった</h3>
元ネタは以下のプレゼンから。ちょっと「Googleマップメーカー」の宣伝入ってますが。
[ted id=736 lang=ja]

<h3>他、関連</h3>
<a href="http://shimz.me/blog/map/3555">地図の力、地図の怖さ。 | #GUNMA・GIS・GEEK</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4015</wp:post_id>
		<wp:post_date>2015-01-12 10:31:16</wp:post_date>
		<wp:post_date_gmt>2015-01-12 01:31:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ba96d7ca11c45c1722ba7475f2f063d8</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe src="https://embed-ssl.ted.com/talks/lalitesh_katragadda_making_maps_to_fight_disaster_build_economies.html" width="580" height="326" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_ba96d7ca11c45c1722ba7475f2f063d8</wp:meta_key>
			<wp:meta_value><![CDATA[1420991277]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fcc48ba47fdf2bdf075332f918fdcd1b</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe src="https://embed-ssl.ted.com/talks/lang/ja/lalitesh_katragadda_making_maps_to_fight_disaster_build_economies.html" width="580" height="326" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_fcc48ba47fdf2bdf075332f918fdcd1b</wp:meta_key>
			<wp:meta_value><![CDATA[1420991351]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4017]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427320246;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3335;}i:1;a:1:{s:2:"id";i:2570;}i:2;a:1:{s:2:"id";i:3649;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[7.4981396745682]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[『もっと知りたい！「地図×ゲーム」の可能性』に参加しましたよっ！ | Draw Game Cafe（どろがめカフェ）]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://drawgamecafe.org/archives/811</wp:comment_author_url>
			<wp:comment_author_IP>182.48.12.13</wp:comment_author_IP>
			<wp:comment_date>2015-01-12 15:57:46</wp:comment_date>
			<wp:comment_date_gmt>2015-01-12 06:57:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ・togetter『もっと知りたい！「地図×ゲーム」の可能性、まとめ』 ・参加者のひとり、清水正行さんのブログ記事 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421048651.936460971832275390625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421045866.9773099422454833984375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>380</wp:comment_id>
			<wp:comment_author><![CDATA[『もっと知りたい！「地図×ゲーム」の可能性』でイングレスの未来を考えたよ | しゅうまいの256倍ブログ neophilia++]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shumaiblog.com/event-report-possibilities-of-map-and-game-jan-11-2015/</wp:comment_author_url>
			<wp:comment_author_IP>157.112.152.61</wp:comment_author_IP>
			<wp:comment_date>2015-01-13 08:41:00</wp:comment_date>
			<wp:comment_date_gmt>2015-01-12 23:41:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ｜ フリック！ニュース ／Flick!News ☆ 『もっと知りたい！「地図×ゲーム」の可能性』に参加してきました。 | #G&#8230; ☆ 『もっと知りたい！「地図×ゲーム」の可能性』に参加しましたよっ！ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421106060.2457010746002197265625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421106447.656012058258056640625;s:7:"message";s:75:"blogadmin がコメントのステータスをapprovedに変更しました";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Fx0(FirefoxOS)を買いました。</title>
		<link>http://shimz.me/blog/fx0/4025</link>
		<pubDate>Tue, 13 Jan 2015 02:56:35 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4025</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/01/10917378_996196217074440_4248737969431047817_n.jpg" alt="Fx0を買いました" width="718" height="592" class="aligncenter size-full wp-image-4026" />

あえて一般向けを狙わずGeek向けを狙い打ったはずなのに、あんまりGeekにも刺さってない感もあるFx0を購入しました。２年間２４回払いローンで……<strong>後悔はちょっとだけしかしていない。</strong>


<h2>触ってみた感じ</h2>
ファーストインプレッションとしては、とりあえずスクリーンの発色が良いです、非常に奇麗。
アプリの動作はまぁ、そこそこですね。さすがにiPhoneや最新のAndroid端末と比べてしまったら不満があるでしょうけど。操作感については下記の動画が参考になります。

<iframe width="640" height="360" src="//www.youtube.com/embed/zgwpDnfpHtE" frameborder="0" allowfullscreen></iframe>
<br />

バンドルされているFirefoxブラウザは、svgやcanvas、webGLに対応。
<a href="http://cesiumjs.org/">Cesium</a> も動きます。パン／ズームなどもわりとスムーズ。
現時点でiOSのMobile Safariが対応していない「<a href="http://html5experts.jp/mganeko/5098/">WebRTC</a>」にも対応していてブラウザでデバイスのカメラにアクセス可能です。これは嬉しい。いろいろ楽しめそう。

以前、Webカメラから取り込んだ画像で動態検知するというサンプルを作りましたが、問題なく動きました。

<a href="http://shimz.me/blog/canvas/3528">Canvasを使ってWebカメラで動体検知を行う</a>

JavaScriptの実行速度は結構早いっぽいです。（ただし、<a href="http://shimz.me/blog/javascript/3046">ヘッドトラッキング</a>は重くて動かなかった)


面白いのは、端末の設定でデバッグモードを有効にするとスクリーン上に常にFPSとメモリ使用量がオーバーレイされる機能があったりすることでしょうか、なんてニッチな機能ｗ


<h2>アプリ開発環境を構築</h2>

スマホを購入して一番最初にやることと言えば……やはりHello Worldアプリのインストールですよね。
とりあえず、開発環境を準備しました。

<h3>１．Firefox Developer Editionをインストール</h3>
まずは下記をインストールします。(普通のFirefoxでも開発は可能です)
<a href="https://www.mozilla.org/ja/firefox/developer/">Firefox Developer Edition — Mozilla</a>

<a href="https://www.mozilla.org/ja/firefox/developer/"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/FirefoxDeveloperEdition150113.jpg" alt="FirefoxDeveloperEdition" width="690" height="386" class="alignnone size-full wp-image-4031 border" /></a>

<h3>２．ドライバをインストール</h3>
次に、Fx0をUSBで母艦(PC)に刺します。初回だとストレージモード用のドライバがインストールされます。
インストールが終わったら、Fx0の環境設定画面にて「プログラムのインストール」を有効にします。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/2015-01-12-09-49-42.png" alt="プログラムのインストール" width="360" height="640" class="alignnone size-full wp-image-4019 border" />

こちらも初回だと「LG PCプログラム」がインストールされるので終わるまで待ちます。

<a href="http://shimz.me/blog/wp-content/uploads/2015/01/150112fx02.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/150112fx02.jpg" alt="LG　PCプログラム" width="400" height="248" class="alignnone size-full wp-image-4021 border" /></a>

全てのインストールが終わったら、いったんUSBを外して母艦とFx0を再起動します。Fx0の再起動は電源ボタン長押し。(この作業は、一応念のためにやっているだけなのでスキップしてもＯＫ)

Fx0の環境設定で「端末情報」→「その他の情報」→「開発者メニュー」を有効にすると環境設定に「開発者メニュー」
が追加されます。開発者メニューから「USB経由のデバック」の項目を「ADBと開発ツール」に設定し母艦につなげます。

<h3>３．WebIDEを起動</h3>
改めて母艦とFx0を繋ぎ、Firefox Developer Editionを起動しメニューにあるWebIDEをクリックします。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/150112fx03-1.jpg" alt="WebIDE" width="497" height="128" class="alignnone size-full wp-image-4027 border" />

IDEの右上に表示されているデバイスメニューのUSBデバイスの項目に「LGL25」が追加されていれば自作のアプリケーションを端末にインストールできる状態になっています。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/150112fx05-e1421114155539.jpg" alt="WebIDE" width="690" height="401" class="alignnone size-full wp-image-4023 border" />

<h3>Hello Worldアプリを実機にインストール</h3>
「プロジェクト」メニューから「新しいアプリ」を選択し、「Hello World」のテンプレートを使います。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/fx0helloworld1.jpg" alt="fx0 hello world" width="420" height="280" class="alignnone size-full wp-image-4028 border" />

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/fx0helloworld2.jpg" alt="fx0 hello world" width="690" height="399" class="alignnone size-full wp-image-4029 border" />

index.htmlがあって、cssとjsのフォルダがあって……と、フロントエンドのエンジニアにとっては見慣れた構成ですね。
中央に表示されている再生ボタン(三角)をクリックすれば、端末にアプリがインストールされ実行されます。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/2015-01-12-09-45-43.png" alt="2015-01-12-09-45-43" width="360" height="640" class="alignnone size-full wp-image-4030 border" />

端末側でアラートがでるので、「OK」をタップします。
これでアプリのインストールは終了です。

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/fx0helloapp01.png" alt="fx0helloapp01" width="356" height="420" class="alignnone size-full wp-image-4032" />

<img src="http://shimz.me/blog/wp-content/uploads/2015/01/fx0helloapp02.png" alt="fx0helloapp02" width="360" height="640" class="alignnone size-full wp-image-4033" />

かなり簡単。
あとは適当にindex.htmlとかを弄ればいろいろ遊べます。


<br />
<br />

<h2>リモートデバッグ</h2>
普通にFirefoxの開発者ツールを使ってリモートデバッグを行うことができます。

<a href="http://shimz.me/blog/wp-content/uploads/2015/01/150112fx06.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/150112fx06-1024x592.jpg" alt="リモートデバッグ" width="580" height="335" class="alignnone size-large wp-image-4024 border" /></a>


<iframe width="640" height="360" src="//www.youtube.com/embed/2xmj4W8O3E4" frameborder="0" allowfullscreen></iframe>

あと、adb shellとかも母艦にインストールしてあれば使えるそうです。
<a href="http://wghost.org/it/android/android-adb-shell-usb/">Android ADB Shell を使うためには（USB接続含む） | IT Memo</a>

<br />
<br />


<h2>結論</h2>
とりあえず、index.html一枚かけばアプリになるお手軽さは個人的に楽しいのでFirefoxOSの入門機として、しばらく遊んでみようと思います。

[関連]
<a href="http://shimz.me/blog/map/4043">新しい地理院地図のソースコードがGitHubに公開されていたので、Fx0(FirefoxOS)にアプリとしてインストールしてみた。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4025</wp:post_id>
		<wp:post_date>2015-01-13 11:56:35</wp:post_date>
		<wp:post_date_gmt>2015-01-13 02:56:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4025</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx0"><![CDATA[Fx0]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4026]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427369900;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1031;}i:1;a:1:{s:2:"id";i:3045;}i:2;a:1:{s:2:"id";i:2928;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[9.7607281681425]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[GMaps API v3] Ingress Intel Map Style</title>
		<link>http://shimz.me/blog/google-map-api/4034</link>
		<pubDate>Wed, 14 Jan 2015 06:34:52 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4034</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe style="height:400px !important" scrolling="no" src="http://shimz.me/example/gmapv3/intelmapStyle/"></iframe>

<a href="http://shimz.me/example/gmapv3/intelmapStyle/">example</a>

小ネタ。
<a href="https://www.ingress.com/intel">Ingress Intel Map</a>風のスタイルでGoogleマップを表示します。
ポータルやコントロールフィールドがないと寂しい感じ。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >var style = [
	{
		featureType : "all",
		elementType : "all",
		stylers : [
			{ visibility : "on" },
			{ hue : "#131c1c" },
			{ saturation : "-50" },
			{ invert_lightness : !0 }
		]
	},
	{
		featureType : "water",
		elementType : "all",
		stylers : [
			{ visibility : "on" },
			{ hue : "#005eff" },
			{ invert_lightness : !0 }
		]
	},
	{
		featureType : "poi",
		stylers : [ { visibility : "off" } ]
	},
	{
		featureType : "transit",
		elementType : "all",
		stylers : [ { visibility : "off" } ]
	}
];

var map = new google.maps.Map(document.getElementById('map'), {
    backgroundColor : "#0b0c0d",
	mapTypeId : google.maps.MapTypeId.ROADMAP,
	minZoom : 1,
	panControl : !1, 
    styles : style, 
	zoom : 14, 
	center: new google.maps.LatLng(35.6706505　, 139.77186140000003),
	streetViewControlOptions : {
        position : google.maps.ControlPosition.RIGHT_CENTER
    },
    zoomControlOptions : {
        position : google.maps.ControlPosition.RIGHT_CENTER
    }
});</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4034</wp:post_id>
		<wp:post_date>2015-01-14 15:34:52</wp:post_date>
		<wp:post_date_gmt>2015-01-14 06:34:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmaps-api-v3-ingress-intel-map-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4035]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427364286;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3793;}i:1;a:1:{s:2:"id";i:2703;}i:2;a:1:{s:2:"id";i:2819;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-42.778845856351]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Fusion Tables]阪神・淡路大震災の記録写真(オープンデータ)に位置情報付加してみた。</title>
		<link>http://shimz.me/blog/map/4038</link>
		<pubDate>Tue, 20 Jan 2015 01:45:40 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4038</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501200.jpg" alt="阪神・淡路大震災「1.17の記録」位置情報付加" width="690" height="364" class="aligncenter size-full wp-image-4042 border" />


<a href="http://kobe117shinsai.jp/all-download/">阪神・淡路大震災「1.17の記録」</a>の画像情報一覧ファイル(20150120101213.csv)をGoogle Fusion Tablesにインポートし、placeの値をジオコーディングにかけて位置情報を付加しました。
(placeが空のレコードはareaの値を使っています)

誤変換されたレコードや、建物名や公園など位置が明確なものについては手動で編集しました。
位置が特定できないものについては、区町レベルでジオコーディングしています。

手動で調整したものでも位置が間違っている可能性もあるのでその点はご了承ください。


<h3>バグ？ or 仕様？</h3>
<ul>
<li>Fusion Tables上では正しい位置に表示されているのに、エクスポートしたKMLをGoogle Earthにインポートすると、おかしな位置に表示されるレコードがある。</li>
<li>ダウンロードしたKMLそのままだとQGISに読み込めない。いったんGoogle Earthに読み込んで新たにKMLでエクスポート、そのファイルをベクタレイヤーとして読み込めばQGISにインポートできる。ただし上記と同様の問題がある。</li>
</ul>

Fusion Tablesからエクスポートしたkmlをエディタで開いてみると、ロケーション情報が読み取れないようになっています。どうも、グーグル的にはジオコーディングで得た位置情報は他では使えないようにしたいっぽいですね。


<h3>ダウンロード</h3>
一応、ダウンロードできるようにしてあります。
<strong>利用される場合は、あくまで自己責任にてお願いします。</strong>
<a href="https://www.google.com/fusiontables/DataSource?docid=1UI7sGWNVsxx8v0hsZYEoSovSsR6AHDA8jsEk2uPR#map:id=3">https://www.google.com/fusiontables/DataSource?docid=1UI7sGWNVsxx8v0hsZYEoSovSsR6AHDA8jsEk2uPR#map:id=3</a>

Fusion Tablesの「File」メニュー「Download」からcsv、kmlでダウンロードできます。


<h3>自分でやってみたい人</h3>

Fusion Tablesを使ったジオコーディングについては下記記事を参照ください。

<a href="http://shimz.me/blog/map/2670">Fusion TablesとGoogle Mapの連動が革命的に便利になっていた。</a>

今回はcsvの「place」の項目をlocation型に変換してジオコーディングしました。
一通りジオコーディングした後、位置情報に変換できなかったものや、誤変換されたレコードは以下の手順で手動で修正できます。

１．レコードの編集ボタンをクリック
<a href="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501201.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501201-1024x631.jpg" alt="locationEdit1501201" width="580" height="357" class="alignnone size-large wp-image-4039 border" /></a>
<br>
２．「edit geocode...」のリンクをクリック
<a href="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501202.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501202-1024x631.jpg" alt="locationEdit1501202" width="580" height="357" class="alignnone size-large wp-image-4040 border" /></a>
<br>
３．地名や緯度経度で検索するとマーカーが表示されるので、マーカーをクリックして「Use this location」のボタンをクリックすれば位置情報が編集されます。
<a href="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501203.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/locationEdit1501203-1024x631.jpg" alt="locationEdit1501203" width="580" height="357" class="alignnone size-large wp-image-4041 border" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4038</wp:post_id>
		<wp:post_date>2015-01-20 10:45:40</wp:post_date>
		<wp:post_date_gmt>2015-01-20 01:45:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4038</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427239926;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2670;}i:1;a:1:{s:2:"id";i:2135;}i:2;a:1:{s:2:"id";i:3789;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4042]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[20.115991448955]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>新しい地理院地図のソースコードがGitHubに公開されていたので、Fx0(FirefoxOS)にアプリとしてインストールしてみた。</title>
		<link>http://shimz.me/blog/map/4043</link>
		<pubDate>Wed, 21 Jan 2015 09:29:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4043</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://maps.gsi.go.jp/"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/gsimaps150121.jpg" alt="地理院地図" width="690" height="428" class="aligncenter size-full wp-image-4049 border" /></a>

<a href="http://internet.watch.impress.co.jp/docs/column/chizu/20150115_683808.html">国土地理院、「地理院地図」がスマホ対応、「触地図」特設サイトや西之島のGIFアニメも登場</a>

スマートフォンやタブレット端末に対応して使いやすくなった地理院地図ですが、そのソースコードがGithubにて公開されています。

<a href="https://github.com/gsi-cyberjapan/gsimaps">gsi-cyberjapan/gsimaps</a>
(利用する場合の注意点については、README.mdを参照ください)

すごい……すごいぞ国土地理院！

これで、誰でも自分専用の地理院地図を作って利用することができますね！
すでに「地図タイルを追加する方法」を書かれている方も。

<a href="http://d.hatena.ne.jp/tmizu23/20150121">地理院地図に地図タイルを追加して公開する方法</a>


そこで自分も、最近買ったばっかりのFx0に地理院地図をアプリとしてインストールしてみました。

<h2>やったこと</h2>
下記からzipファイルをダウンロード。
<a href="https://github.com/gsi-cyberjapan/gsimaps">gsi-cyberjapan/gsimaps</a>

１．Firefox Developer EditionのWebIDEで「新しいアプリ(Hello Worldテンプレート)」を指定。
　　(開発環境の構築方法などは下記記事を参照ください)

<a href="http://shimz.me/blog/fx0/4025">Fx0(FirefoxOS)を買いました。</a>

２．プロジェクトのフォルダ内にgsimaps-gh-pagesの中身を丸ごとコピー。

３．マニフェストファイル(manifest.webapp)を書き換えてWebIDEの実行ボタン(三角)を押す。


作業時間約１０分。サクッとインストールできました！


<img src="http://shimz.me/blog/wp-content/uploads/2015/01/2015-01-21-14-31-262.jpg" alt="地理院地図アプリ" width="360" height="310" class="alignnone size-full wp-image-4047" />


<img src="http://shimz.me/blog/wp-content/uploads/2015/01/2015-01-21-14-32-02.jpg" alt="地理院地図アプリ" width="360" height="640" class="alignnone size-full wp-image-4046" />


<h3>マニフェストファイル</h3>
 geolocation<del datetime="2015-01-22T05:38:05+00:00">とsystemXHR</del>を許可しています。
<pre class="lang:js decode:true " >{
  "name": "地理院地図",
  "description": "GSI maps",
  "launch_path": "/index.html",
  "icons": {
    "16": "/icons/icon16x16.png",
    "48": "/icons/icon48x48.png",
    "60": "/icons/icon60x60.png",
    "128": "/icons/icon128x128.png"
  },
  "type": "web",
  "permissions": {
	"geolocation": {
		"description" : "Used to locate me"
	}
  }
  
}</pre> 

<del datetime="2015-01-22T05:28:31+00:00">※このマニフェストだとXHRの許可が上手く行かないみたいです。調査中。</del>

<h3>問題点</h3>
<del datetime="2015-01-22T05:28:31+00:00">今のところ検索が上手くいってません。それ以外はほぼ問題なく動きます。</del>

【追記:15/01/22】
<a href="https://twitter.com/dynamitter/status/558058844556120065">Twitterで教えていただきました。</a>

マニフェストのsystemXHRを削除してtypeの値をwebに変更することで検索も問題なく動くようになりました。(privilegedとwebで利用できるAPIが変わるらしいので、その辺はまたそのうち調べます)

<h2>総括</h2>
FirefoxOSは、公開されているStatic Web Applicationを簡単にアプリとしてインストールできるので面白いです。これをベースにカスタマイズしていけば、かなり本格的な地図アプリが作れるのではないでしょうか。

それにしても省庁系システムのソースコードがGithub上にアップされていてオープンになっているというのは凄い時代になったーと感じますね。まぁ、国土地理院だけが抜きんでて尖がっているのかもしれませんがｗ

TwitterやFacebookなどのソーシャルメディアで「地理院すげー！」「地理院かっこいい！」とかつぶやいてGithubの「スターボタン」がクリックされまくったりしたら、他の省庁でも後へ続けとこういった試みが行われるかもしれません（願望）




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4043</wp:post_id>
		<wp:post_date>2015-01-21 18:29:03</wp:post_date>
		<wp:post_date_gmt>2015-01-21 09:29:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4043</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx0"><![CDATA[Fx0]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373711;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4142;}i:1;a:1:{s:2:"id";i:4141;}i:2;a:1:{s:2:"id";i:4025;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4047]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5038743ed93288372ff1cba685d15622</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="550"><p>地理院すごい！ちなみにSystemXHR使うわけじゃないのでPrivilegedにする必要はないのでは。&quot;type&quot;: &quot;web&quot;で普通に検索機能も動作するように思います RT <a href="https://twitter.com/_shimizu">@_shimizu</a>: 地理院すごい！　地理院かっこいい！ <a href="http://t.co/tpy6J9G9Gd">http://t.co/tpy6J9G9Gd</a></p>&mdash; dynamis (でゅなみす＠もじら) (@dynamitter) <a href="https://twitter.com/dynamitter/status/558058844556120065">January 22, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_5038743ed93288372ff1cba685d15622</wp:meta_key>
			<wp:meta_value><![CDATA[1421904737]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[120.54895846259]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>地軸を傾けながらSVGで地球儀を表示する</title>
		<link>http://shimz.me/blog/d3-js/4052</link>
		<pubDate>Fri, 23 Jan 2015 03:33:46 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4052</guid>
		<description></description>
		<content:encoded><![CDATA[以前、<a href="http://shimz.me/blog/d3-js/2631">svgで地球儀を描き回転させる</a>という記事を書きましたが、その記事についてお問い合わせいただき、メールにて返信したところmailer-daemonさんに「次の受信者への送達は、恒久的に失敗しました。メールアドレスが存在しません」と言われてしまって返信できなかったのでブログの記事として掲載しておきます。

ついでに以前の記事では、まだD3を勉強中だったこともあって、いらんことしていたりもしたので少しコードを整理をしました。

<h2>地軸を傾けながら地球儀を表示する</h2>
分かり易く、右に45度傾けて表示しています。
グループ(g)要素のtransform属性でrotateを指定し全体を傾けています。
<strong>あと今回はtopojsonではなくgeojson形式のデータで地形を描画しました。</strong>


<h3>サンプル</h3>
 <a href="http://shimz.me/example/d3js/geo_example/rotateEarth/"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/rotateEarth.jpg" alt="rotateEarth" width="530" height="516" class="aligncenter size-full wp-image-4053" /></a>
<a href="http://shimz.me/example/d3js/geo_example/rotateEarth/">example</a>

<pre class="lang:js decode:true " >var w = 960; //ステージの幅
var h = 600; //ステージの高さ

/*svg要素をbody内に追加*/
var svg = d3.select("body").append("svg:svg").attr("width", w).attr("height", h); 
 
 /*投影法を指定*/   
projection = d3.geo.orthographic() 
	.scale(245)	//描画する地形の大きさ
	.rotate([0,0,0])	//x,y,z回転
	.clipAngle(90);	//表示する角度 180度を指定すると裏側の大陸まで表示される

/*地形を描画する関数を生成*/
path = d3.geo.path().projection(projection);
	
/* 地図情報の読み込み
 * d3.jsonでのファイル読み込みは、デスクトッ上ではブラウザのセキュリティ制限のため動作しません。
 * index.htmlとconuntries.geojsonをサーバーにアップロードしてからブラウザでアクセスしてください。
 */
d3.json("conuntries.geojson", function(geojson){ 
	
	/*featuresプロパティを取り出す*/
	var data = geojson.features
   
   /*g要素追加(グループ化) 地形を描画するステージとする*/
	var stage = svg.append("svg:g"); 
	
	/*ステージを右45度傾ける*/
	stage.attr("transform", "rotate(45, "+w/2+",  "+h/2+")") ;
	
	/*
	 * ↑の出力結果は以下となります。
	 * &lt;g class="earth" transform="rotate(45, 430, 300)"&gt;
	 * rotateの引数は　(度数, X軸基準点, Y軸基準点)
	 * 基準点を中心に傾きます。
	 */
	
	
	/*海描画*/
	var sea = stage.append("path")
		.datum({type: "Sphere"})
		.attr("fill", "blue")
		.attr("d", path);
   
	/*地形追加*/
	var map = stage
		.selectAll("path")
		.data(data) 
		.enter()
		.append("svg:path")
		.style("background-color", "blue")
		.attr({
		"class": "path tip",
		"d":path,
			"fill-opacity":1,
			"fill":"green",
			"stroke":"#222",
		});
		

	/*地形を回転させる*/ 
	update = function(){
		var i = 0;
		return function(){
			i = i+0.5;
			projection.rotate([i,0,0]);  //rotateの値を増やして
			path = d3.geo.path().projection(projection);    //path関数をアップデート
			map.attr("d", path); //paht関数をmapオブジェクトに適用
			
		}
	}
	
	setInterval(update(), 100); //定期的に回転させる
			
});</pre> 

<h2>topojsonについて</h2>
Windows端末だと、node.jsのモジュールであるtopojsonコマンドがインストールできなかったりします。
(まぁ、Pythonインストールしたりとか、色々適切に設定すればできなくは無いらしいのですが……メンドウ)
topojsonはgeojsonに比べると効率のよいデータ形式なのでファイルサイズが小さくて済むのですが、最終的にはtopojson.jsを使ってクライアント側でgeojson形式に戻して使う仕様になっています。
なので、<strong>topojsonデータが用意できない時はgeojsonのままでも問題ありません。</strong>
featuresプロパティの中身を、パスジェネレータに渡してあげれば後はD3がパスデータに変換してくれます。

Widonws端末しかなくて、それでもgeojson形式のデータをtopojson形式のデータに変換したいときは、<a href="http://www.mapshaper.org/">mapshaper</a>というWebサービスを使うという方法もあります。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4052</wp:post_id>
		<wp:post_date>2015-01-23 12:33:46</wp:post_date>
		<wp:post_date_gmt>2015-01-23 03:33:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4052</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4053]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427396353;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:3181;}i:2;a:1:{s:2:"id";i:2977;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-29.89335565996]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CSSのみで、文字列の省略→クリックしたら全表示。</title>
		<link>http://shimz.me/blog/css/4054</link>
		<pubDate>Mon, 26 Jan 2015 04:54:39 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4054</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/css/overflowheidden/"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/over.texthidden150126.jpg" alt="over.texthidden150126" width="533" height="270" class="aligncenter size-full wp-image-4055" /></a>

<a href="http://shimz.me/example/css/overflowheidden/">example</a>


block要素からはみ出た文字列を省略し、フォーカスが当たったら(クリックされたら)全表示します。

<h2>サンプル</h2>
 
<pre class="lang:css decode:true " title="css" >.text {
	display: block; 
}

.overflowheidden {
	width: 300px;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
	-o-text-overflow: ellipsis; 
}

.overflowheidden:focus {
	white-space: pre;
}
</pre> 
 
 
<pre class="lang:xhtml decode:true " title="HTML" >&lt;table&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;タイトル&lt;/th&gt;
			&lt;th&gt;内容(文字列クリックで展開)&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;じゅげむじゅげむ&lt;/td&gt;
			&lt;td class="text overflowheidden" contenteditable="true" &gt;寿限無、寿限無
五劫の擦り切れ
海砂利水魚の
水行末 雲来末 風来末
食う寝る処に住む処
藪ら柑子の藪柑子
パイポパイポ パイポのシューリンガン
シューリンガンのグーリンダイ
グーリンダイのポンポコピーのポンポコナーの
長久命の長助	&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;ピカソの名前&lt;/td&gt;
			&lt;td class="text overflowheidden" contenteditable="true"&gt;パブロ ディエゴ ホセ フランシスコ デ パウラ フアン ポムセーノ マリア デ ロス レメディ オス シブリアーノ センティシマ トリニダード ルイス イ ピカソ&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;  </pre> 

td要素に直接設定するのではなくて、span辺りを挟んだ方が良いかも。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4054</wp:post_id>
		<wp:post_date>2015-01-26 13:54:39</wp:post_date>
		<wp:post_date_gmt>2015-01-26 04:54:39</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4054</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427393314;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1505;}i:1;a:1:{s:2:"id";i:3501;}i:2;a:1:{s:2:"id";i:2614;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4055]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[4.3019596953363]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebGL Globe形式のデータセットをCesium上に視覚化して表示する</title>
		<link>http://shimz.me/blog/cesium/4061</link>
		<pubDate>Fri, 30 Jan 2015 07:17:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4061</guid>
		<description></description>
		<content:encoded><![CDATA[各都市の人口を棒グラフ状に表示します。

<a href="http://shimz.me/example/cesium/datasource/"><img src="http://shimz.me/blog/wp-content/uploads/2015/01/cesiumWebGLglobe140130.jpg" alt="Cesium WebGL Globe" width="690" height="427" class="aligncenter size-full wp-image-4062" /></a>

<a href="http://shimz.me/example/cesium/datasource/">example</a>

WebGL Globeというのは、Googleのデータアーツチームが地理情報をWebGLを使って視覚化するプラットフォームを作成したさいに考案したものらしいです。正直データセットの規格としてはあんまり使いやすい感じがしないですが。(ぶっちぇけGeoJSONのデータを表示する方が楽そうです)

CesiumにWebGL形式のデータを表示するには、カスタムデータソースを作成する必要があるのですが、ライブラリの中に用意されているのでそれを使います。

<h2>サンプル</h2>
 CesiumとともにWebGLGlobeDataSource.jsを読み込みます。
<pre class="lang:xhtml decode:true " >    &lt;script type="text/javascript" src="http://shimz.me/libs/Cesium-1.5/Build/Cesium/Cesium.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="WebGLGlobeDataSource.js"&gt;&lt;/script&gt;</pre> 
 

 
<pre class="lang:js decode:true " title="WebGLGlobeDataSource.js" >/**
 * This class is an example of a custom DataSource.  It loads JSON data as
 * defined by Google's WebGL Globe, https://github.com/dataarts/webgl-globe.
 * @alias WebGLGlobeDataSource
 * @constructor
 *
 * @param {String} [name] The name of this data source.  If undefined, a name
 *                        will be derived from the url.
 *
 * @example
 * var dataSource = new Cesium.WebGLGlobeDataSource();
 * dataSource.loadUrl('sample.json');
 * viewer.dataSources.add(dataSource);
 */
var WebGLGlobeDataSource = function(name) {

    //以下は「プライベート」変数とその初期値。
    this._name = name;
    this._changed = new Cesium.Event();
    this._error = new Cesium.Event();
    this._isLoading = false;
    this._loading = new Cesium.Event();
    this._entityCollection = new Cesium.EntityCollection();
    this._seriesNames = [];
    this._seriesToDisplay = undefined;
    this._heightScale = 10000000;
};

Object.defineProperties(WebGLGlobeDataSource.prototype, {
    //以下のプロパティは、すべてのカスタムDataSourceインスタンスで実装する必要があります。

    /**
     * インスタンスからデータソース名を取得します
     * @memberof WebGLGlobeDataSource.prototype
     * @type {String}
     */
    name : {
        get : function() {
            return this._name;
        }
    },
    /**
     * WebGL Globe JSON 形式には時間を扱う仕組みがないので、常に無効になります。
     * @memberof WebGLGlobeDataSource.prototype
     * @type {DataSourceClock}
     */
    clock : {
        value : undefined,
        writable : false
    },
    /**
     * エンティティインスタンスのコレクションを取得。.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {EntityCollection}
     */
    entities : {
        get : function() {
            return this._entityCollection;
        }
    },
    /**
     * データソースのロード中かどうかをチェックします
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Boolean}
     */
    isLoading : {
        get : function() {
            return this._isLoading;
        }
    },
    /**
     * データの内容が変更される際に発生するイベントを取得
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Event}
     */
    changedEvent : {
        get : function() {
            return this._changed;
        }
    },
    /**
     * エラーイベントを取得
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Event}
     */
    errorEvent : {
        get : function() {
            return this._error;
        }
    },
    /**
     * データソースのロード開始orロード停止時に発生するイベントを取得
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Event}
     */
    loadingEvent : {
        get : function() {
            return this._loading;
        }
    },

    //以下のプロパティは、このデータソースに固有のものです。

    /**
     * シリーズ名の配列を取得
     * @memberof WebGLGlobeDataSource.prototype
     * @type {String[]}
     */
    seriesNames : {
        get : function() {
            return this._seriesNames;
        }
    },
    /**
     * 表示するデータのシリーズ名を指定or表示中のデータのシリーズ名を取得
     * @memberof WebGLGlobeDataSource.prototype
     * @type {String}
     */
    seriesToDisplay : {
        get : function() {
            return this._seriesToDisplay;
        },
        set : function(value) {
            this._seriesToDisplay = value;
            
            //すべてのポリラインを反復処理し表示対象のシリーズに含まれるエンティティにshowプロパティを設定する
            var collection = this._entityCollection;
            var entities = collection.entities;
            collection.suspendEvents();
            for (var i = 0; i &lt; entities.length; i++) {
                var entity = entities[i];
                entity.polyline.show.setValue(value === entity.seriesName);
            }
            collection.resumeEvents();
        }
    },
    /**
     * データの値を視覚化する際の、高さのスケールを設定or取得する
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Number}
     */
    heightScale : {
        get : function() {
            return this._heightScale;
        },
        set : function(value) {
            if (value &gt; 0) {
                throw new Cesium.DeveloperError('value must be greater than 0');
            }
            this._heightScale = value;
        }
    }
});

/**
 * 指定されたURLからJSONデータを非同期に取得し、既存のデータと置き換える
 * @param {Object} url The url to be processed.
 * @returns {Promise} a promise that will resolve when the GeoJSON is loaded.
 */
WebGLGlobeDataSource.prototype.loadUrl = function(url) {
    if (!Cesium.defined(url)) {
        throw new Cesium.DeveloperError('url is required.');
    }

    //urlからデータソース名を作成
    var name = Cesium.getFilenameFromUri(url);

    //現在のデータソース名と違っていたら_nameプロパティを更新しチェンジイベントを発火
    if (this._name !== name) {
        this._name = name;
        this._changed.raiseEvent(this);
    }

    //プロミス(whenメソッド)を使ってjsonをロードするt
    var that = this;
    return Cesium.when(Cesium.loadJson(url), function(json) {
        return that.load(json, url);
    }).otherwise(function(error) {
        //プロミス処理中にエラーが発生したらロードを中止、エラーイベントを発火しプロミスをリジェクトする
        this._setLoading(false);
        that._error.raiseEvent(that, error);
        return Cesium.when.reject(error);
    });
};

/**
 * データをロード,既存のデータと置き換え.
 * @param {Object} data The object to be processed.
 */
WebGLGlobeDataSource.prototype.load = function(data) {
    //&gt;&gt;includeStart('debug', pragmas.debug);
    if (!Cesium.defined(data)) {
        throw new Cesium.DeveloperError('data is required.');
    }
    //&gt;&gt;includeEnd('debug');

    //既存のデータをクリア
    this._setLoading(true);
    this._seriesNames.length = 0;
    this._seriesToDisplay = undefined;

    var heightScale = this.heightScale;
    var entities = this._entityCollection;

    //大量のエンティティに変更を行う際、イベントを一時停止する。
    entities.suspendEvents();
    entities.removeAll();


    //WebGL Globe JSON example.
    //[["series1",[latitude, longitude, height, ... ]
    // ["series2",[latitude, longitude, height, ... ]]

    // 各シリーズ毎にループしプロパティを設定
    for (var x = 0; x &lt; data.length; x++) {
        var series = data[x];
        var seriesName = series[0];
        var coordinates = series[1];

        //シリーズ名を追加.
        this._seriesNames.push(seriesName);

        //最初のシリーズを初期表示対象として設定
        var show = x === 0;
        if (show) {
            this._seriesToDisplay = seriesName;
        }

        //JSONデータからエンティティを作成
        for (var i = 0; i &lt; coordinates.length; i += 3) {
            var latitude = coordinates[i];
            var longitude = coordinates[i + 1];
            var height = coordinates[i + 2];

            //高さが0のラインを無視
            if(height === 0) {
                continue;
            }

            var color = Cesium.Color.fromHsl((0.6 - (height * 0.5)), 1.0, 0.5);
            var surfacePosition = Cesium.Cartesian3.fromDegrees(longitude, latitude, 0);
            var heightPosition = Cesium.Cartesian3.fromDegrees(longitude, latitude, height * heightScale);

            //Cesiumのポリライングラフィックオブジェクトのインスタンスを作成
            var polyline = new Cesium.PolylineGraphics();
            polyline.show = new Cesium.ConstantProperty(show);
            polyline.material = Cesium.ColorMaterialProperty.fromColor(color);
            polyline.width = new Cesium.ConstantProperty(2);
            polyline.followSurface = new Cesium.ConstantProperty(false);
            polyline.positions = new Cesium.ConstantProperty([surfacePosition, heightPosition]);

            //Cesiumエンティティを生成し作成したポリラインを追加
            var entity = new Cesium.Entity(seriesName + ' index ' + i.toString());
            entity.polyline = polyline;

            //エンティティにseriesNameプロパティを作成し、シリーズ名を設定
            entity.addProperty('seriesName');
            entity.seriesName = seriesName;

            //コレクションにエンティティを追加。
            entities.add(entity);
        }
    }

    //すべてのデータの処理が終わったらレジュームイベントとチェンジイベントを呼ぶ
    entities.resumeEvents();
    this._changed.raiseEvent(this);
    this._setLoading(false);
};

WebGLGlobeDataSource.prototype._setLoading = function(isLoading) {
    if (this._isLoading !== isLoading) {
        this._isLoading = isLoading;
        this._loading.raiseEvent(this, isLoading);
    }
};
</pre> 



表示
 
<pre class="lang:js decode:true " >//カスタムデータストア(WebGL Globe)を作成
var dataSource = new WebGLGlobeDataSource();
//データストアをロードする
dataSource.loadUrl('population909500.json');

//CesiumViewerを表示
var viewer = new Cesium.Viewer('cesiumContainer', {
    animation : false,
    timeline : false
});

//時刻アニメーションを無効にする
viewer.clock.shouldAnimate = false;

//カスタムデータストアをビューアーに設定
viewer.dataSources.add(dataSource);</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4061</wp:post_id>
		<wp:post_date>2015-01-30 16:17:00</wp:post_date>
		<wp:post_date_gmt>2015-01-30 07:17:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4061</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cesium"><![CDATA[Cesium]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427318767;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2151;}i:1;a:1:{s:2:"id";i:3399;}i:2;a:1:{s:2:"id";i:3134;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4062]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-10.296362151387]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>地図上にグリッドを書いて色塗り(模索中)</title>
		<link>http://shimz.me/blog/map/4063</link>
		<pubDate>Tue, 03 Feb 2015 03:14:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4063</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/gridjson/"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/gmapgrid140203.jpg" alt="Google Maps GeoJSON Grid" width="690" height="365" class="aligncenter size-full wp-image-4065 border" /></a>

<a href="http://shimz.me/example/gmapv3/gridjson/">example</a>

100m × 100mのグリッドをGoogle Maps上に表示して、各セルをランダムに色塗りしています。

地図上にグリッドを表示するにはいくつか選択肢があって、「グリッドをそもそもデータとして用意しておく or クライアント側で計算して描画する」という２種類の方法があり、さらに、「グリッドをライン(線)として描く or ポリゴン(面)として描く」の２種類があります。

今回は<a href="http://qgis.org/ja/site/">QGIS</a>を使ってポリゴンのグリッドレイヤーを作成し、GeoJSONとしてエクスポートして、ランダムに色塗りしてみました。
ポリゴンだと各セルに属性値がつくので色塗りしやすかったり、他にもいろいろ使いやすかったり(例えば、ある特定のセルに含まれるポイントを抽出するとか）するのですが、グリッドを表示する範囲が広くなるとめっちゃ重くなります。

読み込んだデータを<a href="https://github.com/mapbox/geojson-vt">geojson-vt</a>を使ってタイル化するとか、<a href="http://turfjs.org/static/docs/module-turf_grid.html">truf.jsのgirdメソッド</a>を利用してそもそもクライアント側で表示されている範囲だけ描画するとか使用用途に合わせて使い分ける必要があるかもしれません。

他の方法については、またいずれ試してみたいと思います。

<h2>グリッドデータの作成</h2>  
QGISの「ベクタ」メニューから「調査ツール→ベクタグリッド」を選択してグリッドを作成しました。

[参考]
・<a href="http://www.geopacific.org/opensourcegis/gcngisbook/QGIS_book/4ed89332b/fqdipz">ベクタ解析機能 — GeoPacific.org</a>
・<a href="http://www.gis-okinawa.jp/QGIS/doc6202/index.html">グリッド線・ポリゴンを生成</a>

作成したベクターレイヤーをGeoJSONとしてエクスポートしGoogle Maps上に表示します。

<h3>グリッドの表示</h3>
 
<pre class="lang:js decode:true " >google.maps.event.addDomListener(window, 'load', function() {
	//Google Maps API初期化
	var map = new google.maps.Map(document.getElementById('map-canvas'), {
		center: { lat: 36.3894816, lng: 139.0634281 },
		zoom: 16
	});

	//カラー設定
	colorArray = ["#faa", "#aaf", "#afa"];
	
	//ポリゴンデータのスタイルを指定
	var styleFeature =  function(feature){
		return {
			strokeWeight: 0.5,
			strokeColor: 'black',
			zIndex: 4,
			fillColor: colorArray[Math.floor(Math.random() * 4)],　//とりあえずランダム
			fillOpacity: 0.3,
			visible: true
		};		
	}
	
	
	//gridデータを読み込み
	d3.json('grid.geojson', function(json) {		
		//データレイヤーに追加
		map.data.addGeoJson(json);
		//データレイヤのスタイルを指定
		map.data.setStyle(styleFeature);
	});
   
});
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4063</wp:post_id>
		<wp:post_date>2015-02-03 12:14:07</wp:post_date>
		<wp:post_date_gmt>2015-02-03 03:14:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4063</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427389953;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3178;}i:1;a:1:{s:2:"id";i:2670;}i:2;a:1:{s:2:"id";i:3509;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4065]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-33.91914612346]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ハッカソンやコンテストの優秀作品がエロサイトに変わる日</title>
		<link>http://shimz.me/blog/wordpress/4066</link>
		<pubDate>Wed, 04 Feb 2015 03:49:50 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4066</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://d.hatena.ne.jp/hanazukin/20150204/1423008998">中高生が取得したドメイン名がアダルトなサイトになる日 - 家庭内インフラ管理者の独り言（はなずきんの日記っぽいの）</a>

最近、ハッカソンやコンテストなどが増えてきたせいか、中高生に限らず結構よくみかけますね。

特に優秀作に選ばれたものなどは、他のサイトやブログなどで紹介されリンクが張られれますが、大概その後の管理運営を誰がするのかとか、予算が無いなどでドメインを維持できなくなって他の人間にわたると、それまでのリンクが全て変貌してしまう。

自治体のサイトから怪しげな情報商材へのリンクが貼られていたり、学生団体が運営していたらしい放置されたTwitterアカウントのプロフィール欄にあるリンク叩いたらアダルトサイトへ飛んだり、なんてことが過去ありました。

紹介したサイトの信頼度も下がるので注意したいところなんですが……リンクのチェックってメンドウなんですよねぇ。

とりあえず、Broken Link Checkerプラグインをインストールしてリンク切れチェックから始めようかと思います。


[参考]
<a href="http://www.adminweb.jp/wordpress-plugin/list/index5.html">Broken Link Checkerプラグイン(ブログからのリンク切れチェック) - WordPressプラグインの一覧</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4066</wp:post_id>
		<wp:post_date>2015-02-04 12:49:50</wp:post_date>
		<wp:post_date_gmt>2015-02-04 03:49:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4066</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427230185;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4122;}i:1;a:1:{s:2:"id";i:3305;}i:2;a:1:{s:2:"id";i:3371;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4166]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-0.88770645677142]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【数据可视化】中国語圏のD3.jsに関するブログやドキュメント</title>
		<link>http://shimz.me/blog/web/4073</link>
		<pubDate>Thu, 05 Feb 2015 07:50:59 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4073</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/02/kyoju000014-e1423122300227.jpg" alt="数据可视化" width="526" height="294" class="aligncenter size-full wp-image-4074 border" />

忙しくて勉強する間がありません。そのため記事にするネタもなかったりして…… orz

そこで、最近D3の話題を追っているとよく見かける、中国語圏のドキュメントを紹介します。

<ul>
<li><a href="http://www.ourd3js.com/wordpress/">OUR D3.JS | 数据可视化专题站</a></li>
<li><a href="http://www.cnblogs.com/winleisure/">楚狂人 - 博客园</a></li>
<li><a href="http://blog.csdn.net/tianxuzhang">以数为据，视不可挡！ - 博客频道 - CSDN.NET</a></li>
<li><a href="http://javascript.ruanyifeng.com/library/d3.html">D3.js -- JavaScript 标准参考教程（alpha）</a></i>
</ul>

丁寧に説明されたチュートリアル記事が多く、私も勉強させていただいています。
お勧めです。

あとスコット・マレイさんのチュートリアルの中国語版なども、読み比べてみると面白いかも。
<a href="http://www.pkuwwt.tk/d3-tutorial-cn/about.html">D3.js入门教程--关于此教程</a>

ありがとうGoogle 翻訳！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4073</wp:post_id>
		<wp:post_date>2015-02-05 16:50:59</wp:post_date>
		<wp:post_date_gmt>2015-02-05 07:50:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4073</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427309171;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2938;}i:1;a:1:{s:2:"id";i:2772;}i:2;a:1:{s:2:"id";i:2619;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4074]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-21.206755577172]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>リアルワールドをダンジョンPRG風に変えるスマホアプリ</title>
		<link>http://shimz.me/blog/d3-js/4075</link>
		<pubDate>Fri, 06 Feb 2015 01:52:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4075</guid>
		<description></description>
		<content:encoded><![CDATA[マッピングは麻薬。

<img src="http://shimz.me/blog/wp-content/uploads/2015/02/FogEffect.jpg" alt="FogEffect" width="546" height="347" class="aligncenter size-full wp-image-4080" />

ウィザードリィで、白紙のマッピングシートを自分の手で埋めていくというのは格別な楽しさがありますよね！　最近では「世界樹の迷宮」なども。
移動しながら地図を描いていくことで、少しずつ世界の姿が明らかきになっていく……たまらない。

逆にリアルワールドで自分の移動した履歴だけを地図上に浮かび上がらすと、自分から見えている世界がどれほど限定されたものなのかが明らかになって、これもまた楽しい。

<a href="http://portal.nifty.com/kiji/150128192647_1.htm">歩くと浮かび上がる地図 - デイリーポータルZ：@nifty</a>

そんなリアルワールドをダンジョンPRGのように変えるスマフォアプリを教えていただいたり、探してみたりしたので紹介します。


<h2> MyAllTracks</h2>
<a href="https://play.google.com/store/apps/details?id=org.liteapp.mat"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/unnamed.jpg" alt="MyAllTracks" width="192" height="304" class="alignnone size-full wp-image-4079" /></a>

Twitterで紹介していただいたANDROIDアプリ。
「アドベンチャーモード」では、塗りつぶされた地図の中、自分の移動した軌跡がマッピングされるそうです。他にも様々な機能ががあるのですが、詳細については下記記事を参照してください。

<a href="http://octoba.net/archives/20140912-android-app-myalltracks-367623.html"> お前は今まで通った道をすべて覚えているか？通った道の軌跡をすべて一枚の地図に表示するアプリ : MyAllTracks</a>


<a href="https://play.google.com/store/apps/details?id=org.liteapp.mat"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/myalltracksadd.jpg" alt="myalltracksadd" width="609" height="90" class="aligncenter size-full wp-image-4078" /></a>


<h2>世界の霧</h2>
<a href="https://itunes.apple.com/jp/app/shi-jieno-wu/id505367096?mt=8&amp;uo=4&amp;at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/screen568x568.jpeg" alt="世界の霧" width="192" height="341" class="alignnone size-full wp-image-4077" target="itunes_store" /></a>

こちらはiPhoneで同様のことができるアプリです。
霧で覆われた世界で、自分が移動した経路上の霧が晴れていきます。


<a href="https://itunes.apple.com/jp/app/shi-jieno-wu/id505367096?mt=8&uo=4&at=10lMp5" target="itunes_store" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a>


公式の動画をみると、まさにRPGやシミュレーションゲームなどでおなじみのフォッグエフェクトからインスパイアされて作られたアプリのようです。

<iframe width="640" height="360" src="https://www.youtube.com/embed/2Ma2Ye7r8o8" frameborder="0" allowfullscreen></iframe>




<h2>D3を使ってFog of World風のエフェクトを作る</h2>
D3.jsを使って霧の効果を作成するチュートリアルを公開されている方がいます。

<a href="http://vasir.net/blog/data-visualization/using-d3-and-svg-filters-to-create-fog-of-war">Using D3 and SVG Filters to Create a Fog of War Effect</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4075</wp:post_id>
		<wp:post_date>2015-02-06 10:52:24</wp:post_date>
		<wp:post_date_gmt>2015-02-06 01:52:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4075</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427334274;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3649;}i:1;a:1:{s:2:"id";i:2570;}i:2;a:1:{s:2:"id";i:4015;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4080]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[10.824677384569]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>形がかっこいい順に都道府県を並べてみた。</title>
		<link>http://shimz.me/blog/d3-js/4081</link>
		<pubDate>Fri, 06 Feb 2015 09:49:03 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4081</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/prefrank/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/prefcoolrankthm-e1423206654257.jpg" alt="prefcoolrankthm" width="690" height="506" class="aligncenter size-full wp-image-4082 border" /></a>

<a href="http://ranking.goo.ne.jp/ranking/category/056/4ruPipfGNy0v/p1/">「形がかっこいい」と思う都道府県ランキング - gooランキング</a>

Gooのランキングで「形がかっこいい」都道府県ランキングが公開されていたので、実際の都道府県をかっこいい順に並べてみました。
↓こんな感じ

<a href="http://shimz.me/example/d3js/geo_example2/prefrank/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/prefcoolrank-129x1024.jpg" alt="prefcoolrank" width="129" height="1024" class="size-large wp-image-4083 border" /></a>

わりとイメージの中に浮かぶ県の形と、実際の形にはギャップがあるのかなと。
（地元民はそんなことないのでしょうけど）

あと、北海道大きすぎ。

<a href="http://shimz.me/example/d3js/geo_example2/prefrank/index.html">example</a>

クリックすると「かっこいい順」と「元の地図の形」とに切り替わります。

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >d3.json("prefrank.geojson", function(json) {
	d3main(json);
});


function d3main(json){

	var tooltip = d3.select("body")
		.append("div")
		.attr("class", "tooltip")
		.style("position", "absolute")
		.style("z-index", "10")
		.style("visibility", "hidden");

	var geodata = json.features;

	projection = d3.geo
	    .mercator()		
	    .scale(3000)	
	    .translate([800,650])
	    .center([139.0032936, 36.3219088]); 

	var path = d3.geo.path().projection(projection);　

	var svg = d3.select("svg");	

	var japan =  svg.append("svg:g")
		.selectAll("path")
		.data(geodata)
		.enter()
		.append("g");
		
		japan.append("svg:path")
		.attr({
			"d": path,
			"fill": "green",
			"fill-opacity": 0.5,
			"stroke": "black"
		})
		.on("mouseover", function(){
			tooltip.style("visibility", "visible");
		})		
		.on("mousemove", function(d){
			tooltip
			.style("top", (d3.event.pageY-10)+"px")
			.style("left",(d3.event.pageX+10)+"px")
			.html(
				"&lt;h2&gt;" + d.properties.rank + "位 "+ d.properties.ObjName  + "&lt;/h2&gt;"
			);
		})
		.on("mouseout", function(){
			tooltip.style("visibility", "hidden");
		})			
		
		var rankOrder = function(){
			japan.transition().attr("transform", function(d, i){
				var center = path.centroid(d); 
				var x = ~~center[0]; 
				var y = ~~center[1];
				var nx = 200; 
				var ny = d.properties.rank * 160 + 100; 
				return "translate("+(0-x)+","+(0-y)+"),translate("+nx+","+ny+")";		    
			}).duration(4000);			
		}
		
		var mapOrder = function(){
			japan.transition().attr("transform", "translate(0, 0)").duration(4000);		
		}
		
		d3.select("body").on("click", toggle(mapOrder, rankOrder));
		
		rankOrder();
}

function toggle(){
    var fn = arguments;
    var l = arguments.length;
    var i = 0;
    return function(){
        if(l &lt;= i) i=0;
        fn[i++]();            
    }
}</pre> 

実のところ、以前作った下記記事のコードをちょこっと変えただけだったりします。

<a href="http://shimz.me/blog/d3-js/3147">【D3.js】SVGで作成した都道府県の地形を並べて表示する</a>
<a href="http://shimz.me/blog/d3-js/3742">【D3.js】Force-Directed Japan</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4081</wp:post_id>
		<wp:post_date>2015-02-06 18:49:03</wp:post_date>
		<wp:post_date_gmt>2015-02-06 09:49:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4081</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427375845;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3147;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:2975;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4082]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-16.859628238285]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日本列島を囲む境界ボックス四隅の緯度経度を求める</title>
		<link>http://shimz.me/blog/d3-js/4086</link>
		<pubDate>Wed, 11 Feb 2015 07:52:20 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4086</guid>
		<description></description>
		<content:encoded><![CDATA[いまちょっと弄っているライブラリを使う関係で、日本列島がすっぽり収まるBOXの四隅の座標(緯度経度)が必要になりました。ググればどっかに載っているかな？　と思っていたのですが、意外と見つからない。

「それっぽいサンプルがあった！」と喜び勇んでみてみると、四隅ではなく左上と右下の座標しか出してくれなくてがっかり。

<script src="http://jsdo.it/blogparts/tGX0/js?width=465&amp;height=496&amp;view=screenshot" type="text/javascript"></script>

しかも、よく見たら自分がずいぶん前にjsdo.itで作成していたものでした。
もう、ほんとなんか残念 orz
とりあえず、大体のところが分かれば良いので、D3.jsで座標を出力してみました。
<h2>サンプル</h2>
<a href="http://shimz.me/example/d3js/geo_example3/bounds/japan.html"><img class="alignnone size-full wp-image-4087 border" src="http://shimz.me/blog/wp-content/uploads/2015/02/kyoju000017.jpg" alt="日本　境界ボックス" width="577" height="465" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/bounds/japan.html">example</a>
<pre class="lang:js decode:true ">d3.json("../../_geodata/japan_kanji.geojson", function(json){
	d3draw(json);
});

function d3draw(geojson) {
	
	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(1000)	//スケール（ズーム）の指定
		.translate([400 , 300]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター
	
	
	var svg = d3.select('svg');
	var mg  = svg.append('g');
	var bg  = svg.append('g');
	
	//地形の描画
	var land = mg.append('path')
		.attr({
			"d": path(geojson),
			"stroke": "white",
			"fill": "#ccc"
		});


	//境界情報の取得
	var drawBounds = function(d){
			var b = path.bounds(d);
			return "M" + b[0] + "H" + b[1][0] + "V" + b[1][1] + "H" + b[0][0] + "Z";
		}

	//境界BOXの描画
	var b = path.bounds(geojson); 
	var bounds = bg.append('path')
		.attr({
			"d":  function(){  return "M" + b[0] + "H" + b[1][0] + "V" + b[1][1] + "H" + b[0][0] + "Z";} ,
			"stroke": "red",
			"fill": "#ccc",
			"fill-opacity": 0
		})

		
	//コーナーのpixcel座標データ	
	var corner = [
		{x:b[0][0], y:b[0][1]},
		{x:b[1][0], y:b[1][1]},
		{x:b[0][0], y:b[1][1]},
		{x:b[1][0], y:b[0][1]},
	]
	
	svg.selectAll("circle")
		.data(corner)
		.enter()
		.append("circle")
		.attr({
			cx:function(d){ return d.x },
			cy:function(d){ return d.y },
			r:10
		})
		.append("title")
		.text(function(d){
			 return projection.invert([d.x, d.y]); //pixcel座標→緯度経度に変換
		});

}
</pre>
四隅のサークルにマウスオーバーすると緯度経度が表示されます。
コピペしたいときは、Chromeの「要素を検証」からどうぞ(雑)

<img class="alignnone size-full wp-image-4089" src="http://shimz.me/blog/wp-content/uploads/2015/02/15021101.jpg" alt="座標コピペ" width="558" height="426" />
<h2>高崎版も作ってみた</h2>
<a href="http://shimz.me/example/d3js/geo_example3/bounds/takasaki.html"><img class="alignnone size-full wp-image-4088 border" src="http://shimz.me/blog/wp-content/uploads/2015/02/kyoju000018.jpg" alt="高崎　境界ボックス" width="577" height="457" /></a>

<a href="http://shimz.me/example/d3js/geo_example3/bounds/takasaki.html">example</a>
<h2>ランダムにマーカー配置</h2>
<a href="http://turfjs.org/">turf.js</a>を使って日本の境界ボックス内にランダムにマーカー(1000個)を配置してみた。
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/turf/googlemaps/random/index.html"></iframe>

北側でボックスから大幅にはみ出してマーカーが設置される。後で調査。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4086</wp:post_id>
		<wp:post_date>2015-02-11 16:52:20</wp:post_date>
		<wp:post_date_gmt>2015-02-11 07:52:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4086</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427395123;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3548;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:3489;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4087]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-5.3488981061139]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>インターナショナルオープンデータデイに参加します。</title>
		<link>http://shimz.me/blog/other/4095</link>
		<pubDate>Tue, 17 Feb 2015 00:07:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4095</guid>
		<description></description>
		<content:encoded><![CDATA[今年は参加します。

<a href="http://codefortokyo.doorkeeper.jp/events/20112"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/tokyo150221hackthon.jpg" alt="Code for Tokyo 20150221 hackathon" width="690" height="255" class="aligncenter size-full wp-image-4096 border" /></a>

<a href="http://codefortokyo.doorkeeper.jp/events/20112">「データでみえるTokyoガイドブック」 をつくろう - Code for Tokyo</a>

2月21日（土）（International Open Data Day）に行われる、<a href="http://codefor.tokyo/">Code for Tokyo</a>にてメンターをやります。

<a href="http://www.smartvision.co.jp/mentor.html">メンターとは？</a>　なんか凄そうなのですが、ハッカソンにおけるメンターというのはようするにアドバイザーみたいなものですね。D3.jsやGoogle Maps API、leaflet.jsとかその辺りで分からない事があったら、使ってやってください。多少、知ってます。

参加される皆さん、よろしくお願いします。

<h2>ハッカソンで使えそうなまとめ集</h2>
<h3>オープンデータ</h3>
<a href="http://citydata.jp/%E6%9D%B1%E4%BA%AC%E9%83%BD">東京都 | 地域資源の情報をオープンデータとして共有していくためのデータベースサイト | CityData</a>
<a href="http://matome.naver.jp/odai/2135883023685089601">オープンデータ＆公開データのまとめ</a>
<a href="http://matome.naver.jp/odai/2142233800279951701">ＧＩＳ(地理空間情報)データ、まとめ</a>

もし、ある程度作りたいモノが決まっているならば、ハッカソンの前にデータの目星を付けておくといいかもしれません。データを見つけ出すのに結構な時間が掛かるので。

[関連]
<a href="http://shimz.me/blog/other/4104">オープンでないオープンデータに注意</a>

<h3>ツール類</h3>
<a href="http://matome.naver.jp/odai/2139063010824695001">データジャーナリズム ツールまとめ</a>
<h3>D3.js関連</h3>
<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>
<a href="http://matome.naver.jp/odai/2138966193538794601">D3.js プラグインまとめ</a>
<a href="http://matome.naver.jp/odai/2138966107937611601">D3.js Wrapper Library</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4095</wp:post_id>
		<wp:post_date>2015-02-17 09:07:11</wp:post_date>
		<wp:post_date_gmt>2015-02-17 00:07:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4095</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427139012;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4112;}i:1;a:1:{s:2:"id";i:3202;}i:2;a:1:{s:2:"id";i:4108;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4096]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-21.921779940846]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ChromeのExtension(拡張機能)が出す、エラーや警告がウザイので消したい。</title>
		<link>http://shimz.me/blog/troubleshooting/4097</link>
		<pubDate>Tue, 17 Feb 2015 01:26:37 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4097</guid>
		<description></description>
		<content:encoded><![CDATA[Chromeのデベロッパーツールでデバッグをしていると、Extensionの警告なんかが出力されてウザイときがある。

<img src="http://shimz.me/blog/wp-content/uploads/2015/02/Chrome_Extension_alert_suck01.jpg" alt="Chrome_Extension_alert_suck01" width="690" height="123" class="alignnone size-full wp-image-4098 border" />

いちいちシークレットウインドで確認するのもメンドウなので、Filterに「-chrome-extension」と入力して消していたりするんだけど、これもっと簡単に出力させないようにする方法がないものなのだろうか？

<img src="http://shimz.me/blog/wp-content/uploads/2015/02/Chrome_Extension_alert_suck02.jpg" alt="Chrome_Extension_alert_suck02" width="690" height="101" class="alignnone size-full wp-image-4099 border" />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4097</wp:post_id>
		<wp:post_date>2015-02-17 10:26:37</wp:post_date>
		<wp:post_date_gmt>2015-02-17 01:26:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4097</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4099]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427394157;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3629;}i:1;a:1:{s:2:"id";i:3091;}i:2;a:1:{s:2:"id";i:3684;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-38.652187342156]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】トランジション終了時にコールバックを呼ぶ</title>
		<link>http://shimz.me/blog/d3-js/4100</link>
		<pubDate>Wed, 18 Feb 2015 02:03:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4100</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://jsdo.it/_shimizu/gTgy"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/transitionEndAll150218.jpg" alt="【D3.js】トランジション終了時にコールバックを呼ぶ" width="486" height="520" class="aligncenter size-full wp-image-4101 border" /></a>

D3を使って要素を移動したりスタイルを変化させる際、変更(Transition)の終了を待ってなにがしかの処理を行いたい時があります。そんな時に使えるTIPS.

<h2>Mike Bostock Solution</h2>
トランジション終了時にコールバックを実行するヘルパー関数を作成することで実現できるそうです。

参照：
<a href="https://groups.google.com/forum/#!msg/d3-js/WC_7Xi6VV50/j1HK0vIWI-EJ">https://groups.google.com/forum/#!msg/d3-js/WC_7Xi6VV50/j1HK0vIWI-EJ</a>

<pre class="lang:js decode:true " >//ヘルパー関数
function endall(transition, callback) { 
	var n = 0; 
	transition 
		.each(function() { ++n; }) 
		.each("end", function() { if (!--n) callback.apply(this, arguments); }); 
};

//callメソッドでendall関数と終了時に実行するコールバックを適用する
d3.selectAll("g").transition().call(endall, function() { 
	console.log("all done"); 
}); 
</pre> 


<h3>サンプル</h3>
<script type="text/javascript" src="http://jsdo.it/blogparts/gTgy/js?width=465&height=496&view=screenshot"></script>



 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4100</wp:post_id>
		<wp:post_date>2015-02-18 11:03:22</wp:post_date>
		<wp:post_date_gmt>2015-02-18 02:03:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4100</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ac79979f66529eef92f9236014638af4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371863;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3029;}i:1;a:1:{s:2:"id";i:2819;}i:2;a:1:{s:2:"id";i:3501;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-14.645024200299]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>オープンでないオープンデータに注意</title>
		<link>http://shimz.me/blog/other/4104</link>
		<pubDate>Thu, 19 Feb 2015 00:33:23 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4104</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/02/symbol_OPEN-DATA-JAPAN_h256px.png" alt="オープンデータ" width="225" height="265" class="aligncenter size-full wp-image-4105" />

インターナショナルオープンデータデイに向けて「<a href="http://matome.naver.jp/odai/2135883023685089601">オープンデータ＆公開データのまとめ</a>」のリンクを整理していたら、自治体がオープンデータとして公開しているデータの中に、商業利用不可であったり改変・２次利用禁止のデータが含まれているのを知ったので別途まとめてみました。
（あくまで自分が見つけた範囲内で、全て掲載できているわけではありません）

<a href="http://matome.naver.jp/odai/2142426054540539901">オープンではないオープンデータまとめ</a>


これらのデータをハッカソンで使う分には問題ないはずですが、ハッカソン後、ビジネス目的で利用したりすると問題になる可能性があるので確認しましょう。
ちなみに、上記で表示しているオープンデータの広報用ロゴマークも使用制限がいまいち不明瞭だったり、改変時には連絡が必要です。ぶっちゃけ、民間企業の公式アカウントが自らコラ素材を配布しているご時世に狭量なことよのう……と思ったりします。ゆるキャラ狙いのデザインなんでしょうけど、ゆるキャラは弄られて遊ばれてなんぼのモノですよ！

その他、「オープンデータ」として公開されているものライセンスに関する記載がないデータや、ほぼ大丈夫なはずですが「原則CC-BY」などの記載がなくデータごとにライセンスの確認が促されているオープンデータポータルに関しても掲載しました。

本来ならばオープンデータとして提供されているならば自由に使えるはずなのですが、そもそも日本における「オープンデータ」という言葉の定義が揺らいでいたり、オープンと言いつつ使用制限や条件があるデータが結構あるので、結局のところどこまでオープンという言葉を信用していいのか分からず、問い合わせが必要だったりしてメンドクサイですね。

<blockquote>アクセスに条件を付けるような使用規約などという言葉は使うべきではない。使用規約は、本来オープンなはずのファイルへのアクセスを規制するズルイやり方だ。素晴らしい公共リソースになりたいのなら、そんな態度は避けるべきだ。

<div style="text-align: right"><a href="http://makezine.jp/blog/2014/08/the-scramble-to-build-thingiverse-gov-is-on.html">Make:</a></div></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4104</wp:post_id>
		<wp:post_date>2015-02-19 09:33:23</wp:post_date>
		<wp:post_date_gmt>2015-02-19 00:33:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4104</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4105]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371555;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3711;}i:1;a:1:{s:2:"id";i:4095;}i:2;a:1:{s:2:"id";i:3202;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[40.679300384324]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>角川学芸出版50%OFF大規模セールで買った本</title>
		<link>http://shimz.me/blog/book/4106</link>
		<pubDate>Thu, 19 Feb 2015 02:15:29 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4106</guid>
		<description></description>
		<content:encoded><![CDATA[「<a href="http://amzn.to/1MyPwQz">角川学芸出版_50%OFF大規模セール</a>」というのがやっていたので、何冊か買ってみました。
読んだら感想をブログに載せようと思います。


<h2>買った本</h2>
<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IAQ7XI8/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41Ohad3vCuL._SL160_.jpg" alt="読む数学 (角川ソフィア文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IAQ7XI8/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">読む数学 (角川ソフィア文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.02.19</div></div><div class="amazlet-detail">KADOKAWA / 角川学芸出版 (2014-02-13)<br />売り上げランキング: 81<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IAQ7XI8/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

とりあえず基礎から。

<br/>



<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IKF4L9S/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ua2ov9YaL._SL160_.jpg" alt="地名のたのしみ　歩き、み、ふれる歴史学 (角川ソフィア文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IKF4L9S/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">地名のたのしみ　歩き、み、ふれる歴史学 (角川ソフィア文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.02.19</div></div><div class="amazlet-detail">KADOKAWA / 角川学芸出版 (2014-02-27)<br />売り上げランキング: 1,152<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IKF4L9S/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

なんとなく自分の中で地名がブーム。

<br/>



<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DONC5JO/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51GbMj8Bx%2BL._SL160_.jpg" alt="なぜ人は地図を回すのか　方向オンチの博物誌 (角川ソフィア文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DONC5JO/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">なぜ人は地図を回すのか　方向オンチの博物誌 (角川ソフィア文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.02.19</div></div><div class="amazlet-detail">KADOKAWA / 角川学芸出版 (2013-07-11)<br />売り上げランキング: 21,430<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DONC5JO/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

下記ブログの記事を読んで「地図をクルクル回す」こと興味があったので買ってみた。
<a href="http://d.hatena.ne.jp/semimaruclimb/20120103/1325602055">地図をクルクル回す人は、なぜバカにされるのか？ - 方向音痴な言説</a>


<br/>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DI8TN4U/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51j3DIr7UEL._SL160_.jpg" alt="学校の怪談　口承文芸の研究Ｉ (角川ソフィア文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DI8TN4U/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">学校の怪談　口承文芸の研究Ｉ (角川ソフィア文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.02.19</div></div><div class="amazlet-detail">KADOKAWA / 角川学芸出版 (2013-06-27)<br />売り上げランキング: 1,369<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DI8TN4U/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

口承とか噂話とかの研究本って好きなので見つけると買ってしまう。
<br/>


<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CPEBC7Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/513Xdxt4kBL._SL160_.jpg" alt="脳はなにを見ているのか (角川ソフィア文庫)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CPEBC7Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">脳はなにを見ているのか (角川ソフィア文庫)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 15.02.19</div></div><div class="amazlet-detail">KADOKAWA / 角川学芸出版 (2013-05-16)<br />売り上げランキング: 4,207<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CPEBC7Y/toriaezu04b-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

錯覚とか錯視って素敵。

<br/>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4106</wp:post_id>
		<wp:post_date>2015-02-19 11:15:29</wp:post_date>
		<wp:post_date_gmt>2015-02-19 02:15:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4106</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427332161;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3222;}i:1;a:1:{s:2:"id";i:3228;}i:2;a:1:{s:2:"id";i:3378;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-33.91914612346]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>メンターをやってみました。</title>
		<link>http://shimz.me/blog/other/4108</link>
		<pubDate>Sun, 22 Feb 2015 01:40:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4108</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2015/02/Mentor150222.jpg" alt="メンターをやってみた" width="447" height="544" class="aligncenter size-full wp-image-4109" />

昨日のインターナショナルオープンデータデイに、<a href="http://shimz.me/blog/other/4095">Code for Tokyoさん主催のハッカソン</a>で初めてメンターなるものをやってみたのでその感想です。

エンジニア系のメンターに寄せられる質問というのは大体２通りで、「こういうことをやりたいのだけれど、どうやったらいいか」と「やってみたが、動かない」のほぼ二種類です。
で、前者の場合「やりたいことも、やる方法も分かるが、おそらく時間的に間に合いそうもない」というときにどう回答するかで悩むのですが、ステップを提示して「まずは、ここまでやってみて、これができたら次にこうしてみましょう」みたいな提案ができると良いのかなと思いました。

次に後者の場合ですが、これはもうデバッグするしかありません。しかし「メンターがよけいな時間使っちゃいかんだろう」という思いでめっちゃ焦ります。でも、落ち着かないと見つかるバグも見つからないので冷静になるしかないですね。ただ、使い慣れていない開発環境、キーボード配列、エディタなどが意外と障害になるなーと思いました。ブラウザのデベロッパーツールも使い慣れていないと「あれ確認するにはどうしたらいいだっけ？」ってなりますね。まだまだ修行が足りない。

この辺り、なにかうまい方法が無いものか検討中です。自分の環境からリモートデバッグできるような方法があったりすると、もっと効率よく解決ができるかもしれないなと。それらを含め、いろいろと勉強になっりました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4108</wp:post_id>
		<wp:post_date>2015-02-22 10:40:58</wp:post_date>
		<wp:post_date_gmt>2015-02-22 01:40:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4108</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427318752;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1031;}i:1;a:1:{s:2:"id";i:3066;}i:2;a:1:{s:2:"id";i:3113;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4109]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-27.259500035575]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>あなたがInstagramにアップした写真は全世界に向けて公開されています。</title>
		<link>http://shimz.me/blog/web/4110</link>
		<pubDate>Mon, 23 Feb 2015 01:39:49 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4110</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.whatsthere.co/"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/whatsthere140223.jpg" alt="whatsthere140223" width="590" height="358" class="aligncenter size-full wp-image-4111 border" /></a>

「そんなの分かってるよ！」という人も多いと思いますが。

<a href="http://www.whatsthere.co/">Whatsthere</a>という、地図上でInstagramの写真を検索できるサイトが面白くて最近よく見ています。

左上の検索窓に「Tokyo」とか「Takasaki」とか「Maebashi」とか入れて検索すると、Instagramにアップされた各地の写真が一覧として出力されるのですが、たぶん、こういったサイトで検索されるようなことを想定していないんじゃないかという写真が結構出てきます。写真を中心としたSNSってTwitterとかに比べるとプライベート感みたいなものが発生しやすいのかもしれません。フォロアーだけに見せているつもりでもAPIを通じていろんなサービスで見れる状態になっていたりします。その辺りわかっていてアップしているなら全然問題ないのですが、なんとなく心配になったので記事にしてみました。

<h3>Instagramの公開設定</h3>
Instagramでは「フォロアーにだけ写真を公開する」ような設定が行えます。ただしアプリからしか設定できません。

参考：<a href="https://www.facebook.com/help/instagram/448523408565555?locale=ja_JP">「写真や動画を非公開にして、承認済みのフォロワーだけが表示できるようにするにはどうすればよいですか。」</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4110</wp:post_id>
		<wp:post_date>2015-02-23 10:39:49</wp:post_date>
		<wp:post_date_gmt>2015-02-23 01:39:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4110</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427339115;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2609;}i:1;a:1:{s:2:"id";i:2194;}i:2;a:1:{s:2:"id";i:1031;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4111]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-13.116314062312]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「データでみえるTokyoガイドブック」イベントに参加してきました。</title>
		<link>http://shimz.me/blog/other/4112</link>
		<pubDate>Tue, 24 Feb 2015 00:12:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4112</guid>
		<description></description>
		<content:encoded><![CDATA[2/21、インターナショナルオープンデータデイに東京にて行われたイベントに参加してきました。



メンターとしての参加だったのですが、役に立ったかどうなのかは微妙です。反省点については<a href="http://shimz.me/blog/other/4108">こちら</a>に書きました。写真とかとくに撮っていないのですが、下記Togetterやポータルサイトから各地のイベント内容がうかがえます。

<a href="http://togetter.com/li/786702">International Open Data Day 2015 in Japan. - Togetterまとめ</a>
<a href="http://odd15.okfn.jp/">オープンデータデイ2015 | 2/21(土)に全世界で開催 </a>

まだ掲載されていない会場もありますが、随時上がっていくと思うので興味ある方はご覧ください。
そして来年はぜひ参加を！


<h2>作ったもの</h2>
自分も何か作りたいなと思いイベント前に一つ作りました。
「Tokyoガイド」といったらミシュランしか思い浮かばなかったのでミシュランガイドを作成。
勝手なテーマとして「leaflet.jsを使ってプレゼン資料を作る」というのに挑戦してみました。
アローキーの左右で遷移します。スマホの時は画面下部のメッセージエリアをタップすると進みます。

<a href="http://shimz.me/datavis/codefortokyo150221/"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/codefortokyohackathon120221.jpg" alt="ミシュラン東京2015" width="590" height="373" class="aligncenter size-full wp-image-4115 border" /></a>

<a href="http://shimz.me/datavis/codefortokyo150221/">example</a>

いらんエフェクトとか掛けているせいで重くなっているのはご愛嬌です。


<h3>データ</h3>
作成したミシュラン東京2015のデータは、gistにアップしてあります。
「何が起きても自己責任」を踏まえた上でご自由にご利用ください。

<a href="https://gist.github.com/shimizu/e41cfd32ade965f01670">https://gist.github.com/shimizu/e41cfd32ade965f01670</a>

<h2>関連</h2>
<a href="http://shimz.me/blog/other/4095">インターナショナルオープンデータデイに参加します。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4112</wp:post_id>
		<wp:post_date>2015-02-24 09:12:25</wp:post_date>
		<wp:post_date_gmt>2015-02-24 00:12:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4112</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-42.778845856351]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427397744;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3614;}i:1;a:1:{s:2:"id";i:3649;}i:2;a:1:{s:2:"id";i:4015;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ニッチな技術書を探しているなら「PACKT PUBLISHING」がお勧め</title>
		<link>http://shimz.me/blog/book/4122</link>
		<pubDate>Fri, 27 Feb 2015 00:32:11 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4122</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.packtpub.com/"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502261.jpg" alt="packtpublishing" width="690" height="355" class="aligncenter size-full wp-image-4117 border" /></a>

最近インプットモードに入っているのでアウトプットできることがあまりありません。
積読になっている電子書籍を消化していくので精一杯だったり。

そこで、最近ちょくちょく利用している海外の出版社の電子書籍ストアを紹介します。

<a href="https://www.packtpub.com/">Packt Publishing | Technology Books, eBooks &amp; Videos</a>

「Packt Publishing」はイギリスを拠点とする出版社です。主にIT系の技術書を出版していて日本ではあまりお目にかからないタイプのニッチな専門書を多数出版しています。
例えばウチのブログのジャンルでは、「<a href="https://www.packtpub.com/web-development/leafletjs-essentials">Leaflet.js Essentials</a>」とか「<a href="https://www.packtpub.com/big-data-and-business-intelligence/data-visualization-successful-design-process">Data Visualization: a successful design process</a>」とか、他「<a href="https://www.packtpub.com/web-development/mastering-d3js">Mastering D3.js</a>」「<a href="https://www.packtpub.com/web-development/data-visualization-d3js-cookbook">Learning D3.js Mapping</a>」などD3.js本も結構あります。

こちらの出版社の書籍はKndleストアでも購入できるのですが、公式サイトで購入する方がいろいろと便利だと感じたのでその利点を紹介します。

<h2>色んなファイル形式に対応</h2>
Amazonで買うとロックインされてしまいますが、公式サイトで購入すれば PDF, ePub, Mobiなど色んなファイル形式でダウンロードができます。
管理画面からワンクリックでSend-to-Kindleに書籍を送信することができるので、 kindleユーザーにも非常に便利です。
他、サンプルコードのダウンロードや「Read Online」ボタンをクリックすればブラウザで直接書籍を読むことができます。

<a href="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502262.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502262-1024x527.jpg" alt="packtpublishing" width="580" height="298" class="alignnone size-large wp-image-4118 border" /></a>

<h2>セールが激安</h2>
たまに激安セールが行われます。今年の年明けに行われたセールでは「全品£5セール」が行われていました。しかもセール最終日には全品£3に。(単価は英ポンドです。日本円にすると£3=約560円ぐらい。激安！)

月額/年額固定費で読み放題プランなどもあります。
<a href="https://www.packtpub.com/books/subscription/packtlib">PacktLib | PACKT Books</a>

支払いにはPayPalが使えます。

<h2>Chromeの翻訳機能が使える</h2>
「Read Online」のビューアーはHTML5で作成されているので、Chromeブラウザの翻訳機能を使って本文を翻訳することができます。
多くの技術書は平坦な英語で書かれているので、わりと自動翻訳でも読めます。
文章の内容がある程度わかれば、後はサンプルコード読めばいいので、結構つかえます。

・原文
<a href="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502263.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502263-1024x523.jpg" alt="packtpublishing" width="580" height="296" class="alignnone size-large wp-image-4119 border" /></a>

・自働翻訳
<a href="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502264.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2015/02/packtpublishing1502264-1024x523.jpg" alt="packtpublishing1502264" width="580" height="296" class="alignnone size-large wp-image-4120 border" /></a>

自動翻訳でざっと眺めてから、あとは辞書を片手に原文を読めば大概の書籍はなんとかなります。

そんなわけで「<a href="https://www.packtpub.com">PACKT PUBLISHING</a>」お勧めです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4122</wp:post_id>
		<wp:post_date>2015-02-27 09:32:11</wp:post_date>
		<wp:post_date_gmt>2015-02-27 00:32:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4122</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[-27.259500035575]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4117]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385849;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3121;}i:1;a:1:{s:2:"id";i:2594;}i:2;a:1:{s:2:"id";i:3378;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.jsでファイル監視を手軽に行えるモジュール「chokidar」</title>
		<link>http://shimz.me/blog/node-js/4123</link>
		<pubDate>Mon, 02 Mar 2015 03:21:18 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4123</guid>
		<description></description>
		<content:encoded><![CDATA[node.jsにはファイル監視を行えるAPI「fs.watch()」や「fs.watchFile()」がありますが、なんだかんだいろいろめんどくさかったりします。

【参考】<a href="http://tech.nitoyon.com/ja/blog/2013/10/02/node-watch-impl/">Node.js の fs.watch() と fs.watchFile() の違い - てっく煮ブログ</a>

そういったメンドクサイ部分を綺麗にラップしてファイル監視を手軽に行えるようにしたモジュールが「<a href="https://github.com/paulmillr/chokidar">chokidar</a>」です。

<h2>サンプル</h2>
スクリプトを起動したカレントディレクトリ(子ディレクトリを含む)を監視して、ファイルの追加や削除、編集などが行われたら通知します。

<img src="http://shimz.me/blog/wp-content/uploads/2015/03/chokidar150302.jpg" alt="ファイル監視" width="677" height="480" class="alignnone size-full wp-image-4124 border" />

 
<pre class="lang:js decode:true " >var chokidar = require('chokidar')
var watcher = chokidar.watch('.', {	//watch対象ディレクトリorファイル
	ignored: /[\/\\]\./,	//無視する対象
	persistent:true	//監視を継続するかどうか
	})


watcher.on('ready', function() { console.log("監視開始"); })
	.on('add', function(path) { console.log("追加ファイル-&gt; " + path); })
	.on('addDir', function(path) { console.log("追加ディレクトリ-&gt; " + path); })
	.on('unlink', function(path) { console.log("削除されました-&gt; " + path); })
	.on('unlinkDir', function(path) { console.log("削除されました-&gt; " + path); })
	.on('change', function(path) { console.log("修正されました-&gt; " + path); })
	.on('error', function(error) { console.log("エラーです-&gt; " + error); })</pre> 

「ファイルが更新されたら○○する」みたいなスクリプトが手軽に書けて便利です。
 





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4123</wp:post_id>
		<wp:post_date>2015-03-02 12:21:18</wp:post_date>
		<wp:post_date_gmt>2015-03-02 03:21:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4123</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427381002;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2944;}i:1;a:1:{s:2:"id";i:2690;}i:2;a:1:{s:2:"id";i:2701;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4124]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[16.892610058731]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>前橋市一次避難場所</title>
		<link>http://shimz.me/blog/d3-js/4125</link>
		<pubDate>Tue, 03 Mar 2015 01:38:08 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4125</guid>
		<description></description>
		<content:encoded><![CDATA[「<a href="http://www.city.maebashi.gunma.jp/sisei/499/509/p012146.html">前橋市オープンデータライブラリー</a>」から取得した町界データと一次避難場所データをD3を使って視覚化してみました。

一次避難場所の位置を母点としたボロノイ図を描き、町界データでマスクをかけています。
ボロノイ領域の塗り分けカラーはランダム。
各セル(ボロノイ領域)が母点となる一次避難場所のおおよその担当領域みたいな感じになるわけですが、北の方はだいぶ避難所まで遠いですね。
この地域で災害が発生した場合の手筈がどうなっているのかは後で調べてみたいとおもます。

<h2>サンプル</h2>

<a href="http://shimz.me/datavis/gunma/maebashi/hinanbasho/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/64e52191c726b46b0fec27798f2cdef1.jpg" alt="前橋市一次避難場所" width="690" height="388" class="aligncenter size-full wp-image-4126 border" /></a>

<a href="http://shimz.me/datavis/gunma/maebashi/hinanbasho/">example</a>


マウスホイールでパン／ズームが、ドラッグで移動できます。
町境にマウスオーバーするとエリアを強調(赤)した上でツールチップで人口と世帯数を表示。母点(一次避難場所)にマウスオーバーするとボロノイ領域の協調(赤)と避難場所の名称と住所を表示します。


 
<pre class="lang:js decode:true " >d3.json("maebashi_light.geojson", function(maebashi) {
		d3.json('refuge.geojson', function(refuge){
			draw(maebashi, refuge);
		});
});


function draw(maebashi,refuge){
	var geodata = maebashi.features;	//前橋町境地理データ
	var pointdata = refuge.features;	//避難所ポイントデータ
	var positions = [];
	var  colorGen= function(){ 	//カラージェネレーター
	    return '#'+Math.floor(Math.random()*16777215).toString(16); 
	}

	//ツールチップ要素追加
	var tooltip = d3.select("body")
		.append("div")
		.attr("class", "tooltip")
		.style("position", "absolute")
		.style("z-index", "10")
		.style("visibility", "hidden")

	var svg = d3.select("svg");
	var mask = svg.append("defs").append("mask").attr("id", "mask").append("g");

	//プロジェクション設定
	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(200000)	//スケール（ズーム）の指定
		.translate([400,600])
		.center([139.0634281, 36.3894816]); //中心の座標を指定

	//geoパスジェネレーター生成
	var path = d3.geo.path().projection(projection);　

		//cellを表示するグループを作成
		var cellgroup = svg.append("svg:g").attr("id", "cells"); 


		pointdata.forEach(function(d) {
			var xy = projection(d.geometry.coordinates);
			positions.push({x:xy[0], y:xy[1], targetClass:".cell"+d.properties['OBJECTID'], properties:d.properties}); //位置情報→ピクセル
		});

		//ボロノイ変換関数
		var voronoi = d3.geom.voronoi()
			.x(function(d){ return d.x })
			.y(function(d){ return d.y });
		
		var polygons = voronoi(positions);

		//境界要素追加
		var cell = svg.selectAll(".voronoi")
				.data(pointdata)
				.enter()
				.append("svg:path")
				.attr({
					"class":function(d, i){return "voronoi cell" + pointdata[i].properties['OBJECTID']}, 
					"d":function(d, i) {if(!polygons[i]) return ; return "M" + polygons[i].join("L") + "Z"},
					"stroke": "#ccc",
					"stroke-width":2,
					fill:function(d, i){ return colorGen() },
					"fill-opacity": 0.5,
					"mask":"url(#mask)"
				});
			
			//地形(マスク)要素追加
		var maskmap = mask.append("g")
				.selectAll(".mask")
				.data(geodata)
				.enter()
				.append("svg:path")
				.attr({
					"class":"mask",
					"d":path,
					"fill":"white",
					"stroke": "black",
					"stroke-width":2
				});			

		//地形(強調用)要素追加
		var map = svg.append("g")
				.selectAll(".map")
				.data(geodata)
				.enter()
				.append("svg:path")
				.attr({
					"class":"map",
					"d": path,
					"fill":"white",
					"fill-opacity":0,
					"stroke": "white",
					"stroke-opacity":1
				})
				.on("mouseover", function(d) {
					tooltip.style("visibility", "visible");
				})
				.on("mouseout", function(d) {
					tooltip.style("visibility", "hidden");		
				})
				.on("mousemove", function(d){
					var content = "&lt;h2&gt;"+d.properties['町名']+"&lt;/h2&gt;" +
					"&lt;p&gt;人口：" + d.properties['人口'] +"&lt;/p&gt;" +
					"&lt;p&gt;世帯：" + d.properties['世帯'] + "&lt;/p&gt;";
					tooltip
					 .style("top", (d3.event.pageY-10)+"px")
					 .style("left",(d3.event.pageX+10)+"px")
					 .html(content);
				});
								
		//母点要素追加
		var point = svg.selectAll("point")
			.data(positions)
			.enter()
			.append("svg:circle")
			.attr({
				"cx":function(d, i) { return positions[i].x; },
				"cy":function(d, i) { return positions[i].y; },
				"r":4,
				fill:"#1f3134"
			})
			.on("mouseover", function(d) {
				tooltip.style("visibility", "visible");
				console.log(d);
				d3.selectAll(d.targetClass).classed("emphasis", true);
				
			})
			.on("mouseout", function(d) {
				tooltip.style("visibility", "hidden");		
				d3.selectAll(d.targetClass).classed("emphasis", false);
			})
			.on("mousemove", function(d){
				var content = "&lt;center&gt;&lt;h2&gt;避難所&lt;h2&gt;&lt;/center&gt;" +
				"&lt;p&gt;名称：" + d.properties['一次避難所'] +"&lt;/p&gt;" +
				"&lt;p&gt;所在地：" + d.properties['所在地'] +"&lt;/p&gt;" ;
				tooltip
				 .style("top", (d3.event.pageY-10)+"px")
				 .style("left",(d3.event.pageX+10)+"px")
				 .html(content);
			});

		//ドラッグイベント設定
		var drag = d3.behavior.drag().on('drag', function(){
				var tl = projection.translate();
				projection.translate([tl[0] + d3.event.dx, tl[1] + d3.event.dy]);
				update();
		});
		
		//ズームイベント設定    
		var zoom = d3.behavior.zoom().on('zoom', function(){
		   projection.scale(200000 * d3.event.scale);       
		   update();   
		});
		
		//イベントをsvg要素に束縛
		svg.call(zoom);	 
		svg.call(drag);

		
		//ズーム・ドラッグ時のアップデーと
		function update(){
				//地形(強調用)アップデート
				map.attr('d', path);
				//地形(マスク)アップデート
				maskmap.attr('d', path);
				//ボロノイアップデート
				var positions = [];
				pointdata.forEach(function(d) {
					var xy = projection(d.geometry.coordinates);
					positions.push({x:xy[0], y:xy[1], targetClass:".cell"+d.properties['OBJECTID'], properties:d.properties}); //位置情報→ピクセル
				});
				var polygons = voronoi(positions);
				cell.attr("d", function(d, i) {if(!polygons[i]) return ; return "M" + polygons[i].join("L") + "Z"});			
				//母点アップデート	
				point.attr({
					"cx":function(d, i) { return positions[i].x; },
					"cy":function(d, i) { return positions[i].y; }			
				});				
		}	
}</pre> 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4125</wp:post_id>
		<wp:post_date>2015-03-03 10:38:08</wp:post_date>
		<wp:post_date_gmt>2015-03-03 01:38:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4125</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4126]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_one_metric</wp:meta_key>
			<wp:meta_value><![CDATA[15.326413358649]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427401846;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3984;}i:1;a:1:{s:2:"id";i:2877;}i:2;a:1:{s:2:"id";i:3733;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>神Excelを加工して群馬県の年収データ(tsv)を作った。</title>
		<link>http://shimz.me/blog/other/4128</link>
		<pubDate>Wed, 04 Mar 2015 06:23:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4128</guid>
		<description></description>
		<content:encoded><![CDATA[Githubに置いてありますので<strong>自己責任</strong>でご自由にお使いください。

<a href="https://github.com/shimizu/dataSet/tree/master/2015/%E5%B9%B3%E6%88%9025%E5%B9%B4%E4%BD%8F%E5%AE%85%E3%83%BB%E5%9C%9F%E5%9C%B0%E7%B5%B1%E8%A8%88%E8%AA%BF%E6%9F%BB/H25%E5%AE%B6%E8%A8%88%E3%82%92%E4%B8%BB%E3%81%AB%E6%94%AF%E3%81%88%E3%82%8B%E8%80%85%E3%81%AE%E5%B9%B4%E9%BD%A2%E3%83%BB%E5%B9%B4%E5%8F%8E%E5%8C%BA%E5%88%86"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/20150304github.jpg" alt="群馬県市区町村世帯年収データ" width="690" height="444" class="aligncenter size-full wp-image-4129 border" /></a>

<a href="https://github.com/shimizu/dataSet/tree/master/2015/%E5%B9%B3%E6%88%9025%E5%B9%B4%E4%BD%8F%E5%AE%85%E3%83%BB%E5%9C%9F%E5%9C%B0%E7%B5%B1%E8%A8%88%E8%AA%BF%E6%9F%BB/H25%E5%AE%B6%E8%A8%88%E3%82%92%E4%B8%BB%E3%81%AB%E6%94%AF%E3%81%88%E3%82%8B%E8%80%85%E3%81%AE%E5%B9%B4%E9%BD%A2%E3%83%BB%E5%B9%B4%E5%8F%8E%E5%8C%BA%E5%88%86">dataSet/2015/平成25年住宅・土地統計調査 at master · shimizu/dataSet</a>

元データはe-statの<a href="http://www.e-stat.go.jp/SG1/estat/NewList.do?tid=000001063455">平成25年住宅・土地統計調査</a>「家計を主に支える者の年齢(6区分)・従業上の地位(8区分)・世帯の年間収入階級(5区分)・現住居以外の土地の所有状況(4区分)別普通世帯数―市区町村」です。

コンバートしたデータには、各市区町村の無職率とか年収300万円未満世帯の割合とか、いや〜んな感じのデータを追加しています。<del datetime="2015-03-04T07:04:54+00:00">元データはオープンデータではないので、国に怒られたら「ごめんなさい」して取り下げます。</del>
Twitterで教えていただいたのですが、e-statのデータはオープンデータと言ってもよかったみたいです。この辺の定義は難しいところですが、心配な方は下記利用規約を参照ください。

<a href="http://www.e-stat.go.jp/estat/html/spec.html">ご利用にあたって - 政府統計の総合窓口</a>


そのうち、このデータでなにか作ろうと思います。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4128</wp:post_id>
		<wp:post_date>2015-03-04 15:23:25</wp:post_date>
		<wp:post_date_gmt>2015-03-04 06:23:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4128</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427304664;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3406;}i:1;a:1:{s:2:"id";i:3706;}i:2;a:1:{s:2:"id";i:3851;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4129]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GeoJSONを軽くするだけじゃない！　TopoJSONクライアント TIPS</title>
		<link>http://shimz.me/blog/d3-js/4131</link>
		<pubDate>Tue, 10 Mar 2015 03:38:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4131</guid>
		<description></description>
		<content:encoded><![CDATA[単純に、GeoJSON形式のデータを効率よく圧縮してファイルサイズを軽くするものとらえられがちのTopoJSONですが、実はTopoJSONには様々な機能があります。
今回はその中から、クライアント側「topojson.js」で利用できる機能の一部を紹介します。

<a href="https://github.com/mbostock/topojson/wiki">Home · mbostock/topojson Wiki</a>


<h2>topojson.neighbors</h2>
neighborsメソッドについては以前記事にしたので省略。基本的には、このメソッドにTopoJSONのデータを渡してあげると、各ポリゴン毎に隣接するポリゴンのインデックスの値を配列として返してくれます。
<a href="http://shimz.me/blog/d3-js/3489">【D3.js】隣接する区画を表示する </a>

<h2>topojson.mesh</h2>
かいつまんで言うと、TopoJSONのデータを受け取って一本のパスストリング(svg/pathのd要素に渡す値)として返すメソッドです。
コールバックを使ってフィルタリングを行うことで、隣接するパスと単独のパスを分けて出力することができます。地形の外周と境界で表現を変えたいときに等便利。
下記は外周を青、境界を赤で表示しています。

<a href="http://shimz.me/example/d3js/topojson/mesh/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/topojsontips15031011.jpg" alt="topojson メッシュ" width="590" height="439" class="alignnone size-full wp-image-4135 border" /></a>

<a href="http://shimz.me/example/d3js/topojson/mesh/index.html">example</a>

 
<pre class="lang:js decode:true " >d3.json("../../_geodata/ken.topojson", function(json) {
	draw(json);
});


function draw(json){
	
	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(2000)	//スケール（ズーム）の指定
		.translate([500,450]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター

	var svg = d3.select("svg");
				
	//外周要素追加
	svg.append("path")
      .datum(topojson.mesh(json, json.objects.ken, function(a, b) { return a == b; }))
      .attr({
		"d": path,
		"fill": "none",
		"stroke": "blue"
	  });

	  //境界要素追加
	svg.append("path")
		.datum(topojson.mesh(json, json.objects.ken, function(a, b) { return a !== b; }))
		.attr({
		  "d": path,
		   "fill": "none",
		   "stroke": "red"
	  });

}</pre> 


<h2>topojson.merge</h2>
ポリゴンとポリゴンを合成して一つのポリゴンとして表示します。
下記は新潟県、群馬県、埼玉県、東京都、神奈川県をマージして一つのエリアとして表示します。
ユーザーの操作に対して、動的にポリゴンのマージを行うなどもできます。

<a href="http://shimz.me/example/d3js/topojson/merge/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/topojsontips15031021.jpg" alt="topojson マージ" width="589" height="444" class="alignnone size-full wp-image-4136" /></a>

<a href="http://shimz.me/example/d3js/topojson/merge/index.html">example</a>

 
<pre class="lang:js decode:true " >d3.json("../../_geodata/ken.topojson", function(json) {
	draw(json);
});


function draw(json){

	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(2000)	//スケール（ズーム）の指定
		.translate([500,450]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター

	var svg = d3.select("svg");
	
	//マージさせるポリゴンのプロパティ。今回はObjName_1要素を使う
	var selected = d3.set([
		"Gunma", "Saitama", "Nigata", "Tokyo", "Kanagawa"
	]);
		
	
	//地形要素追加
	svg.append("path")
      .datum(topojson.mesh(json, json.objects.ken, function(a, b) { return a == b; }))
      .attr({
		"d": path,
		"fill": "#ccc"
	  });

	  //境界要素追加
	svg.append("path")
		.datum(topojson.mesh(json, json.objects.ken, function(a, b) { return a !== b; }))
		.attr({
		  "d": path,
		   "fill": "none",
		   "stroke": "#fff"
	  });


	 //マージエリア追加
	svg.append("path")
		.datum(topojson.merge(json, json.objects.ken.geometries.filter(function(d) { return selected.has(d.properties["ObjName_1"]); })))
		.attr({
		  "d": path,
		  "fill": "orange",
		  "stroke": "none",		
	  });

		

}</pre> 


<h2>その他</h2>
GeoJSONでは難しかった、交差ポイントの抽出などもTopoJSON形式のデータであれば比較的簡単に行えます。

<a href="http://shimz.me/example/d3js/topojson/Junction/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/topojsontips15031031.jpg" alt="topojson ジャンクション" width="590" height="445" class="alignnone size-full wp-image-4137" /></a>

<a href="http://shimz.me/example/d3js/topojson/Junction/index.html">example</a>

 
<pre class="lang:js decode:true " >d3.json("../../_geodata/ken.topojson", function(json) {
	draw(json);
});


function draw(json){

	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(2000)	//スケール（ズーム）の指定
		.translate([500,450]) //表示位置調整
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//パスジェネレーター
		
	var svg = d3.select("svg");

	//地形要素追加
	svg.append("path")
      .datum(topojson.mesh(json))
      .attr({
		"d": path,
		"fill": "none",
		"stroke":"gray"
	  });	

	var junctionByPoint = d3.map();
	var arcCountsByPoint = d3.map();

	json.arcs.forEach(function(arc) {	
		var start = arc[0];
		var startCount = arcCountsByPoint.get(start) || 0;
		var end = arc.reduce(function(p, v) { return [p[0] + v[0], p[1] + v[1]]; });
		var endCount = arcCountsByPoint.get(end) || 0;
		if (arcCountsByPoint.set(start, startCount + 1) &gt; 1) junctionByPoint.set(start, start);
		if (arcCountsByPoint.set(end, endCount + 1) &gt; 1) junctionByPoint.set(end, end);
	});

	svg.selectAll(".junction")
		.data(junctionByPoint.values())
		  .enter()
		  .append("circle")
		  .attr({
			  "class": "junction",
			  "transform": function(d) { return "translate(" + transform(d) + ")"; },
			  "r":2.5,
			  "fill": "red"
		  })

	function transform(point) {
		  var p = projection([
			  point[0] * json.transform.scale[0] + json.transform.translate[0],
			  point[1] * json.transform.scale[1] + json.transform.translate[1]	
		  ]);
		  return p;
	}
  
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4131</wp:post_id>
		<wp:post_date>2015-03-10 12:38:42</wp:post_date>
		<wp:post_date_gmt>2015-03-10 03:38:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4131</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4136]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370233;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2351;}i:1;a:1:{s:2:"id";i:3489;}i:2;a:1:{s:2:"id";i:2379;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【残り３席】Firefox OS アプリハンズオンが群馬で開催されます。</title>
		<link>http://shimz.me/blog/fx0/4141</link>
		<pubDate>Tue, 17 Mar 2015 01:09:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4141</guid>
		<description></description>
		<content:encoded><![CDATA[狐憑きになろう。

<a href="https://www.mozilla.org/ja/firefox/os/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/Mozilla_FirefoxOS1.jpg" alt="firefox os logo" width="400" height="425" class="aligncenter size-full wp-image-4146 border" /></a>

来週の土曜日、3/28日に群馬県高崎市にて、「<a href="https://www.mozilla.org/ja/firefox/os/">Firefox OS</a>」のハンズオンが開催されます。

<a href="https://gunmaweb.doorkeeper.jp/events/21025">Firefox OS アプリハンズオン supported by Gunma.web - Gunma.web | Doorkeeper</a>

KDDIやMozillaの方も来られるそうです。群馬に！
なかなか無い機会だと思うので、少しでも興味のある方は是非参加してみてください。

<h2>Firefox OSとは？</h2>
Webブラウザ「Firefox」を作っているMozilla Foundationが開発しているモバイル向けのオープンソースOSです。スマートフォンのOSと思われがちですが、それ以外の様々なハードウェア上で動かすことのできる汎用的なOSです。
HTML5の技術を使うことでアプリケーションを作成できることが特徴で、フロントエンドエンジニアや、JavaScriptなどを触れるデザイナーであれば、既存の技術を使ってアプリケーションを作成できます。

<a href="http://shimz.me/blog/map/4043">新しい地理院地図のソースコードがGitHubに公開されていたので、Fx0(FirefoxOS)にアプリとしてインストールしてみた。</a>

<h2>Firefox OS が優れているところ</h2>
<ul>
<li>iPhone - 林檎</li>
<li>Android - ロボット</li>
<li>Windows Phone - 窓</li>
<li>Firefox OS - 狐。キツネカワイイ。</li>
</ul>
可愛さで圧勝

<img src="http://shimz.me/blog/wp-content/uploads/2015/03/foxsuke.jpg" alt="フォクすけ" width="480" height="360" class="aligncenter size-full wp-image-4144 border" />

<a href="http://foxkeh.jp/downloads/">フォクすけ素材集</a>

でも実はAndroidとは友達

<img src="http://shimz.me/blog/wp-content/uploads/2015/03/firefox-os-apps-android.png" alt="フォクすけと友達" width="480" height="283" class="aligncenter size-full wp-image-4145 border" />

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4141</wp:post_id>
		<wp:post_date>2015-03-17 10:09:25</wp:post_date>
		<wp:post_date_gmt>2015-03-17 01:09:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4141</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx0"><![CDATA[Fx0]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4146]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374713;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2990;}i:1;a:1:{s:2:"id";i:2570;}i:2;a:1:{s:2:"id";i:4025;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ぬるぬる動く！Web地図クライアント「Leaflet」を使おう！</title>
		<link>http://shimz.me/blog/leaflet-js/4142</link>
		<pubDate>Mon, 16 Mar 2015 05:37:12 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4142</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsと組み合わせても使いやすい、Web地図クライアントライブラリの大本命……だと、個人的には思ってる……たぶん。

<a href="http://leafletjs.com/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/leafletquickstart150316.jpg" alt="leaflet quickstart" width="666" height="425" class="aligncenter size-full wp-image-4143 border" /></a>

<a href="http://leafletjs.com/">leaflet</a>

<h2>leaflet.jsとは何か</h2>
leafletはWeb上で地図を表示するオープンソースのマップクライアントライブラリです。
軽量でスマートフォンなどのタッチ操作にも対応した地図を手軽に表示することができます。
ユーザーによって様々なプラグインが作成されているのが特徴で、それらを組み合わせることで多様な表現を行うことができるので「地図なんでGoogle Maps APIで十分じゃね？」という方も、一度触ってみてください。

そんな訳で、簡単な「Leaflet クイックスタート」的なものを書いてみました。


<h2>ベースマップの作成</h2>
 cdnからcssファイルとjsファイルを読み込みます。
<pre class="lang:xhtml decode:true " >&lt;link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" /&gt;
&lt;script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;</pre> 

bodyタグ内に地図を表示するdiv要素を設置します。
 
<pre class="lang:js decode:true " >&lt;div id="map"&gt;&lt;/div&gt;</pre> 

これで準備完了。まずはオープンストリートマップの地図タイルを表示します。
 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/leaflet/QuickStart/01/"></iframe>

<a href="http://shimz.me/example/leaflet/QuickStart/01/">example</a>

<pre class="lang:js decode:true " >var map = L.map('map').setView([36.3219088　, 139.0032936], 14);

//OSMレイヤー追加
L.tileLayer(
	'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
	{
		attribution: 'Map data &amp;copy; &lt;a href="http://openstreetmap.org"&gt;OpenStreetMap&lt;/a&gt;',
		maxZoom: 18
	}
).addTo(map);</pre> 

とても簡単。

<h2>地理院地図を使う</h2>
次に別のタイルサーバーから地図タイルを読み込む例として、地理院地図を使ってみます。

<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/leaflet/QuickStart/02/"></iframe>

<a href="http://shimz.me/example/leaflet/QuickStart/02/">example</a>

 
<pre class="lang:js decode:true " >var map = L.map('map').setView([36.3219088　, 139.0032936], 14);

//地理院地図レイヤー追加
L.tileLayer(
	'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
	{
		attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
	}
).addTo(map);</pre> 



<h2>マーカーの追加</h2>
地図の基本マーカーを追加します。
 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/leaflet/QuickStart/03/"></iframe>

<a href="http://shimz.me/example/leaflet/QuickStart/03/">example</a>


<pre class="lang:js decode:true " >var map = L.map('map').setView([36.3219088　, 139.0032936], 14);

//地理院地図レイヤー追加
L.tileLayer(
	'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
	{
		attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
	}
).addTo(map);

//マーカー追加
var marker = L.marker([36.3219088　, 139.0032936]).addTo(map);</pre> 


<h2>ポップアップの追加</h2>
最後にマーカーをクリックした際にポップアップを表示するようにします。
 
<iframe width="100%" height="300" scrolling="no" src="http://shimz.me/example/leaflet/QuickStart/04/"></iframe>

<a href="http://shimz.me/example/leaflet/QuickStart/04/">example</a>


<pre class="lang:js decode:true " >var map = L.map('map').setView([36.3219088　, 139.0032936], 14);

//地理院地図レイヤー追加
L.tileLayer(
	'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
	{
		attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
	}
).addTo(map);

//マーカー＆ポップアップ追加
var marker = L.marker([36.3219088　, 139.0032936])
	.bindPopup("&lt;h1&gt;Hello! Leaflet!&lt;/h1&gt;")
	.addTo(map);</pre> 

とりあえずここまで。

<h2>備考</h2>
今までちょくちょく使っていたのですが、あんまりちゃんと紹介したことがなかったなーと思って紹介記事を書いてみました。
個人的には使いこなしたいWeb地図ライブラリNo.1なので、今後もいろいろと試したことなんかをブログに記録していこうと思います。
今までのleaflet記事については以下からどうぞ。

<a href="http://shimz.me/blog/category/leaflet-js">leaflet.js記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4142</wp:post_id>
		<wp:post_date>2015-03-16 14:37:12</wp:post_date>
		<wp:post_date_gmt>2015-03-16 05:37:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4142</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4143]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427393194;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3583;}i:1;a:1:{s:2:"id";i:3698;}i:2;a:1:{s:2:"id";i:3564;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leafletで任意のエリアを選択するUIプラグイン</title>
		<link>http://shimz.me/blog/map/4147</link>
		<pubDate>Wed, 18 Mar 2015 02:55:43 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4147</guid>
		<description></description>
		<content:encoded><![CDATA[いわゆる「Bounding Box」とか呼ばれる奴です。

<a href="http://shimz.me/example/leaflet/areaselect/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/leafletareaselect150318.jpg" alt="leaflet エリア選択" width="690" height="535" class="aligncenter size-full wp-image-4148 border" /></a>

<a href="http://shimz.me/example/leaflet/areaselect/">example</a>

ホントは<a href="http://turfjs.org/">Turf.js</a>の記事を書こうと思ったのですが、せっかくなのでleafletのプラグインの紹介もしておこうかなと。しばらくは、このプラグインとTurf.jsを組み合わせた記事を書くと思います。

<h2>使い方</h2>
以下よりダウンロード
<a href="https://github.com/heyman/leaflet-areaselect/">heyman/leaflet-areaselect</a>
leafletライブラリの後にプラグインのjs/cssファイルを読み込みます。

<pre class="lang:xhtml decode:true " >&lt;link rel="stylesheet" href="src/leaflet-areaselect.css" /&gt;
&lt;script src="src/leaflet-areaselect.js"&gt;&lt;/script&gt;</pre> 

 
<pre class="lang:js decode:true " >var map = L.map('map').setView([36.3219088　, 139.0032936], 14);

//地理院地図レイヤー追加
L.tileLayer(
	'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
	{
		attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
	}
).addTo(map);

//areaセレクター追加
var areaSelect = L.areaSelect({width:200, height:250});
//セレクターチェンジイベント
areaSelect.on("change", function() {
	var bounds = this.getBounds();
	//緯度経度出力
	document.querySelector("#sw").value = bounds.getSouthWest().lat + ", " + bounds.getSouthWest().lng;
	document.querySelector("#ne").value = bounds.getNorthEast().lat + ", " + bounds.getNorthEast().lng
	
});
areaSelect.addTo(map);</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4147</wp:post_id>
		<wp:post_date>2015-03-18 11:55:43</wp:post_date>
		<wp:post_date_gmt>2015-03-18 02:55:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4147</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427387681;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3696;}i:1;a:1:{s:2:"id";i:4142;}i:2;a:1:{s:2:"id";i:3517;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>台風が一目でわかるハイクオリティな地球儀アプリ「Living Earth」</title>
		<link>http://shimz.me/blog/iphoneipad/4149</link>
		<pubDate>Wed, 18 Mar 2015 23:51:22 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4149</guid>
		<description></description>
		<content:encoded><![CDATA[もうすぐ台風の季節ですね。まだですが。

<a href="https://itunes.apple.com/jp/app/living-earth-clock-weather/id379869627?mt=8&amp;uo=4&amp;at=10lMp5"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/livingearth1.jpeg" alt="living earth" width="322" height="572" class="aligncenter size-full wp-image-4150 border" /></a>

<a href="https://itunes.apple.com/jp/app/living-earth-clock-weather/id379869627?mt=8&uo=4&at=10lMp5" target="itunes_store" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a>

最近は異常気象が多くて天気予報を調べるのが欠かせません。
当然いろいろなWeather News的なアプリをスマホにインストールしているのですが、 なんとなく見たの目の美しさから「Living Earth」というアプリを思わずポチ買いしてしまいました。
3時間ごとに更新される衛星雲データを元に雲の様子をびゅてぃふぉーな地球儀上に表示してくれるアプリです。雲の様子の他に、風の強さや気温、湿度などの分布図を表示することができます。
時計としての機能もあるらしいのですが、使っていないのでわかりません。
夜の地域では都市部の夜間光がきらびやかに表示されて、すこし癒されます。
実用性があるかはわかりませんが、綺麗なのでお勧めです。

<iframe width="560" height="315" src="https://www.youtube.com/embed/qtx7sC5rgo0" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4149</wp:post_id>
		<wp:post_date>2015-03-19 08:51:22</wp:post_date>
		<wp:post_date_gmt>2015-03-18 23:51:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4149</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427373164;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2331;}i:1;a:1:{s:2:"id";i:4052;}i:2;a:1:{s:2:"id";i:3473;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4150]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ブラウザおよびnode.jsのための高度な地理空間データ分析ライブラリ「turf.js」</title>
		<link>http://shimz.me/blog/map/4152</link>
		<pubDate>Thu, 19 Mar 2015 23:36:56 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4152</guid>
		<description></description>
		<content:encoded><![CDATA[選択した範囲内の家賃相場を求めるとかいろんなことに使えます。

<a href="http://shimz.me/example/turf/Aggregation/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/turf_Aggregation150309.jpg" alt="turf Aggregation example" width="690" height="643" class="aligncenter size-full wp-image-4153 border" /></a>

<a href="http://shimz.me/example/turf/Aggregation/">example</a>

<a href="http://turfjs.org/">Turf.js</a>は<a href="https://www.mapbox.com/">Mapbox</a>社謹製の地理空間データ分析ライブラリです。ピュアJavaScriptで作成されていてフロントエンドでもサーバーサイドでも動作します。

Turfの特徴としては、対応するデータ形式をGeoJSONを絞っており、基本GeoJSONで受け取ったデータを分析して分析結果をGeoJSONで返すといったライブラリになっています。
そのため、GeoJSONに対応した地図ライブラリと組み合わせることで、分析結果を簡単に視覚化することができます。もちろんD3.jsと組み合わせて使うのも簡単！　いろいろな可能性を秘めた今後が楽しみなライブラリです。

今回は入門編として、Leaflet上で選択した範囲内のデータの基本統計量を計算します。
マーカーのプロパティには、それぞれ「value」値が設定されていて、選択範囲に含まれるマーカーのvalue値の合計や平均値、標準偏差などを動的に求めます。

今回は四角いポリゴンの中に含まれるデータを分析していますが、例えば町境データのようなもっと複雑なポリゴンを使ってデータ分析を行うなどもできます。

<h2>サンプル</h2>
マーカーの下部、一番尖がっている部分が選択範囲内に含まれていないと計算対象にならないので注意。
 
<pre class="lang:js decode:true " >
//jsonデータの読み込み。fetchを使っているが jQuery.ajaxでもいい。	
fetch('../_dataset/sample.geojson')
	.then(function(response) {
		return response.json()
	}).then(function(json) {
		draw(json)
	});
	
function draw(points){
	//出力設定
	var aggregations = [
		{
			aggregation: 'sum',
			inField: 'value',
			outField: '合計'
		},
		{
			aggregation: 'average',
			inField: 'value',
			outField: '平均値'
		},
		{
			aggregation: 'median',
			inField: 'value',
			outField: '中央値'
		},
		{
			aggregation: 'min',
			inField: 'value',
			outField: '最少値'
		},
		{
			aggregation: 'max',
			inField: 'value',
			outField: '最大値'
		},
		{
			aggregation: 'deviation',
			inField: 'value',
			outField: '標準偏差値'
		},
		{
			aggregation: 'variance',
			inField: 'value',
			outField: '分散値'
		},
		{
			aggregation: 'count',
			inField: '',
			outField: '個数'
		}
	];	

	var map = L.map('map').setView([36.3219088　, 139.0032936], 14);
	
	//地理院地図レイヤー追加
	L.tileLayer(
		'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
		{
			attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
		}
	).addTo(map);
	
	//マーカー追加
	var onEachFeature = function(feature, layer) {
		var popupContent = "value:";
		if (feature.properties &amp;&amp; feature.properties.value) {
			popupContent += feature.properties.value;
		}
		layer.bindPopup(popupContent);
	}	
	var markerLayer = L.geoJson(points, { onEachFeature: onEachFeature }).addTo(map);
	
	//areaセレクター追加
	var areaSelect = L.areaSelect({width:200, height:250});
	//セレクターチェンジイベント
	areaSelect.on("change", function() {
		//四隅取る
		var b = this.getBounds();		
		var extend = [
			[b.getSouthWest().lng , b.getSouthWest().lat],
			[b.getSouthEast().lng, b.getSouthEast().lat],
			[b.getNorthEast().lng, b.getNorthEast().lat],
			[b.getNorthWest().lng, b.getNorthWest().lat]
		]
		
		//ポリゴンにする
		var polygons = turf.featurecollection([
			{
			  "type": "Feature",
			  "properties": {},
			  "geometry": {
				"type": "Polygon",
				"coordinates": [ extend ]
			  }
			}
		  ]);
		
		//ポリゴン内に含まれるポイントの統計データを取得
		var aggregated = turf.aggregate(polygons, points, aggregations);
		
		//統計データを出力
		document.querySelector(".info").value = JSON.stringify(aggregated.features[0].properties, null, "\t");
				
	});
	
	areaSelect.addTo(map);
		
}</pre> 

Turfには他にも素晴らしい機能が沢山あるので、随時紹介していこうと思います。

<a href="http://shimz.me/blog/category/turf-js">その他、Turfの記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4152</wp:post_id>
		<wp:post_date>2015-03-20 08:36:56</wp:post_date>
		<wp:post_date_gmt>2015-03-19 23:36:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4152</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="turf-js"><![CDATA[turf.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427394788;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4155;}i:1;a:1:{s:2:"id";i:3659;}i:2;a:1:{s:2:"id";i:3984;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Turf.jsを使って地図上に動的にバッファを描く</title>
		<link>http://shimz.me/blog/map/4155</link>
		<pubDate>Fri, 20 Mar 2015 09:27:04 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4155</guid>
		<description></description>
		<content:encoded><![CDATA[バッファは対象とする点や線・面に沿って特定距離の範囲エリアを生成する機能です。

<a href="http://shimz.me/example/turf/buffer/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/turfbuffer150321.jpg" alt="Turf buffer example" width="690" height="611" class="aligncenter size-full wp-image-4156 border" /></a>

<a href="http://shimz.me/example/turf/buffer/">example</a>

上記のサンプルでは、各ポイント・ライン・ポリゴンから距離100mのバッファを生成しています。スライダーを変化させると生成するバッファの距離を変更できます。
<a href="http://shimz.me/blog/map/4152">Turf.aggregateメソッド</a>と合わせて使えば、ある地点から100m範囲内のデータを抽出して分析するなどができます。



<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >
//jsonデータの読み込み。fetchを使っているが jQuery.ajaxでもいい。	
fetch('../_dataset/sample2.geojson')
	.then(function(response) {
		return response.json()
	}).then(function(json) {
		draw(json)
	});
	
function draw(geodata){

	var map = L.map('map').setView([36.322356, 139.013057], 15);
	
	//地理院地図レイヤー追加
	L.tileLayer(
		'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
		{
			attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
		}
	).addTo(map);
	
	//地物追加
	var markerLayer = L.geoJson(geodata).addTo(map);

	//バッファーレイヤー準備
	var bufferLayer = L.geoJson().addTo(map);
	
	//バッファー追加
	 var addbuffer = function(meter){
		bufferLayer.clearLayers(); //前回のバッファをクリア
		var buffered = geodata.features.map(function(feature){
			return  turf.buffer(feature, meter, "meters");
		});
		bufferLayer.addData(buffered);	
		bufferLayer.setStyle({color: "#000000"});
	};
	
	//スライダーの値が変更されたらバッファを追加する
	document.querySelector("#range").addEventListener("change", function(){
		var meter = this.value;
		document.querySelector("#meter").innerText = meter;	
		addbuffer(meter);	
	})

	//初回だけchangeイベントをJSで発火させる
	document.querySelector("#range").dispatchEvent(new Event('change'))

}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4155</wp:post_id>
		<wp:post_date>2015-03-20 18:27:04</wp:post_date>
		<wp:post_date_gmt>2015-03-20 09:27:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4155</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="turf-js"><![CDATA[turf.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427374582;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4152;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:4163;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4156]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>独身男性と独身女性の比率が一目でわかる地図「Singlesatlas」</title>
		<link>http://shimz.me/blog/web/4158</link>
		<pubDate>Sat, 21 Mar 2015 06:13:19 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4158</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://singlesatlas.com/cities"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/singlesatlas1.jpg" alt="singlesatlas" width="690" height="329" class="aligncenter size-full wp-image-4159 border" /></a>

<a href="http://singlesatlas.com/cities">singlesatlas</a>

赤に近いほど、絶望的に独身異性の数が少ない地域となります。
東京がヤバイです。ズームするともっと細かな地域ごとの比率を見ることができます。
右上のメニューにある「I'm a man」をクリックすると「独身男性に対する独身女性の比率」と「独身女性に対する独身男性の比率」を入れ替えることができます。
対象とする年齢の幅も調整できるので、お好みでどうぞ。
コロプレス図（塗り分け地図）として表示することもできます。

<a href="http://singlesatlas.com/countries"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/singlesatlas2.jpg" alt="singlesatlas" width="690" height="329" class="aligncenter size-full wp-image-4160 border" /></a>

ちなみに、「独身男性に対する独身女性の比率」がもっとも低いのはカタールだそうです。独身男性100人に対して独身女性は24人だとか。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4158</wp:post_id>
		<wp:post_date>2015-03-21 15:13:19</wp:post_date>
		<wp:post_date_gmt>2015-03-21 06:13:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4158</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427370425;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3463;}i:1;a:1:{s:2:"id";i:1368;}i:2;a:1:{s:2:"id";i:3555;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4159]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Turf.js]ラインに沿って任意の距離を移動する</title>
		<link>http://shimz.me/blog/map/4163</link>
		<pubDate>Mon, 23 Mar 2015 01:08:31 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4163</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/turf/along/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/turfalong.jpg" alt="turf.js along" width="690" height="586" class="aligncenter size-full wp-image-4162 border" /></a>

<a href="http://shimz.me/example/turf/along/">example</a>

スライダーで選択した距離だけ各ライン上に沿ってマーカーが移動します。


<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >
fetch('../_dataset/line.geojson')
	.then(function(response) {
		return response.json()
	}).then(function(json) {
		draw(json)
	});
	
function draw(geodata){
	var map = L.map('map').setView([36.3221588, 139.00579059999], 15);
	
	//地理院地図レイヤー追加
	L.tileLayer(
		'http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',
		{
			attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
		}
	).addTo(map);
	
	//ラインレイヤー追加
	var lineLayer = L.geoJson(geodata, {
			style: function(feature) {
				switch (feature.properties.id) {
					case 1: return {color: "#ff0000",opacity:1};
					case 2:   return {color: "#0000ff",opacity:1};
					case 3:   return {color: "#00ff00",opacity:1};
				}
			}
	}).addTo(map);

	//マーカーのスタイルを指定する
	var geojsonMarkerOptions = {
		radius: 8,
		fillColor: "#ff7800",
		color: "#000",
		weight: 1,
		opacity: 1,
		fillOpacity: 0.8
	};	
	
	//マーカーレイヤーを準備
	var markerLayer = L.geoJson(null,  {
		pointToLayer: function (feature, latlng) {
			return L.circleMarker(latlng, geojsonMarkerOptions);
		}
	}).addTo(map);
	
	//マーカーをライン上の任意の位置へ追加する
	 var addMarker = function(meter){
		markerLayer.clearLayers(); //前回のバッファをクリア
		var buffered = geodata.features.map(function(feature){
			return   turf.along(feature, meter/1000, "kilometers");
		});
		markerLayer.addData(buffered);
	};
	
	//スライダーの値が変更された際の処理
	document.querySelector("#range").addEventListener("change", function(){
		var meter = this.value;
		document.querySelector("#meter").innerText = meter;	
		document.querySelector("#meter").textContent = meter; //firefox用
		addMarker(meter);	
	})

	//初回だけchangeイベントをJSで発火させる
	document.querySelector("#range").dispatchEvent(new Event('change'))

}
</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4163</wp:post_id>
		<wp:post_date>2015-03-23 10:08:31</wp:post_date>
		<wp:post_date_gmt>2015-03-23 01:08:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4163</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="turf-js"><![CDATA[turf.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427391995;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4155;}i:1;a:1:{s:2:"id";i:4164;}i:2;a:1:{s:2:"id";i:4152;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4162]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Turf.js]ヘックス(六角形)で統計情報を地図上に視覚化する</title>
		<link>http://shimz.me/blog/map/4164</link>
		<pubDate>Tue, 24 Mar 2015 06:52:07 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4164</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/turf/hex/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/turfhexgrid150324.jpg" alt="turf hexgrid" width="690" height="574" class="aligncenter size-full wp-image-4165 border" /></a>

<a href="http://shimz.me/example/turf/hex/index.html">example</a>

表示されている範囲内にヘックス(六角形)を敷き詰め、各セルに含まれるマーカーの数やマーカーに設定されたvalue値の合計数で可視化しています。サンプルとしてセルのサイズを大きめに設定(1km)していますが、100m位までならそこそこ問題なく動きます。
それより小さいサイズのセルを表示したい場合は、nodeを使ってバックエンドで計算してから出力した方がよさそうです。
<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >fetch('../_dataset/sample.geojson')
	.then(function(response) {
		return response.json()
	}).then(function(json) {
		draw(json)
	});
	
function draw(points){
	//取得する統計情報(合計値、個数)
	var aggregations = [
		{
			aggregation: 'sum',
			inField: 'value',
			outField: 'pt_sum'
		},
		{
			aggregation: 'count',
			inField: '',
			outField: 'pt_count'
		}		
	];
	
	map = L.map('map').setView([36.3265281, 139.00918460000003], 14);
	
	//地理院地図レイヤー追加
	L.tileLayer(
		'http://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png',
		{
			attribution: "&lt;a href='http://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html' target='_blank'&gt;国土地理院&lt;/a&gt;"
		}
	).addTo(map);
	
	//マーカークリック時にポップアップを表示
	var onEachFeature = function(feature, layer) {
		var popupContent = "value:";
		if (feature.properties &amp;&amp; feature.properties.value) {
			popupContent += feature.properties.value;
		}
		layer.bindPopup(popupContent);
	}
	//マーカーを地図に追加
	var markerLayer = L.geoJson(points, { onEachFeature: onEachFeature }).addTo(map);
 
	//ヘックスグリッド用のレイヤーを準備
	var hexLayer = L.geoJson().addTo(map);
 
	//表示されている四隅の緯度経度を取得
	var b = map.getBounds();
	extend = [b.getSouthWest().lng , b.getSouthWest().lat , b.getNorthEast().lng, b.getNorthEast().lat]	
	
	//表示されている範囲をヘックスで埋める
	var grid = turf.hexGrid(extend,  1, "kilometers");
	
	//ヘックスデータに統計情報を付加(各セルにおけるマーカーの数とvalueの合計値)
	var grid = turf.aggregate(grid, points, aggregations);
	
	//各セルのスタイルを設定
	grid.features.forEach(setStyle);
	
	//ヘックスグリッドを地図に追加
	hexLayer.addData(grid);
	
	/*
	 * event lestener
	 */
	document.querySelector("#non").addEventListener("click",function(){ 
		hexLayer.eachLayer(function(l) { 
			l.setStyle(l.feature.properties.withNon); //ヘックスのみ表示
		});
	});
	
	document.querySelector("#sum").addEventListener("click",function(){ 
		hexLayer.eachLayer(function(l) { 
			l.setStyle(l.feature.properties.withSum);	//合計値を視覚化
		});
	});
	document.querySelector("#count").addEventListener("click",function(){ 
		console.log("click");
		hexLayer.eachLayer(function(l) { 
			l.setStyle(l.feature.properties.withCount);	//マーカーの数を視覚化
		});
	});
	
	//初期スタイルを実行
	document.querySelector("#non").dispatchEvent(new Event('click'))
	
}

//各セルのスタイルを指定
function setStyle(cell){
		cell.properties.withNon = {};		
		cell.properties.withCount = {};
		cell.properties.withSum= {};
		
		
		var _widthNon = {};
		_widthNon.color = '#0000FF';
		_widthNon.weight = 1;
		_widthNon.fill = '#0000FF';
		_widthNon.fillOpacity = 0.1;
		cell.properties.withNon =  _widthNon;
		
		var pt_count = cell.properties.pt_count;
		var pt_sum = cell.properties.pt_sum;
		
		var _withCount = {};
		_withCount.color = '#00FF00';
		_withCount.weight = 0;
		_withCount.fill = '#00FF00';
		_withCount.fillOpacity = 0;
		if(pt_count &gt;= 1) {
			_withCount.fillOpacity = 0.1;
		} if(pt_count &gt;= 2) {
			_withCount.fillOpacity = 0.2;
			_withCount.weight = 1;
		} if(pt_count &gt;= 3) {
			_withCount.weight = 2;
			_withCount.fillOpacity = 0.35;
		} if(pt_count &gt;= 4) {
			_withCount.weight = 3;
			_withCount.fillOpacity = 0.55;
		}
		cell.properties.withCount = _withCount;

		var _withSum = {};
		_withSum.color = '#FF0000';
		_withSum.weight = 0;
		_withSum.fill = '#FF0000';
		_withSum.fillOpacity = 0;
		if(pt_sum &gt;= 50) {
			_withSum.fillOpacity = 0.1;
		} if(pt_sum &gt;= 100) {
			_withSum.fillOpacity = 0.2;
			_withSum.weight = 1;
		} if(pt_sum &gt;= 150) {
			_withSum.weight = 2;
			_withSum.fillOpacity = 0.35;
		} if(pt_sum &gt;= 200) {
			_withSum.weight = 3;
			_withSum.fillOpacity = 0.55;
		}
		cell.properties.withSum = _withSum;	
}</pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4164</wp:post_id>
		<wp:post_date>2015-03-24 15:52:07</wp:post_date>
		<wp:post_date_gmt>2015-03-24 06:52:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4164</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="turf-js"><![CDATA[turf.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427371340;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4152;}i:1;a:1:{s:2:"id";i:2797;}i:2;a:1:{s:2:"id";i:2881;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4165]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Turf.js]node.jsとturfで重い統計処理をバックエンドで行う。</title>
		<link>http://shimz.me/blog/node-js/4168</link>
		<pubDate>Thu, 26 Mar 2015 03:49:58 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=4168</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/turf/backend/hex/"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/kyoju000016.jpg" alt="turf  and node test" width="700" height="498" class="aligncenter size-full wp-image-4171 border" /></a>

<a href="http://shimz.me/example/turf/backend/hex/">example</a>

フロントエンドで行うには重い統計処理をバックエンドで行い、出力された統計処理済データをフロントエンドで表示するってのをやってみました。


<h2>インストール</h2>
「turf」とコマンドラインでの引数の処理を行うライブラリ「argv」をインストールします。
 
<pre class="lang:sh decode:true " >&gt; npm install turf
&gt; npm install argv</pre> 

今回は「<a href="http://tenbou.nies.go.jp/gis/">環境GIS</a>」からダウンロードした2013年度の「全国の自動車交通騒音の測定結果」をポイントデータに変換しヘックスグリッドを敷き詰めて各セルに含まれるポイントの「Leq昼間(dB)」の値から中央値を算出します。

対象とするポイントデータは3531個所、ヘックスを敷き詰める範囲は本州および北海度が含まれる範囲です。

<a href="http://shimz.me/example/turf/backend/hex/point.geojson">point.geojson</a>

<h2>サンプル</h2>
 
<pre class="lang:js decode:true " >var argv = require('argv');
var turf = require('turf');
var fs = require('fs');

// -i 読み込むポイントデータを指定
argv.option({
	name: 'input',
	short: 'i',
	type : 'path',
	description :'読み込むファイル名(point)を指定します',
	example: "'script --option=value' or 'script -i filename(point)'"
});

// -s ヘックス毎のサイズを指定
argv.option({
	name: 'size',
	short: 's',
	type : 'number',
	description :'ヘックスのサイズ(km)を指定します',
	example: "'script --option=value' or 'script -s number'"
});

var argvv = argv.run();
var input = argvv.options.input;
var size = argvv.options.size;

//引数チェック
if (!input) {
  console.log("引数が正しく入力されていません:" +　" 読み込むgeojsonファイルを-iオプションで指定してください");
  process.exit();
}
if (!size) {
  console.log("引数が正しく入力されていません:" +　" ヘックスのサイズをを-sオプションで指定してください");
  process.exit();
}



fs.readFile(input, 'utf8', function (err, data) {
	var points = JSON.parse(data);
	//hexを敷き詰める範囲
	var extend = [126.5942359828125,29.685822563270666, 152.8295875453125, 45.59686948624793];
	
	//範囲内にhexgridを敷き詰める
	var grid = turf.hexGrid(extend,  size, "kilometers");
	
	//hexgridのセル毎に、セル内に含まれるポイントデータの統計処理を行う。
	//今回は、各セル内のポイントデータから「Leq昼間(dB)」の中央値を算出する
	var grid = turf.median(grid, points, "Leq昼間(dB)", "pt_median");
	
	console.log(JSON.stringify(grid))	
});
</pre> 

<h2>実行</h2>
コマンドプロンプトでポイントデータを読み込みヘックスのサイズ(km)を指定して実行します。
例として50km単位のヘックスで統計処理を行う場合は以下となります。
 
<pre class="lang:sh decode:true " >&gt; node hextest.js -i point.geojson -s 50 &gt; hex50.geojson</pre> 

<h2>処理時間</h2>
ヘックスグリッドを敷き詰める範囲に対してヘックスのサイズを小さくすると(セルの数が増えると)当然、統計処理にかかる時間は増えます。以下は今回試してみた結果です。
 
<pre class="lang:tex decode:true " >・対象ポイント数
3531 point

・スペック
OS:  Windows 8.1
CPU: intel Core i5-3470 3.20GHz
RAM: 8.00 GB



・実行結果
100km Hex
 0.316 sec.	//hexgrid生成にかかった時間
 0.84 sec.	//統計処理にかかった時間
 output 235KB	//出力されるhexデータのサイズ


50km Hex
 0.318 sec.
 2.215 sec.
 output 890KB

25km Hex
 0.324 sec.
 7.795 sec.
 output 3,531KB


10km Hex
 0.372 sec.
 45.525 sec.
output 21,818KB

5km Hex
 0.579 sec.
 185.835 sec.
 output 87,101KB</pre> 

<h2>表示してみた</h2>

100km HEX
<a href="http://shimz.me/example/turf/backend/hex/hex100km.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/nodeandturf1503262.jpg" alt="turf HexGrid 100km" width="690" height="488" class="aligncenter size-full wp-image-4170 border" /></a>
<a href="http://shimz.me/example/turf/backend/hex/hex100km.html">example</a>

25km HEX
<a href="http://shimz.me/example/turf/backend/hex/hex25km.html"><img src="http://shimz.me/blog/wp-content/uploads/2015/03/nodeandturf1503261.jpg" alt="turf HexGrid 25km" width="690" height="489" class="aligncenter size-full wp-image-4169 border" /></a>
<a href="http://shimz.me/example/turf/backend/hex/hex25km.html">example</a>

<h2>統計処理を短くする</h2>
海の上までヘックスを敷き詰めるのは無駄が多い。今回の場合なら、先に日本の地形データ(ポリゴン)を用意しておいてヘックスグリッドとintersectとさせて、日本列島上のヘックスだけ取り出してから統計処理を行えばかなり計算量が減らせると思うので、あとで試してみます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4168</wp:post_id>
		<wp:post_date>2015-03-26 12:49:58</wp:post_date>
		<wp:post_date_gmt>2015-03-26 03:49:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>post-4168</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="leaflet-js"><![CDATA[leaflet.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="category" nicename="turf-js"><![CDATA[turf.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_5904852</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6173957</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[4171]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427385006;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4152;}i:1;a:1:{s:2:"id";i:1784;}i:2;a:1:{s:2:"id";i:4063;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_7641658</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
