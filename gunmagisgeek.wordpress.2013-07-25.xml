<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.2" created="2013-07-25 09:31" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>GUNMA GIS GEEK</title>
	<link>http://shimz.me/blog</link>
	<description></description>
	<pubDate>Thu, 25 Jul 2013 09:31:38 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://shimz.me/blog</wp:base_site_url>
	<wp:base_blog_url>http://shimz.me/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>blogadmin</wp:author_login><wp:author_email>xxshimizuxx@gmil.com</wp:author_email><wp:author_display_name><![CDATA[shimizu]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.5.2</generator>

	<item>
		<title>引き続き、Paper.jsを勉強中</title>
		<link>http://shimz.me/blog/paper-js/12</link>
		<pubDate>Wed, 20 Jul 2011 11:53:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[多少、使い方が分かってきたので、楽しくなってきました。

もう少し勉強したら、チュートリアル的なものを書きたいな。

<a name="more"></a><!--more-->
<script type="text/javascript" src="http://jsdo.it/blogparts/fLSG/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/fLSG" title=" Paper.js 渦巻き"> Paper.js 渦巻き - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

<script type="text/javascript" src="http://jsdo.it/blogparts/pCuM/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/pCuM" title="Paper.js モナリザ">Paper.js モナリザ - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2011-07-20 20:53:00</wp:post_date>
		<wp:post_date_gmt>2011-07-20 11:53:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%bc%95%e3%81%8d%e7%b6%9a%e3%81%8d%e3%80%81paper-js%e3%82%92%e5%8b%89%e5%bc%b7%e4%b8%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/paperjs_20.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>煎茶(Sencha Touch) 始めました。</title>
		<link>http://shimz.me/blog/sencha-touch/13</link>
		<pubDate>Thu, 14 Jul 2011 03:21:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bit.ly/p3Gpkc">Ext Japan - Sencha Touch機能概要 - HTML5モバイルアプリ用フレームワーク </a>

Ext.js を使っていたことがあるので、同じ感覚でスマートフォンサイトを作成できます。

個人的には、jQuery Mobileより好きです。

<a name="more"></a><!--more-->

<script type="text/javascript" src="http://jsdo.it/blogparts/nA2s/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/nA2s" title="Sencha -Carousel テスト">Sencha -Carousel テスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>


<script type="text/javascript" src="http://jsdo.it/blogparts/cxrD/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/cxrD" title="sencha  + twitter api">sencha  + twitter api - jsdo.it - share JavaScript, HTML5 and CSS</a></p>



<script type="text/javascript" src="http://jsdo.it/blogparts/1SVr/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/1SVr" title="Sencha + Google Map">Sencha + Google Map - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2011-07-14 12:21:00</wp:post_date>
		<wp:post_date_gmt>2011-07-14 03:21:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%85%8e%e8%8c%b6sencha-touch-%e5%a7%8b%e3%82%81%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sencha-touch"><![CDATA[Sencha Touch]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/sencha-touch.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>フォトウォールが簡単につくれるプラグイン</title>
		<link>http://shimz.me/blog/javascript/14</link>
		<pubDate>Wed, 13 Jul 2011 09:53:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bit.ly/poOnTo">The Wall - A Javascript plugin for Mootools</a>

面白そうなライブラリを見つけたので、テストしてみました。

<a name="more"></a><!--more-->

<script type="text/javascript" src="http://jsdo.it/blogparts/7nrP/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/7nrP" title="wall.jsテスト">wall.jsテスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2011-07-13 18:53:00</wp:post_date>
		<wp:post_date_gmt>2011-07-13 09:53:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%95%e3%82%a9%e3%83%88%e3%82%a6%e3%82%a9%e3%83%bc%e3%83%ab%e3%81%8c%e7%b0%a1%e5%8d%98%e3%81%ab%e3%81%a4%e3%81%8f%e3%82%8c%e3%82%8b%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/blog-post.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paper.js.勉強中</title>
		<link>http://shimz.me/blog/paper-js/15</link>
		<pubDate>Fri, 08 Jul 2011 05:43:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://paperjs.org/">paper.js</a><br /><br />とりあえず、チュートリアルの写経から初めてます。<br /><br /><a name="more"></a><!--more-->

<br /><script type="text/javascript" src="http://jsdo.it/blogparts/2I5p/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/2I5p" title="Paper.jsテスト">Paper.jsテスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p><br /><script type="text/javascript" src="http://jsdo.it/blogparts/sD17/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/sD17" title="Paper.jsテスト２">Paper.jsテスト２ - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2011-07-08 14:43:00</wp:post_date>
		<wp:post_date_gmt>2011-07-08 05:43:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paper-js-%e5%8b%89%e5%bc%b7%e4%b8%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/paperjs.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JQuery Moble で Google Map を使うとサイズ指定がちょっとメンドクサイ。</title>
		<link>http://shimz.me/blog/jquery-mobile/16</link>
		<pubDate>Thu, 07 Jul 2011 02:57:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[※追記
<a href="http://bit.ly/qKWmFC">jQuery MobileでGoogleMap APIを使ったサンプルがMITライセンスで公開されてた</a>
……もっと、早く知っていればこんな苦労は orz

<hr />

jQuery Moble のページ内でGoogle Mapを使おうとしたのですが、map_canvas をwidth:100%; height:100%"で指定すると上手く表示されませんでした。 orz

とりあえず、サイト読み込み(onload)時に初期化すると、上手く表示されないようなので、mapページが表示されたタイミングで、ウインドサイズを元にmap_canvasのサイズを指定して初期化したら上手くいきました。

ちょっと、メンドクサイ。

<!--more-->


<script type="text/javascript" src="http://jsdo.it/blogparts/fRDB/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/fRDB" title="JQuery Mobile + Gmap テスト">JQuery Mobile + Gmap テスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2011-07-07 11:57:00</wp:post_date>
		<wp:post_date_gmt>2011-07-07 02:57:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-moble-%e3%81%a7-google-map-%e3%82%92%e4%bd%bf%e3%81%86%e3%81%a8%e3%82%b5%e3%82%a4%e3%82%ba%e6%8c%87%e5%ae%9a%e3%81%8c%e3%81%a1%e3%82%87%e3%81%a3%e3%81%a8%e3%83%a1%e3%83%b3%e3%83%89%e3%82%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery-mobile"><![CDATA[jQuery Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/07/jquery-moble-google-map.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ひきつづき、Rhino。</title>
		<link>http://shimz.me/blog/rhino/17</link>
		<pubDate>Wed, 08 Jun 2011 05:01:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[昨日のスクリーンキャプチャのスクリプトに、なるべく手を抜きつつGUIをつけてみました。

<!--more-->

[javascript]importPackage(javax.swing);
importClass(java.io.File);
importClass(javax.imageio.ImageIO);
importClass(java.awt.Rectangle);
importClass(java.awt.Robot);

var frame = new JFrame(&quot;スクリーンキャプチャ取得&quot;);
frame.setSize(300,300);
frame.addWindowListener(function(e, methodName) {    print(&quot;Window methodName:&quot;+methodName);
    if (methodName == &quot;windowClosing&quot;) {        quit();    }});

var button = new JButton(&quot;クリックしてください&quot;);
button.addActionListener(function(e, methodName){    print(&quot;button method&quot;+e);    getScreenCapture();});
frame.add(button);

var chooser = new JFileChooser();
var filter = new  javax.swing.filechooser.FileNameExtensionFilter(&quot;JPEGファイル(*.jpg)&quot;, &quot;jpg&quot;, &quot;jpeg&quot;);
chooser.addChoosableFileFilter(filter);

frame.setVisible(true);

function getScreenCapture(){    
    var robot = new Robot();
    var img = robot.createScreenCapture(new Rectangle(java.awt.Toolkit.getDefaultToolkit().getScreenSize()));
    var result = chooser.showSaveDialog(frame);
    var filename = chooser.getSelectedFile();
    if(result == JFileChooser.APPROVE_OPTION){
        try{
            ImageIO.write(img, &quot;jpg&quot;, (new File(filename)));
        } catch(e) {}
    }}[/javascript]

実行結果。
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-ZynQTs_iDJE/Te8Baa66QDI/AAAAAAAAAxI/sTaB7fk3A4A/s1600/sc1.jpg"><img src="http://1.bp.blogspot.com/-ZynQTs_iDJE/Te8Baa66QDI/AAAAAAAAAxI/sTaB7fk3A4A/s320/sc1.jpg" alt="" width="300" height="300" border="0" /></a></div>
<div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-gOY83hQ0k5Y/Te8BtHnImTI/AAAAAAAAAxQ/5TCD6UPqUHc/s1600/sc2.jpg"><img src="http://2.bp.blogspot.com/-gOY83hQ0k5Y/Te8BtHnImTI/AAAAAAAAAxQ/5TCD6UPqUHc/s320/sc2.jpg" alt="" width="320" height="246" border="0" /></a></div>
さくっと書けるので、ちょっとした小物アプリを作りたいときは便利ですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2011-06-08 14:01:00</wp:post_date>
		<wp:post_date_gmt>2011-06-08 05:01:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%b2%e3%81%8d%e3%81%a4%e3%81%a5%e3%81%8d%e3%80%81rhino%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="rhino"><![CDATA[Rhino]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/06/rhino_08.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rhinoを試してみました</title>
		<link>http://shimz.me/blog/rhino/18</link>
		<pubDate>Tue, 07 Jun 2011 13:19:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[ちょっとしたスクリプトを書くときに、できるだけいろんな環境で使い回しができると便利だなと思いRhinoを試してみました。
まぁ、GroovyとかJythonとかJRubyとかいろいろ他にもあるんですがRhinoを選んだのは単にJavaScriptが好きだからです。

<a href="https://developer.mozilla.org/ja/Rhino">Rhino公式</a>

<a name="more"></a>■各環境に開発環境をインストール
javaランタイムはインストール済みを前提

・windows
<a href="http://builder.japan.zdnet.com/java/sp_scripting-on-java-kickstart/20366909/">詳しい記事</a>があるのでそちらを参照

・Mac
MacPortから簡単にインストールできます。
[text]$ port install rhino[/text]
・Linux(CentOS)
yumで
[text]$ yum install rhino[/text]
これでRhinoが使えるようになったので、とりあえず下記サイトを参考にスクリーンショットを取るスクリプトを書いてみます。

<a href="http://www.ne.jp/asahi/hishidama/home/tech/java/image.html">Java画像メモ</a>

[javascript]importClass(java.io.File);
importClass(javax.imageio.ImageIO);
importClass(java.awt.Rectangle);
importClass(java.awt.Robot);


var robot = new Robot();
var img = robot.createScreenCapture(new Rectangle(java.awt.Toolkit.getDefaultToolkit().getScreenSize()));
ImageIO.write(img, &quot;jpg&quot;, (new File(&quot;test.jpg&quot;)));[/javascript]

上記をtest.jsとして保存。
[text]$  rhino test.js[/text]
実行。カレントディレクトリにスクリーンショットが保存されます。

javaのライブラリを簡単に扱えて便利ですね。

java.awt.Robotクラスを使えば、マウスやキーボードの操作もできるので、自動化スクリプトを書くにも使えそうです。
swingを使って、ちょっとしたGUIアプリなんかも作れます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2011-06-07 22:19:00</wp:post_date>
		<wp:post_date_gmt>2011-06-07 13:19:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rhino%e3%82%92%e8%a9%a6%e3%81%97%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="rhino"><![CDATA[Rhino]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/06/rhino.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.ioでスクレイピング</title>
		<link>http://shimz.me/blog/node-js/19</link>
		<pubDate>Tue, 19 Apr 2011 14:51:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[参考
<a href="http://shimz.me/blog/?p=1948">node.jsでスクレイピング（cheerio版）</a>
↑こちらの方が簡単かも
<hr>
Scraping the web with Node.io
<a href="http://www.coderholic.com/scraping-the-web-with-node-io/">http://www.coderholic.com/scraping-the-web-with-node-io/</a>

上記、ブログ記事を読んで興味深かったのでnode.ioをちょっと使ってみました。公式のドキュメントは以下。

node.io
<a href="https://github.com/chriso/node.io/wiki">https://github.com/chriso/node.io/wiki</a>

<!--more-->

インストールはnpmで。
[text]$ npm install node.io[/text]
とりあえず、試しに"はてブ"から「いま話題」キーワードリンクを取得してみる。

[javascript]
    var nodeio = require('node.io');
    exports.job = new nodeio.Job({
        input:false,
        run:function(){
            var self = this, url = &quot;http://b.hatena.ne.jp/hotentry&quot;;
            this.getHtml(url, function(err, $){
                if(err){
                    self.exit(err);
                }else{
                    $('.top_keyword a').each(function(a){
                        self.emit(a.text);
                    });               
                }
            })
        }
    })
[/javascript]
上記コードを、hatena.jsとして保存。実行してみる。
[text]$ node.io hatena.js[/text]
getHtmlの戻り値がdomエレメントなので、jQueryのセレクタに似た感じでデータを取り出せるのが便利。

うまく行ったので、もうすこしスクレイピングっぽいことを。
下記ページから、放射線量を取得してpostgresqlにインサートするスクリプトを書いてみる
node.js+postgresqlについては<a href="http://rm-rforz.blogspot.com/2011/04/nodejs-postgresql.html">こちら</a>

群馬県：原子力発電所事故に係る本県での放射線量等について
<a href="http://www.pref.gunma.jp/05/e0900020.html">http://www.pref.gunma.jp/05/e0900020.html</a>
以下テスト用テーブルの内容
・めんどくさいのでtest_db、gunma_tbは先に作ってる
・測定者、測定地点、測定日時、測定値を取得
・gunma_tbのカラムは　ID,GAUGER, SPOT, DATE, VALUE
・先のページが測定値を全角数字で書いてやがるので、カラムの型は、IDがシリアルなのを除いてすべてテキスト

[javascript]
    var GAUGER_CELL=5,SPOT_CELL=6,DATE_CELL=7,VALUE_CELL=8
    var nodeio = require('node.io');
    exports.job = new nodeio.Job({
        input:false,
        run:function(){
            var output = [];
            var self = this, url = &quot;http://www.pref.gunma.jp/05/e0900020.html&quot;;
            this.getHtml(url, function(err, $){
                if(err){
                    self.exit(err);
                }else{
                    output = [
                        $('td')[GAUGER_CELL].children[0].raw,
                        $('td')[SPOT_CELL].children[0].raw,
                        $('td')[DATE_CELL].children[0].raw,
                        $('td')[VALUE_CELL].children[0].raw
                    ]
                    var pg = require('pg'); 
                    var conString = &quot;tcp://＜アカウント＞:＜パスワード＞@localhost/test_db&quot;;
                    var client = new pg.Client(conString);
                    client.connect();
                    client.query(&quot;INSERT INTO gunma_tb(GAUGER, SPOT, DATE, VALUE) values($1, $2, $3, $4)&quot;, output,function(err,result){
                        client.end();
                    });                 
                }
            })
        }
    })
[/javascript]

node.ioはスクレイピング以外にも、標準入出力やファイルの読み書きなどが簡単に扱えるので、ちょっとしたコマンドラインアプリをnode.jsで書くのに便利そう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2011-04-19 23:51:00</wp:post_date>
		<wp:post_date_gmt>2011-04-19 14:51:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-io%e3%81%a7%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/04/nodeio.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js + postgresql</title>
		<link>http://shimz.me/blog/node-js/20</link>
		<pubDate>Tue, 19 Apr 2011 14:51:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[node.jsでDBにpostgresqlを使ってみる。

node-postgresなんて便利なライブラリがあるのでとても簡単。

node-postgres
<a href="https://github.com/brianc/node-postgres#readme">https://github.com/brianc/node-postgres#readme</a>

インストールはnpmで。
[text]$ npm install pg[/text]
ウチの環境では「pg_configが無いよ！」と怒られたので、yumでpostgresql-develを入れ、再度上記コマンドを実行したら問題なくインストールされました。

とりあえず公式ドキュメントにあったサンプルを実行

[javascript]var pg = require('pg');
//or native libpq bindings
//var pg = require('pg').native

var conString = 'tcp://＜アカウント＞:＜パスワード＞@localhost/postgres';

//error handling omittedpg.connect(conString, function(err, client) {
  client.query('SELECT NOW() as when', function(err, result) {
    console.log('Row count: %d',result.rows.length);// 1
    console.log('Current year: %d', result.rows[0].when.getYear());
  });
});[/javascript]

特に問題なくすんなり実行できました。

SQLの直書きなんて嫌だぁ！って人はFastLegSというORMがあるのでそちらを使ってみてはいかがでしょう。

FastLegS
<a href="https://github.com/didit-tech/FastLegS#readme">https://github.com/didit-tech/FastLegS#readme</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2011-04-19 23:51:00</wp:post_date>
		<wp:post_date_gmt>2011-04-19 14:51:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-postgresql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/04/nodejs-postgresql.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[InDesign]javascriptで「ページ番号の割り当て」を変更</title>
		<link>http://shimz.me/blog/javascript/21</link>
		<pubDate>Fri, 14 Jan 2011 16:48:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[忘れないようにメモ。

アクティブドキュメントの「ページ」→「ページ番号とセクションの設定」→「ページ番号割り当てを開始」項目をスクリプトで変更したくて、下記のように記述したのだけれど上手くいかず、困惑。
[javascript]app.activeDocument.sections[0].pageNumberStart = 1;[/javascript]
で、調べてみた結果、どうやら「自動ページ番号」をfalseにしないと割り当ての値を変更できないらしいと知り、下記の方法を試したところ上手くいきました。
[javascript]
app.activeDocument.sections[0].continueNumbering = false;
app.activeDocument.sections[0].pageNumberStart = 1;
[/javascript]
気付くのにえらく時間がかかった orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2011-01-14 16:48:00</wp:post_date>
		<wp:post_date_gmt>2011-01-14 16:48:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>indesignjavascript%e3%81%a7%e3%80%8c%e3%83%9a%e3%83%bc%e3%82%b8%e7%95%aa%e5%8f%b7%e3%81%ae%e5%89%b2%e3%82%8a%e5%bd%93%e3%81%a6%e3%80%8d%e3%82%92%e5%a4%89%e6%9b%b4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="indesign"><![CDATA[InDesign]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/01/indesignjavascript.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascriptのソートメッソド覚書</title>
		<link>http://shimz.me/blog/javascript/22</link>
		<pubDate>Thu, 16 Dec 2010 09:45:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>■基本</strong>

<strong>通常</strong>

[javascript]var hoge = [1,3,21,10,100,2,11];
hoge.sort();[/javascript]

&nbsp;

<strong>値を数値としてソート</strong>

[javascript]hoge.sort(function(a,b){return a - b});[/javascript]

&nbsp;

<strong>降順</strong>

[javascript]hoge.sort(function(a,b){return a &lt; b});

//reverse()と同じ。
hoge.reverse();
[/javascript]

&nbsp;

&nbsp;

<strong>値を加工しながらソート</strong>

[javascript]var hogeImgs = [&quot;1.jpg&quot;,&quot;21.gif&quot;,&quot;3.jpg&quot;,&quot;154.png&quot;,&quot;1111.jpg&quot;,&quot;316.bmp&quot;,&quot;1113.gif&quot;];

//拡張子を除き数値としてソート
hogeImgs.sort(function(a,b){
  return a.split(&quot;.&quot;)[0] - b.split(&quot;.&quot;)[0]
});[/javascript]

&nbsp;

&nbsp;

<strong>■２次元配列のソート</strong>

[javascript]var hoge2d = [
[1, 3, 21, 10, 100, 2, 11],
[5,1,11,10,100,31,15],
[100,0,5,23,30,11],
[1,2,3]
]

//３列目の値を対象としてソート
hoge2d.sort(function(a,b){return a[3] - b[3]});
[/javascript]

&nbsp;

&nbsp;

<strong>■連想配列（ハッシュ）を含む配列のソート</strong>

[javascript]hogeHash = [
{group:1, name:&quot;hogeo&quot;, age:14},
{group:1, name:&quot;hogeko&quot;, age:21},
{group:1, name:&quot;hogenari&quot;, age:35},
{group:2, name:&quot;hogehisa&quot;, age:19},
{group:2, name:&quot;hogesige&quot;, age:23},
{group:2, name:&quot;hogemi&quot;, age:12},
{group:3, name:&quot;hogeteru&quot;, age:56},
{group:3, name:&quot;hogekusa&quot;, age:9},
{group:3, name:&quot;hogemura&quot;, age:27},
{group:3, name:&quot;hogeji&quot;, age:32},
]

//ageの値を元にソート
hogeHash.sort(function(a,b){return a['age'] - b['age']});
[/javascript]

&nbsp;

&nbsp;

<strong>■二重（ダブル）ソート</strong>

group毎にage順にソート

論理演算子で指定

[javascript]hogeHash.sort(function(a,b){
  return a['group'] - b['group'] || a['age'] - b['age']
});[/javascript]

メソッドチェーンで

[javascript]hogeHash.sort(function(a,b){
  return a['age'] - b['age']
}).sort(function(c,d){
  return c['group'] - d['group']
});[/javascript]

Javascriptのソートメッソドは奥が深い。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2010-12-16 09:45:00</wp:post_date>
		<wp:post_date_gmt>2010-12-16 09:45:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%ae%e3%82%bd%e3%83%bc%e3%83%88%e3%83%a1%e3%83%83%e3%82%bd%e3%83%89%e8%a6%9a%e6%9b%b8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/javascript.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]Windowsに、node.jsをインストールする（Cygwin）</title>
		<link>http://shimz.me/blog/node-js/23</link>
		<pubDate>Fri, 10 Dec 2010 23:47:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[※追記
<a href="http://bit.ly/lLmWzj">Node.js、Microsoftの協力を得てWindowsへ正式移植 </a>
無理にインストールするより、上記を待った方がいいかも。

※追記２
<a href="http://www.publickey1.jp/blog/11/nodejswindowsnodeexe.html">Node.jsがバージョンアップ、初の公式Windows版「node.exe」登場</a>
バイナリが出ました。

<hr />

<a name="more"></a>結構、手間取ったのでメモ

参考） <a href="https://github.com/ry/node/wiki/Building-node.js-on-Cygwin-(Windows)">https://github.com/ry/node/wiki/Building-node.js-on-Cygwin-(Windows)</a>

<strong>■Cygwinをインストール</strong>

<a href="http://www.cygwin.com/">http://www.cygwin.com/</a>
参考） <a href="http://www.db.is.kyushu-u.ac.jp/rinkou/cygwin/cygwin.html">http://www.db.is.kyushu-u.ac.jp/rinkou/cygwin/cygwin.html</a>

cygwin 導入パッケージでは以下を選択
[text]・Web    → wget
・devel  → gcc-g++
・devel  → git
・devel  → make
・devel  → openssl
・libs   → openssl-devel
・devel  → pkg-config
・devel  → zlib-devel
・python → python
[/text]
<span class="Apple-style-span" style="font-family: 'MS PGothic'; white-space: normal;">環境変数「PATH」 に「C:cygwiusrbin;C:cygwinusrlocalbin」を追可</span>
<span class="Apple-style-span" style="font-size: x-small;">※これをちゃんと設定しておかないと、このあと「ash」上で ls すら実行できない</span>

<strong>■Cygwinを起動しnode.jsをインストール……できない？</strong>

一応、resolv.confを設定しておく
[text]
$ vim /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
[/text]
node.jsダウンロード
<a href="http://nodejs.org/">http://nodejs.org/</a>
[text]
$ wget http://nodejs.org/dist/node-v0.3.1.tar.gz 
$ tar xvf /node-v0.3.1.tar.gz 
$ cd node-v0.3.1
[/text]
node.js インストール準備　ライブラリチェック
[text]$ ./configure[/text]
しかし、以下のようなエラーが出てconfigureが通らない。
[text]
5 [main] python 2244 C:cygwinbinpython.exe: *** fatal error - unable to remap \?C:cygwinlibpython2.6lib-dynloadtime.dll to same address as parent: 0x2D0000 != 0x3C0000&lt;
11 [main] python 3392 fork: child 2244 - died waiting for dll loading, errno 11

wscript:165: error: could not configure a c compiler!
[/text]
こまったときは、Ｇｏｏｇｌｅ。

<strong>■ash上でnode.jsをインストールする</strong>

参考） <a href="http://avalanche123.com/post/855374337/nodejs-mongodb-tinyurl">http://avalanche123.com/post/855374337/nodejs-mongodb-tinyurl</a>

いったんCygwinを終了する。
以下のフォルダからash.exeを起動
[text]
C:cygwinbinash.exe
[/text]
ash上でrebaseallを実行
[text]$ rebaseall[/text]
自分の環境ではここでTempに書き込めないとエラーがでた
[text]rebaseall: '/cygdrive/c/Users/hoge/AppData/Local/Temp' is not writable[/text]
rebaseallをエディタで開きテンポラリの指定フォルダを変更して再度ash上でrebaseallを実行
[text]
#TmpDir=&quot;${TMP:-${TEMP:-/tmp}}&quot;
TmpDir=&quot;/tmp&quot;
[/text]
メッセージがなにも出力されないので成功したのか失敗したのかわかりにくいが、コマンドが正しく実行されるとちょっと待たされたのちコンソールに操作が戻る。

そのままash上で　node-v0.3.1ディレクトリに移動し改めてconfigre実行
[text]$ ./configure[/text]
いろいろ見つからないライブラリもあるけれど、とりあえず
「'configure' finished successfully」
が表示されればビルドできるので、makeする。
[text]
$ make
$ make install
[/text]
<strong>■Cygwinを起動しmake test</strong>

ashを終了し、cygwinを起動、 node-v0.3.1 ディレクトリへ移動しテスト開始
[text]$ make test　2&gt;&amp;1 | tee node-test.log[/text]
node.jsサイトのサンプルをテストしてみる。
[javascript]
//example.js
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hello Worldn');
}).listen(8124, &quot;127.0.0.1&quot;);
console.log('Server running at http://127.0.0.1:8124/');
[/javascript]
[text]$ node example.js[/text]
ブラウザでhttp://127.0.0.1:8124/にアクセスし、「Hello World」と表示されれば完了

上記の方法は、多数の「not found」が出たままビルドしてしまっているのでうまく動かないAPIが結構あるかも。 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2010-12-11 08:47:00</wp:post_date>
		<wp:post_date_gmt>2010-12-10 23:47:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-jswindows%e3%81%ab%e3%80%81node-js%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%99%e3%82%8b%ef%bc%88cygwin%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/windowsnodejscygwin.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]WebSocket フレームワーク「socket.io」をインストール</title>
		<link>http://shimz.me/blog/node-js/24</link>
		<pubDate>Wed, 08 Dec 2010 14:38:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[socket.io インストール
http://socket.io/

[javascript]$ npm install socket.io[/javascript]

socketserver.js を作成
[javascript]
var app = require('express').createServer();
var socket_server = app.get('/', function(req, res){
  res.send('hello socket.io');
});
socket_server.listen(8000);

var io = require('socket.io'); 
var socket = io.listen(socket_server);
socket.on('connection', function(client){
  client.on('message', function(data)
  {
    client.send(data);
    client.broadcast(data);
  })
  client.on('disconnect', function()
  {
    client.broadcast(client.sessionId + 'disconnected');
  })

});
[/javascript]
socketserver.js起動
[javascript]$ node socketserver.js[/javascript]

http://{ソケットサーバーアドレス}:8000/ にアクセスして「hello socket.io」と表示されればＯＫ

index.htmlを変更する

[html]
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;ja&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;script src=&quot;http://{socket server}:8000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;
    socket = new io.Socket('{socket server}:8000',{port:8000});
    socket.connect();
    socket.send('hi!');
    socket.on('message', function(data){
      alert(data);
    });
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  socket test
&lt;/body&gt;
&lt;/html&gt;

[/html]
「hi!」とアラートが出ればＯＫ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2010-12-08 23:38:00</wp:post_date>
		<wp:post_date_gmt>2010-12-08 14:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-jswebsocket-%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%83%af%e3%83%bc%e3%82%af%e3%80%8csocket-io%e3%80%8d%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/web-socket-socketio.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4400f4e9b26391c4bd5c6c155d1b6c09</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1b6920ef8fc81d38a64506eb5c3d0cb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7792b193bbd302cc23c147afbd99c18b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2d6186c28dfb6533c5d887e52ee73080</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]Webフレームワーク「express」をインストール</title>
		<link>http://shimz.me/blog/node-js/25</link>
		<pubDate>Wed, 08 Dec 2010 14:15:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>express インストール</strong>
<a href="http://expressjs.com/">http://expressjs.com/</a>
<pre class="brush: js">$ npm install express</pre>
適当にindex.htmlファイルを作る

同じフォルダにserver.jsを作成
[javascript]
var app =  require('express').createServer();
var web_server = app.get('/',function(req, res){
  res.sendfile('index.html',function(err, path){
 if(err){
  console.log('error %s', err);
 }else{
   console.log('transferred %s', path);
 }
  });
});
web_server.listen(80);
[/javascript]
サーバー起動
<pre class="brush: js">$ node server.js</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2010-12-08 23:15:00</wp:post_date>
		<wp:post_date_gmt>2010-12-08 14:15:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-jsweb%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%83%af%e3%83%bc%e3%82%af%e3%80%8cexpress%e3%80%8d%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/webexpress.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]ServersMan@VPSにnode.jsをインストール</title>
		<link>http://shimz.me/blog/node-js/26</link>
		<pubDate>Wed, 08 Dec 2010 10:12:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[最近なにかと話題のnode.jsを試してみた。

node.jsの衝撃とWebSocketが拓く未来
<a href="http://www.atmarkit.co.jp/fcoding/articles/websocket/01/websocket01a.html">http://www.atmarkit.co.jp/fcoding/articles/websocket/01/websocket01a.html</a>

<strong>node.js ダウンロード</strong>
<a href="http://nodejs.org/">http://nodejs.org/</a>
<pre class="brush: js">$ wget http://nodejs.org/dist/node-v0.3.1.tar.gz$ tar xvzf node-v0.3.1.tar.gz$ cd node-v0.3.1$ ./configure</pre>
c++が無いよ！ OpenSSLが無いよ！　とか言われるので、インストール
<pre class="brush: js">$ yum install gcc-c++
$ yum install openssl-devel
$ ./configure</pre>
'configure' finished successfully と最後に表示されればＯＫ

<strong>node.js インストール</strong>
[javascript]$ make
$ make install[/javascript]
テストする。
<pre class="brush: js">$ make test</pre>
<strong>npmインストール</strong>
node.jsのパッケージマネージャーをインストールしておく。
<a href="http://npmjs.org/">http://npmjs.org/</a>
<pre class="brush: js">$ curl http://npmjs.org/install.sh | sh</pre>
<span class="Apple-style-span" style="font-size: x-small;">※上記のインストール方法は、結構危ないので信頼できるサイト対してだけ使いましょう。</span>
<pre class="brush: js">$ npm -h</pre>
クイックヘルプが表示されればＯＫ

参考）

node.js.jp
<a href="http://nodejs.jp/nodejs.org_ja/">http://nodejs.jp/nodejs.org_ja/</a>

node.js ハンズオン資料
<a href="http://dl.dropbox.com/u/219436/node.js/handson/build/html/index.html">http://dl.dropbox.com/u/219436/node.js/handson/build/html/index.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2010-12-08 10:12:00</wp:post_date>
		<wp:post_date_gmt>2010-12-08 10:12:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-jsserversmanvps%e3%81%abnode-js%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2010/12/serversmanvpsnodejs.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>unity初めてみた。</title>
		<link>http://shimz.me/blog/unity/318</link>
		<pubDate>Wed, 22 Feb 2012 05:06:57 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=318</guid>
		<description></description>
		<content:encoded><![CDATA[昨日の夜中に作ったもの。

<img class="alignnone size-medium wp-image-319" title="test" src="http://shimz.me/blog/wp-content/uploads/2012/02/test-300x228.jpg" alt="" width="300" height="228" />

<a href="http://shimz.me/labo/Unity/example01/">DEMO</a>

unityプラグインが無いとみれません。
unity画面をクリックすると矢印キーで板を動かせます。

<!--more-->

参考書片手に、作業時間は４０分くらい。
それも、ほぼ基本の操作方法を確認するぐらいで、実際スクリプトは１０行も書いてない。

物理計算も衝突判定もunityがデフォルトで行ってくれるので、非常に簡単。

あと Asset Store がチートすぎるｗ

モデリングデータなどはもとより、 A*探索アルゴリズムなんかも売りにだされていて１クリックでプロジェクトに取り込める。

へたしたら「敵AI」とかもコードレスで作成できるので、Asset Storeからダウンロードしたものを組み合わせていくだけでそこそこのゲームが作れてしまいそうな勢い。

なんかもう、凄い時代になったもんだなぁ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2012-02-22 14:06:57</wp:post_date>
		<wp:post_date_gmt>2012-02-22 05:06:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unity%e5%88%9d%e3%82%81%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="unity"><![CDATA[Unity]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ビジュアライゼーション基礎</title>
		<link>http://shimz.me/blog/?p=2658</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2658</guid>
		<description></description>
		<content:encoded><![CDATA[データ収集
解析
クリーニング（フィルタリング）
マイニング
表現
精緻化
インタラクション]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2658</wp:post_id>
		<wp:post_date>2013-03-19 14:14:18</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>僕の読んでいるブログを紹介します。</title>
		<link>http://shimz.me/blog/?p=2835</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2835</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://tmaita77.blogspot.jp/" target="_blank">データえっせい</a>
<a href="http://www.usability.gr.jp/" target="_blank">U-Site - ユーザビリティの充足から、豊かなユーザーエクスペリエンスへ</a>
<a href="http://www.visualthinking.jp/" target="_blank">ビジュアルシンキング | インフォグラフィック・ピクトグラム・図解</a>
<a href="http://nutsu.com/blog/" target="_blank">NUTSU</a>
<a href="http://kenz0.s201.xrea.com/weblog/" target="_blank">K'conf | Blog</a>
<a href="http://opendata.nikkei.co.jp/" target="_blank">オープンデータ情報ポータル</a>
<a href="https://kaztaira.wordpress.com/" target="_blank">新聞紙学的 | Journodelic Medialog</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2835</wp:post_id>
		<wp:post_date>2013-06-12 20:50:40</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Maps Engine Lite で遊んでみた。</title>
		<link>http://shimz.me/blog/?p=2908</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2908</guid>
		<description></description>
		<content:encoded><![CDATA[

<a href="https://mapsengine.google.com/map/">Maps Engine Lite</a> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2908</wp:post_id>
		<wp:post_date>2013-06-27 13:28:37</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://shimz.me/blog/?p=2951</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2951</guid>
		<description></description>
		<content:encoded><![CDATA[マテドモマテドモ、アスキーストアからenchantMOONが届きません orz

そんな中、巷ではenchantMOONと同じぐらい手に入りにくいと噂の「チェルノブイリ・ダークツーリズム・ガイド」が届きました。

今までの「思想地図」は、一見して「難しそう…」と

チェルノブイリ国内報道年表とか、

個人的にチェルノブイリ観光プランナー「セルゲイ・ミールヌイ」さんのインタビューが印象に残りました。



<blockquote>
現実として、チェルノブイリはすでに世界中の興味の対象になっています。福島も同じです。いまウクライナでもっとも有名な場所はチェルノブイリです。日本でもっとも有名な場所は福島です。今後問題になるのは、その興味に科学的根拠に基づいた質の高い情報で応えるのか、それとも非科学的な神話や噂話で応えるのか、ということです。
</blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2951</wp:post_id>
		<wp:post_date>2013-07-19 21:37:39</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>さらにpaper.jsを勉強中</title>
		<link>http://shimz.me/blog/paper-js/10</link>
		<pubDate>Fri, 02 Sep 2011 06:44:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[ちょっとだけ、チュートリアルっぽく、機能ごとのスニペット。
多少、理解できてきたかも。

<a name="more"></a><!--more-->

・クリックイベントの取得
<script type="text/javascript" src="http://jsdo.it/blogparts/sD17/js?view=design"></script>

<a title="Paper.js クリックイベント" href="http://jsdo.it/_shimizu/sD17">Paper.js クリックイベント - jsdo.it - share JavaScript, HTML5 and CSS</a>

・ファイルのドラッグ＆ドロップ
<script type="text/javascript" src="http://jsdo.it/blogparts/6ypl/js?view=design"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="paper.js　File drag &amp; drop " href="http://jsdo.it/_shimizu/6ypl">paper.js　File drag &amp; drop - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
・シンボル
<script type="text/javascript" src="http://jsdo.it/blogparts/yEtd/js?view=design"></script>

<a title="Paper.js Symbol" href="http://jsdo.it/_shimizu/yEtd">Paper.js Symbol - jsdo.it - share JavaScript, HTML5 and CSS</a>

・シンボルのドラッグ＆ドロップ
<script type="text/javascript" src="http://jsdo.it/blogparts/62ja/js?view=design"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="paper.js drag &amp; drop " href="http://jsdo.it/_shimizu/62ja">paper.js drag &amp; drop - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
・HitResult
<script type="text/javascript" src="http://jsdo.it/blogparts/eucb/js?view=design"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="Paper.js HitResult" href="http://jsdo.it/_shimizu/eucb">Paper.js HitResult - jsdo.it - share JavaScript, HTML5 and CSS</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2011-09-02 15:44:00</wp:post_date>
		<wp:post_date_gmt>2011-09-02 06:44:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%95%e3%82%89%e3%81%abpaper-js%e3%82%92%e5%8b%89%e5%bc%b7%e4%b8%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="paper-js"><![CDATA[Paper.js]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[rm-rforz.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2011/09/paperjs.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[_shimizu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>エディタをKomodo Editに変えた10の理由</title>
		<link>http://shimz.me/blog/editor/74</link>
		<pubDate>Thu, 24 Nov 2011 11:16:46 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2011/11/201111241903.jpg" alt="201111241903.jpg" width="480" height="360" />

&nbsp;


いままで、windowsでは「notepad++」を、macでは「Coda」「CotEditor」をメインに使っていたのですが、気まぐれにインストールした「Komodo Edit」がかなり便利だったので、１週間ほど利用してみて感じた便利ポイントを記載してみます。

<a title="Komodo Edit6" href="http://www.activestate.com/komodo-edit"><img class="alignnone size-full wp-image-96" title="komodo-edit-6-new" src="http://shimz.me/blog/wp-content/uploads/2011/11/komodo-edit-6-new.png" alt="" width="480" height="136" /></a>



<strong>１．マルチプラットフォームwindows, mac, linux に対応</strong>

OSが変わっても同じエディタが使えるのは便利です。

&nbsp;

<strong>２．ファンクションブロックなどを折りたためます</strong>

地味ですが11インチのノートPCなどでコーディングする際には、個人的に必須。

&nbsp;

<strong>３．サーバー上のファイルを直接編集できます</strong>

ものぐさなのでやはり必須。

&nbsp;

<strong>４．コード補完機能が便利</strong>

PHP, Python,  Ruby, Javascript、他、jQueryやExtjsなどの補完が可能 です。

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/acca5c4655f96185a8cb2a1c0eea438f.jpg" alt="" title="スクリーンショット 2012-12-05 22.59.51" width="309" height="160" class="alignnone size-full wp-image-1957" />



&nbsp;

<strong>５．構文チェックが便利</strong>

書いたそばからエラーチェックをしてくれます。

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/index.js-_Downloads_test-Project-MyProject-1.jpg" alt="index.js-_Downloads_test-Project-MyProject-1.jpg" width="240" height="74" class="alignnone size-full wp-image-87" />
&nbsp;

<strong>６．対応している言語が豊富</strong>

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/1779f15cea81f4ba761c054e336b391d.jpg" alt="" title="スクリーンショット 2012-12-05 23.02.21" width="210" height="625" class="alignnone size-full wp-image-1956" />
&nbsp;

<strong>７．スニペット機能が便利</strong>

例えば以下ののようなスニペットを保存しておくと


<img src="http://shimz.me/blog/wp-content/uploads/2011/11/sni.jpg" alt="sni" width="247" height="204" class="alignnone size-full wp-image-1735" />

スニペットを貼付けた際に[[%tabstop]]と記述した場所にフォーカスが当たり、TABキーでフォーカスを移動することができます。これが地味に便利！

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/ed5179487ba04d835212a5efb3c014cf.jpg" alt="" title="スクリーンショット 2012-12-05 23.03.19" width="248" height="145" class="alignnone size-full wp-image-1958" />

&nbsp;

<strong>８．vi風のキーバインドが利用できます</strong>

viは良い。Emacs風のキーバインドも可。

&nbsp;

<strong>９．アドオンが豊富</strong>

便利なアドオンが多数。

<a href="http://community.activestate.com/addons">http://community.activestate.com/addons</a>

zen-codingのアドオンなどもあります。

<a href="http://community.activestate.com/xpi/zen-coding">http://community.activestate.com/xpi/zen-coding</a>

&nbsp;

<strong>１０．Javascriptやpythonでマクロが書けます</strong>

例えば以下は、カラーピッカーで選択した色のカラーコードを差し込むマクロ。

<a href="http://community.activestate.com/forum-topic/color-picker-macro-useful-css">http://community.activestate.com/forum-topic/color-picker-macro-useful-css</a>

<img src="http://shimz.me/blog/wp-content/uploads/2011/11/aa.jpg" alt="" title="aa" width="220" height="229" class="alignnone size-full wp-image-1734" />

&nbsp;

以上、個人的に便利だと思った機能を羅列してみました。

他にも便利な機能が多数そなわっているのですが、まだまだ使いこなせていません。

みんなも、Komodo Edit 使うといいよ、色々と捗るぞ。


<a title="Komodo Edit6" href="http://www.activestate.com/komodo-edit">Komodo Edit</a>

&nbsp;

【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>
<a href="http://shimz.me/blog/editor/2724">Komodo Edit 8.0にしてみた。</a>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2011-11-24 20:16:46</wp:post_date>
		<wp:post_date_gmt>2011-11-24 11:16:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>concrete5を入れてみた。</title>
		<link>http://shimz.me/blog/other/130</link>
		<pubDate>Tue, 06 Dec 2011 11:57:42 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[HTMLとかCSSとかに詳しくなくても直感的にページの更新ができて、日本語のインターフェイスを持つCMSを探していたのですが、concrete5なかなか良さげだったのでとりあえずインストールしてみました。

<!--more-->

<iframe src="http://www.youtube.com/embed/UtaO3b7b08M" frameborder="0" width="560" height="315"></iframe>

<a href="http://concrete5-japan.org/">http://concrete5-japan.org/</a>

動画は英語ですが、実際には管理画面含め全て日本語化されてます。

まだ、インストールしただけで、殆ど触っていませんがかなり良さげです。

&nbsp;

test サイト

<s>http://shimz.me/concrete/</s> （閉鎖しました）]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2011-12-06 20:57:42</wp:post_date>
		<wp:post_date_gmt>2011-12-06 11:57:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>concrete5%e3%82%92%e5%85%a5%e3%82%8c%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Komodo Editをとりあえず使ってみるための基本的な設定</title>
		<link>http://shimz.me/blog/editor/148</link>
		<pubDate>Thu, 15 Dec 2011 01:44:03 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/?p=74">エディタをKomodo Editに変えた10の理由</a>

上記記事で紹介したKomodo Editを、とりあえず使ってみるために必要な、基本的な設定などを記載してみました。

<!--more-->

「メニュー」→「Edit」→「Preferences」から、様々な設定を行うことができます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000011.jpg"><img class="alignnone size-medium wp-image-149" title="WS000001" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000011-300x250.jpg" alt="" width="300" height="250" /></a>

&nbsp;

&nbsp;

<strong>１．日本語テキストに関する設定</strong>

まずは、日本語がちゃんと書けないと困るのでその設定を。

フォントの設定は「Fonts and Colors」で。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000005.jpg"><img class="alignnone size-medium wp-image-150" title="WS000005" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000005-300x300.jpg" alt="" width="300" height="300" /></a>

Komodo Editには"ＭＳ　ゴシック"などの日本語名のフォントを指定すると正しく反映されないという問題があります。とりあえずWindows なら「System」を選らんでおけば問題ないですが、日本語名のフォントを設定したい場合は、下記サイトが参考になると思います。

<a href="http://azemichi2000.blogspot.com/2009/01/komodo-edit.html">Komodo Editで日本語フォントを使いたい</a>

エンコーディングの設定は「Internationalization」で。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000004.jpg"><img class="alignnone size-medium wp-image-151" title="WS000004" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000004-300x300.jpg" alt="" width="300" height="300" /></a>

言語タイプ毎にデフォルトエンコーディングの設定が行えます。
Windows の場合は「Use Encoding Defined in Environment: cp932」にチェックを入れておきましょう。
*デフォルトのエンコーディングをUTF8にしたい場合は、逆チェックを外して「Custom encoding:」の項目でUTF-8を選んでください。
&nbsp;

<strong>２．FTPの設定</strong>

<strong></strong>FTPクライアント機能の設定は「Servers」で行えます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000002.jpg"><img class="alignnone size-medium wp-image-152" title="WS000002" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000002-300x300.jpg" alt="" width="300" height="300" /></a>

設定したFTPサーバーにアクセスしたいときは、「Places」パネルの設定アイコンをクリックし、「Open Remote Directory」を選択します。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000001.jpg"><img class="alignnone size-medium wp-image-153" title="WS000000" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000001-300x250.jpg" alt="" width="300" height="250" /></a>

&nbsp;

&nbsp;

<strong>３．編集ファイルのプレビュー</strong>

編集中のファイルは「地球儀(?)アイコン」をクリックすることでプレビューを見ることができます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000011.jpg"><img class="alignnone size-medium wp-image-154" title="WS000011" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000011-300x250.jpg" alt="" width="300" height="250" /></a>

&nbsp;

プレビューアイコンをクリックしたときに開くブラウザは「Web &amp; Browser」で設定できます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000010.jpg"><img class="alignnone size-medium wp-image-170" title="WS000010" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000010-300x300.jpg" alt="" width="300" height="300" /></a>

リモートでファイルを直接編集しているときに便利な機能ですが、ファイルを開く毎に下記のようなダイアログでファイルとURLのマッピングを聞かれ、メンドウです。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000008.jpg"><img class="alignnone size-medium wp-image-168" title="WS000008" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000008-300x156.jpg" alt="" width="300" height="156" /></a>
特に、ファイルごとに対応するURLを入力しなくちゃいけないが非常に煩わしいので「Preferences」の「Mapped URIs」にて、URIマッピングの設定を行っておくと、いちいちURLを入力する煩わしさを解消できます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000003.jpg"><img class="alignnone size-medium wp-image-172" title="WS000003" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000003-300x288.jpg" alt="" width="300" height="288" /></a>

&nbsp;

とりあえず以上。

【追加】
ちょっとしたことなんですが、Komodo Editは起動時にスタートページを開きます。
スタートページが必要ない方は、設定画面で「Show Komodo Start Page on startup」のチェックを外しておくといいかもしれません。
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000007.jpg"><img class="alignnone size-medium wp-image-156" title="WS000007" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000007-300x300.jpg" alt="" width="300" height="300" /></a>


【関連記事】
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>
&nbsp;

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2011-12-15 10:44:03</wp:post_date>
		<wp:post_date_gmt>2011-12-15 01:44:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit%e3%82%92%e4%bd%bf%e3%81%86%e3%81%9f%e3%82%81%e3%81%ae%e5%9f%ba%e6%9c%ac%e7%9a%84%e3%81%aa%e8%a8%ad%e5%ae%9a</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>めんどうな作業がわずか1コマンドに！ 新人○○が 知らないと（略） awkを使ったHTML生成</title>
		<link>http://shimz.me/blog/beginner/180</link>
		<pubDate>Fri, 16 Dec 2011 05:12:47 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://webrocketsmagazine.com/entry/20111209/html-code-generation-using-excel.html">めんどうな作業がわずか数秒に！新人デザイナーが 知らないと一生後悔するExcelを使ったHTML生成</a>
<a href="http://blog.livedoor.jp/dankogai/archives/51758110.html">javascript - めんどうな作業がわずか1クリックに!新人プログラマーが知らないと一生後悔するブラウザーを使ったHTML生成</a>

乗っかってみました。

コマンドプロンプトを使ったことがある人が対象です。

<!--more-->

<strong>■CSVファイルをテキスト（タブ区切り）形式で「名前を付けて保存」する。</strong>

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000002.jpg"><img class="alignnone size-medium wp-image-182" title="WS000000" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000002-300x176.jpg" alt="" width="300" height="176" /></a>

csvのままでも問題ないんですが、タブ区切りの方が処理が簡単なので。

&nbsp;

<strong>■ mawk32をダウンロード</strong>

<a href="http://www.vector.co.jp/soft/dl/win95/util/se080308.html">mawk MBCS (32bit版)</a>

&nbsp;

<strong>■ mawk32.exe と text.txt(名前を付けて保存したファイル) を同じフォルダに置いて、コマンドプロンプトから以下のコマンドを実行</strong>
<pre> mawk32 '{print "&lt;dt&gt;"$1"&lt;/dt&gt;&lt;span&gt;"$2"&lt;/span&gt;&lt;span&gt;"$3"&lt;/span&gt;"}' test.txt &gt; test.html</pre>
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000051.jpg"><img class="alignnone size-medium wp-image-196" title="WS000005" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000051-300x122.jpg" alt="" width="300" height="122" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000021.jpg"><img class="alignnone size-medium wp-image-184" title="WS000002" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000021-300x66.jpg" alt="" width="300" height="66" /></a>

実行すると、text.htmlというファイルが出力されます。

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000006.jpg"><img class="alignnone size-medium wp-image-197" title="WS000006" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000006-300x122.jpg" alt="" width="300" height="122" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000041.jpg"><img class="alignnone size-medium wp-image-186" title="WS000004" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000041-300x153.jpg" alt="" width="300" height="153" /></a>

以上。

&nbsp;

&nbsp;

&nbsp;

とりあえずawkを使うときに覚えておかないとならないルールは４つ。

１．　mawk32 '{print }'  &lt;&lt;ファイル名&gt;&gt;   で全ての内容を表示

<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000071.jpg"><img class="alignnone size-medium wp-image-203" title="WS000007" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000071-300x66.jpg" alt="" width="300" height="66" /></a>

２．　$1 , $2 という変数で、データ各行の一桁目、二桁目を出力。

例えば、１桁目と３桁目だけを出力したいときは以下
<pre>mawk32 '{print $1$3}' test.txt</pre>
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS000009.jpg"><img class="alignnone size-medium wp-image-206" title="WS000009" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS000009-300x66.jpg" alt="" width="300" height="66" /></a>

３．　桁と桁の間になにか入れたいときはダブルクォーテーションで囲む
<pre>mawk32 '{print $1"の緯度は「"$3"」です"}'  test.txt</pre>
<a href="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000101.jpg"><img class="alignnone size-medium wp-image-207" title="WS000010" src="http://shimz.me/blog/wp-content/uploads/2011/12/WS0000101-300x66.jpg" alt="" width="300" height="66" /></a>
※ちなみに、コマンドプロンプトで日本語を入力するには「Altキー」と「半角／全角キー」を同時押ししてください。

４．　ファイルに出力したいときは、コマンドの最後に 「 &gt; 　&lt;&lt;出力するファイル名&gt;&gt;　」を付ける
<pre>mawk32 '{print $1"の緯度は「"$3"」です"}'  test.txt &gt; hoge.txt</pre>
ねっ、簡単でしょ？　この４つだけ覚えておけば、csv→htmlに変換以外にもいろんなことに使えます。

&nbsp;

&nbsp;

<strong>■mawkを使う利点</strong>

・多分、正規表現やExcelのマクロを覚えるより楽。
・持ち運べる

mawk32.exe単体で動くので、USBストレージにでも入れておけば、自分のＰＣ以外で作業しなくてはならないときでも使えます。

awk についてもっと詳しいことを知りたい方は、以下のサイトが参考になります。
<h1><a href="http://itref.fc2web.com/unix/awk.html">awk sed 入門</a></h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2011-12-16 14:12:47</wp:post_date>
		<wp:post_date_gmt>2011-12-16 05:12:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%81%e3%82%93%e3%81%a9%e3%81%86%e3%81%aa%e4%bd%9c%e6%a5%ad%e3%81%8c%e3%82%8f%e3%81%9a%e3%81%8b1%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%81%ab%ef%bc%81-%e6%96%b0%e4%ba%ba%e2%97%8b%e2%97%8b%e3%81%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>javascriptで自動着色やってみた。</title>
		<link>http://shimz.me/blog/javascript/238</link>
		<pubDate>Thu, 09 Feb 2012 12:30:27 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://alfalfalfa.com/archives/5159386.html">「MangaMeeya（マンガミーヤ）」 “自動着色”機能すげぇｗｗｗｗｗｗｗｗｗ</a>を読んでいて、canvasで同じようなことが出来ないかな？　と思いやってみました。
一からつくる知識もスキルもないので<a href="http://www.pixastic.com/">pixastic</a>というライブラリを使い、autocolorというプラグインを作成しました。

<a href="http://shimz.me/labo/autocolor/">DEMO</a>

<!--more-->


<iframe src="http://shimz.me/labo/autocolor/" width="600" height="1800"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2012-02-09 21:30:27</wp:post_date>
		<wp:post_date_gmt>2012-02-09 12:30:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-%e3%81%a7%e8%87%aa%e5%8b%95%e7%9d%80%e8%89%b2%e3%82%84%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>それでもアフィリエイトで儲けたい</title>
		<link>http://shimz.me/blog/javascript/275</link>
		<pubDate>Tue, 14 Feb 2012 11:18:54 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://gigazine.net/news/20120128-i-dislike-amazon-affiliate/" title="Amazonのアソシエイト用リンクを通常のリンクに置換するFirefox用アドオン「I Dislike Amazon Affiliate!」">Amazonのアソシエイト用リンクを通常のリンクに置換するFirefox用アドオン「I Dislike Amazon Affiliate!」</a>

いつか自分もAmazonのアフィリエイトでがっぽがっぽ儲けたいので、上記のプラグインに対する対抗策を考えてみました。

<!--more-->

１．短縮URLを利用する。
上記のアドオンは<a href="https://bitly.com/" title="bitly">bitly</a>のような短縮URLには対応していないっぽいので、アフィリンクを短縮URLに変えてしまうのが簡単そうです。


２．Javascriptで抵抗

<a href="http://shimz.me/labo/unIDAA/" title="DEMO">DEMO</a>


[javascript]
if(window.addEventListener) window.addEventListener(&quot;load&quot;, function(){
	var user_id = &quot;&amp;tag=あなたのアマゾンアソシエイトID&quot;;
	var links =  document.getElementsByTagName( 'a' );
	for(var i=0, l=links.length;i &lt; l; i++){
		if(links[i].href.indexOf(&quot;amazon.co.jp&quot;)!=-1) if(links[i].href.indexOf(user_id)==-1){
			//「I Dislike Amazon Affiliate!」をインストールしているブラウザに対する処理
			//下記ではalertを出していますが。他にも色々？できます。
			alert(&quot;I Dislike Amazon Affiliate! installed&quot;);
			links[i].href = links[i].href + user_id;			
		}
	}
	
},false);
[/javascript]

ページ表示後にamazonのリンクをチェックして個別識別用のタグがなくなっていたら付け足すという至極単純なことをやってます。
（詳しくはDEMOのソースを見てください）
なので、アマゾンのリンクを"弄る"ようなプラグインが他にもあると、それも引っかかります。
alretだしてますが、代わりにdocument.lcation.hrefでどっかに飛ばしちゃったりしてもいいかもしれません。


余談ですが、ググってみたらAdblockを検出するTIPSなどもあるみたいですね。まぁこの辺は、いたちごっこですが。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2012-02-14 20:18:54</wp:post_date>
		<wp:post_date_gmt>2012-02-14 11:18:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%9d%e3%82%8c%e3%81%a7%e3%82%82%e3%82%a2%e3%83%95%e3%82%a3%e3%83%aa%e3%82%a8%e3%82%a4%e3%83%88%e3%81%a7%e5%84%b2%e3%81%91%e3%81%9f%e3%81%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPressにショートコードを追加する。</title>
		<link>http://shimz.me/blog/php/329</link>
		<pubDate>Thu, 23 Feb 2012 15:41:40 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pasonatech.co.jp/event/index.jsp?mode=2&amp;d=on&amp;no=3312">Webデザイナーのための、PHPプログラミングWordPressで学ぶCMSカスタマイズ入門　～WordPressサイト運用編～</a>


上記のセミナーに参加してきたのですが、思いのほか簡単にWordPressのプラグインが作れるらしい事を知ったので、とりあえず復習もかねてショートコードを追加するプラグインを作ってみました。

<!--more-->

<pre><code>［googlemap］高崎駅［/googlemap］</code></pre>
投稿画面で、上記の様なショートコードを入力すると、GoogleMapに変換されて出力されます。
（ショートコードのエスケープのしかたが分からなかったので括弧が全角になっていますが、実際には半角で入力してください）

[googlemap]高崎駅[/googlemap]


ソースコードは以下です。zipに固めてプラグイン画面からアップロードすれば使えます。

googlemap.php
[php]
&lt;?php
/*
Plugin Name: googlemapc_ode
Plugin URI: http://shimz.me/
Description: &quot;入力システム用プラグイン：googlemap_code&quot;
Author: Shimizu Masayuki
Version: 0.1
Author URI: http://shimz.me/
*/

/**
 * ショートコードの設定
 */
function googlemap_code($atts, $content = null) {
    extract( shortcode_atts( array(
        'width' =&gt; '100%',
        'height' =&gt; '300px',
    ), $atts ) );

   $content  = &lt;&lt;&lt; EOF
&lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; width=&quot;{$width}&quot; height=&quot;{$height}&quot; src=&quot;http://maps.google.co.jp/maps?q={$content}&amp;z=15&amp;output=embed&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://maps.google.co.jp/maps?q={$content}&amp;z=15&quot; target=&quot;_blank&quot; &gt;大きな地図で見る&lt;/a&gt;&lt;/p&gt;
EOF;

    return $content;
}

/**
 * ショートコードに登録
 */
add_shortcode('googlemap','googlemap_code');

?&gt;[/php]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2012-02-24 00:41:40</wp:post_date>
		<wp:post_date_gmt>2012-02-23 15:41:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress%e3%81%ab%e3%82%b7%e3%83%a7%e3%83%bc%e3%83%88%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92%e8%bf%bd%e5%8a%a0%e3%81%99%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>邪魔をしてくる高齢者はそんなにいないけど、世間が怖くて新しいモノは作れない。</title>
		<link>http://shimz.me/blog/other/428</link>
		<pubDate>Thu, 08 Mar 2012 11:45:55 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=428</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://d.hatena.ne.jp/Rootport/20120307/1331128776">若者にハングリー精神を求めるなんて愚の骨頂／日本の閉塞感を打破する秘策とは？</a>

本当に世代間の対立が原因ですか？

<!--more-->

もし、マーク・ザッカーバーグがアメリカでなく日本で生まれていたらどうなっていたでしょう？

女の子にふられた腹いせに大学のサーバーから女生徒の写真をぶっこぬき、それらの写真を勝手に並べて、どっちの女の子の方がかわいいかを選ばせるようなサービスを作って学生に提供したら？

おそらく、それをみた同級生とかが、こっそり2chにスレを建てますw
で、まとめブログがこぞって記事にし、はてブのホットエントリーに上がり、さんざん叩かれ、個人情報が暴かれ晒され、大学に電凸が行われて退学とかになって「○○大勝利！」と喝采があがることでしょうw

そして、たぶんFacebookは生まれなかったと思います。

映画「ソーシャル・ネットワーク」の序盤で「こいつ、最低だな」って思った人、結構多いんじゃないでしょうか。

日本でFacebookのような新しいサービスがなかなか生まれてこないのは、別に高齢者によって邪魔されているわけじゃくて、"「ちょっとでも悪用されたり、危険性のあるもの、法に抵触する可能性があるモノを提供する」という行為自体を許せない"という高い倫理観が、全ての世代に普遍的に圧倒的多数として存在しているからです。


「裁判に負けた」とかではなく「訴えられた」でもなく、「訴えられるような可能性のあるモノを作った」という段階で潰されていく。或は、自らお箱入りにして提供するのを諦める。

とにかく新しいモノを提供するハードルが高くて、そこに海外からの黒船サービスが「多少訴えられて裁判に負けたとしても、それ以上に儲かるなら別にいいんじゃね？」ぐらいのノリで展開してくるのだから、これは勝てる訳が無いんです。


もうこれは、ある種民族性みたいなものなので、あきらめるしか無いんじゃないでしょうかね。

少なくとも、私が国内の"コミュニティサービスの中の人"として努めていたころの経験では、なにか新しい事をやろうという話がでたときに"老害"と呼ばれる人に邪魔されたことは殆どないですよ。

それより、「こういう事は怖くてできないよねー」という皆の同意によって消えていったモノの方が、遥かに多かったです。



■後記■
ちなみに、Facebookが生まれる前、日本では「出会い系サイト規制法」というものが作られまして、その頃のコミュニティーサービスの中の人達は、とにかく"ユーザー同士が直接やりとりして出会わないように"と必死に対応したりサービスを修正したりして、この規制法によって潰れたり過疎化したコミュニティサービスが国内には結構あったのですが、なぜかその後やってきたFacebookとかTwitterとかGoogle+には、この規制法は適用されないらしいんですよねー。
ほんのちょっとでも未成年者が出会いに利用する可能性があると「危ない！危ない！」とおこられたのに……なんだったんでしょうかね、この規制法は。

<a href="http://www.npa.go.jp/cyber/deai/law/index.html">「出会い系サイト規制法」について</a>




ところで、トラックバックってちゃんと送れているんだろうか？



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date>2012-03-08 20:45:55</wp:post_date>
		<wp:post_date_gmt>2012-03-08 11:45:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%82%aa%e9%ad%94%e3%82%92%e3%81%97%e3%81%a6%e3%81%8f%e3%82%8b%e9%ab%98%e9%bd%a2%e8%80%85%e3%81%af%e3%81%9d%e3%82%93%e3%81%aa%e3%81%ab%e3%81%84%e3%81%aa%e3%81%84%e3%81%91%e3%81%a9%e3%80%81%e4%b8%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascriptにもテストを。</title>
		<link>http://shimz.me/blog/javascript/488</link>
		<pubDate>Tue, 13 Mar 2012 01:01:40 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=488</guid>
		<description></description>
		<content:encoded><![CDATA[購入。
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4048707868&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


独りでやっているとどうしてもテストなどがおろそかになりがちなので、その辺戒めるために勉強中。

<!--more-->

<script type="text/javascript" src="http://jsdo.it/blogparts/udCY/js"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/udCY" title="テスト関数">テスト関数 - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

副産物として、いままでいまいち使いどころを理解できずにいた「カリー化」の便利さを少しだけ実感できるようになりました。
<script type="text/javascript" src="http://jsdo.it/blogparts/skcq/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/skcq" title="カリー化　その２">カリー化　その２ - jsdo.it - share JavaScript, HTML5 and CSS</a></p>



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date>2012-03-13 10:01:40</wp:post_date>
		<wp:post_date_gmt>2012-03-13 01:01:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%ab%e3%82%82%e3%83%86%e3%82%b9%e3%83%88%e3%82%92%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>配列リテラル同士を比較するとfalseが返ってくる</title>
		<link>http://shimz.me/blog/javascript/497</link>
		<pubDate>Sat, 17 Mar 2012 12:05:24 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=497</guid>
		<description></description>
		<content:encoded><![CDATA[ちょっと、良く分らない動作をしたので調査。

[javascript][1] == [1]
&gt;false[/javascript]

[javascript]{id:1} == {id:1}
&gt;SyntaxError[/javascript]

[javascript]var a = [1]
var b = [1]
a == b
&gt;false[/javascript]

[javascript]var a = {id:1}
var b = {id:1}
a == b
&gt;false[/javascript]

オブジェクトリテラル同士を比較するとSyntaxErrorが返るのなら、配列リテラル同士を比較した場合もSyntaxErrorにしてほしいなぁ．]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date>2012-03-17 21:05:24</wp:post_date>
		<wp:post_date_gmt>2012-03-17 12:05:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%96%a2%e6%95%b0%e3%83%aa%e3%83%86%e3%83%a9%e3%83%ab%e5%90%8c%e5%a3%ab%e3%82%92%e6%af%94%e8%bc%83%e3%81%99%e3%82%8b%e3%81%a8false%e3%81%8c%e8%bf%94%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>テスト勉強中</title>
		<link>http://shimz.me/blog/javascript/500</link>
		<pubDate>Wed, 14 Mar 2012 11:28:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=500</guid>
		<description></description>
		<content:encoded><![CDATA[引き続き「テスト駆動JavaScript」を読みつつ勉強

<!--more-->


<script type="text/javascript" src="http://jsdo.it/blogparts/rwXD/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/rwXD" title="YUIを使ったテスト">YUIを使ったテスト - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

しばらくは勉強もかねてテスト関数を自作しようかと思っているのですが、ちゃんとテストを行いたいときは、やっぱり既存のテストフレームワークを使った方が良いですね。


<script type="text/javascript" src="http://jsdo.it/blogparts/4aWi/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/4aWi" title="Arry.pushで渡した配列同士の比較">Arry.pushで渡した配列同士の比較 - jsdo.it - share JavaScript, HTML5 and CSS</a></p>


現在の詰まりどころ。pushで渡した配列は、値渡しになるのでassertEqualsでテストを行った場合、「failed」を返すんじゃないかと思うのですが、本にはpathすると書いてあるんですよね。もしかしたらassertEqualsの実装を間違えているかもしれないので、あとでYUI testなどちゃんとしたテストフレームワークを使ってテストしてみようと思います。

【追記】
どうやら、assertEqualsの実装を間違えていたようです。
Equalsは、配列やオブジェクトの内容を比較するのが正しい動作のようですね。


参考
<a href="http://q-eng.com/diary/3191">same, equal, commonの違い</a>
<blockquote>sameは　 「⇒同じ人、場所、物などが「一つの特定のもの」であり別のものではない」
equalは、「⇒何か別のものであるが、「サイズ、数、量、値が same」 である」
</blockquote>

equalは値の比較、sameは参照先が同じかどうかの比較、ととらえていいみたいですね。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>500</wp:post_id>
		<wp:post_date>2012-03-14 20:28:13</wp:post_date>
		<wp:post_date_gmt>2012-03-14 11:28:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%86%e3%82%b9%e3%83%88%e5%8b%89%e5%bc%b7%e4%b8%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>配列とarguments</title>
		<link>http://shimz.me/blog/javascript/527</link>
		<pubDate>Sat, 17 Mar 2012 11:52:01 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=527</guid>
		<description></description>
		<content:encoded><![CDATA[引き続き「テスト駆動JavaScript」本を読んで勉強しているのですが、ちょっと混乱した箇所があったのでメモ。


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4048707868&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<!--more-->

「第11章 Observerパターン」の「11.4.2 引数を渡す」の項目で以下のコードがテストを合格すると記述されていたのですが……

テストコード（リスト 11-24 notifyObservers に渡された引数が観測者に渡されることを確かめる）
[javascript]&quot;test should pass through arguments&quot;:function(){
    var observable = new tddjs.util.Observable();
    var actual;
    
    observable.addObserver(function(){
		actual = arguments; 
    });
 
    observable.notifyObservers(&quot;String&quot;, 1, 32);

    assertEquals([&quot;String&quot;, 1, 32], actual);   
}
[/javascript]

実装 (リスト 11-25 applyを使ってnotifyObservers に渡された引数を渡す)
[javascript]function notifyObservers(){
	for(var i=0, l=this.observers.length; i&lt; l; i++){
		this.observers[i].apply(this, arguments);
	}    
}[/javascript]

これだと、使用するテストフレームワークによっては合格しません。
例えばYUIのテストフレームワークでは失敗します。(<a href="#1">※1</a>)


argumentsは配列(Array)に似たオブジェクトですが、配列では無いので上記のテストが合格してしまうのは微妙な感じです。
もし、このテストを合格させるのであれば、argumentsを配列に変換する必要があるんじゃないかと思います。

addObserveでactualに引数を配列に変換しておさめる
[javascript]&quot;test should pass through arguments&quot;:function(){
    var observable = new tddjs.util.Observable();
    var actual=[];
    
    observable.addObserver(function(){
            actual = Array.prototype.slice.call(arguments);
    });
    

    observable.notifyObservers(&quot;String&quot;, 1, 32);

    assertEquals([&quot;String&quot;, 1, 32], actual); 
    
}
[/javascript]


<a name="1"></a>
備考

YUIのAssert.areEqualでは配列を比較すると「参照元が同じかどうか」をみているので失敗します。
<script type="text/javascript" src="http://jsdo.it/blogparts/zCUN/js"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/zCUN" title="YUIのAssert.areEqual">YUIのAssert.areEqual - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

[javascript]Assert.areEqual([&quot;String&quot;, 1, 32], [&quot;String&quot;, 1, 32]); //FAILになる[/javascript]
上記が失敗するのは、それはそれで微妙な感じ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date>2012-03-17 20:52:01</wp:post_date>
		<wp:post_date_gmt>2012-03-17 11:52:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%85%8d%e5%88%97%e3%81%a8arguments</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptの比較演算子の挙動</title>
		<link>http://shimz.me/blog/javascript/628</link>
		<pubDate>Mon, 19 Mar 2012 13:48:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=628</guid>
		<description></description>
		<content:encoded><![CDATA[改めて調べてみた所、面白い動きをするようなので、個人的なまとめ。

<!--more-->

以下は、chrome の javaScriptコンソールでの確認

== は型を無視
[javascript]1 == &quot;1&quot;
&gt;true
1 === &quot;1&quot; 
&gt;false
1 != &quot;1&quot;
&gt;false
1 !== &quot;1&quot;
&gt; true[/javascript]

配列の比較は参照元の比較
[javascript]var a = [1, 1]
var b = [1, 1]
a == b
&gt;false
a === b
&gt;false

b = a

a == b
&gt;true
a === b
&gt;true[/javascript]

配列リレラルを直接==で比較すると必ずfalse(参照元の比較になるため)
[javascript][1, 1] == [1, 1]
&gt;false[/javascript]
大なり(<)小なり(>)などで比較すると内容の比較になる
[javascript][1,1] &gt;= [1, 1]
&gt;true
[1,1] &lt; [1, 2]
&gt;true
[1,1] &gt; [1, 2]
false[/javascript]
配列内にオブジェクトが含まれていても比較できるっぽい。
[javascript][{},1] &lt;= [{},2]
&gt;true
[{},3] &lt;= [{},2]
&gt;false
[1,function(){}] &lt;= [2,function(){}]
&gt;true
[1,function(){}] &gt;= [2,function(){}]
&gt;false[/javascript]

オブジェクトリテラルは直接比較できない
[javascript]{a:1} == {a:1}
&gt;SyntaxError[/javascript]
変数に入れた場合は比較可能(参照元比較）
[javascript]var a = {a:1}
var b = {a:1}
a == b
&gt;false[/javascript]

配列の比較が参照元比較になるため、YUI testなどでは以下のテストは失敗する。

[javascript]Assert.areEqual([&quot;String&quot;, 1, 32], [&quot;String&quot;, 1, 32]); //FAILになる[/javascript]

<script type="text/javascript" src="http://jsdo.it/blogparts/zCUN/js"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/zCUN" title="YUIのAssert.areEqual">YUIのAssert.areEqual - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

関数やメソッドの戻り値が、配列やオブジェクトの場合areEqualのテストでハマりやすいので注意。










]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date>2012-03-19 22:48:49</wp:post_date>
		<wp:post_date_gmt>2012-03-19 13:48:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%ae%e6%af%94%e8%bc%83%e6%bc%94%e7%ae%97%e5%ad%90%e3%81%ae%e6%8c%99%e5%8b%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>新人プログラマーが理想と現実のギャップに打ちのめされる前に読んでおくと良いかもしれない参考書２冊</title>
		<link>http://shimz.me/blog/beginner/643</link>
		<pubDate>Wed, 04 Apr 2012 12:42:35 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=643</guid>
		<description></description>
		<content:encoded><![CDATA[<!--more-->
<h4>なぜプログラミングができないのか</h4>
<blockquote><a href="http://www.amazon.co.jp/gp/product/427420264X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=427420264X&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="https://images-na.ssl-images-amazon.com/images/I/51uXZ7hNbeL._SL160_.jpg" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=427420264X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
私たちは何かができるようになってしまうと、どうやらそれまでの苦労をすっかり忘れてしまうらしい。苦労のあとは奇麗さっぱり拭い去られ、美しく均整のとれた完成品だけが残る。私たちは美しさを誇らしく思い、これから同じ道をたどってこようとする人たちを導くために自分が身に付けたことを伝えようとする。得意げに、鼻高々に、すばらしい「体系」をふりかざして。だが、見よ。途方に暮れている彼らを。彼らに必要なのは結果ではなく、過程なのに──。</blockquote>


プログラミングの入門書を読み終え、文法は覚えたのにいざ自分で一からプログラムを書こうとすると途方にくれてしまうという人向けの参考書です。
入門書の次に進めなくて詰まるってことが多いんですよね。
全てが用意されていた入門書と違い、一人で一から作るためには、自分で問題を設定しそれを解くための処理をコードに落とし込んで行かなくてはならないわけですが、それがプログラミングを始めたばかりの頃は難しかったりします。
この本は、「やりたい事」を抽象化してコードに落とし込んでいく「考え方」について丁寧に解説されているので、入門書を読み終えた後に読んでおくと少しだけ先に進みやすくなるかもしれません。
サンプルコードはJavaで書かれてますが、そこらへんはあんまり気にしなくていいかと。考え方自体はどんな言語でも通用する内容だと思います。
Amazonの「この本の中身を閲覧する」で本書の内容をちょこっと読めるので、是非参考に。
&nbsp;
&nbsp;
&nbsp;


<h4>ひなた先生が教えるデバッグが256倍速くなるテクニック</h4>
<blockquote><a href="http://www.amazon.co.jp/gp/product/4774136689/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;tag=toriaezu04b-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774136689"><img src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=4774136689&amp;MarketPlace=JP&amp;ID=AsinImage&amp;WS=1&amp;tag=toriaezu04b-22&amp;ServiceVersion=20070822" alt="" border="0" /></a><img style="border: none !important; margin: 0px !important;" src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&amp;l=as2&amp;o=9&amp;a=4774136689" alt="" width="1" height="1" border="0" />

「そういうコピペが保守性の悪いプログラムを生み出すんですよね？」
「もちろんそうだ。ただし、すべてのプログラムに保守が必要だとは限らない。一度きりで構わないかもしれない。書き捨てで良いかもしれない。保守するのはプログラムを書いた本人ではないかも知れない。さまざまな理由により、すべてのプログラムが保守性に優れたものであるべきとは言えないし、そうもなっていない。ケニチ君よ。ケニチ君は、それらのプログラムに立ち向かう術を知らなければならない。」</blockquote>


現実に立ち向かうために読んでおくといいと思いますｗ
冗談(?)はともかく、意外と「バグの原因を絞り込んで特定してく技術」について書かれた参考書って少ないし、やたらと難しかったりするなかで、この本はわりと理解しやすいかなと。ただ、バグを特定するために元のソースに手を加えるってのは賛否両論あると思うので、そこらへんは慎重に。
とりあえず、「デバッグにも色々な技術があるんだな」ってことを知るだけでもためになると思います。
サンプルはVisual Studio(C/C++)で書かれてますが、こちらも考え方自体はどんな言語でも通用するんじゃないかな？　と。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date>2012-04-04 21:42:35</wp:post_date>
		<wp:post_date_gmt>2012-04-04 12:42:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%96%b0%e4%ba%ba%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9e%e3%83%bc%e3%81%8c%e7%90%86%e6%83%b3%e3%81%a8%e7%8f%be%e5%ae%9f%e3%81%ae%e3%82%ae%e3%83%a3%e3%83%83%e3%83%97%e3%81%ab%e6%89%93%e3%81%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4500万円の価値</title>
		<link>http://shimz.me/blog/other/677</link>
		<pubDate>Thu, 05 Apr 2012 04:44:27 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=677</guid>
		<description></description>
		<content:encoded><![CDATA[首相官邸ホームページが4500万円かけてリニューアルされた件が話題ですね。

とりあえず、値段としては「まぁ、そのぐらいかかるかな」って感じです。
いつなんどき、黒客が「こんにちは！　こんにちは！」してくるかもわからないし、突然「F5アタック選手権」が始まったりするかもしれないサイトですしねｗ　
もろもろ含めるとそのぐらいは行くでしょう。

むしろ「そもそもリニューアルする必要があったのか？」って事の方が疑問なわけなのですが、こればっかりはリニューアル前と比較してみないとわからないので、Wayback Machineでリニューアル前の首相官邸ホームページを見てきました。

<!--more-->

<h2>リニューアル前のトップページ</h2>
<a href="http://shimz.me/blog/wp-content/uploads/2012/04/1.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/1-163x300.png" alt="" title="1" width="163" height="300" class="alignleft size-medium wp-image-685" /></a>　<a href="http://shimz.me/blog/wp-content/uploads/2012/04/4e60367dffbd4c9ed57f9cd4a88f8dba.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/4e60367dffbd4c9ed57f9cd4a88f8dba-221x300.png" alt="" title="全国市長会議あいさつ" width="221" height="300" class="alignnone size-medium wp-image-688" /></a>

シンプルですね。個々のページが簡素すぎる気がしますが、人によっては「政府のサイトなんて、こんなもんでいいんだよ！」って思うかもしれません。


<h2>英語ページ</h2>
情報を発信するという点では、こちらの方が重要かもしれません。
<a href="http://shimz.me/blog/wp-content/uploads/2012/04/Prime-Minister-of-Japan-and-His-Cabinet.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/Prime-Minister-of-Japan-and-His-Cabinet-249x300.png" alt="" title="Prime Minister of Japan and His Cabinet" width="249" height="300" class="alignleft size-medium wp-image-690" /></a>

<a href="http://shimz.me/blog/wp-content/uploads/2012/04/Prime-Minister-of-Japan-and-His-Cabine2t.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/Prime-Minister-of-Japan-and-His-Cabine2t-210x300.png" alt="" title="Prime Minister of Japan and His Cabine2t" width="210" height="300" class="alignnone size-medium wp-image-691" /></a>

……とりあえず「KAN's Blog」バナーの存在感がパないですｗ
デザインも、やっぱりちょっと素人っぽいというか、「テンプレちょこちょこ弄って作りました」という感じ。しかも、妙に情報量がすくないのが気になります。
正直、今回の騒動で「首相官邸ホームページ」を始めて見たのですが(特に英語の方は)、震災によって世界中から注目が集まっている時期に、これが表示されていたのか～って思うと、ちょっとモニョりました。

ちなみに、リニューアル前は中国語のページとKid'sページは無かったみたいですね。

まぁ、リニューアルしてよかったんじゃないでしょうか。
もっといろいろ節約する手段はあったかもしれませんが、まがりなりにも似たような業界の端っこでひっそりと生きている身としては、「俺ならもっと安い値段で作れる！」と批判するより、どうせなら「俺なら同じ値段でもっと良い物が作れる！」と批判したいですね。



【余談】
むしろ、こういう「お金の話」がでた時ぐらいにしか注目しないってほうが問題なのかもと、今回の件で考えさせられました。
とくに英語ページ。
リニューアル前のサイトに関しては、そもそも「必要な事」がちゃんと発信されていたかも怪しいわけですが、今の今までそんなことにはまったく無関心でした。
自国のことなのにね。
日本をＩＴ後進国にしているのは、こういう「無関心」なのかもと、ちょっと反省。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>677</wp:post_id>
		<wp:post_date>2012-04-05 13:44:27</wp:post_date>
		<wp:post_date_gmt>2012-04-05 04:44:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4500%e4%b8%87%e5%86%86%e3%81%ae%e4%be%a1%e5%80%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhoneとopenFrameworksで遊ぶ。</title>
		<link>http://shimz.me/blog/openframeworks/715</link>
		<pubDate>Mon, 23 Apr 2012 11:17:36 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=715</guid>
		<description></description>
		<content:encoded><![CDATA[openFrameworks楽し〜♩

<!--more-->

openFrameworksについては以下を。

<a href="http://gihyo.jp/design/column/newyear/2011/openframeworks-prospect">openFrameworksから拡がるメディアアートの世界</a>

C++のライブラリですが、iOS版を使えばカメラから取り込んだ画像にエフェクトを掛けるようなアプリを簡単に作る事ができます。

<a href="http://shimz.me/blog/wp-content/uploads/2012/04/Screen_Shot0.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/Screen_Shot0-300x200.jpg" alt="" title="Screen_Shot0" width="300" height="200" class="alignnone size-medium wp-image-716" /></a>

まぁ、私の環境(Max OS Lion + Xcode 4.3.2 + openFrameworks 7.0)では、exampleをビルドすると大量のwarningを吐いたり、ちゃんと動作しないexampleがあったりと多少手こずりましたが。
(warningについては、ビルドは通るし実機に転送して実行しても問題なく動くので放置してますｗ)
しかし、Objective-Cで同じモノを作るのを考えれば圧倒的に楽！　(というか、Objective-Cに関してはまったく知識がないので、コードが読めない orz)

まぁ、実用的なアプリを作るのにはあまり向いていないでしょうけど。

iPhoneアプリ作成の勉強を初めてみたものの、Objective-Cの書式に慣れず入門辺で心折れそうになっていたので、しばらくはopenFrameworksで遊んでみようかと思います。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>715</wp:post_id>
		<wp:post_date>2012-04-23 20:17:36</wp:post_date>
		<wp:post_date_gmt>2012-04-23 11:17:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iphone%e3%81%a8openframeworks%e3%81%a7%e9%81%8a%e3%81%b6%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openframeworks"><![CDATA[openFrameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ドットインストールとjsdo.itでプログラミングを学ぼう！</title>
		<link>http://shimz.me/blog/javascript/723</link>
		<pubDate>Tue, 24 Apr 2012 01:15:07 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=723</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://jsdo.it/_shimizu/jge7/fullscreen"><img src="http://shimz.me/blog/wp-content/uploads/2012/04/jsdoit_install.jpg" alt="" title="jsdoit_install"  class="alignnone size-medium wp-image-725" /></a>

.installで学んで、jsdoitで書く！


<!--more-->
プログラミング学習サイト「<a href="http://dotinstall.com/">ドットインストール</a>」にハマっています！

<iframe width="560" height="315" src="http://www.youtube.com/embed/NrrEov1aN-k" frameborder="0" allowfullscreen></iframe>



やはり動画というのはテキストだけの解説よりはるかに解りやすいですね。なにより、１回の動画が約３分ぐらいで区切られているので、テンポ良くサクサク進められます。ちなみに、いままでプログラミングをまったく行ったことが無いという方には、「HTML講座」→「CSS講座」→「JavaScript講座」と進めていくのがオススメです。

「プログラミングを始めよう！」と思った際の一番のハードルは"最初の１行を書き始める"ことなので、開発環境をそろえるのに時間がかかるようだと、それだけでモチベーションが萎んでしまうことが多々あったりします。
（ダウンロードにものすご～く時間の掛かる統合開発環境とか orz ）

HTML + CSS + JavaScript はブラウザとエディタ(メモ帳でも可)さえインストールされていれば、すぐ開発を始められるので最初のハードルがかなり低いですし、さらに「<a href="http://jsdo.it/">jsdo.it</a>」のようなサービスを使えば、ブラウザだけでもＯＫ。作ったものを他の人に公開するのも簡単なうえ、解らないことがあったら「question」タグを付けて投稿すれば、誰かが実際にコードを書いて教えてくれるかもしれません。

<iframe width="560" height="315" src="http://www.youtube.com/embed/zJ7dQux83pM" frameborder="0" allowfullscreen></iframe>


タブを上下に表示できるブラウザをお使いなら、この２サイトを表示してドットインストールの動画を見ながらjsdoitで実際にコードを書いて実行なんてことが簡単にできて、いっそう捗ります。

上下に開く機能が無くても、iframeで２サイトを開くhtmlを作っておいてchromeのフルスクリーン機能(F11キー)などを使うと、他のことに惑わされず講座に集中できて、とても良い感じですよ。

上下フレーム
<a href="http://jsdo.it/_shimizu/jge7/fullscreen">http://jsdo.it/_shimizu/jge7/fullscreen</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>723</wp:post_id>
		<wp:post_date>2012-04-24 10:15:07</wp:post_date>
		<wp:post_date_gmt>2012-04-24 01:15:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%89%e3%83%83%e3%83%88%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%a8jsdo-it%e3%81%a7%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%82%92%e5%ad%a6%e3%81%bc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[725]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ofxUIで文字(ofxUILabel)が表示されない。</title>
		<link>http://shimz.me/blog/openframeworks/737</link>
		<pubDate>Fri, 27 Apr 2012 02:11:30 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=737</guid>
		<description></description>
		<content:encoded><![CDATA[めちゃくちゃカッコイイopenFrameworksのGUIアドオンをつかってみました。

<!--more-->
<iframe src="http://player.vimeo.com/video/36385123" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
カッコイイ！

ダウンロードは以下から。
<a href="https://github.com/rezaali/ofxUI">https://github.com/rezaali/ofxUI</a>
使い方はREADMEの「TUTORIAL」に書いてある通りなのですが、一部修正しないと文字が表示されませんでした。


１．githubからダウンロードして解凍→フォルダ名をofxUIに変更→ addonsフォルダに入れる
２．openFrameworksのemptyExampleをコピー
３．XcodeでemptyExampleプロジェクトを開く
４．addons/ofxUI/src フォルダをプロジェクトのaddonsフォルダに追加
５．addon/ofxXmlSettings フォルダをプロジェクトのaddonsフォルダに追加

ここまでで準備完了。

とりあえずサンプルを動かしてみます。
ofxUI/example-ofxUITutorial　フォルダのbin/data/guiからguiフォルダ をプロジェクトのdataフォルダに追加。
以下の内容をコピペ(ハイライトされている部分が追加したコードです。元のコードは消さずにそのままで）
　
<br>
<br>
　
<b>ofxUI/example-ofxUITutorial/src/testApp.h → emptyExample/src/testApp.h</b>[cpp highlight="1,5,7"]   

#include &quot;ofxUI.h&quot;

class testApp : public ofxiPhoneApp {


    ofxUICanvas *gui; 
    //void exit(); //二重に指定してしまうことになるので削除するかコメントアウト 
    void guiEvent(ofxUIEventArgs &amp;e); 

}

[/cpp]   
　
<br>
<br>
　
<b>ofxUI/example-ofxUITutorial/src/testApp.cpp → emptyExample/src/testApp.mm</b>[cpp highlight="3-8,13,14,17-29"]
void testApp::setup(){

    gui = new ofxUICanvas(0,0,320,320);
    gui-&gt;addWidgetDown(new ofxUILabel(&quot;OFXUI TUTORIAL&quot;, OFX_UI_FONT_LARGE)); 
    gui-&gt;addWidgetDown(new ofxUISlider(304,16,0.0,255.0,100.0,&quot;BACKGROUND VALUE&quot;)); 
    gui-&gt;addWidgetDown(new ofxUIToggle(32, 32, false, &quot;FULLSCREEN&quot;));
    ofAddListener(gui-&gt;newGUIEvent, this, &amp;testApp::guiEvent); 
    gui-&gt;loadSettings(&quot;GUI/guiSettings.xml&quot;); 
}	

//--------------------------------------------------------------
void testApp::exit(){
    gui-&gt;saveSettings(&quot;GUI/guiSettings.xml&quot;); 
    delete gui; 
}	
//--------------------------------------------------------------
void testApp::guiEvent(ofxUIEventArgs &amp;e)
{
    if(e.widget-&gt;getName() == &quot;BACKGROUND VALUE&quot;)
    {
        ofxUISlider *slider = (ofxUISlider *) e.widget;    
        ofBackground(slider-&gt;getScaledValue());
    }
    else if(e.widget-&gt;getName() == &quot;FULLSCREEN&quot;)
    {
        ofxUIToggle *toggle = (ofxUIToggle *) e.widget;
        ofSetFullscreen(toggle-&gt;getValue());   
    }
}	
[/cpp]
　
<br>
<br>
　
これで一応ビルドは通るしスライダーなどは表示されるのですが文字（ofxUILabel）が表示されません。 orz
[code]
Error : font not allocated iphone
[/code]
というアラートが出まくっているので、フォントが読み込めていません。

そこで、まずdata/GUIのなかにあるフォントファイル「NewMedia Fett.ttf」を、プロジェクトのdataフォルダの直下にコピーします。

setup()関数に以下の一文を追加
[cpp highlight="4"]
void testApp::setup(){

    gui = new ofxUICanvas(0,0,320,320);
    gui-&gt;setupFont(&quot;NewMedia Fett.ttf&quot;); //追加
    gui-&gt;addWidgetDown(new ofxUILabel(&quot;OFXUI TUTORIAL&quot;, OFX_UI_FONT_LARGE)); 
    gui-&gt;addWidgetDown(new ofxUISlider(304,16,0.0,255.0,100.0,&quot;BACKGROUND VALUE&quot;)); 
    gui-&gt;addWidgetDown(new ofxUIToggle(32, 32, false, &quot;FULLSCREEN&quot;));
    ofAddListener(gui-&gt;newGUIEvent, this, &amp;testApp::guiEvent); 
    gui-&gt;loadSettings(&quot;GUI/guiSettings.xml&quot;); 
}	
[/cpp]

これで、ちゃんとラベルが表示されるようになります。

ちなみに、
[cpp]
 gui-&gt;setupFont(&quot;GUI/NewMedia Fett.ttf&quot;);
[/cpp]
上記の方法では、フォントファイルが読み込めませんでした。
dataフォルダ直下でないとダメみたいです。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>737</wp:post_id>
		<wp:post_date>2012-04-27 11:11:30</wp:post_date>
		<wp:post_date_gmt>2012-04-27 02:11:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ofxui%e3%81%a7%e6%96%87%e5%ad%97ofxuilabel%e3%81%8c%e8%a1%a8%e7%a4%ba%e3%81%95%e3%82%8c%e3%81%aa%e3%81%84%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openframeworks"><![CDATA[openFrameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[746]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GW中にopenFrameworksを学ぶためのまとめ。</title>
		<link>http://shimz.me/blog/openframeworks/770</link>
		<pubDate>Sat, 28 Apr 2012 13:09:33 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=770</guid>
		<description></description>
		<content:encoded><![CDATA[自分学習用につくったリンク集。

<!--more-->

<div id="136f910e7d316e6b2911ea18f"></div><div class="naverMatomeBPFoot01" data-na="NA:bottom"><a href="http://matome.naver.jp/odai/2133544611838053501" target="_blank" data-na="NL:undertitle">openFrameworks 参考サイトまとめ</a> <a href="http://matome.naver.jp" target="_blank" data-na="NL:matome">[NAVER まとめ]</a></div><script type="text/javascript" charset="UTF-8" src="http://matome.naver.jp/pasteScript?id=2133544611838053501&p=136f910e7d316e6b2911ea18f&color=01"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>770</wp:post_id>
		<wp:post_date>2012-04-28 22:09:33</wp:post_date>
		<wp:post_date_gmt>2012-04-28 13:09:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gw%e4%b8%ad%e3%81%abopenframeworks%e3%82%92%e5%ad%a6%e3%81%b6%e3%81%9f%e3%82%81%e3%81%ae%e3%81%be%e3%81%a8%e3%82%81%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openframeworks"><![CDATA[openFrameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>悪質なURLかどうかをチェックできる「ScanURL.net」</title>
		<link>http://shimz.me/blog/web/783</link>
		<pubDate>Tue, 15 May 2012 06:30:20 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=783</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://scanurl.net"><img src="http://shimz.me/blog/wp-content/uploads/2012/05/WS000002.jpg" alt="" title="WS000002"  class="alignnone size-medium wp-image-784" /></a>

<a href="http://scanurl.net">ScanURL.net</a>

<!--more-->
使い方はURLを入力して、「Check This URL」を押すだけです。

<img src="http://shimz.me/blog/wp-content/uploads/2012/05/WS000003-262x300.jpg" alt="" title="WS000003" width="262" height="300" class="alignnone size-medium wp-image-786" />

「Google Safe Browsing」と「PhishTank」に悪質なURLとして登録されていないかチェックされます。

そのほか、「McAfee 」や「Norton 」などのURLチェックサイトへのリンクが生成されるので、ワンクリックで内容を確認できます。

自サイトが、悪質なURLとして登録されてしまっていないか確認するのにも便利です。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>783</wp:post_id>
		<wp:post_date>2012-05-15 15:30:20</wp:post_date>
		<wp:post_date_gmt>2012-05-15 06:30:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%82%aa%e8%b3%aa%e3%81%aaurl%e3%81%8b%e3%81%a9%e3%81%86%e3%81%8b%e3%82%92%e3%83%81%e3%82%a7%e3%83%83%e3%82%af%e3%81%a7%e3%81%8d%e3%82%8b%e3%80%8cscanurl-net%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[784]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>虚構新聞他、に騙されないために。</title>
		<link>http://shimz.me/blog/other/796</link>
		<pubDate>Thu, 17 May 2012 11:24:26 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=796</guid>
		<description></description>
		<content:encoded><![CDATA[虚構新聞が話題ですね。

<a href="http://bit.ly/JMJgng">騙される人続出する虚構新聞 「ネット界隈お騒がせ」と謝罪</a>

以前、友達に「紅白に初音ミクが出るらしいよ～」なんてことを意気揚揚と言ってみたのにちに、「っていうか、今読んでる記事"虚構新聞"じゃねぇか！」と気づいて恥をかいたことがあります。

虚構新聞というサイトの存在は知っていたし、ちゃんとリンクをクリックして記事を読み、画面の左上には「虚構新聞」のロゴがサンサンと輝いていたにもかかわず……だまされました orz

そんなわけで、虚構新聞の記事に騙された人を「情弱ｗ」と言って笑う資格は私にはないわけですが、今回の騒動についてちょっと。

<!--more-->
虚構新聞というサイトの特性上、騙されて怒る人ってのは常に一定数はいると思うんですが、今回は、「騙されて怒っている人」を集めて纏めて晒して可視化した人たちがいて、それに乗っかって「騙されてやんの情弱乙」と嘲笑う人たちがいて、嘲笑っている人たちを怒る人たちがいて……と、場外乱闘ばかりが大きくなっていったように思えます。

個人的に虚構新聞のネタは好きですが、虚構新聞を、騙された人を眺めて「情弱m9(^Д^)ﾌﾟｷﾞｬｰ」と嘲笑う優越感ゲームの道具として利用する風潮は嫌いです。
そして、そういう風潮があることをある程度理解しつつも利用しやすいままにしている虚構新聞はちょっと嫌いです。
風刺は「釣り」をしなくても成り立つはずですし、ましてや、タイトルだけが独り歩きして本文をろくに読んでもらえないというのはジョークとしては失敗ではないですか？　


■騙されないために。あるいは、騙されても笑って許せるように。
大概のことは「騙されちゃった、てへぺろ（ゝω・）」で済むはずなんですが、何かを批判しようとか誰かを攻撃しようと思ってツイート／リツイートした記事が嘘だったりすると、ひっこみがつかなくなって顔真っ赤にして「デマながすな！」と怒らないとならなくなるので気を付けましょう。リツイートとかする前に、「自分はなぜこの情報を共有／拡散させようとしているのか？」を考えて、その動機が怒りや批判や攻撃や晒しである場合はじっくりと情報元を調べてからツイート／リツイートとかするようにすると、引っ込みがつかなくなるってことがだいぶ減るんじゃないかと思います。
カァッーとなった時ほど要注意。人を呪わば穴二つ。

【余談】
直接は関係ないですが今回の騒動をみて、「晒す」などのネガティブな動機でリンクを拡散させる行為があまりにもお手軽になり、なおかつ影響力が大きくなっているんだなと感じました。
ソーシャルメディアとかが増えてきて、面白いと思うもの有意義と感じた情報をシェアする機会も増えたけど、同時に「嘲笑う」みたいなネガティブな感情をシェアすることも増えていて、残念なことに、こういうネガティブな動機での共有や拡散の方が注目を集めやすかったりします。もちろん、ソーシャルメディアなんてのが流行るまえから似たようなことは行われてはいましたし、2chのヲチ板なんてその最もたるものだったと思うのですけど、それでも「凸すんな、対象物に触れんな、直リンすんな」みたいな、なんとなーくのルールとかがあったりして、だいたいは局地的な"陰口"の範疇におさまってました。

それが今では、「みんな見て！　ここにバカがいる！　バカがいますよ～」と指さして叫びまわりながらネガティブリンクを気軽に流す人が結構いて、たまに失敗して晒すつもりが逆に晒されたりと、いたるところで、「ネガティブアクセス剛掌波」の撃ち合いが行われているわけです。
（一時期のtogetterなんて、晒しまとめばっかりが上がってきてたりしてほんと酷かったなぁと。最近は、だいぶ減った気がしますが）
しまいには、バカのふりしてアクセスを集めようとする人や企業まで湧いてくる始末。
エビオス嬢ぐらいぶっとんでいるなら、まだコンテンツとして成立しないこともないと思いますが、女子力MAXのイケてる女子みたいな全方位に hate まきちらしているだけのような記事がすごい勢いでリツイートされてTLに流れてきたりすると、ほんと「どうになならんかな」と思います。
バカなふりをしている人をバカにするためにリンクを拡散したって、それバカなふりをしている人が喜ぶだけですよ？
最近は、大手新聞社の記事タイトルまで釣りを意識したようなものがちょっとづつ増えてきてたりもして、ゲンナリ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>796</wp:post_id>
		<wp:post_date>2012-05-17 20:24:26</wp:post_date>
		<wp:post_date_gmt>2012-05-17 11:24:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%99%9a%e6%a7%8b%e6%96%b0%e8%81%9e%e4%bb%96%e3%80%81%e3%81%ab%e9%a8%99%e3%81%95%e3%82%8c%e3%81%aa%e3%81%84%e3%81%9f%e3%82%81%e3%81%ab%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>何のエラーも発生してないのに、LANにつながらない(windows)</title>
		<link>http://shimz.me/blog/troubleshooting/846</link>
		<pubDate>Sat, 19 May 2012 02:25:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[久々に、わけわからんトラブルに見舞われたので、トラブルシュートメモ。



【現象】
インターネットどころかゲートウェイまでにも届かない。
pingが返ってくるのはループバックアドレスと自身のIPアドレスのみ。
前日までは問題なく繋がっていて、とくにネットワーク設定の変更等はしていない。

１．接続のインジケーター
なんのエラーも出ていない。正常に繋がっている場合と変わらず、一見すると何の問題もないように見える。

２．ケーブル
一応、LANケーブルも変えてみた。
同ネットワーク内で繋がっている端末のLANケーブルに差し替えてみたがつながらず。

３．ファイアーウォール、アンチウィルスソフト等停止
とりあえず、すべて止めてみた。解決せず。

４．デバイスマネージャ
こちらも特にエラーは表示されず。
一応、ネットワークアダプタを削除→再起動して再認識させてみたけど変わらず。

５．ネットワークの診断・修復
やってみたものの、そもそも何のエラーも出ていないので……解決せず

６．セーフモード（ネットワーク）
特に変わらず、つながらない。


【対応】
LANアダプター（USB)を使ってネットワークに接続してみたところ、問題なく繋がったのでネットワークアダプターの故障っぽい。
デバイスマネージャーや接続のインジケーターでエラーが発生していない理由は不明。


とりあえず、手がかりななさ過ぎて困った orz
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date>2012-05-19 11:25:09</wp:post_date>
		<wp:post_date_gmt>2012-05-19 02:25:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%95%e3%81%ae%e3%82%a8%e3%83%a9%e3%83%bc%e3%82%82%e7%99%ba%e7%94%9f%e3%81%97%e3%81%a6%e3%81%aa%e3%81%84%e3%81%ae%e3%81%ab%e3%80%81lan%e3%81%ab%e3%81%a4%e3%81%aa%e3%81%8c%e3%82%89%e3%81%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>studygiftのデザインについて</title>
		<link>http://shimz.me/blog/other/857</link>
		<pubDate>Tue, 05 Jun 2012 11:59:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=857</guid>
		<description></description>
		<content:encoded><![CDATA[裏のゴタゴタとかにはあまり興味ないのでそれは置いておいて、studygiftのデザインについて。


<!--more-->
■ キービジュアル
すでにいろんなところで言われているけれど、学費支援が目的であるのにキービジュアルに「iPhoneで写真を撮っている姿」を持ってくるのはあまりにもコンセプトとずれていると思う。

■ 不要な外部サービスへのリンク
Google+、Facebookはともかくとして（個人的には必要ないと思うけど）、Instagramへのリンクは要らない。正直、浮ついた印象を与えてしまうだけだと思う。
wishboneみたいに、大学へのリンク（受けようと希望しているプログラムへの詳細）とかを貼るべきだったと思う。

■ 情報の不足
学費を支援するというコンセプトに沿うなら、学業についてとか、大学にもどって何をしたいのか、とか載せるべき情報は沢山あったのに、それらがマルっと抜けている。本来「実は退学してました」なんてことは、この段階で判明するはずだと思うけど。この抜けが、その後なんども掲載情報の修正を行わなくてはならないことになって、不信感を増やしてしまっている。


■ 不明瞭な立ち位置
個人的に一番、違和感を持ったのが以下のプロフィール欄のコメントと「私の挑戦」の項目

<blockquote>「沖縄大学は年間４人に１人が中退している。その９割近くが学費が払えないという経済的理由だった」というニュースを読んだことがあります。クラウド・ファンディングで学費を支払う新しい形として、このプロジェクトを成功させるためにがんばりたいと思います。</blockquote>

<blockquote>しかし、今ならインターネットの力を使って、その「当然」を少しだけ変えられるかもしれないと思いました。
どんな結果になるかはまだわかりませんが、私はこのサービスをきっかけに、これまでの奨学金以外の方法で学費を集める挑戦を行えればと思っています。</blockquote>

これらのコメントからは、「studygiftというサービスを成功させたい」という情熱しか見えてこない。
これが今回支援の対象となった学生さんのポジションを不明瞭なものにしてしまっている。

「支援を受ける学生」なのか「サービスの中の人」なのか、掲載された情報からは後者のようにしか見えないので「身内に金集めたいだけに作ったサイトなんじゃないの？」という疑念をいだかせてしまったんじゃないかなと。

ビジュアルデザインがダサイとか、UIが不便ってのは後からいくらでも修正が効くけれど、掲載する情報の選別でミスをおかして不信感を与えてしまうと修正は難しいので気をつけたい。

まぁ、ぶっちゃけ <a href="http://wishbone.org/">wishbone.org</a>をまんまパクれば良かったのに……って思わなくもない。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>857</wp:post_id>
		<wp:post_date>2012-06-05 20:59:49</wp:post_date>
		<wp:post_date_gmt>2012-06-05 11:59:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>studygift%e3%81%ae%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーション「d3.js」</title>
		<link>http://shimz.me/blog/d3-js/862</link>
		<pubDate>Fri, 01 Jun 2012 17:45:37 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=862</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://d3js.org/">
<img src="http://shimz.me/blog/wp-content/uploads/2012/06/d3-e1352947701212.jpg" alt="" title="d3" width="1352" height="645" class="alignnone size-full wp-image-890" /></a>

最近、「データビジュアライゼーション」に興味を持ち始め d3.js というjavascriptのデータビジュアライゼーションライブラリの使い方を学び始めました。海外では、結構有名なライブラリらいしいのですが、日本では利用者が少ないようなので、勉強がてら紹介をしてみたいと思います。

d3.js
<a href="http://d3js.org/">http://d3js.org/</a>

「データビジュアライゼーション」については以下を。
<a href="http://www.aoky.net/articles/david_mccandless/the_beauty_of_data_visualization.htm">データビジュアライゼーションの美</a>

<!--more-->

&nbsp;
&nbsp;
&nbsp;

<strong>■データ駆動ドキュメント</strong>
d3.jsは、データを基にDOM(ドキュメントオブジェクトモデル）を操作するためのライブラリです。
データとDOMのエレメントを結びつけ、データの変化をドキュメントへと反映させることができます。
d3.jsは、配列を渡すだけでグラフィカルな結果を出力してくれるようなフレームワークではありません。
その代わりに、柔軟なカスタマイズが可能で、webの標準の機能（css3 や HTML5、SVGなど）を最大限に利用した<a href="http://ja.wikipedia.org/wiki/%E3%83%AB%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%89%E3%83%BB%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB">ルック・アンド・フィール</a>を作成することができます。
オーバーヘッドが非常に小さく、d3.jsで作成されたデータビジュアライゼーションは、非常に高速に動作します。
公式サイトにある<a href="https://github.com/mbostock/d3/wiki/Gallery">サンプル</a>には非常に複雑なグラフや図、アニメーションなどがありますが、その殆どがiPhone(4s)で閲覧した場合でも、充分なスピードで描画されます。

&nbsp;
&nbsp;
&nbsp;

<strong>■d3.jsのインストール</strong>
d3.jsを使用するのは非常に簡単で、ドキュメントの冒頭で下記のスクリプトファイルを読み込むだけです。

[javascript]
&lt;script type=&quot;text/javascript&quot; src=&quot;http://d3js.org/d3.v2.js&quot;&gt;&lt;/script&gt;
[/javascript]

&nbsp;
&nbsp;
&nbsp;
 
 
 <strong>■DOM操作</strong>
d3.jsはjQueryに似たセレクション機能をもち、セレクタを使用してDOMの操作を行うことができます。 下記の例は、ドキュメント上の全てのpタグにスタイルを適用していますが、jQueryを使った事のある方には理解しやすいと思います。
[javascript]
d3.selectAll(&quot;p&quot;).style(&quot;color&quot;, &quot;white&quot;);
[/javascript]
&nbsp;

必要に応じて個々のノードを選択して操作することもできます。
[javascript]d3.select(&quot;body&quot;).style(&quot;background-color&quot;, &quot;black&quot;);[/javascript]


&nbsp;
&nbsp;
&nbsp;
 
 
 <strong>■動的なプロパティの変更</strong>
d3.jsは、要素の操作を行う際に単に定数を設定できるだけでなく、コールバック関数を使用して動的にプロパティを変更することができます。 以下は、ドキュメント上の全てのpタグを選択し、それぞれにランダムな色を設定します。
[javascript]
d3.selectAll(&quot;p&quot;).style(&quot;color&quot;, function() {
  return &quot;hsl(&quot; + Math.random() * 360 + &quot;,100%,50%)&quot;;
});
[/javascript]
&nbsp;


コールバック関数の引数では、選択した要素のインデックス数を受けとり反復処理をおこなうことができます。 以下のコードは、奇数番のpタグと偶数番のpタグ、それぞれを分けて色を設定しています。
[javascript]
d3.selectAll(&quot;p&quot;).style(&quot;color&quot;, function(d, i) {
  return i % 2 ? &quot;#fff&quot; : &quot;#eee&quot;;
});
[/javascript]
<script type="text/javascript" src="http://jsdo.it/blogparts/zLCR/js"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="サンプル" href="http://jsdo.it/_shimizu/zLCR">サンプル - jsdo.it - share JavaScript, HTML5 and CSS</a></p>

&nbsp;
&nbsp;
&nbsp;

<strong>■データを基に要素を操作する</strong>
d3.jsのもっとも大きな特徴である、データを中心とした要素の操作です。
下記の例では、選択したドキュメント上のpタグに対して、上から順にデータ（配列の要素）の数だけpタグにスタイル変更を行っています。
また、コールバック関数の中では引数としてデータの値を受け取り、それをfont-sizeの値として適用しています。

[javascript]
d3.selectAll(&quot;p&quot;)
    .data([4, 8, 15, 16, 23, 42])
    .style(&quot;font-size&quot;, function(d) { return d + &quot;px&quot;; });
[/javascript]
<script type="text/javascript" src="http://jsdo.it/blogparts/k4gN/js"></script>
<a title="サンプル" href="http://jsdo.it/_shimizu/k4gN">サンプル - jsdo.it - share JavaScript, HTML5 and CSS</a>

&nbsp;
&nbsp;
&nbsp;
 
 
 <strong>■データを基に要素を追加</strong>
データ（配列）を基に、ドキュメントに新たな要素(pタグ)を追加しています。
[javascript]
d3.select(&quot;body&quot;).selectAll(&quot;p&quot;)
    .data([4, 8, 15, 16, 23, 42])
  .enter().append(&quot;p&quot;)
    .text(function(d) { return &quot;I’m number &quot; + d + &quot;!&quot;; });
[/javascript]
<script type="text/javascript" src="http://jsdo.it/blogparts/yDJK/js"></script>
<p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a title="サンプル" href="http://jsdo.it/_shimizu/yDJK">サンプル - jsdo.it - share JavaScript, HTML5 and CSS</a></p>
d3.jsではこのようにデータを基にしたドキュメントの要素への操作を簡単に行うことができます。

&nbsp;
&nbsp;
&nbsp;

<strong>■デバッグのしやすさ</strong>
canvasタグを利用するグラフィックライブラリと異なり、d3.jsで作成するグラフは、HTML、CSS、SVGで構築されます。
そのため、ブラウザの開発ツール（webインスペクタ等）で容易にその内容を確認することができます。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/b6e4d614f0b145f7a7ecaba4c5dd5750.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/b6e4d614f0b145f7a7ecaba4c5dd5750-1024x488.jpg" alt="" title="スクリーンショット 2012-06-02 1.30" width="620" height="295" class="alignnone size-large wp-image-873" /></a>

「意図した通りにグラフが出力されない」などのバグも、原因を探るのが非常に簡単です。
下記のリンク先で、web開発者ツールを起動し実際に確認してみてください。
<a href="http://jsrun.it/_shimizu/9Nrc">棒グラフ</a>


■参考
チュートリアル
<a href="https://github.com/mbostock/d3/wiki/Tutorials">https://github.com/mbostock/d3/wiki/Tutorials</a>

APIリファレンス
<a href="https://github.com/mbostock/d3/wiki/API-Reference">https://github.com/mbostock/d3/wiki/API-Reference</a>

<a href="http://www.amazon.co.jp/gp/product/4873113784/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=toriaezu04b-22&linkCode=as2&camp=247&creative=1211&creativeASIN=4873113784"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=4873113784&MarketPlace=JP&ID=AsinImage&WS=1&tag=toriaezu04b-22&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4873113784" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

jsdo.itで、他にいくつかサンプルを作ってます。
<a href="http://jsdo.it/tag/d3.js">Tag: d3.js</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>862</wp:post_id>
		<wp:post_date>2012-06-02 02:45:37</wp:post_date>
		<wp:post_date_gmt>2012-06-01 17:45:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[JavaScript関連の情報をまとめてみた | Yusuke&#039;s Hack Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://wp.yusukew62.com/wordpress/?p=280</wp:comment_author_url>
			<wp:comment_author_IP>49.212.151.199</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 20:24:02</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 11:24:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ■D3.jsについて http://shimz.me/blog/?p=862 http://bl.ocks.org/950642#graph.json [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370949842.6114890575408935546875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370950454.9739959239959716796875;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>IE9でページがレンダリング（表示）されない</title>
		<link>http://shimz.me/blog/troubleshooting/913</link>
		<pubDate>Wed, 06 Jun 2012 01:04:15 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=913</guid>
		<description></description>
		<content:encoded><![CDATA[アップグレード後、立て続けに質問があったので。
IE ver9 でネットワーク接続は問題ないのに、ページが真っ白で表示されないケース。
ノートＰＣで起きやすい。

【対応】
インターネットオプション→詳細設定→「[GPU レンダリングでなく、ソフトウェア レンダリングを使用する」にチェック

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>913</wp:post_id>
		<wp:post_date>2012-06-06 10:04:15</wp:post_date>
		<wp:post_date_gmt>2012-06-06 01:04:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ie9%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e3%81%8c%e3%83%ac%e3%83%b3%e3%83%80%e3%83%aa%e3%83%b3%e3%82%b0%ef%bc%88%e8%a1%a8%e7%a4%ba%ef%bc%89%e3%81%95%e3%82%8c%e3%81%aa%e3%81%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>コードの書き方を質問できるＱ＆Ａコミュニティー「Code Review beta」</title>
		<link>http://shimz.me/blog/web/919</link>
		<pubDate>Thu, 07 Jun 2012 00:13:24 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=919</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codereview.stackexchange.com/">Code Review beta</a>

<a href="http://codereview.stackexchange.com/"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000004-1024x724.jpg" alt="" title="WS000004" width="620" height="438" class="alignnone size-large wp-image-920" /></a>

<a href="http://stackexchange.com/">StackExchange</a>を利用して作成されているＱ＆Ａコミュニティの一つ。
StackOverflowでは具体的な質問に対して回答を求めることが多いけど、こちらは「とりあえず書いてみたんだけど、この書き方であってる？」とか「もっと効率のいい書き方ない？」とか「このコードをデザインパターンで書き直すにはどうしたらいい？」みたいな、コーディングに関する質問を投げることが推奨されている。
参加者はまだ少ないみたいだけど、改善されたコードのBefore-Afterが見れるので勉強になる。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>919</wp:post_id>
		<wp:post_date>2012-06-07 09:13:24</wp:post_date>
		<wp:post_date_gmt>2012-06-07 00:13:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b3%e3%83%bc%e3%83%89%e3%81%ae%e6%9b%b8%e3%81%8d%e6%96%b9%e3%82%92%e8%b3%aa%e5%95%8f%e3%81%a7%e3%81%8d%e3%82%8b%ef%bd%91%ef%bc%86%ef%bd%81%e3%82%b3%e3%83%9f%e3%83%a5%e3%83%8b%e3%83%86%e3%82%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[920]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPress に Facebookの公式プラグインいれてみた。</title>
		<link>http://shimz.me/blog/other/939</link>
		<pubDate>Fri, 15 Jun 2012 06:12:38 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=939</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wordpress.org/extend/plugins/facebook/"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000003.jpg" alt="" title="WS000003" width="620" height="610" class="alignnone size-full wp-image-942" /></a>


インストールの方法は以下
<a href="http://developers.facebook.com/wordpress/">http://developers.facebook.com/wordpress/</a>


とりえあず、テストを兼ねて投稿してみる。

【追記】
WordPressで記事を書くと、「最近のアクティビティ」として通知されるのは、便利かも。あと、Blogのアクセス解析にFacebook「インサイト」が使えるようになるので、これはありがたい。
プラグインをただインストールするだけではだめで、ブログを<a href="https://developers.facebook.com/apps/">Facebook Developers</a>でFacebookアプリとして登録しないといけないので、そこはちょっとだけ敷居が高いかも。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>939</wp:post_id>
		<wp:post_date>2012-06-15 15:12:38</wp:post_date>
		<wp:post_date_gmt>2012-06-15 06:12:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress-%e3%81%ab-facebook%e3%81%ae%e5%85%ac%e5%bc%8f%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%81%84%e3%82%8c%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[467342046626529]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[942]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 力学モデル</title>
		<link>http://shimz.me/blog/d3-js/948</link>
		<pubDate>Tue, 19 Jun 2012 06:12:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=948</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://mbostock.github.com/d3/ex/force.html"><img src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000005.jpg" alt="" title="WS000005" width="945" height="489" class="alignnone size-full wp-image-949" /></a>
よく見かけるわりに、正式な名称を知らなかったのですが、上記のような図を「力学モデル (グラフ描画アルゴリズム)」などと言うらしいです。


d3.jsでは、上記のような複雑なグラフを描画するためにレイアウトオブジェクトとよばれるテンプレート機能が提供されています。力学モデルを描画するためには、Force Layoutを使用します。

<a href="https://github.com/mbostock/d3/wiki/Force-Layout">Force Layout リファレンス</a>

<!--more-->
<script type="text/javascript" src="http://jsdo.it/blogparts/9nUr/js?view=design"></script><p class="ttlBpJsdoit" style="width: 465px; margin: 0; text-align: right; font-size: 11px;"><a href="http://jsdo.it/_shimizu/9nUr" title="d3.js ネットワーク（Force Layout）">d3.js ネットワーク（Force Layout） - jsdo.it - share JavaScript, HTML5 and CSS</a></p>


[html title="index.html" autolinks="false"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot; /&gt;
&lt;title&gt;d3.js Force Layout&lt;/title&gt;
&lt;style&gt;
.link { stroke: #ccc; }
.nodetext { pointer-events: none; font: 10px sans-serif; }
&lt;/style&gt;
&lt;script src=&quot;http://d3js.org/d3.v2.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;input id=&quot;addNodeE&quot; type=&quot;button&quot; value=&quot;Eノード追加&quot;&gt;&lt;/input&gt;
&lt;input id=&quot;delNodeB&quot; type=&quot;button&quot; value=&quot;Bノード削除&quot;&gt;&lt;/input&gt;
&lt;input id=&quot;addLinkDC&quot; type=&quot;button&quot; value=&quot;DCリンク追加&quot;&gt;&lt;/input&gt;
&lt;input id=&quot;delLinkAC&quot; type=&quot;button&quot; value=&quot;ACリンク削除&quot;&gt;&lt;/input&gt;



&lt;script type=&quot;text/javascript&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]

[javascript title="index.js" autolinks="false"]
var w = 450,
    h = 420

var nodes = [],    //ノードを収める配列
    links = [];    //ノード間のリンク情報を収める配列

//グラフを描画するステージ（svgタグ）を追加
var stage = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, w).attr(&quot;height&quot;, h);

//グラフの初期設定
var force = self.force = d3.layout.force()
	.nodes(nodes)
	.links(links)
	.gravity(.05) //重力
	.distance(100) //ノード間の距離
	.charge(-100) //各ノードの引き合うor反発しあう力
	.size([w, h]); //図のサイズ

//グラフにアニメーションイベントを設置
force.on(&quot;tick&quot;, function() {
    var node = stage.selectAll(&quot;g.node&quot;).data(nodes, function(d) { return d.id;} );
        node.attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;; });

    var link = stage.selectAll(&quot;line.link&quot;).data(links, function(d) { return d.source.id + ',' + d.target.id});
	link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
	    .attr(&quot;y1&quot;, function(d) { return d.source.y; })
	    .attr(&quot;x2&quot;, function(d) { return d.target.x; })
	    .attr(&quot;y2&quot;, function(d) { return d.target.y; });
});


//inputタグにイベントを設置
d3.select(&quot;#addNodeE&quot;).on(&quot;click&quot;, function(){
   addNodeE(); 
    d3.select(this).attr(&quot;disabled&quot;, &quot;disabled&quot;);
});
d3.select(&quot;#delNodeB&quot;).on(&quot;click&quot;, function(){
   delNodeB(); 
    d3.select(this).attr(&quot;disabled&quot;, &quot;disabled&quot;);
});
d3.select(&quot;#addLinkDC&quot;).on(&quot;click&quot;, function(){
   addLinkDC(); 
    d3.select(this).attr(&quot;disabled&quot;, &quot;disabled&quot;);
});
d3.select(&quot;#delLinkAC&quot;).on(&quot;click&quot;, function(){
   delLinkAC(); 
    d3.select(this).attr(&quot;disabled&quot;, &quot;disabled&quot;);
});


//アップデート（再描画）
function update() {
    var link = stage.selectAll(&quot;line.link&quot;)
	.data(links, function(l) { return l.source.id + '-' + l.target.id; }); //linksデータを要素にバインド
    
    link.enter().append(&quot;svg:line&quot;)
	.attr(&quot;class&quot;, &quot;link&quot;)
	.attr(&quot;x1&quot;, function(d) { return d.source.x; })
	.attr(&quot;y1&quot;, function(d) { return d.source.y; })
	.attr(&quot;x2&quot;, function(d) { return d.target.x; })
	.attr(&quot;y2&quot;, function(d) { return d.target.y; });

    link.exit().remove(); //要らなくなった要素を削除

    var node = stage.selectAll(&quot;g.node&quot;)
	.data(nodes, function(d) { return d.dpid;});  //nodesデータを要素にバインド

    var nodeEnter = node.enter().append(&quot;svg:g&quot;)
	.attr(&quot;class&quot;, &quot;node&quot;)
	.call(force.drag); //ノードをドラッグできるように設定
    
    nodeEnter.append(&quot;svg:image&quot;)
	.attr(&quot;class&quot;, &quot;circle&quot;)
	.attr(&quot;xlink:href&quot;, &quot;http://jsrun.it/assets/i/3/V/Z/i3VZI.png&quot;) //ノード用画像の設定
	.attr(&quot;x&quot;, &quot;-16px&quot;)
	.attr(&quot;y&quot;, &quot;-16px&quot;)
	.attr(&quot;width&quot;, &quot;32px&quot;)
	.attr(&quot;height&quot;, &quot;32px&quot;);

    nodeEnter.append(&quot;svg:text&quot;)
	.attr(&quot;class&quot;, &quot;nodetext&quot;)
	.attr(&quot;dx&quot;, 18)
	.attr(&quot;dy&quot;, &quot;.35em&quot;)
	.text(function(d) { return d.id });

    node.exit().remove(); //要らなくなった要素を削除

    force.start(); //forceグラグの描画を開始

}


//ノード、リンクの初期値
function forceInit() {
	var nA = {id: 'a'};
	var nB = {id: 'b'};
	var nC = {id: 'c'};
  	var nD = {id: 'd'};
	nodes.push(nA);
	nodes.push(nB);
	nodes.push(nC);
	nodes.push(nD);

	var lAB = {source: nA, target: nB};
	var lAC = {source: nA, target: nC};
	var lBC = {source: nB, target: nC};
	var lAD = {source: nA, target: nD};
	links.push(lAB );
	links.push(lAC);
	links.push(lBC);
	links.push(lAD);

	update();
}

/*
 * .filterメソッドは、配列に対して反復処理を行い、その結果を新しい配列として返す
*/

//Ｅノード追加
function addNodeE(){
    var nodeE = {id: &quot;e&quot;};
    nodes.push(nodeE);
    var nA = nodes.filter(function(n) { return n.id === 'a'; })[0];
    var linkAE = {source: nA , target: nodeE};
    links.push(linkAE);
    update();
}

//Ｂノード削除
function delNodeB() {
	nodes = nodes.filter(function(n) { return n.id !== 'b'; });
	links = links.filter(function(l) { return (l.source.id !== 'b' &amp;&amp; l.target.id !== 'b'); });
	update();
}

//ＤＣ間にリンク追加
function addLinkDC() {
	var nD = nodes.filter(function(n) { return n.id === 'd'; })[0];
	var nC = nodes.filter(function(n) { return n.id === 'c'; })[0];
	var lDC = {source: nD, target: nC};
	links.push(lDC);
	update();
}

//ＡＣ間のリンク削除
function delLinkAC() {
    links = links.filter(function(l) { return (l.source.id === 'a' &amp;&amp; l.target.id === 'c') ? null : l; });
    update();
}

forceInit();
update();

[/javascript]

　
　
　]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>948</wp:post_id>
		<wp:post_date>2012-06-19 15:12:13</wp:post_date>
		<wp:post_date_gmt>2012-06-19 06:12:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-%e3%81%a7%e5%8a%9b%e5%ad%a6%e3%83%a2%e3%83%87%e3%83%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[469777856382948]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[949]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wakandaを使って１分でWebアドレス帳を作る</title>
		<link>http://shimz.me/blog/javascript/972</link>
		<pubDate>Wed, 20 Jun 2012 06:54:48 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=972</guid>
		<description></description>
		<content:encoded><![CDATA[<img style="display: none;" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000001.jpg" alt="" />
<a href="http://www.wakanda.jp/">Wakanda</a> ワカンダ ッテ ナンダ？

<iframe src="http://www.youtube.com/embed/yq5fGBwtLlU" frameborder="0" width="100%" height="340"></iframe>
<blockquote>WakandaはビジネスWebアプリケーションを構築するためのプラットフォームです。
WakandaにはWebサーバー・データベース・ランゲージ実行エンジンがすべてWakanda Serverワンパッケージに含まれているため、インストールから開発、配布、運用をとても容易に行うことができます。
さらにWakandaには開発ツールであるWakanda Studioも付属します。この開発ツールではグラフィックエディターを使ってモデルの定義やビューの作成 (HTMLエディター)、さらにコントローラーの記述 (JavaScriptエディターおよびデバッガー) を行うことができます。</blockquote>
<!--more-->

詳しい話は、上記の動画や<a href="http://www.wakanda.jp">公式サイト</a>を参照していただくとして、とりあえず面白そうなのでざっと触ってみました。
<!--more-->
&nbsp;
&nbsp;


<strong>■ インストールとＩＤＥの起動</strong>

<a href="http://www.wakanda.org/downloads">ココ</a>から「All-in-one」を選択してダウンロードします。
<a href="http://shimz.me/blog/wp-content/uploads/2012/06/install1.jpg">
<img class="alignnone size-full wp-image-973" title="install1" src="http://shimz.me/blog/wp-content/uploads/2012/06/install1.jpg" alt="" width="267" height="99" /></a>
ダウンロードしたファイルを解凍すると、なかに「Wakanda Server」と「Wakanda Studio」が入ってます。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/start1.jpg"><img class="alignnone size-full wp-image-974" title="start1" src="http://shimz.me/blog/wp-content/uploads/2012/06/start1.jpg" alt="" width="97" height="100" /></a>
「Wakanda Studio」フォルダの中の「Wakanda Stuio.exe」をクリックしてIDEを起動します。

&nbsp;
&nbsp;


<strong>■ 新規プロジェクトの作成</strong>

メニューバーの「File」→「New」→「Project」から、新規プロジェクトを作成します。

プロジェクトのテンプレートは「Blank」で、プロジェクト名は適当に「test」とつけて保存します。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/start3.jpg"><img class="alignnone size-large wp-image-976" title="start3" src="http://shimz.me/blog/wp-content/uploads/2012/06/start3-1024x677.jpg" alt="" width="620" height="409" /></a>

&nbsp;
&nbsp;


<strong>■ データストアークラスの作成</strong>

左サイドに、ツリー形式でファイルが表示されるので、「test.waModel」をクリックします。

<a style="color: #ff4b33; line-height: 24px;" href="http://shimz.me/blog/wp-content/uploads/2012/06/model01.jpg"><img class="alignnone size-full wp-image-986" title="model0" src="http://shimz.me/blog/wp-content/uploads/2012/06/model01.jpg" alt="" width="240" height="240" /></a>

ワークスペースに"データストアークラス デザイナー"が表示されるので<img class="size-full wp-image-979 alignnone" title="model2" src="http://shimz.me/blog/wp-content/uploads/2012/06/model2.jpg" alt="" width="33" height="33" />（New Class ボタン）をクリックして新規データストアー クラスを追加します。クラス名はそのまま変更せず使います。

<img class="alignnone size-large wp-image-983" title="model2-5" src="http://shimz.me/blog/wp-content/uploads/2012/06/model2-5-1024x568.jpg" alt="" width="620" height="343" />

追加されたデータストアーに必要な属性を追加していきます。

属性を追加するには「+」ボタンをクリックします。

<img class="alignnone size-full wp-image-984" title="model3" src="http://shimz.me/blog/wp-content/uploads/2012/06/model3.jpg" alt="" width="203" height="128" />

今回は、アドレス帳なので、name(名前)、address(住所)、tel(電話番号)の３つを追加します。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/model4.jpg"><img class="alignnone size-full wp-image-985" title="model4" src="http://shimz.me/blog/wp-content/uploads/2012/06/model4.jpg" alt="" width="236" height="189" /></a>

作業が終わったら<a href="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg"><img title="WS000009" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg" alt="" width="33" height="33" /></a>（saveボタン）をクリックして保存します。

&nbsp;
&nbsp;


<strong>■ ＵＩの作成</strong>

左サイドのファイル一覧から「index.html」をクリックします。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/index0.jpg"><img class="alignnone size-full wp-image-987" title="index0" src="http://shimz.me/blog/wp-content/uploads/2012/06/index0.jpg" alt="" width="240" height="240" /></a>

ワークスペースにGUI デザイナーが表示されるので、

まず、「Gird」をGUIデザイナーにドラッグ＆ドロップします。

その後、Gird上に、先ほど作った「DataClass1」をドラッグ＆ドロップします。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/index4.jpg"><img class="alignnone size-large wp-image-988" title="index4" src="http://shimz.me/blog/wp-content/uploads/2012/06/index4-1024x569.jpg" alt="" width="620" height="344" /></a>

作業が終わったら<a href="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg"><img class="alignnone size-full wp-image-990" title="WS000009" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000009.jpg" alt="" width="33" height="33" /></a>（saveボタン）をクリックして保存します。

&nbsp;
&nbsp;


<strong>■ 実行</strong>

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/WS000016.jpg"><img class="alignnone size-full wp-image-989" title="WS000016" src="http://shimz.me/blog/wp-content/uploads/2012/06/WS000016.jpg" alt="" width="69" height="57" /></a>（実行ボタン）をクリックすると、ブラウザが起動します。

<a href="http://shimz.me/blog/wp-content/uploads/2012/06/run.jpg"><img class="alignnone size-large wp-image-991" title="run" src="http://shimz.me/blog/wp-content/uploads/2012/06/run-1024x717.jpg" alt="" width="620" height="434" /></a>

以上で完成です。
「+」ボタンでデータを追加、「－」ボタンでデータの削除が行えます。


&nbsp;
&nbsp;


必要なものが１インストールで揃って、ペタペタ貼り付けるだけで動くというのは楽ですね。
もっと詳しいことが知りたい方は公式の<a href="http://www.wakanda.jp/documents/">マニュアル</a>などをご覧ください。


&nbsp;
&nbsp;

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date>2012-06-20 15:54:48</wp:post_date>
		<wp:post_date_gmt>2012-06-20 06:54:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wakanda%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%ef%bc%91%e5%88%86%e3%81%a7web%e3%82%a2%e3%83%89%e3%83%ac%e3%82%b9%e5%b8%b3%e3%82%92%e4%bd%9c%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_post_ids</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1010]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[470434506317283]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日本レコード協会が音楽ファンに望むネット上での正しい音楽の使い方</title>
		<link>http://shimz.me/blog/copyright/1031</link>
		<pubDate>Wed, 27 Jun 2012 11:52:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1031</guid>
		<description></description>
		<content:encoded><![CDATA[時代が変わり、環境が変われば、音楽の楽しみ方も変わっていくのだと思いますが……

<a href="http://www.riaj.or.jp/copyright/music/qa_internet.html">音楽CDの利用についてQ＆A集[インターネット編]　／　日本レコード協会</a>
<blockquote>Ｑ．インターネットラジオを開設して、自分の好きなCDの音楽を流すことはできますか？
Ａ．できません

Ｑ．自分のホームページにおすすめCDのジャケットをスキャンして載せてもいいですか？
Ａ．できません

Ｑ．自分のホームページに好きな曲の歌詞を、スキャンではなく自分で打ち変えて掲載したいのです。
それと、自分で採譜した楽譜も載せたいのですが、可能ですか？
Ａ．できません

Ｑ．私のアマチュアバンドで好きなアーティストの曲をカバーして録音をしました。
かっこよくできたので自分のサイトにアップロードしようと思いますが、可能ですか？
Ａ．できません</blockquote>

 　

厳しいなぁ。「権利者に確認をとればＯＫ」と言われても、確認をとらない限りカバー曲を演奏した動画でさえアップロードしちゃいけないってのは厳しぎませんか？

商業音楽をカバーした「歌ってみた」や「演奏してみた」動画をダウンロードしても、違法ダウンロードになるんでしょうか？
著作権者から許可を得ているかどうかなんで知りようもないんですが。

著作権法自体が時代に合わなくなってきている気がします。

でも最近の動きをみていると、日本レコード協会はとにかくファンに受動的に音楽を消費してもらいたいみたいですね。

<!--more-->


自分はYoutubeで、日本のJ-POPなどが海外の人にどう受け取られているのか？をコメント欄などを読みながら調べるのが好きなのですが、そういうことをやっているとたびたび疑問を抱かざるおえない日本の音楽業界の対応を目にすることがあります。

なかでも、「これは、ないんじゃないか」と思った対応をあげると、

１．「踊ってみた」「歌ってみた」「演奏してみた」系動画のaudioだけ権利者削除する。
Perfumeなんかは、特徴的なダンスが結構海外の人にも好評で、沢山の「踊ってみた」動画がYoutubeにアップされていたのですが、一時期大量にそれらの動画のaudio（音）だけ権利者削除されていました。
無音のダンス動画……シュールです。
踊っているのは、良くも悪くもファンなわけで、削除するのが正しい行いだとしても、印象が悪すぎると思います。
（ちなみに、最近、削除していたaudioを復活させているみたいです）

２．公式チャンネルを作ったとたんに、他のユーザーが上げていたPVを削除
わからなくは無いんです。
先に、PVを勝手にあげてしまっているユーザーがいてそれが人気を集めてしまっていたりすると、同じPVを公式が後からアップしてもなかなかアクセスが集まらなかったりするので。
ただ、動画につけられたコメントとかはある種財産だと思うんですよね。活発にコメントが書き込まれている動画をばっさりと削除して、「公式でアップしたから、次からこっちで見てね」ってのはもったいないと思います。
おまけに、日本の音楽事務所の公式チャンネルは、コメント欄閉じている場合が多いし、なんかあまりコミュニケーションが生まれる感じがしないんですよね。


上記のような対応は、「音楽をただ聴くだけじゃなく"音楽を楽しみたい"ファンほどネットの上では楽しめない」という状況を作り出していると思うのですが、ほんとにそれで売り上げが上がるんでしょうか。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1031</wp:post_id>
		<wp:post_date>2012-06-27 20:52:00</wp:post_date>
		<wp:post_date_gmt>2012-06-27 11:52:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%97%a5%e6%9c%ac%e3%83%ac%e3%82%b3%e3%83%bc%e3%83%89%e5%8d%94%e4%bc%9a%e3%81%8c%e9%9f%b3%e6%a5%bd%e3%83%95%e3%82%a1%e3%83%b3%e3%81%ab%e6%9c%9b%e3%82%80%e3%83%8d%e3%83%83%e3%83%88%e4%b8%8a%e3%81%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[475057869188280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/475057869188280" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>InDesignのスクリプティング　メモ</title>
		<link>http://shimz.me/blog/indesign/1094</link>
		<pubDate>Fri, 06 Jul 2012 03:21:47 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1094</guid>
		<description></description>
		<content:encoded><![CDATA[ネタが無いので、昔のブログから掘り出してきた記事。

<!--more-->
ＤＢから出力されたCSVデータを読み込んで、データ結合(自動組版)、ツメ付け、ノンブル振り、PDF書き出しまで。
(参考：InDesignの勉強部屋_CS2_データ結合)

[javascript title="Javascript内で「データ結合」機能を実行"]
var doc = app.activeDocument;
var Filename = File.openDialog(&quot;ソースファイルを選択&quot;);
var dmg = doc.dataMergeProperties;
dmg.selectDataSource(Filename);
dmg.mergeRecords();
[/javascript]

[javascript title="ツメの貼り付け"]
doc = app.activeDocument;
var Filename = File.openDialog(&quot;ツメ画像を選択してください&quot;);
if(Filename){
	for(i=0;i &lt; app.activeDocument.pages.length;i++){
		imgFrame = doc.pages[i].textFrames.add();
		if(i % 2 == 0){
			imgFrame. visibleBounds = [&quot;-3mm&quot;, &quot;-3mm&quot;, &quot;300mm&quot;, &quot;10mm&quot;]; 
		}else{
			imgFrame. visibleBounds = [&quot;-3mm&quot;, &quot;200mm&quot;, &quot;300mm&quot;, &quot;213mm&quot;]; 
		}
		imgFrame.contentType = ContentType.graphicType;
		imgFrame.place(Filename);
	}
}
[/javascript]

[javascript title="ノンブルを振る"]
var doc = app.activeDocument;
var start_nombre = prompt(&quot;ノンブルの開始番号を入力&quot;,&quot;&quot;);
if(start_nombre != null){ 
	if(start_nombre ==&quot;&quot;) start_nombre = &quot;1&quot;;
	for(i=0;i &lt; app.activeDocument.pages.length;i++){
		nombreFrame = doc.pages[i].textFrames.add();
		nombreFrame . visibleBounds = [&quot;285mm&quot;, &quot;95mm&quot;, &quot;290mm&quot;, &quot;115mm&quot;];
		nombre = parseInt(start_nombre) + i;
		nombreFrame.contents = String(nombre);
		nombreFrame.paragraphs[0].justification = Justification.centerAlign;
	}
}
[/javascript]


[javascript title="PDF書き出し"]
PDFpre = &quot;PDFX1&quot;　//PDF書き出しプリセットの指定
var filename = File.saveDialog(&quot;保存先フォルダを選択してください&quot;,&quot;.pdf&quot;);
if (filename)
{
	if(PDFpre){
		app.activeDocument.exportFile(ExportFormat.pdfType, filename, false,PDFpre);
	}else{
		app.activeDocument.exportFile(ExportFormat.pdfType, filename, false);
	}
}
[/javascript]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1094</wp:post_id>
		<wp:post_date>2012-07-06 12:21:47</wp:post_date>
		<wp:post_date_gmt>2012-07-06 03:21:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>indesign%e3%81%ae%e3%82%b9%e3%82%af%e3%83%aa%e3%83%97%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e3%80%80%e3%83%a1%e3%83%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="indesign"><![CDATA[InDesign]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/480184465342287" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}i:1;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/480185375342196" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[480185375342196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プログラミングする気力が無いときに観たくなる動画</title>
		<link>http://shimz.me/blog/programming/1097</link>
		<pubDate>Tue, 03 Jul 2012 13:57:44 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1097</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2012/07/tired.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/07/tired.jpg" alt="" title="tired" width="470" height="325" class="alignnone size-full wp-image-1099" /></a>

夏でもないのに夏バテぎみで、コードを書く気力が湧きません orz
しかたがないので、やる気を取り戻せる動画をニコ動で眺めてきました。

<!--more-->

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm8391299"></script><noscript><a href="http://www.nicovideo.jp/watch/sm8391299">【ニコニコ動画】【プログラミング】オセロを1時間で作ってみた【実況解説】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm8517855"></script><noscript><a href="http://www.nicovideo.jp/watch/sm8517855">【ニコニコ動画】【プログラミング】テトリスを1時間強で作ってみた【実況解説】</a></noscript>

楽しそうなプログラミング動画を観ると、ちょっとだけ、やる気が回復する気がしますね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1097</wp:post_id>
		<wp:post_date>2012-07-03 22:57:44</wp:post_date>
		<wp:post_date_gmt>2012-07-03 13:57:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%99%e3%82%8b%e6%b0%97%e5%8a%9b%e3%81%8c%e7%84%a1%e3%81%84%e3%81%a8%e3%81%8d%e3%81%ab%e8%a6%b3%e3%81%9f%e3%81%8f%e3%81%aa%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1099]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[478841598809907]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/478841598809907" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bootstrap popover 表示位置切り替え</title>
		<link>http://shimz.me/blog/javascript/1114</link>
		<pubDate>Fri, 13 Jul 2012 05:10:36 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1114</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://twitter.github.com/bootstrap/javascript.html#popovers">popover</a>

<a href="http://shimz.me/blog/wp-content/uploads/2012/07/WS000013.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/07/WS000013.jpg" alt="" title="WS000013" width="588" height="192" class="alignnone size-full wp-image-1115" /></a>

Bottstrapのpopoverの表示位置を動的に変更する。
<script type="text/javascript" src="http://jsdo.it/blogparts/yvPI/js"></script>

表示位置を変更しているのは以下の部分。
[javascript]
$(&quot;.preview&quot;).each(function(){$(this).data().popover.options.placement = &quot;bottom&quot;}) ;
[/javascript]
placementの値を変更することで、表示位置を変えられます。
上記のサンプルでは、マウスの位置を見てポップオーバーの表示位置を変更しています。


ついでに。
popover内へのiframeの埋め込み
<script type="text/javascript" src="http://jsdo.it/blogparts/glCz/js"></script>

便利]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1114</wp:post_id>
		<wp:post_date>2012-07-13 14:10:36</wp:post_date>
		<wp:post_date_gmt>2012-07-13 05:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bootstrap-popover-%e8%a1%a8%e7%a4%ba%e4%bd%8d%e7%bd%ae%e5%88%87%e3%82%8a%e6%9b%bf%e3%81%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bottstrap"><![CDATA[Bottstrap]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[483352245025509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/483352245025509" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 ワードクラウド　「d3-cloud」プラグイン</title>
		<link>http://shimz.me/blog/d3-js/1133</link>
		<pubDate>Wed, 18 Jul 2012 11:23:43 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1133</guid>
		<description></description>
		<content:encoded><![CDATA[【追記】
バージョン上がって動かなくなったみたいなので、以下をどうぞ。
<a href="http://shimz.me/blog/d3-js/2711">【D3.js】「全ツイート履歴」からWord cloudを作ってみた。</a>


<hr>
<a href="https://github.com/jasondavies/d3-cloud"><img src="http://shimz.me/blog/wp-content/uploads/2012/07/687474703a2f2f7777772e6a61736f6e6461766965732e636f6d2f776f7264636c6f75642f616d617a696e672e706e67.png" alt="" title="687474703a2f2f7777772e6a61736f6e6461766965732e636f6d2f776f7264636c6f75642f616d617a696e672e706e67" width="960" height="600" class="alignnone size-full wp-image-1134" /></a>

「タグクラウド」という呼び名の方が一般的なのかもしれません。

「d3-clud」はワードクラウドを生成する、d3.jsのプラグインです。

<a href="http://www.jasondavies.com/wordcloud/">デモ</a>

<a href="https://github.com/jasondavies/d3-cloud">ダウンロード</a>

使い方は、ダウンロードした中に含まれているsimple.htmlのソースを見るのが早いと思います。

<a href="http://shimz.me/libs/d3/plugin/cloud/examples/simple.html">simple.html</a>

上記のサンプルでは、画面を更新するたび単語が重ならないように自動的に調整されて表示されます。

[javascript]
  //ワードクラウドの初期設定
  d3.layout.cloud().size([300, 300])
      .words([
        &quot;Hello&quot;, &quot;world&quot;, &quot;normally&quot;, &quot;you&quot;, &quot;want&quot;, &quot;more&quot;, &quot;words&quot;,
        &quot;than&quot;, &quot;this&quot;].map(function(d) {
        return {text: d, size: 10 + Math.random() * 90}; 
      })) //表示する単語を納めた配列を、wordsオブジェクトに変換
      .rotate(function() { return ~~(Math.random() * 2) * 90; })　//表示する文字の角度を指定。ここでは、ランダムで　0℃　or 90℃
      .fontSize(function(d) { return d.size; })
      .on(&quot;end&quot;, draw)
      .start();

  //ワード描画
  function draw(words) {
    d3.select(&quot;body&quot;).append(&quot;svg&quot;)
        .attr(&quot;width&quot;, 300)
        .attr(&quot;height&quot;, 300)
      .append(&quot;g&quot;)
        .attr(&quot;transform&quot;, &quot;translate(150,150)&quot;)
      .selectAll(&quot;text&quot;)
        .data(words) //wordsオブジェクトが渡される
      .enter().append(&quot;text&quot;)
        .style(&quot;font-size&quot;, function(d) { return d.size + &quot;px&quot;; })
        .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
        .attr(&quot;transform&quot;, function(d) {
          return &quot;translate(&quot; + [d.x, d.y] + &quot;)rotate(&quot; + d.rotate + &quot;)&quot;; //ここで、実際の文字の角度を指定している
        })
        .text(function(d) { return d.text; });
  }
[/javascript]

手軽で見栄えもよくて、とても便利なプラグインなのですがSVGで出力されるため、SVGに対応しいないブラウザでは出力されたワードクラウドが表示されません。

なので、今のところ使いどころは限られてくるかも。


備考
textタグにwriting-mode="tb"（縦書き）を指定するとうまく配置されませんね。

<script type="text/javascript" src="http://jsdo.it/blogparts/AaOX/js?width=465&height=496&view=screenshot"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date>2012-07-18 20:23:43</wp:post_date>
		<wp:post_date_gmt>2012-07-18 11:23:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-%e3%83%af%e3%83%bc%e3%83%89%e3%82%af%e3%83%a9%e3%82%a6%e3%83%89%e3%80%80%e3%80%8cd3-cloud%e3%80%8d%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[485588721468528]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/485588721468528" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SQL] 数字を含む文字列を比較するには？</title>
		<link>http://shimz.me/blog/sql/1142</link>
		<pubDate>Fri, 20 Jul 2012 04:15:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1142</guid>
		<description></description>
		<content:encoded><![CDATA[完全に個人的なメモ

「1R」とか「2DK」とか「3LDK」といった文字データの入ったカラムをターゲットに、"４部屋以上"、"４部屋以下"といった条件でデータを抽出したい。

メンドウなことに、このカラムには「事務所」とか「店舗」とか数値の含まれないデータも入っている。

テーブル名は「hoge_tb」カラム名は「room」

とりあえず、思いついたのが以下

[sql title="4部屋以上抽出"]
SELECT * FROM hoge_tb WHERE  to_number(('0' || room), '99')&gt;=4 
[/sql]


[sql title="4部屋以下抽出"]
SELECT * FROM hoge_tb WHERE   to_number(('0' || room), '99')&lt;=4 AND to_number(('0' || room), '99')&lt;&gt;0 
[/sql]

う～ん、あまり綺麗くない。
もっと、いい方法がないかな。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date>2012-07-20 13:15:52</wp:post_date>
		<wp:post_date_gmt>2012-07-20 04:15:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sql-%e6%95%b0%e5%ad%97%e3%82%92%e5%90%ab%e3%82%80%e6%96%87%e5%ad%97%e5%88%97%e3%82%92%e6%af%94%e8%bc%83%e3%81%99%e3%82%8b%e3%81%ab%e3%81%af%ef%bc%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[486345051392895]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/486345051392895" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js + restify + mongoDBでお手軽 JSON Web API 作成</title>
		<link>http://shimz.me/blog/node-js/1167</link>
		<pubDate>Sat, 21 Jul 2012 10:33:34 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1167</guid>
		<description></description>
		<content:encoded><![CDATA[ <a href="http://search.npmjs.org/">npm registry</a> を探っていたら「restify」という便利そうなフレームワークを見つけたので使っててみました。

<a href="http://mcavage.github.com/node-restify/">restify</a>
　

restifyは、REST Webサービスの構築に特化したフレームワークです。
<a href="http://expressjs.com/">Express</a>からテンプレート機能とかを省いて、便利な機能を付け足した感じです。

<strong>restifyのインストール</strong>
[shell]
$ npm install restify
[/shell]

&nbsp;

とりあえず、公式サイトにあるサンプルコードを動かしてみます。
[javascript title="sample.js"]
var restify = require('restify');

function respond(req, res, next) {
  res.send('hello ' + req.params.name);
}

var server = restify.createServer();
server.get('/hello/:name', respond);
server.head('/hello/:name', respond);

server.listen(8080, function() {
  console.log('%s listening at %s', server.name, server.url);
});
[/javascript]

&nbsp;

<strong>実行</strong>
[shell]
$ node sample.js
[/shell]
<code>http://＜ホスト名＞:8080/hello/＜任意の名前＞</code>
ブラウザで上記のURLにアクセスすると

<code>hello ＜任意の名前＞</code>
とレスポンスが帰ってきます。
URLのルーティング処理が簡潔にかけて便利ですね。

&nbsp;
&nbsp;

<strong>■ ゲストブックの作成</strong>

「restify」をググっていたら、restifyを使ってゲストブックを作成するチュートリアルを見つけたので、それを参考に簡単なゲストブックを作ってみます。

参考
<a href="http://backbonetutorials.com/nodejs-restify-mongodb-mongoose/">Simple example - Node.js, Restify, MongoDb and Mongoose</a>

データベースにはMongoDBを使うのでインストール。
インストール方法は以下を。
<a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-redhat-centos-or-fedora-linux/">MongoDBのインストール</a>

node.jsからmongodbへアクセスするためのモジュールをインストール。
[shell]
$ npm install mongodb
$ npm install mongoose
[/shell]

&nbsp;

<strong>・ゲストブックに使うWeb APIサーバーを記述</strong>
[javascript title="webapi.js"]
var restify = require('restify');
var server = restify.createServer();
server.use(restify.bodyParser());

var mongoose = require('mongoose');
var db = mongoose.connect('mongodb://localhost/webapi');
var Schema = mongoose.Schema;

var messageSchema = new Schema({
	name: String,
	comment:String,
	date: Date
});

mongoose.model('message', messageSchema);
var Message = mongoose.model('message');

function getMessage(req, res, next){
	res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
	res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);
	Message.find().sort('date',-1).execFind(function(arr, data){
		res.send(data);
	});
}

function postMessage(req, res, next){
	res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
	res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);
	var message = new Message();
	message.name = req.params.name;
	message.comment = req.params.comment;
	message.date = new Date();

	message.save(function(arr, data){
		res.send(data);
	});
}

server.get('/message', getMessage);
server.post('/message', postMessage);

server.listen(8080, function() {
	console.log('%s listening at %s', server.name, server.url);
});
[/javascript]
8080:/message にPOSTリクエストでname,commentを送信するとmongoDBに保存します。
8080：/message　にGETリクエストを送信すると、保存されているすべてのデータをJSONで返します。

とりあえずテストしてみます。

&nbsp;
<strong>・サーバー起動</strong>
[shell]
$ node webapi.js
[/shell]


&nbsp;
<strong>・書き込みテスト</strong>
POSTリクエストを送信して、メッセージを書き込みます。成功すると書き込んだ内容がjsonで帰ってきます。失敗するとエラーメッセージがjsonで帰ってきます。
[shell]
curl -d &quot;name=test&amp;comment=Hello World!&quot; http://＜ホスト名＞:8080/message/
[/shell]

&nbsp;
<strong>・読み込みテスト</strong>
GETリクエストを送信して、書き込んだ内容がちゃんと帰ってくるか確認します。
[shell]
curl -is http://localhost:8080/message/
[/shell]


&nbsp;
<strong>・mongoシェルで確認</strong>
ちゃんと書き込まれているか、一応mondo側でも確認。
[shell]
$ monogo
&gt; show dbs
local   (empty)
test    0.203125GB
webapi  0.203125GB
&gt; use webapi
switched to db webapi
&gt; show collections
messages
&gt;db.messages.find()
{ &quot;date&quot; : ISODate(&quot;2012-07-21T03:49:31.807Z&quot;), &quot;comment&quot; : &quot;hello World!&quot;, &quot;name&quot; : &quot;test&quot;, &quot;_id&quot; : ObjectId(&quot;500a26cbfd23dcb93c000029&quot;) }
[/shell]

&nbsp;
ひとまず、これでゲストブック用のWeb APIができました。


&nbsp;
&nbsp;


<strong>・ゲストブックページを作成</strong>
jQueryとjQuery.Modelプラグインを使って作成します。
[javascript title="guestbook.html"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;Gest Book&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://v3.javascriptmvc.com/jquery/dist/jquery.model.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
window.onload = function(){

	$.Model('Message',{
	  findAll: 'GET http://＜ホスト名＞:8080/message/',
	  create:  'POST http://＜ホスト名＞:8080/message/',
	},{});
	
	var write = function(msg){
		return	$('&lt;p&gt;').model(msg)
					.html(&quot;&lt;b&gt;&quot;+msg.name+&quot;&lt;/b&gt; &quot;+msg.comment)
					.prependTo('#message_list');
	}
	
	Message.findAll([],function(msgs){
		$.each(msgs, function(i,msg){
				write(msg);
		});
	})

	Message.bind('created', function( ev, msg) {
		write(msg);
	})
		
	$(&quot;#send&quot;).click(function(){
		var message = new Message({
			name: $(&quot;#name&quot;).val(),
			comment:$(&quot;#comment&quot;).val()
		});
		message.save();
	});
}
&lt;/script&gt;


&lt;/head&gt;
&lt;body&gt;
nama:
&lt;input type=&quot;text&quot; id=&quot;name&quot;&gt;&lt;/input&gt;
comment:
&lt;input type=&quot;text&quot; id=&quot;comment&quot;&gt;&lt;/input&gt;
&lt;input type=&quot;button&quot; id=&quot;send&quot; value=&quot;送信&quot;&gt;&lt;/input&gt;
&lt;hr&gt;
&lt;div id=&quot;message_list&quot;&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
[/javascript]

&nbsp;
&nbsp;


<strong>・ブラウザで確認</strong>
guestbook.htmlにアクセスして、ちゃんと書き込みができればできあがりです。
↓こんな感じ
&nbsp;
<a href="http://shimz.me/blog/wp-content/uploads/2012/07/WS000014.jpg"><img class="alignnone size-full wp-image-1179" title="WS000014" src="http://shimz.me/blog/wp-content/uploads/2012/07/WS000014.jpg" alt="" width="511" height="142" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1167</wp:post_id>
		<wp:post_date>2012-07-21 19:33:34</wp:post_date>
		<wp:post_date_gmt>2012-07-21 10:33:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-restify-mongodb%e3%81%a7%e3%81%8a%e6%89%8b%e8%bb%bd-josn-web-api-%e4%bd%9c%e6%88%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[486868768007190]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/486868768007190" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【PHP】 YouTubeのURLを解析してiframeを作成する</title>
		<link>http://shimz.me/blog/php/1253</link>
		<pubDate>Mon, 23 Jul 2012 02:23:32 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1253</guid>
		<description></description>
		<content:encoded><![CDATA[YouTube動画のURLを渡すとiframeタグにして返してくれる関数
<a href="http://blogfreakz.com/tutorial/parse-youtube-urls-with-php/">PARSE YOUTUBE URLS WITH PHP</a>

<a href="http://shimz.me/tmp/php/youtube.php">デモ</a>

[php]
function parseYoutubeURL($link, $width=640, $height=360){
	$final = ' &lt;iframe width=&quot;'.$width.'&quot; height=&quot;'.$height.'&quot; src=&quot;http://www.youtube.com/embed/{code}&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;';
	
	//se o link for o embed (altera o width e height)
	
	if(stristr($link, &quot;iframe&quot;)){
		$link = preg_replace(&quot;/width=(\&quot;)[0-9]+(\&quot;)/&quot;, 'width=&quot;'.$width.'&quot;', $link);
		$link = preg_replace(&quot;/height=(\&quot;)[0-9]+(\&quot;)/&quot;, 'height=&quot;'.$height.'&quot;', $link);
		return $link;
	}

	$parsed = parse_url($link);
	//link URL
	if(stristr($parsed['path'], 'watch') !== false){
		parse_str($parsed['query'], $args);
		$code = $args['v'];
	}//link do embbed
	elseif(stristr($parsed['path'], 'embed') !== false){
		$code = str_replace(&quot;/embed/&quot;, &quot;&quot;, $parsed['path']);
	}//short link	
	elseif($parsed['host'] == 'youtu.be'){
		$code = str_replace(&quot;/&quot;, &quot;&quot;, $parsed['path']);
	}
	
	
	if($code){
		$final = str_replace(&quot;{code}&quot;, $code, $final);
		return $final;
	}else{
		return null;
	}
}
[/php]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date>2012-07-23 11:23:32</wp:post_date>
		<wp:post_date_gmt>2012-07-23 02:23:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90php%e3%80%91-youtube%e3%81%aeurl%e3%82%92%e8%a7%a3%e6%9e%90%e3%81%97%e3%81%a6iframe%e3%82%92%e4%bd%9c%e6%88%90%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_like</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[487578947936172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/487578947936172" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FullCalendar のカスタマイズ</title>
		<link>http://shimz.me/blog/jquery/1265</link>
		<pubDate>Fri, 03 Aug 2012 11:20:21 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1265</guid>
		<description></description>
		<content:encoded><![CDATA[カレンダーを作成するのに便利なjQueryのプラグイン「FullCalendar」を使用する際に行ったカスタマイズのメモ書きです。
<a href="http://arshaw.com/fullcalendar/">FullCalendar </a>
<a href="http://arshaw.com/fullcalendar/"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000000-1024x736.jpg" alt="" title="WS000000" width="1024" height="736" class="alignnone size-large wp-image-1292" /></a>



DEMO
<a href="http://shimz.me/example/fullcalenar/01/before.html">before</a> 
<a href="http://shimz.me/example/fullcalenar/01/">after</a>


使用したのは、fullcalendarのver 1.5.3です。


<strong>ラベルの変更</strong>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000001.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000001-150x104.jpg" alt="" title="WS000001" width="150" height="104" class="alignnone size-thumbnail wp-image-1293" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000002-150x100.jpg" alt="" title="WS000002" width="150" height="100" class="alignnone size-thumbnail wp-image-1294" /></a>
[javascript title="fullcalendar.js before" firstline="64"]
	monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],
	monthNamesShort: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
	dayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	dayNamesShort: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
[/javascript]
[javascript title="fullcalendar.js after" firstline="64"]
	monthNames: ['１月','２月','３月','４月','５月','６月','７月','８月','９月','１０月','１１月','１２月'],
	monthNamesShort: ['１月','２月','３月','４月','５月','６月','７月','８月','９月','１０月','１１月','１２月'],
	dayNames: ['日曜日','月曜日','火曜日','水曜日','木曜日','金曜日','土曜日'],
	dayNamesShort: ['日','月','火','水','木','金','土'],
[/javascript]

&nbsp;

<strong>時刻の表記を変更（Month-view）</strong>

<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000004.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000004.jpg" alt="" title="WS000004" width="128" height="108" class="alignnone size-full wp-image-1295" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000003.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000003.jpg" alt="" title="WS000003" width="129" height="108" class="alignnone size-full wp-image-1296" /></a>
<br>

[javascript title="fullcalendar.js before" firstline="57"]
	timeFormat: { // for event elements
		'': 'h(:mm)t' // default
	},
[/javascript]
[javascript title="fullcalendar.js after" firstline="57"]
	timeFormat: { // for event elements
		'': 'H:mm' // default
	},
[/javascript]

&nbsp;

<strong>時刻の表記を変更（Week-view, Day-view）</strong>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000006.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000006-61x150.jpg" alt="" title="WS000006" width="61" height="150" class="alignnone size-thumbnail wp-image-1298" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000005.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000005-63x150.jpg" alt="" title="WS000005" width="63" height="150" class="alignnone size-thumbnail wp-image-1297" /></a>

[javascript title="fullcalendar.js before" firstline="2809"]
	axisFormat: 'h(:mm)tt',
	timeFormat: {
		agenda: 'h:mm{ - h:mm}'
	},
[/javascript]
[javascript title="fullcalendar.js after" firstline="2809"]
	axisFormat: 'H:mm',
	timeFormat: {
		agenda: 'H:mm{ - H:mm}'
	},
[/javascript]

timeFormatで指定できる書式は、1554行目辺りに記述があるのでそこを参照

[javascript title="fullcalendar.js dateFormatters" firstline="1554"]
var dateFormatters = {
	s	: function(d)	{ return d.getSeconds() },
	ss	: function(d)	{ return zeroPad(d.getSeconds()) },
	m	: function(d)	{ return d.getMinutes() },
	mm	: function(d)	{ return zeroPad(d.getMinutes()) },
	h	: function(d)	{ return d.getHours() % 12 || 12 },
	hh	: function(d)	{ return zeroPad(d.getHours() % 12 || 12) },
	H	: function(d)	{ return d.getHours() },
	HH	: function(d)	{ return zeroPad(d.getHours()) },
	d	: function(d)	{ return d.getDate() },
	dd	: function(d)	{ return zeroPad(d.getDate()) },
	ddd	: function(d,o)	{ return o.dayNamesShort[d.getDay()] },
	dddd: function(d,o)	{ return o.dayNames[d.getDay()] },
	M	: function(d)	{ return d.getMonth() + 1 },
	MM	: function(d)	{ return zeroPad(d.getMonth() + 1) },
	MMM	: function(d,o)	{ return o.monthNamesShort[d.getMonth()] },
	MMMM: function(d,o)	{ return o.monthNames[d.getMonth()] },
	yy	: function(d)	{ return (d.getFullYear()+'').substring(2) },
	yyyy: function(d)	{ return d.getFullYear() },
	t	: function(d)	{ return d.getHours() &lt; 12 ? 'a' : 'p' },
	tt	: function(d)	{ return d.getHours() &lt; 12 ? 'am' : 'pm' },
	T	: function(d)	{ return d.getHours() &lt; 12 ? 'A' : 'P' },
	TT	: function(d)	{ return d.getHours() &lt; 12 ? 'AM' : 'PM' }, 	u	: function(d)	{ return formatDate(d, &quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot;) }, 	S	: function(d)	{ 		var date = d.getDate(); 		if (date &gt; 10 &amp;&amp; date &lt; 20) {
			return 'th';
		}
		return ['st', 'nd', 'rd'][date%10-1] || 'th';
	}
};
[/javascript]

&nbsp;

&nbsp;

<strong>ダブルクリックを取得できるようにする</strong>
[javascript title="fullcalendar.js before" firstline="4350"]
	// attaches eventClick, eventMouseover, eventMouseout
	function eventElementHandlers(event, eventElement) {
		eventElement
			.click(function(ev) {
				if (!eventElement.hasClass('ui-draggable-dragging') &amp;&amp;
					!eventElement.hasClass('ui-resizable-resizing')) {
						return trigger('eventClick', this, event, ev);
					}
			})
			.hover(
				function(ev) {
					trigger('eventMouseover', this, event, ev);
				},
				function(ev) {
					trigger('eventMouseout', this, event, ev);
				}
			);
		// TODO: don't fire eventMouseover/eventMouseout *while* dragging is occuring (on subject element)
		// TODO: same for resizing
	}
[/javascript]

&nbsp;

[javascript title="fullcalendar.js after" firstline="4350" highlight="4359,4360,4361,4362,4363"]
	// attaches eventClick, eventMouseover, eventMouseout
	function eventElementHandlers(event, eventElement) {
		eventElement
			.click(function(ev) {
				if (!eventElement.hasClass('ui-draggable-dragging') &amp;&amp;
					!eventElement.hasClass('ui-resizable-resizing')) {
						return trigger('eventClick', this, event, ev);
					}
			})
			.dblclick(
				function(ev) {
					return trigger('eventDblClick', this, event, ev);
				}
			)
			.hover(
				function(ev) {
					trigger('eventMouseover', this, event, ev);
				},
				function(ev) {
					trigger('eventMouseout', this, event, ev);
				}
			);
		// TODO: don't fire eventMouseover/eventMouseout *while* dragging is occuring (on subject element)
		// TODO: same for resizing
	}
[/javascript]


使い方

[javascript title="index.html eventDblClick"]
$('#calendar').fullCalendar({
    eventDblClick: function(calEvent, jsEvent, view) {

        alert('Event: ' + calEvent.title);
        alert('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);
        alert('View: ' + view.name);

        // change the border color just for fun
        $(this).css('border-color', 'red');

    }
});
[/javascript]
カレンダーのイベントをダブルクリックした際に処理を実行させることができる。

&nbsp;

&nbsp;

<strong>イベントをJSONで読み込む</strong>
全イベントデータを一気に読み込むのであれば、eventsにイベントデータの(json形式)のファイル名を指定すればいいだけ。
（詳しくは、demosの中のjson.htmlを参照)

[javascript title="json.html before" highlight="3"]
		$('#calendar').fullCalendar({
			editable: true,
			events: &quot;json-events.php&quot;,
			eventDrop: function(event, delta) {
				alert(event.title + ' was moved ' + delta + ' days\n' +
					'(should probably update your database)');
			},
			loading: function(bool) {
				if (bool) $('#loading').show();
				else $('#loading').hide();
			}

		});
[/javascript]

でも、上記の方法ではイベントデータが１年分／２年分と増えていくと重くなる。
なのでviewの切り替わり時に必要なイベントデータだけ取得するようにする。

[javascript title="json.html after" highlight="3,4-16,17"]
$('#calendar').fullCalendar({
	editable: true,
	viewDisplay: function(view) {
		$.ajax({
			url: &quot;json-events.php&quot;,
			dataType: 'json',
			type:&quot;post&quot;,
			data: {
				&quot;start&quot;: view.start.toString(),
				&quot;end&quot;: view.end.toString(),
			},
			success: function(EventSource) {
				$('#calendar').fullCalendar('removeEvents');
				$('#calendar').fullCalendar('addEventSource', EventSource);
			}
		});
	},
	eventDrop: function(event, delta) {
		alert(event.title + ' was moved ' + delta + ' days\n' +
			'(should probably update your database)');
	},
	loading: function(bool) {
		if (bool) $('#loading').show();
		else $('#loading').hide();
	}

});
[/javascript]


json-events.phpでは、受け取ったstart,endの値をつかって必要なデータだけをjsonで出力するようにしておく。

<a href="http://www.google.co.jp/cse?cx=partner-pub-4060928622734418:1316967808&ie=UTF-8&q=FullCalendar&ref=www.facebook.com/#gsc.tab=0&gsc.q=FullCalendar">その他のFllCalendarの記事</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1265</wp:post_id>
		<wp:post_date>2012-08-03 20:20:21</wp:post_date>
		<wp:post_date_gmt>2012-08-03 11:20:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fullcalendar-%e3%81%ae%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%9e%e3%82%a4%e3%82%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1292]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[492447617449305]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/492447617449305" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>画像の無断転載対策をできるだけがんばってみた。</title>
		<link>http://shimz.me/blog/javascript/1315</link>
		<pubDate>Thu, 09 Aug 2012 04:29:18 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1315</guid>
		<description></description>
		<content:encoded><![CDATA[【参考】
<a href="http://shimz.me/blog/?p=1538">著作権法について誤解していたこと</a>
<hr>




<a href="http://togetter.com/t/%E7%84%A1%E6%96%AD%E8%BB%A2%E8%BC%89">togetterで最近話題に</a>なっていたので。JavaScriptでどこまで無断転載対策が行えるか実験してみました。
(無断転載対策というか、画像のダウンロード対策ですが)

デモ。
<script type="text/javascript" src="http://jsdo.it/blogparts/beSt/js?width=465&height=496&view=play"></script>



やったこと。

保護したいimgをcanvasに転写して「ImageData object」に変換。
そのデータをjsonファイルとして保存しページ表示時に読み込んで「dummy」イメージの「ImageData object」と差し替えています。
これでキャッシュにはdummyイメージの画像しか残らないし、Developer Tools の「Resources」で見てもdummy画像のデータしか見えません。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000007.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000007-1024x319.jpg" alt="" title="WS000007" width="1024" height="319" class="alignnone size-large wp-image-1320" /></a>
表示されるのはimgではなくcanvasなので、右クリック「名前を付けて画像を保存」もできません。

・shift & Ctrl & Alt　キー禁止
気休め程度のスクリーンキャプチャソフト対策
一応window.clipboardDatが利用できるブラウザではPrtScnキーの対策も
（ホント気休め）



<strong>問題点</strong>

画像データをjsonに変換しているので、画像サイズが大きいと読み込みに半端なく時間がかかる。

ぶっちゃけ、メンドウ。

結局、完全に防ぐことはできない orz







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1315</wp:post_id>
		<wp:post_date>2012-08-09 13:29:18</wp:post_date>
		<wp:post_date_gmt>2012-08-09 04:29:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%94%bb%e5%83%8f%e3%81%ae%e7%84%a1%e6%96%ad%e8%bb%a2%e8%bc%89%e5%af%be%e7%ad%96%e3%82%92%e3%81%a7%e3%81%8d%e3%82%8b%e3%81%a0%e3%81%91%e3%81%8c%e3%82%93%e3%81%b0%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1324]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[494767727217294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/494767727217294" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptで最短経路探索</title>
		<link>http://shimz.me/blog/javascript/1339</link>
		<pubDate>Sun, 12 Aug 2012 05:08:01 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1339</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2012/08/120812-0001.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/120812-0001.png" alt="" title="120812-0001" width="360" height="377" class="alignnone size-full wp-image-1340" /></a>



経路探索アルゴリズムを勉強中。

解説できるほど、まだ理解が及んでいないのでソースだけ載せています。

最短経路探索（テキスト）
<script type="text/javascript" src="http://jsdo.it/blogparts/zXIe/js?width=465&height=496&view=play"></script>

最短経路探索（enchant.js)
<script type="text/javascript" src="http://jsdo.it/blogparts/zdPG/js?width=465&height=496&view=play"></script>

参考

<a href="http://ja.wikipedia.org/wiki/%E3%83%80%E3%82%A4%E3%82%AF%E3%82%B9%E3%83%88%E3%83%A9%E6%B3%95">ダイクストラ法</a>
<a href="http://ja.wikipedia.org/wiki/A*">A*</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1339</wp:post_id>
		<wp:post_date>2012-08-12 14:08:01</wp:post_date>
		<wp:post_date_gmt>2012-08-12 05:08:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%a7%e6%9c%80%e7%9f%ad%e7%b5%8c%e8%b7%af%e6%8e%a2%e7%b4%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="enchant-js"><![CDATA[enchant.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1340]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[495929367101130]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/495929367101130" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RPGを作るのに便利なアルゴリズムを提供する「rot.js」</title>
		<link>http://shimz.me/blog/javascript/1343</link>
		<pubDate>Thu, 16 Aug 2012 02:08:28 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1343</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ondras.github.com/rot.js/hp/"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000018.jpg" alt="" title="WS000018" width="1261" height="796" class="alignnone size-full wp-image-1358" /></a>

<a href="http://ondras.github.com/rot.js/hp/">rot.js: ROguelike Toolkit in JavaScript</a>

「rot.js」はローグライクゲームを作成するのに便利なライブラリです。
"ローグライクゲーム"とは、ダンジョンが自動作成されるタイプのRPG(トルネコの不思議なダンジョン、風来のシレン等）のことですが、rot.jsによって提供される機能は、通常のRPGやシュミレーションゲームなどを作るのにも便利そうです。



■　マップ自動作成
さまざまなタイプのマップを自動で作成することができます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000010.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000010.jpg" alt="" title="WS000010" width="197" height="153" class="alignnone size-full wp-image-1344" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000011.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000011.jpg" alt="" title="WS000011" width="198" height="152" class="alignnone size-full wp-image-1345" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000015.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000015.jpg" alt="" title="WS000015" width="201" height="153" class="alignnone size-full wp-image-1347" /></a>
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000013.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000013-300x120.jpg" alt="" title="WS000013" width="300" height="120" class="alignnone size-medium wp-image-1346" /></a>

HEXタイプのマップも作成できます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000014.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000014-300x259.jpg" alt="" title="WS000014" width="300" height="259" class="alignnone size-medium wp-image-1350" /></a>

■　最短距離探索
２点間で、障害物をよけながら最短の経路を検出します。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000017.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000017.jpg" alt="" title="WS000017" width="753" height="483" class="alignnone size-full wp-image-1354" /></a>


■　FOV
プレイキャラクターの現在位置から見えるエリア(視界)を検出します。
<a href="http://shimz.me/blog/wp-content/uploads/2012/08/WS000016.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/08/WS000016.jpg" alt="" title="WS000016" width="482" height="363" class="alignnone size-full wp-image-1356" /></a>

その他、ターンを管理する機能などがあります。

サンプル
rot.js + enchant.js
<script type="text/javascript" src="http://jsdo.it/blogparts/wuzh/js?width=465&height=496&view=play"></script>
クリックするとマップが生成されます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1343</wp:post_id>
		<wp:post_date>2012-08-16 11:08:28</wp:post_date>
		<wp:post_date_gmt>2012-08-16 02:08:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rpg%e3%82%92%e4%bd%9c%e3%82%8b%e3%81%ae%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%aa%e3%82%a2%e3%83%ab%e3%82%b4%e3%83%aa%e3%82%ba%e3%83%a0%e3%82%92%e6%8f%90%e4%be%9b%e3%81%99%e3%82%8b%e3%80%8crot-js%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="enchant-js"><![CDATA[enchant.js]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[497472390280161]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1358]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/497472390280161" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>コーラに含まれる発がん性物質「4-MI」</title>
		<link>http://shimz.me/blog/other/1368</link>
		<pubDate>Thu, 23 Aug 2012 11:49:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1368</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.mynewsjapan.com/reports/1681">キリンメッツコーラは発がん物質入り　「発ガンコーラ」はトクホにふさわしくない</a>

上記記事を読んで「メッツ飲んじゃったよ！」と、なんかすごい心配になっている人をTLで見かけましたが、そんなに心配はしなくてもよさそうです。


発がん性物質といっても色々あって、国際がん研究機関 (IARC) による発がん性リスクでは以下のようなグループ分けがなされています。
<ul>
	<li>グループ1：作因（Agent)は、ヒトに対して発癌性である（ヒトでの十分な証拠）</li>
	<li>グループ2A：作因は、ヒトに対して恐らく（probably）発癌性である（ヒトでの限られた証拠，実験動物での十分な証拠）</li>
	<li>グループ2B：作因は、ヒトに対して発癌性であるかも（possibly）知れない（ヒトでの限られた証拠，実験動物での十分より少ない証拠）</li>
	<li>グループ3：作因は、ヒトに対する発癌性については分類できない（ヒトでの不適切な証拠，実験動物での限られた証拠）</li>
	<li>グループ4：作因は、ヒトに対して恐らく（probably）発癌性でない（ヒトと実験動物での発癌性の欠如を示唆する証拠）</li>
	<li>個々の物質・事例については『<a href="http://ja.wikipedia.org/wiki/IARC%E7%99%BA%E3%81%8C%E3%82%93%E6%80%A7%E3%83%AA%E3%82%B9%E3%82%AF%E4%B8%80%E8%A6%A7">IARC発がん性リスク一覧</a>』を参照のこと。</li>
</ul>
キリンメッツコーラに含まれている"4-MI"は、元記事によるとグループ2B「作因は、ヒトに対して発癌性であるかも（possibly）知れない」というグループに含まれる発がん性物質ですね。

同じグループ2Bに所属するものとしては、以下のものがあります。
<ul>
	<li>コーヒー（膀胱癌になる可能性があるらしい）</li>
	<li>蕨（ワラビ）</li>
	<li>アジア式野菜の漬物</li>
</ul>
メッシコーラに含まれる「4-MI」の発がん性リスクはコーヒーや漬物なんかと同じぐらいということです。
<a href="http://headlines.yahoo.co.jp/hl?a=20120822-00000073-it_nlab-inet">「特保コーラ」に発がん性？ → 1日16リットル以上飲まなければ問題なし</a>

元記事では「カリフォルニア州では基準値以上で警告表示義務付けが必要なのに日本では……」と嘆いていられるようですが、カリフォルニアは極端に健康志向なところがあるので……あそこの基準はあんまりあてにしない方がいいです。
警告表示義務付けについては下記記事のような批判も多いですし。

<a href="http://www.foodsafetynews.com/2012/03/cola-carcinogen-debate-bubbles-over/">Cola Carcinogen Debate Bubbles Over</a>

「4-MI」の発がん性への懸念は、ラット（ねずみ）を使った研究でしか関連性がみとめられていないのですが『ねずみに使った量を人間に適応するなら、コーラを一日で1000缶以上飲まないとならない』とアメリカ食品医薬品局(FDA)のスポークスマンである Doug Karaさんが批判しています。

毒物学者のJames Coughlin博士は、 4-MIによってもたらされるリスクは政府予想よりさらに低くて、「がんの原因となる線量に相当するものを達成するためには、女性なら毎日37000缶（12オンス）、男性なら毎日95000缶を飲まなければならないでしょう」と言っています。

トクホ商品として相応しいかはわかりませんが、ちょっと神経質すぎるかな？　と思います。

■ 余談
ちなみに、一番発癌性リスクが高い（発癌性と認められる）「グループ1」の中には、以下のようなものが要因としてあげられています。
<ul>
	<li>太陽光曝露(紫外線）</li>
	<li>タバコ</li>
	<li>アルコール飲料</li>
</ul>
メッシコーラに含まれる発がん性物質を気にするより、夏場の紫外線対策なんかをしっかりやってお酒やたばこを控えめにする方がよっぽど健康に良いです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1368</wp:post_id>
		<wp:post_date>2012-08-23 20:49:10</wp:post_date>
		<wp:post_date_gmt>2012-08-23 11:49:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b3%e3%83%bc%e3%83%a9%e3%81%a0%e3%81%91%e3%81%98%e3%82%83%e3%81%aa%e3%81%84%ef%bc%81%e3%80%80%e8%ba%ab%e8%bf%91%e3%81%aa%e7%99%ba%e3%81%8c%e3%82%93%e6%80%a7%e7%89%a9%e8%b3%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[500585006635566]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/500585006635566" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[DataTables] sAjaxSourceで読み込んだデータの値を加工したい。</title>
		<link>http://shimz.me/blog/jquery/1408</link>
		<pubDate>Thu, 30 Aug 2012 09:29:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1408</guid>
		<description></description>
		<content:encoded><![CDATA[テーブルにソート機能や、フィルタリング機能を付けたいときに、とても便利なjQueryプラグイン「<a href="http://datatables.net/index">DataTables</a>」に関するメモ。

sAjaxSourceで読み込んだデータを加工してテーブルに表示する方法。
例：テーブルの１桁(１カラム）目の値をリンクにする

[javascript highlight="7,8-11,12"]
$('#example').dataTable( {
	&quot;bProcessing&quot;: true,
	&quot;bServerSide&quot;: true,
	&quot;sDom&quot;: &quot;&lt;'row'&lt;'span2'l&gt;&lt;'span10'f&gt;r&gt;t&lt;'row'&lt;'span6'i&gt;&lt;'span6'p&gt;&gt;&quot;,
	&quot;sPaginationType&quot;: &quot;full_numbers&quot;,
	&quot;sAjaxSource&quot;:&quot;http://shimz.me/api/fakedata/datatables.php&quot;,
	&quot;fnServerData&quot;: function ( sSource, aoData, fnCallback ) {
		$.getJSON( sSource, aoData, function (json) {
			$(json.aaData).each(function(){ this[0] = '&lt;a href=&quot;#&quot;&gt;'+this[0]+'&lt;/a&gt;'}); //1桁(１カラム）目の要素をリンクに
			fnCallback(json);
		} );
	},
	&quot;oSearch&quot;:{ &quot;sSearch&quot;: &quot;&quot;, &quot;bRegex&quot;: false, &quot;bSmart&quot;: true },
}); 
[/javascript]

fnServerDataオプションを指定することで、読み込んだjsonデータをテーブルに表示する前にリンクタグを付加するなどの加工を行うことができる。
<a href="http://shimz.me/example/datatables/01/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1408</wp:post_id>
		<wp:post_date>2012-08-30 18:29:49</wp:post_date>
		<wp:post_date_gmt>2012-08-30 09:29:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3-datatables-sajaxsource%e3%81%a7%e8%aa%ad%e3%81%bf%e8%be%bc%e3%82%93%e3%81%a0%e3%83%87%e3%83%bc%e3%82%bf%e3%81%ae%e5%80%a4%e3%82%92%e5%8a%a0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datatables"><![CDATA[DataTables]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[503781139649286]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/503781139649286" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[DataTables] テキストボックスを敷き詰めたテーブルで、フォーカスのあたっているセルの位置を取得したい。</title>
		<link>http://shimz.me/blog/jquery/1424</link>
		<pubDate>Fri, 31 Aug 2012 12:14:55 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1424</guid>
		<description></description>
		<content:encoded><![CDATA[昨日に引き続き、テーブルにソート機能や、フィルタリング機能を付けたいときに、とても便利なプラグイン「<a href="http://datatables.net/index">DataTables</a>」に関するメモ。

&lt;td&gt;に&lt;input type="text"&gt;を敷き詰めるってことをやったりすると、フォーカスのあたっているセルがテーブルの何行目/何桁目にあるのか、その位置を知りたいって時があります。

DataTablesには位置を取得するためのメソッド(fnGetPosition)が提供されているので、簡単にセルの位置を取得することができます。
例えば、フォーカスが当たっているセルが何行目にあるかを取得したい場合は以下。
[javascript]
myTable =   $('#example').dataTable( {
			//初期設定
        } );
        

//フォーカスのあたっている行(td)を取得
var currentTR = $('td &gt; input:focus', myTable).parent().parent();
 
//親TRの位置を取得
console.log(myTable.fnGetPosition(currentTR.get(0)));
[/javascript]

行数だけでなく、セルの桁数まで求めたいときはparent()を一個削ればOK
[javascript]
var currentTD = $('td &gt; input:focus', myTable).parent();
console.log(myTable.fnGetPosition(currentTD.get(0)));
[/javascript]

<a href="http://shimz.me/example/datatables/03/">example</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1424</wp:post_id>
		<wp:post_date>2012-08-31 21:14:55</wp:post_date>
		<wp:post_date_gmt>2012-08-31 12:14:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3-datatables-%e3%83%86%e3%82%ad%e3%82%b9%e3%83%88%e3%83%9c%e3%83%83%e3%82%af%e3%82%b9%e3%82%92%e6%95%b7%e3%81%8d%e8%a9%b0%e3%82%81%e3%81%9f%e3%83%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="datatables"><![CDATA[DataTables]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[504269479600452]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/504269479600452" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> Javascript 2Dゲームエンジンまとめ</title>
		<link>http://shimz.me/blog/game_engine/1438</link>
		<pubDate>Wed, 05 Sep 2012 16:18:22 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1438</guid>
		<description></description>
		<content:encoded><![CDATA[最近、やたら増えた気がするJavaScriptのゲームエンジン（ライブラリ）
個人的に注目しているライブラリについてまとめてみました。

<div id="13997387cc085f3d6645fa8e0"></div><div class="naverMatomeBPFoot01" data-na="NA:bottom"><a href="http://matome.naver.jp/odai/2134682461157875201" target="_blank" data-na="NL:undertitle">Javascript 2Dゲームエンジンまとめ</a> <a href="http://matome.naver.jp" target="_blank" data-na="NL:matome">[NAVER まとめ]</a></div><script type="text/javascript" charset="UTF-8" src="http://matome.naver.jp/pasteScript?id=2134682461157875201&p=13997387cc085f3d6645fa8e0&color=01"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1438</wp:post_id>
		<wp:post_date>2012-09-06 01:18:22</wp:post_date>
		<wp:post_date_gmt>2012-09-05 16:18:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-2d%e3%82%b2%e3%83%bc%e3%83%a0%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%b3%e3%81%be%e3%81%a8%e3%82%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game_engine"><![CDATA[game engine]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[506733116020755]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/506733116020755" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>フロントエンドのテストを自動化する「Fake」が便利。</title>
		<link>http://shimz.me/blog/other/1443</link>
		<pubDate>Fri, 14 Sep 2012 03:38:34 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1443</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/09/fluidium_logo_icon.png" alt="" title="fluidium_logo_icon" width="325" height="149" class="alignnone size-full wp-image-1451" style="display:none" />
<a href="http://fakeapp.com/">Fake</a>

<iframe src="http://player.vimeo.com/video/14697494" width="500" height="313" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/14697494">Fake - Mac OS X Web Automation</a> from <a href="http://vimeo.com/user4200540">Fake</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

Fakeは、内蔵したブラウザ(webkit)に対して、マウス・キーボードの操作やフォームへの値の入力などの一連の動作を設定し、自動化することができます。
具体的には、Action(リンクをクリックする、入力フォームへ値を入力するなど)と呼ばれるパネルるを並べてWorkflowを作れば、あとはワンクリックでWorkflowを実行することができます。作ったWorkflowは、別のWorkflow内で呼び出して使うなど、再利用も可能です。
<iframe src="http://player.vimeo.com/video/13102404" width="500" height="313" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/13102404">Fake Workflows in Action</a> from <a href="http://vimeo.com/user4200540">Fake</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

if Action　パネルを使うと条件を指定してWorkflow内で動作を分岐させたりすることもできます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/repeat_with.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/repeat_with.png" alt="" title="repeat_with" width="256" height="313" class="alignnone size-full wp-image-1444" /></a>

<strong>■ Fakeの便利なところ</strong>
あまり、他のブラウジング自動化ソフトを使ったことがないので「それ他のアプリでもできるよ！」って事があるかもしれませんが、とりあえず自分が思うFakeの便利なところを挙げてみます。

１．JavaScriptが使える
if action の条件などにJavaScriptを使用することができます。これによって、「ちゃんと必要なHTML要素がdocumentに追加されているか？」などの条件を指定してworkfrowを分岐させることができます。（ちなみに if action で使用できる条件にはJavaScript以外にpage title(正規表現可)やHTTP statuscode などを使う使うことができます）
その他、書き込んだjavascriptを実行する Do Javascript というactionがあったり、Repeatでは取得したHTML要素の数だけActionを繰り返し実行したりなど、FakeのActionとJavaScriptと組み合わせることで、さまざまな操作を自動化することができます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/mega.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/mega.png" alt="" title="mega" width="279" height="257" class="alignnone size-full wp-image-1446" /></a>

２．UserScriptやUserStyleが使える
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/userscripts.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/userscripts.png" alt="" title="userscripts" width="264" height="124" class="alignnone size-full wp-image-1445" /></a>
<a href="http://www.m-bsys.com/code/userscript-memo">UserScript</a>の中で、jQueryなど好きなライブラリを読み込めば、Actionと組み合わせてworkfrow内で利用できるので便利です。

３．Web Inspector が使える
Fakeに内蔵されているブラウザにはWeb Inspectorが搭載されているので、ブレークポイントを設定しながらとか、変数をwatchしながらWorkfrowを実行するなんてこともできます。


■ Fakeで出来ないこと
・見た目（レイアウトの崩れ）などのテスト
・webkit以外のブラウザでの動作テスト(userAgentの偽装なんかはできます）
・サイトに埋め込まれたFlashの操作

■ インストール
App Storeからインストールできます（有料）
<a href="http://itunes.apple.com/jp/app/fake/id402356565?mt=12"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/201101281939285e5-150x150.jpg" alt="" title="201101281939285e5" width="150" height="150" class="alignnone size-thumbnail wp-image-1448" /></a>

<a href="http://fakeapp.com/">公式サイト</a>ではFree Trial版がダウンロードできますが、一部機能制限がある(UserScriptが使えない）のと、作ったWorkflowを保存することができません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1443</wp:post_id>
		<wp:post_date>2012-09-14 12:38:34</wp:post_date>
		<wp:post_date_gmt>2012-09-14 03:38:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%95%e3%83%ad%e3%83%b3%e3%83%88%e3%82%a8%e3%83%b3%e3%83%89%e3%81%ae%e3%83%86%e3%82%b9%e3%83%88%e3%82%92%e8%87%aa%e5%8b%95%e5%8c%96%e3%81%99%e3%82%8b%e3%80%8cfake%e3%80%8d%e3%81%8c%e4%be%bf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1451]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[510544905639576]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/510544905639576" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar] イベント（予定）の修正と削除</title>
		<link>http://shimz.me/blog/jquery/1460</link>
		<pubDate>Mon, 24 Sep 2012 07:44:02 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1460</guid>
		<description></description>
		<content:encoded><![CDATA[なんだかんだで仕事が忙しいので…手抜き更新。

FullCalendarで登録した予定（下記画像を参照）を、修正・削除する方法が公式のDemoに無かった気がするのでTipsとして載せておきます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/09/WS000020.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/WS000020.jpg" alt="" title="WS000020" width="161" height="109" class="alignnone size-full wp-image-1461" /></a>

[javascript]
var calendar = $('#calendar').fullCalendar({
	eventDblClick:function(event, jsEvent){
			var title = prompt('予定を入力してください:', event.title);
			if(title &amp;&amp; title!=&quot;&quot;){
				event.title = title;
				calendar.fullCalendar('updateEvent', event); //イベント（予定）の修正
			}else{
				calendar.fullCalendar(&quot;removeEvents&quot;, event.id); //イベント（予定）の削除				
			}
	}
});
[/javascript]
これだけ。簡単ですね。
尚、上記ではイベント（予定）のダブルクリックイベントのコールバックとして設定しています。
ダブルクリックの取得は独自に追加したものなので、下記記事の「ダブルクリックを取得できるようにする」を参照してください。

<a href="http://shimz.me/blog/?p=1265">FullCalendar のカスタマイズ</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1460</wp:post_id>
		<wp:post_date>2012-09-24 16:44:02</wp:post_date>
		<wp:post_date_gmt>2012-09-24 07:44:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fullcalendar-%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%ef%bc%88%e4%ba%88%e5%ae%9a%ef%bc%89%e3%81%ae%e4%bf%ae%e6%ad%a3%e3%81%a8%e5%89%8a%e9%99%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1461]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[514954425198624]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/514954425198624" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar] 祝日イベントのリンクを削除</title>
		<link>http://shimz.me/blog/jquery/1466</link>
		<pubDate>Tue, 25 Sep 2012 07:40:03 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1466</guid>
		<description></description>
		<content:encoded><![CDATA[「日本の祝日」をGoogleから取り込んだ場合、祝日のイベントに自動的にGoogleカレンダーへのリンクが張られてしまいます。

参照
<a href="http://d.hatena.ne.jp/okinaka/20110416/1302942541">FullCalendar で日本の祝日を表示する</a>


<a href="http://shimz.me/blog/wp-content/uploads/2012/09/WS000006.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/09/WS000006.jpg" alt="" title="WS000006" width="154" height="143" class="alignnone size-full wp-image-1467" /></a>

↑表示した祝日イベントをクリックすると、Googleカレンダーに飛んでしまう。

これは、ちょっとウザいので祝日イベントに張られたリンクを削除します。

■リンクの削除
[javascript]
var calendar = $('#calendar').fullCalendar({
	events: {
		url: 'http://www.google.com/calendar/feeds/ja.japanese%23holiday%40group.v.calendar.google.com/public/full/',
		color: 'red'
		success:function(events){
			$(events).each(function(){
					this.url = null;
			});		
		},
	}
});
[/javascript]

events内で、$.ajaxのsuccess時のコールバックを指定できるので、その中で読み込んだ祝日イベントのurlプロパティをnullで上書きします。
これで、リンクが削除されます。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1466</wp:post_id>
		<wp:post_date>2012-09-25 16:40:03</wp:post_date>
		<wp:post_date_gmt>2012-09-25 07:40:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fullcalendar-%e7%a5%9d%e6%97%a5%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e3%81%ae%e3%80%81%e3%83%aa%e3%83%b3%e3%82%af%e3%82%92%e5%89%8a%e9%99%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1467]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[515382798489120]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/515382798489120" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&#039;input type=file&#039;から&#039;canvas&#039;への転写（画像の引き伸ばし対処）</title>
		<link>http://shimz.me/blog/javascript/1483</link>
		<pubDate>Wed, 26 Sep 2012 11:26:01 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1483</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/09/WS000007.jpg" alt="" title="WS000007" width="758" height="731" class="alignnone size-full wp-image-1484" />

'input type=file'から'canvas'に転写する際、画像のサイズがcanvasのサイズより大きいとcanvasのサイズでトリミングされて表示されてしまいます。
なので、画像のサイズに合わせてcanvasのサイズを変更したいのですが、何故か画像を読み込んでから動的にcanvasのサイズを変更するとトリミングされた画像が引き伸ばされて表示されてしまいます。

canvasのサイズを変更するタイミングをいろいろ試してみましたが、うまくいかなかったので、結局'img'オブジェクトの読込後に画像サイズに合わせたcanvasを生成することで対応しました。

↓サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/5KO3/js?width=465&height=496&view=play"></script>

[javascript]
$(&quot;#uploadFile&quot;).change(function() {

	var file = this.files[0];
	if (!file.type.match(/^image\/(png|jpeg|gif)$/)) return;

	var image = new Image();
	var reader = new FileReader();

	reader.onload = function(evt) {
		image.onload = function() {
            
			//canvas1のサイズを画像サイズに合わせて変更（引き伸ばされる）
			$(&quot;#canvas1&quot;).width(image.width);
			$(&quot;#canvas1&quot;).height(image.height);
            var canvas1 = $(&quot;#canvas1&quot;);
			var ctx1 = canvas1[0].getContext(&quot;2d&quot;);		
			ctx1.drawImage(image, 0, 0); //canvas1に画像を転写
			
			
			//canvas2を画像サイズに合わせて追加（引き伸ばされない）
			var obj = $(&quot;&lt;canvas/&gt;&quot;).attr(&quot;id&quot;,&quot;canvas2&quot;).attr(&quot;width&quot;, image.width).attr(&quot;height&quot;, image.height);
			$(&quot;#new_canvas&quot;).append(obj);
			var canvas2 = $(&quot;#canvas2&quot;);
			var ctx2 = canvas2[0].getContext(&quot;2d&quot;);        
			ctx2.drawImage(image, 0, 0); //canvas2に画像を転写
		}


		image.src = evt.target.result;
	}
	reader.readAsDataURL(file);
});

[/javascript]

画像をdrawImageする前にcanvasのリサイズを行っても、画像が拡大（引き伸ばし）されて表示されてしまうのは何故なんでしょう？


■追記
[javascript]
	$(&quot;#canvas1&quot;).width(image.width);
	$(&quot;#canvas1&quot;).height(image.height);
[/javascript]
↓変更
[javascript]
	$(&quot;#canvas1&quot;).attr(&quot;width&quot;,image.width);   //←これだったらおｋだった。　orz
	$(&quot;#canvas1&quot;).attr(&quot;height&quot;,image.height);
[/javascript]

jQueryのwidth(height)メソッドではなく、attrでwidth(height)属性を変更すれば、うまくいきました orz

width(height)メソッドでは駄目な理由は不明。

（cssでの変更と属性値での変更で動作が変わるのかな？）



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1483</wp:post_id>
		<wp:post_date>2012-09-26 20:26:01</wp:post_date>
		<wp:post_date_gmt>2012-09-26 11:26:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>input-typefile%e3%81%8b%e3%82%89canvas%e3%81%b8%e3%81%ae%e8%bb%a2%e5%86%99%ef%bc%88%e7%94%bb%e5%83%8f%e3%81%8c%e5%bc%95%e3%81%8d%e4%bc%b8%e3%81%b0%e3%81%95%e3%82%8c%e3%82%8b%e7%8f%be%e8%b1%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1484]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[515872078440192]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/515872078440192" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jQueryを使ってテーブルのセルをクリックしたときに編集できるようにする（Edit in Place）</title>
		<link>http://shimz.me/blog/jquery/1505</link>
		<pubDate>Wed, 17 Oct 2012 13:43:42 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1505</guid>
		<description></description>
		<content:encoded><![CDATA[画面遷移を行わずに、その場でDOM要素を編集できる機能を「inplace editor」とか言うらしいです。
プラグインを使う方が簡単なのですが、作りたいものに合わせてカスタマイズするのが思うようにいかなかったので、自分で書いてみました。

[html title="html"]
&lt;table id=&quot;edit-table&quot;&gt;
    &lt;tr&gt;
    &lt;th&gt;要素１&lt;/th&gt;
    &lt;th&gt;要素２&lt;/th&gt;
    &lt;th&gt;要素３&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;&lt;td&gt;hoge&lt;/td&gt;&lt;td&gt;hoge&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;&lt;td&gt;hello&lt;/td&gt;&lt;td&gt;world&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
[/html]
[javascript title="JavaScript"]
(function(documet){
    
    $(document).ready(function(){
    	 $(&quot;#edit-table &gt; tbody &gt; tr &gt; td&quot;).click(edit_togle());
    });


    function edit_togle(){
        var edit_flag=false;
        return function(){
            if(edit_flag) return;
            var $input = $(&quot;&lt;input&gt;&quot;).attr(&quot;type&quot;,&quot;text&quot;).val($(this).text());
            $(this).html($input); 
            
            $(&quot;input&quot;, this).focus().blur(function(){
                save(this);
                $(this).after($(this).val()).unbind().remove();
                edit_flag = false;
            });
            edit_flag = true;
        }
    }    
    
    function save(elm){
        alert(&quot;「&quot;+$(elm).val()+&quot;」を保存しました&quot;); //保存する処理をここに書く
    }
})(document);

[/javascript]

pタグやhタグなど、table以外の要素にも編集機能を付けられます。

サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/k6LX/js?width=465&height=496&view=play"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1505</wp:post_id>
		<wp:post_date>2012-10-17 22:43:42</wp:post_date>
		<wp:post_date_gmt>2012-10-17 13:43:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%83%86%e3%83%bc%e3%83%96%e3%83%ab%e3%81%ae%e3%82%bb%e3%83%ab%e3%82%92%e3%82%af%e3%83%aa%e3%83%83%e3%82%af%e3%81%97%e3%81%9f%e3%81%a8%e3%81%8d%e3%81%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1513]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[525555210805212]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/525555210805212" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>理解していない記者が書く記事の怖さ</title>
		<link>http://shimz.me/blog/other/1516</link>
		<pubDate>Fri, 19 Oct 2012 05:29:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1516</guid>
		<description></description>
		<content:encoded><![CDATA[世間を賑わせているウィルスの解析結果について、日本ネットワークセキュリティ協会（JNSA）が17日に行った、報道関係者向けの緊急説明会に関するimpressの記事。


<blockquote>西本氏は捜査当局に対して、デジタル上のプロファイリングをすることで犯人を絞り込んでいく方法があるのではないかと提案する。

　今回の事件では、実際にIEsys.exeという犯人手製のプログラムがある。例えば、プログラムのくせや、それぞれの会社流のコーディング方法、文言の使い方、あるいは掲示板上での行動などから犯人像を絞り込める可能性があると説明。こうした手法に対してはIT業界も貢献できると訴えた。

　なお、西本氏は推測・憶測の域を出ないとしながらも、IEsys.exeの作成者について、プログラマーとしてこなれており、細かいプログラムを開発する経験を重ねてきた人物とみている。プログラムにテキストエディターが組み込まれていた点に着目。かつてプログラマーが“練習問題”としてテキストエディターをよく開発していたような年代だとみて、年齢は40歳以上ではないかという。西本氏によれば、今の若い世代のプログラマーは、コンポーネントを組み合わせることで簡単にプログラムを開発できる環境にあるため、一からプログラムを作るようなイメージではないという。

<a href="http://internet.watch.impress.co.jp/docs/news/20121018_566933.html">“遠隔操作ウイルス”事件、専門家らは実行ファイルの扱いでギャップ痛感？</a></blockquote>


<br>

時事通信の記事では以下のようになる。



<blockquote>解析した情報セキュリティー会社「ラック」（東京都千代田区）の西本逸郎専務理事によると、ウイルスは「ＶｉｓｕａｌＳｔｕｄｉｏ２０１０」というソフト開発ツールを使って作成されていた。数万円から数十万円以上する専門的なソフトで、素人が購入することは考えにくいという。

<a href="http://www.jiji.com/jc/zc?k=201210/2012101800773">プロの開発者が作成か＝高価な専門ツール使用－証拠隠滅の痕跡も、ＰＣ遠隔操作</a></blockquote>
<br>
両方とも情報セキュリティー会社「ラック」の西本氏の見解を元にして書かれた記事ではあるのだけれど、後者は記者が西本氏から聞いた話の中から自分がかろうじて理解できた所だけ、かいつまんで記事にしたように思える。

しかし、残念なことにTwitterでは後者の記事の方がより多くツイートされ、結果、セキュリティー会社への批判が多数行われてる。

<a href="http://togetter.com/li/392225?page=1">ラックが時事報道で風評被害ｗ（デマ拡散中）</a>

怖い話だなぁ。

【追記】
コメント出てた。

https://twitter.com/dry2/status/259286127285002240
https://twitter.com/dry2/status/259287261215088640
https://twitter.com/dry2/status/259286549995339776
https://twitter.com/dry2/status/259287455612674048
https://twitter.com/dry2/status/259287971348496384

<a href="http://togetter.com/li/392732">時事通信の記事に関するラック西本逸郎氏のコメント</a>

……苦労が偲ばれる]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1516</wp:post_id>
		<wp:post_date>2012-10-19 14:29:09</wp:post_date>
		<wp:post_date_gmt>2012-10-19 05:29:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%90%86%e8%a7%a3%e3%81%97%e3%81%a6%e3%81%84%e3%81%aa%e3%81%84%e8%a8%98%e8%80%85%e3%81%8c%e6%9b%b8%e3%81%8f%e8%a8%98%e4%ba%8b%e3%81%ae%e6%80%96%e3%81%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[526347520725981]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/526347520725981" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d35138b65a817e57e85cd9bcad863527</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>検体はVisual Studio 2012で開発。有償版で開発か無償版かは検体からは判別不可。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286127285002240" data-datetime="2012-10-19T13:33:24+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8d1147ca976757875f21495640bd3ae0</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、誰がそんなもの買うの？世の中には、ソフト開発をするという真っ当な仕事があって、Windowsで動くソフトを作るにはこういう開発環境を使用することも多いのですよ。申し訳ないけど、プログラムを開発するということは、ウイルスを開発するということとは全く違うのです。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287261215088640" data-datetime="2012-10-19T13:37:55+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a7037f3d5c710447f515def25ef9707e</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>振り出しに戻る。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287971348496384" data-datetime="2012-10-19T13:40:44+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_847b0ecd883af801bddb52929d0f03b8</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>その有償版のソフトを買う人ってどんな人なんでしょうか？</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287455612674048" data-datetime="2012-10-19T13:38:41+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_730b0f064a5009158c642ef3bc215b46</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、有償版って幾らぐらいするの？数千円~数万円。場合によっては１０万位するものもある。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286549995339776" data-datetime="2012-10-19T13:35:05+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_06123404dc7019942b7878c1b5432d23</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>検体はVisual Studio 2012で開発。有償版で開発か無償版かは検体からは判別不可。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286127285002240" data-datetime="2012-10-19T13:33:24+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c47c89f2071e1c80a72f6d0e63ace29d</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、誰がそんなもの買うの？世の中には、ソフト開発をするという真っ当な仕事があって、Windowsで動くソフトを作るにはこういう開発環境を使用することも多いのですよ。申し訳ないけど、プログラムを開発するということは、ウイルスを開発するということとは全く違うのです。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287261215088640" data-datetime="2012-10-19T13:37:55+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_34991bc496b27f92db726d8fde2aaf66</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>で、有償版って幾らぐらいするの？数千円~数万円。場合によっては１０万位するものもある。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259286549995339776" data-datetime="2012-10-19T13:35:05+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_58ab3e8b53ad3241007be480c8b88fbd</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>その有償版のソフトを買う人ってどんな人なんでしょうか？</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287455612674048" data-datetime="2012-10-19T13:38:41+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_42f7dd849d03da0ac3a6990ab16d7a2e</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" width="500" lang="ja"><p>振り出しに戻る。</p>&mdash; 西本逸郎NISHIMOTO Itsuroさん (@dry2) <a href="https://twitter.com/dry2/status/259287971348496384" data-datetime="2012-10-19T13:40:44+00:00">10月 19, 2012</a></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>著作権法について誤解していたこと</title>
		<link>http://shimz.me/blog/copyright/1538</link>
		<pubDate>Thu, 08 Nov 2012 02:31:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1538</guid>
		<description></description>
		<content:encoded><![CDATA[最近、「<a href="http://tyosaku.hanrei.jp/">著作権判例データベース</a>」で過去の判例を読み漁っているので、個人的に気づいたことをメモ。

専門家とかではないので、あんまりあてにしないでください。
（判例、すごく読み辛いので。読み間違えてるかもしれないし）

<h1>著作権法の解釈には幅がある</h1>
著作権法自体、インターネットとかなかった時代に作られた古い法律なので、人によってホント解釈の幅が大きい。っていうか、そろそろ限界なんじゃないかなこの法律。

<h1>ネット上の著作権に関する情報はあくまで見解</h1>
よくある「○○をしたら違法」とか「○○はＯＫ」などと著作権に関する記事があるけれど、これらはあくまでその記事を書いた人の著作権法に対する解釈でしかない。
情報を発信しているのがのが弁護士であろうがJASRACであろうが、それは単なるその人（組織）の見解でしかないので、実際の裁判で記事にかかれたような判決がでるとは限らない。
(まぁ、これは著作権法に限った話ではないけれど）


<h1>グレーゾーンなんてない</h1>
当たり前だけれども裁判になれば黒か白か、確かな結果がでるわけなので、グレーゾーンなんてものはない。
それは単に「まだ、訴えられていない」状態でしかない。
逆に訴えられてなければ、どんなに危うくても白（今のところは）。


<h1>わりとひっくり返る</h1>
著作権法の裁判では、一審で有罪と判断されたものが二審で無罪になったり、その逆があったりってことが結構あるみたい。それだけ、裁判官によって著作権法の解釈が違うってことなんだろう。

<h1>著名人や大企業の作品の方が有利っぽい</h1>
「パクった、パクられた」みたいな話だとオリジナルの作品の知名度なんかも考慮されるらしいので、基本、著名人や大企業の側に有利に働く傾向があるみたい。


<h1>トレスについて</h1>
ネットではよくあがる話題ではあるんだけれど、いくつか面白い判例があったのでメモ

<a href="http://tyosaku.hanrei.jp/precedent/View.do?type=cr&id=5863">平成 17年 (ワ) 26020号 損害賠償請求事件 </a>
「豆腐のパッケージに勝手に絵を使われた」と原告が訴えたのだけれど、その絵は江戸時代の浮世絵を模写したものだったというケース。結論から言うと敗訴。
模写作品の創作性に関する裁判所の見解が興味深い

<blockquote>『模写作品と原画との間に差異が認められたとしても、その差異が模写制作者による新たな創作的表現とは認められず、なお原画と模写作品との間に表現上の実質的同一性が存在し、<b>原画から感得される創作的表現のみが模写作品から覚知されるにすぎない場合</b>には、模写作品は、原画の複製物にすぎず、著作物性を有しないというべきである。
（中略）
<b>著作権法は、著作者による思想又は感情の創作的表現を保護することを目的としている</b>のであるから、模写作品において、なお原画における創作的表現のみが再現されているにすぎない場合には、当該模写作品については、原画とは別個の著作物としてこれを著作権法上保護すべき理由はない。』</blockquote>


こっちは模写作品の創作性が認められたケース。
<a href="http://etc.hanrei.jp/precedent/View.do?type=etc&id=9254">平成 21年 (ワ) 31755号 損害賠償請求事件 </a>
<blockquote>被告の主張
『本件入れ墨は、本件仏像写真の単なる機械的な模写又は単なる模倣にすぎず、著作物性を認めることはできない。本件下絵は 、写真の上にトレーシングペーパーを重ね、上から鉛筆又はシャープペンシルで描線をトレースして作成したものにすぎない。写真が存在するのにわざわざ手書きで描写する彫物師はいない。 必要な不手間をかけ、依頼者に負担をかけることになるからである。このようなトレースは極めて機械的なものであり、こには下絵作成者の創作性は存在しない。』

原告の主張
『原告は、本件仏像写真を参考にしたものの、仏像の向きを変え、かつ、表情を被告Ｙの希望に沿って優しいものとした点において、下絵における創作性がある。』


裁判所の判断
『原告は、本件入れ墨の制作に当たり、①下絵の作成に際して構図の取り方や仏像の表情等に創意工夫を凝らしたこと、②入れ墨を施すに際しては、輪郭線の筋彫りや描線の墨入れ、ぼかしの墨入れ等に際しても様々の道具を使用し、技法を凝らしたこと、<b>これにより本件入れ墨と本件仏像写真との間には表現上の相違があり、そこには原告の思想、感情が創作的に表現されていると評価することができる</b>ことは上記説示のとおりであり、本件入れ墨が本件仏像写真の単なる機械的な模写又は単なる模倣にすぎないということはできず、被告らの上記主張は採用することができない。』</blockquote>

ちなみにこの後、被告側が判決を不服として控訴している。
内容的には同じ。

<a href="http://tyosaku.hanrei.jp/precedent/View.do?type=cr&id=9490">平成 23年 (ネ) 10052号 損害賠償請求控訴事件 </a>
<blockquote>被告の主張
『十一面観音立像の写真の上にトレーシングペーパーを重ねて、上から鉛筆で描線をトレースして、下絵を作成した。このような製作過程を考慮すると、本件入れ墨は、創作的な表現とはいえず、著作物性はない。』

裁判所の判断
『<b>被告らは、製作過程等を指摘し、本件仏像写真の仏像と本件入れ墨の間には、図柄全体の輪郭が共通することから、本件入れ墨は著作物性がない旨を主張する。</b>しかし、前記のとおり、本件入れ墨は、<b>墨の濃淡等によって、表情の特徴や立体感を表すための工夫がされている点等を総合すると、思想、感情の創作的な表現がされていると評価することができる。</b>したがって、この点の被告らの主張は採用できない。』</blockquote>

トレス絡みで有名な「八坂神社祇園祭ポスター事件」でも争点は、模写作品の創作性だった。
<a href="http://tyosaku.hanrei.jp/precedent/View.do?type=cr&id=7598">平成 19年 (ワ) 1126号 損害賠償請求事件</a> 

<blockquote>『著作権法は、同法2条1項1号の規定するとおり、思想又は感情の創作的な表現を保護するものであるから、既存の著作物に依拠して創作された著作物が、思想、感情若しくはアイデア、事実若しくは事件など表現それ自体でない部分又は<b>表現上の創作性がない部分において、既存の著作物と同一性を有するにすぎない場合には、翻案には当たらない</b>と解するのが相当である
（中略）
本件水彩画に接する者は、その創作的表現から<b>本件写真の表現上の本質的な特徴を直接感得することができると認められる</b>から、本件水彩画は、本件写真を翻案したものというべきである。』</blockquote>

この事件については下記のブログで詳しく解説されている。
参考）<a href="http://hougakunikki.air-nifty.com/hougakunikki/2011/12/post-54f6.html">料理マンガにおける写真トレースと著作権法</a>


ネットでよくある「トレス疑惑検証」や「トレパク検証」は、"トレスという行為を行ったかどうか"という製作方法の検証でしかないので、実際の裁判ではあまり意味がない。むしろ検証すべきは、模写作品に創作性が有るか無いかという点。

模写作品に創作性が認められる場合は、著作権よりも「表現の自由」が優先されるっぽい。


あとよく「トレスと模写を一緒にすんな」という話があるけれど描き手の心情としてはそうなんだろうけど、著作権侵害の裁判ではその二つにあまり違いは無い。重要なのはやっぱり作品の創作性。

<h1>総括</h1>
とりあえず……読みづらい。ものによっては、どっからが被告の主張で、どこまでが原告の主張で、どこからが裁判所の判断なのかがすご～くわかり辛かったりするので、もうちょっと分かりやすく書いてほしい。
濁点多すぎなきもするし、あと変な空白が文章にまじっているのはなんなんだろう？

著作権法については過渡期なんだろうなって感じ。「違法ダウンロードの刑事罰化」がすんなり通ったことを考えると、「著作権法の非親告罪化」とかもあり得るのかも。アメリカでもSOPA（オンライン海賊行為防止法案）を通そうとがんばっている人たちもいるみたいだし。

全体的には厳罰化に向かっているようなので、過去の判例はあてにならなくなってくるかも。

あと、ネット絡みの著作権侵害については判例が少なすぎるので、みんなもっとちゃんと訴えた方がいいと思った。

<h3>その他「著作権」関連の記事</h3>
<a href="http://shimz.me/blog/?p=1315">画像の無断転載対策をできるだけがんばってみた。</a>
<a href="http://shimz.me/blog/?p=1031">日本レコード協会が音楽ファンに望むネット上での正しい音楽の使い方</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1538</wp:post_id>
		<wp:post_date>2012-11-08 11:31:10</wp:post_date>
		<wp:post_date_gmt>2012-11-08 02:31:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%91%97%e4%bd%9c%e6%a8%a9%e6%b3%95%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%e8%aa%a4%e8%a7%a3%e3%81%97%e3%81%a6%e3%81%84%e3%81%9f%e3%81%93%e3%81%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1538' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1538, http://shimz.me/blog/?p=1538.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>タブレット端末にキーボードを付けて使う意味</title>
		<link>http://shimz.me/blog/programming/1542</link>
		<pubDate>Wed, 24 Oct 2012 12:52:47 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1542</guid>
		<description></description>
		<content:encoded><![CDATA[【参考】
<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>
<a href="http://shimz.me/blog/?p=1812">Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</a>
<hr>
<a href="http://www.amazon.co.jp/gp/product/B008DM3UXQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B008DM3UXQ&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B008DM3UXQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=B008DM3UXQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

iPadと外付けキーボードを付けて持ち歩いています。

で、これを言うと「外付けキーボードと一緒に持ち歩くなら、ノートPCでいいんじゃない？」と良く言われるんですが、タブレット＋外付けキーボードにはノートPCに無い利点が有ります。

一言で言うと「キーボードが簡単に買い替えられる」

壊れたら家電量販店ですぐ代わりのキーボードを購入できる。

自分の使い方が悪いのかもしれませんが、ノートPCを使っていて一番故障が多いのがキーボードだったりします。

特定のキーが押せなくなったり、効かなくなったり……

メインで使っているMacBook Airも既に「英数」キーが効かなくなり、しかたがないので「かな」キーをトグルにして入力モードの変更を行っていたりします。

でも、最近「スペース」キーや「▼」キーの効きが怪しくなってきてます orz

修理にだすにも、なかなか時間がとれなくて困ったりするんですよね。

かといってノートPCで外付けのキーボードを使うと場所とるし。

ぶっちゃけ、キーボードの無いMacBookをAppleが出してくれないかな？　なんて思ったりするんですがｗ

まぁ、見込みうすなので、iPad + 外付けのキーボードが今の所マストな選択になってます。



今後、タブレットタイプのwindows8端末が出てくる事に、密かに期待してます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1542</wp:post_id>
		<wp:post_date>2012-10-24 21:52:47</wp:post_date>
		<wp:post_date_gmt>2012-10-24 12:52:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%bf%e3%83%96%e3%83%ac%e3%83%83%e3%83%88%e7%ab%af%e6%9c%ab%e3%81%ab%e5%a4%96%e4%bb%98%e3%81%91%e3%82%ad%e3%83%bc%e3%83%9c%e3%83%bc%e3%83%89%e3%82%92%e4%bb%98%e3%81%91%e3%81%a6%e4%bd%bf%e3%81%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[528783883815678]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:102:"Posted to <a href="http://www.facebook.com/528783883815678" target="_blank">your Facebook Timeline</a>";s:5:"error";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1609]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadでプログラミング＆デバッグ（Web系）</title>
		<link>http://shimz.me/blog/editor/1561</link>
		<pubDate>Mon, 05 Nov 2012 06:19:28 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1561</guid>
		<description></description>
		<content:encoded><![CDATA[メインで使用していたMacBook Air のキーボードがご臨終なされたので、すっかりHulu Viewerと化していたiPadを本格的にプログラミングに使用してみることにしました。
ある程度使える感じになってきたのでメモ。

（ただし、ぶっちゃけ無理やりです）


<h1>■アクセサリ</h1>
<b>キーボード</b>
<a href="http://www.amazon.co.jp/gp/product/B008DM3UXQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B008DM3UXQ&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B008DM3UXQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=B008DM3UXQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
やはりオンスクリーンキーボードでコーディングを行うのは大変なので外付けキーボードがあると良いですね。私は「ロジクール ウルトラスリム キーボードカバー」を使用しています。
親指入力でコーディングすることに抵抗がないのであれば、外付けキーボードが無くてもオンスクリーンキーボードを分割して使用すると捗るかもしれません。


<a href="http://arigato-ipod.com/2012/07/ipad-split-keyboard.html">iPadのソフトウェアキーボードを分割して、手に持ったままでも文字入力をしやすくする</a>



<h1>■サーバー</h1>
iPadではローカルに仮想環境を作って作業するといったことができません。
コーディングはすべてサーバー上で直接ファイルを編集するといったことになります。
そこでサーバーを用意する必要があるのですが、個人的に「さくらクラウド」をお勧めします。
理由は単純で、クラウドの管理管理がiPadに対応しているからです。
本番環境のサーバーをコピー（アーカイブ化）してテスト環境を作るなどができるのでローカルにサーバー環境を構築できないiPadでもわりと便利に使えます。
まぁ、お金かかりますけど。まさに、富豪的プログラミング。

<b>さくらクラウド</b>
<a href="http://cloud.sakura.ad.jp/">http://cloud.sakura.ad.jp/</a>

<br>



<h1>■コーディング</h1>
<img src="http://shimz.me/blog/wp-content/uploads/2012/10/dc-smaller-e1351651350969.png" alt="" title="dc-smaller" width="135" height="135" class="alignnone size-full wp-image-1567" />
<iframe width="420" height="315" src="http://www.youtube.com/embed/IhX4c7lCcuE" frameborder="0" allowfullscreen></iframe>

<b>Diet Coda</b>
<a href="http://panic.com/jp/dietcoda/">http://panic.com/jp/dietcoda/</a>
Macで人気のWEB開発環境CODAのiPad版です。
このアプリ１つで、エディタ・FTP・コンソール、と必要な機能全てをまかなえるすぐれもの。
iPadには他にも<a href="http://www.textasticapp.com/">Textasitc</a>など優れたエディタがたくさんあるので、自分に合ったエディタを探してみるのもおすすめです。

Textasticには、ローカルに保存したファイルを内部ブラウザでプレビューする機能があるので、HTML+CSS+JavaScriptでのプログラミングであれば、ネットに繋がっていない状況でもコーディングが可能です。
参考
<a href="http://pochixpochi.blogspot.jp/2012/03/new-ipadenchantjs.html">NEW IPADでENCHANT.JS快適プログラミング！</a>

<h1>■デバッグ</h1>
iPadでコーディングをする際に一番問題になるのがデバッグです。特にフロントエンドのデバッグは困難です。
WebInspector等の開発ツールを使わずにJavascriptを書くのは苦行に等しいのですが、なんとか工夫してデバッグしやすい環境を作ってみます。


<b>window.onerrorの補足</b>
[html]
&lt;script&gt;window.onerror = function(errorMsg, url, lineNumber){alert(url+&quot; [&quot;+lineNumber+&quot;]  &quot;+errorMsg);}&lt;/script&gt;
[/html]
ブラウザの開発ツールを使用できないモバイル環境において<a href="http://martinkool.com/post/13629963755/firebug-on-ipad-and-iphone">Firebug Lite</a>はもっとも頼りになるデバッグツールなのですが、残念なことに検出されないエラーなどがあります。見落としをなくすため、window.onerrorにアラートを仕込んでエラーを補足します。
<a href="http://shimz.me/example/debug/index.html">デモ</a>

<b>ブックマークレット</b>
ブラウザの開発ツールを利用できないので、それを補うブックマークレットをMobile Safariに登録しておきましょう。
ブックマークレットの登録の方法は<a href="http://www.appbank.net/2011/08/06/iphone-news/284648.php">こちら</a>を。
<br>
<a href="http://stevesouders.com/mobileperf/mobileperfbkm.php">Mobile Pref</a>
Firebug Lite を含むデバッグツールの詰め合わせ。
<textarea>javascript:(function(){var%20jselem=document.createElement('SCRIPT');jselem.type='text/javascript';jselem.src='http://stevesouders.com/mobileperf/mobileperfbkm.js';document.getElementsByTagName('body')[0].appendChild(jselem);})();</textarea>

<a href="http://www.sprymedia.co.uk/article/Visual+Event+2">visual event</a>
DOM要素に設置されたJavascriptイベントを可視化。このブックマークレットはiPad以外でも非常に便利です。
<textarea>javascript:(function()%20{var%20url%20=%20'http://www.sprymedia.co.uk/VisualEvent/VisualEvent_Loader.js';if(%20typeof%20VisualEvent!='undefined'%20)%20{if%20(%20VisualEvent.instance%20!==%20null%20)%20{VisualEvent.close();}else%20{new%20VisualEvent();}}else%20{var%20n=document.createElement('script');n.setAttribute('language','JavaScript');n.setAttribute('src',url+'?rand='+new%20Date().getTime());document.body.appendChild(n);}})();</textarea>

<a href="http://www.westciv.com/xray/">XRAY</a>
タップ（クリック）したDOM要素の情報を表示
<textarea>javascript:function%20loadScript(scriptURL)%20{%20var%20scriptElem%20=%20document.createElement('SCRIPT');%20scriptElem.setAttribute('language',%20'JavaScript');%20scriptElem.setAttribute('src',%20scriptURL);%20document.body.appendChild(scriptElem);}loadScript('http://westciv.com/xray/thexray.js');</textarea>

ブックマークレット等を利用することで、一番の難関であったデバッグも多少なんとかなりそうです。
iPadでレッツ、プログラミング！


【関連】
<a href="http://shimz.me/blog/editor/1812">Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</a>
<a href="http://shimz.me/blog/iphoneipad/2730">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1561</wp:post_id>
		<wp:post_date>2012-11-05 15:19:28</wp:post_date>
		<wp:post_date_gmt>2012-11-05 06:19:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipad%e3%81%a7%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%ef%bc%86%e3%83%87%e3%83%90%e3%83%83%e3%82%b0%ef%bc%88web%e7%b3%bb%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1561' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1561, http://shimz.me/blog/?p=1561.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1635]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Googleスプレッドシートに入力したデータを可視化する</title>
		<link>http://shimz.me/blog/d3-js/1599</link>
		<pubDate>Fri, 02 Nov 2012 01:57:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1599</guid>
		<description></description>
		<content:encoded><![CDATA[Google Visualization APIには、Googleスプレッドシートを簡易DBとして外部から呼び出して使うことのできる機能が備わってます。

<a href="https://developers.google.com/chart/interactive/docs/reference?hl=ja">Google Visualization API Reference</a>

参考
<a href="http://webos-goodies.jp/archives/51311993.html">Google Visualization API 詳細、および Gadgets-in-Docs の作り方</a>

このAPIを使えば、GoogleスプレッドシートのデータをD3.jsで可視化するのも非常に簡単に行えます。

サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/zemk/js"></script>



以下はスプレッドシートからデータを読み出している部分
[javascript]
google.load(&quot;visualization&quot;, &quot;1&quot;);
google.setOnLoadCallback(init);

function init() {
	var query = new google.visualization.Query(&quot;https://docs.google.com/spreadsheet/ccc?key=0ArOQLX5U1kUqdFYxUzcwTDB0UUVnZHBKRnRzbUc3aGc&quot;);
	query.setQuery(&quot;select *  where B &gt; 3000000  &quot;); //SQLに似た構文でフィルタをかけることができる。
	query.send(handleQueryResponse);
}

function handleQueryResponse(response) {
	// データ取得
	var data = response.getDataTable();
	
	//DataTableオブジェクトを二次元に変換
	var DataArray = new Array(data.getNumberOfRows());
	for (var row = 0; row &lt; data.getNumberOfRows(); row++) {
		 DataArray[row] = new Array(data.getNumberOfColumns());
		for (var col = 0, n = data.getNumberOfColumns(); col &lt; n; col++) {
			if(col &gt; 0){
				DataArray[row][col] = Math.floor(data.getFormattedValue(row, col) / 10000); //万人単位に変換
			}else{
				DataArray[row][col] = data.getFormattedValue(row, col);
			}
		}    
	}
	
	//変換した配列をD3.jsに渡す
	rendering(DataArray);
}
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1599</wp:post_id>
		<wp:post_date>2012-11-02 10:57:49</wp:post_date>
		<wp:post_date_gmt>2012-11-02 01:57:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google%e3%82%b9%e3%83%97%e3%83%ac%e3%83%83%e3%83%89%e3%82%b7%e3%83%bc%e3%83%88%e3%81%ab%e5%85%a5%e5%8a%9b%e3%81%97%e3%81%9f%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92d3-js%e3%81%a7%e5%8f%af%e8%a6%96%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1599' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1599, http://shimz.me/blog/?p=1599.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1605]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日本のインターネットが残念なのは、上の人たちがなにもしなかったから</title>
		<link>http://shimz.me/blog/other/1639</link>
		<pubDate>Tue, 06 Nov 2012 12:43:48 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1639</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://news.mynavi.jp/c_cobs/news/am/2012/11/post-182.html">宮台真司インタビュー「自分はイケてるぞアピールからは腐臭がただよう…“見るに耐えない”コミュニケーション 」</a>




<blockquote>三年前にアメリカの大学で連続講演をしたとき、日本の2ちゃんねるに似たサイトがあるものの全然広がらない理由を尋ねると、「逆にアメリカ人の我々から見ると、なんで2ちゃんねるにああいう書き込みができるのかわからない」と問い返されました。

「アメリカだと、匿名性に守られて居丈高に誹謗中傷すると、友達がいないか、頭が悪いか、性格がチキンか、どれかだというふうに思われるので、とてもじゃないが2ちゃんねるのような書き込みはできない」と言われました。
本質的なコメントだと思いませんか。</blockquote>




日本のエスタブリッシュメントが「ネット怖い」とか「日本のネットはくだらない」とかいって何もしてこなかったんだからしょうがないと思います。

アメリカで政治家がインターネットを活用し始めたのって1992年の事ですよ。

その頃から「現実での自分の影響力を拡大するツールとしてインターネットは重要だ」と整備を行ってきた国と比べて「なんでこんなにアウエーなんだ」と嘆かれても。

例えば、アメリカの「ハッカー文化」は当初匿名性を伴うものでしたが、FBIやらCIAがはねっかりの高校生ハッカーなんかを血祭りに上げまくったりした結果、シリコンバレーあたりの頭のいい人たちは「ハッカーとクラッカーは違う」とか調子のいい事いって、ちゃっかり"上"のグループに滑り込んですっかり息を潜めてしまいました。
（ここら辺の顛末は「サイバースペースの決闘」などに詳しくかかれているのですが、当時のハッカー達のハンドルネームが良い感じに厨二心をくすぐるのでそういうのが好きな人にはお勧めですｗ）
<a href="http://www.amazon.co.jp/gp/product/4047912379/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4047912379&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4047912379&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4047912379" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />


そうやって地道に地ならしをして、ネット民的な文化を片隅に追いやり（或は取り込み）ながら"普通"の人たちを呼び込んで、現実とネット上の文化や価値観の擦り合わせをしていくなかで、ネットと現実は同等の価値をもつ空間になっていったわけです。

だからこそリスクをおかしてでも実名で情報を発信する人もでてくるわけで、アメリカでだって誰も彼もが実名で発言してるわけじゃありません。

メリットがあるから実名を使う人も多数いるというだけです。


かたや日本では、上の人たちがネットを軽んじて放置してたら「ひろゆき」なる法の脆弱性を付くのがめっぽう巧い人が現れて、あれよあれよというまに「２ちゃんねる文化圏」なるものが日本のネット上での最大派閥になってしまったわけですが、そこでさらにネガティブキャンペーンなんぞで"普通"の人たちをネットから遠ざけたりしたものだから、現実の文化とネット上の文化の乖離がどんどん大きくなっていきました。


そういう文化のなかでは匿名でいる方が、もっとも快適でもっとも賢い選択であるってことになってしまったわけです。

でも、そんな文化だからこそ生まれたものもあるんですけどね。

「自分たちの怠慢で自分たちがネット上のメインストリームになる機会を逃した」というだけのことなんだと思いますが、それが"上"の人には残念に映るって話なんでしょう。

【備考】
あと、日本の場合iモードの存在も大きかったような気がする。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1639</wp:post_id>
		<wp:post_date>2012-11-06 21:43:48</wp:post_date>
		<wp:post_date_gmt>2012-11-06 12:43:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%97%a5%e6%9c%ac%e3%81%ae%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%8d%e3%83%83%e3%83%88%e3%81%8c%e6%ae%8b%e5%bf%b5%e3%81%aa%e3%81%ae%e3%81%af%e3%80%81%e4%b8%8a%e3%81%ae%e4%ba%ba%e3%81%9f%e3%81%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_comments</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_recommendations_bar</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:262:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://shimz.me/blog/?p=1639' of type 'article' is invalid because it specifies multiple 'og:url' values: http://shimz.me/blog/?p=1639, http://shimz.me/blog/?p=1639.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.js 教材まとめ</title>
		<link>http://shimz.me/blog/d3-js/1740</link>
		<pubDate>Thu, 15 Nov 2012 02:57:34 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1740</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsについては以下を。
<a href="http://shimz.me/blog/?p=862">データビジュアライゼーション「d3.js」</a>

<a href="http://enjalot.com/"><strong>Tributary</strong></a>
D3.jsをブラウザ上で記述して実行できる開発環境です。
（jsdo.itみたいなもの）
GitHubのアカウントがあれば、作成したコードをgithub:gistに保存できます。
コード内のカラーコードや数値をクリックした際に、カラーパレットやスライドバーで値を修正できる機能が面白いです。（実用性は……？）
<a href="http://enjalot.com/"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000012-1024x603.jpg" alt="" title="WS000012" width="1024" height="603" class="alignnone size-large wp-image-1743" /></a>

手軽にD3.jsを試すことができるのと、コードの共有ができるので他のユーザーが投稿したコードを弄るところから始めるといいと思います。


<a href="http://phrogz.net/d3-playground"><strong>D3.js Playground</strong></a>
こちらもブラウザ上でD3.jsのコードを実行できるサービスです。
右上のプルダウンメニューからサンプルを選ぶとコードが読み込まれるので、それを色々編集して遊べます。
<a href="http://shimz.me/blog/wp-content/uploads/2012/11/screenshot.png"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/screenshot-300x242.png" alt="" title="screenshot" width="300" height="242" class="alignnone size-medium wp-image-1749" /></a>




D3.jsのグラフレイアウトについては以下の記事に詳しく掲載されています。
<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_20.htm"><strong>svg要素の基本的な使い方まとめ</strong></a>

その他、見つけたものは「NAVERまとめ」の方でまとめてます。
<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>

「NAVERまとめ」って、ブログにまとめを貼り付ける機能が無くなったんですね、知らんかった。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1740</wp:post_id>
		<wp:post_date>2012-11-15 11:57:34</wp:post_date>
		<wp:post_date_gmt>2012-11-15 02:57:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-%e6%95%99%e6%9d%90%e3%81%be%e3%81%a8%e3%82%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1743]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[539025996124800]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【express】ejsを指定しているのに「500 ERROR: CANNOT FIND MODULE &#039;JADE&#039;」言われる</title>
		<link>http://shimz.me/blog/node-js/1754</link>
		<pubDate>Thu, 15 Nov 2012 07:26:51 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1754</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>現象</h1>
[shell]
$ express -t ejs test
[/shell]
上記のようにテンプレートにejsを指定してスケルトンを作成したけれど、実際app.jsを起動してブラウザでアクセスすると「500 ERROR: CANNOT FIND MODULE 'JADE'」（JADEのモジュールがないよ！）と言われる。

<img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000014-300x207.jpg" alt="" title="WS000014" width="300" height="207" class="alignnone size-medium wp-image-1757" />

package.jsonを確認するとjadeモジュールをインストールしようとしている。

ejsどこいった？

<h1>解決</h1>
オプション「-t」とテンプレート名の間に空白が入っちゃいけないらしい。
[shell]
$ express -tejs test
[/shell]
↑これだと、ちゃんとejsがテンプレートとして指定される。
package.jsonの中でもちゃんとejsモジュールが記述されている。




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1754</wp:post_id>
		<wp:post_date>2012-11-15 16:26:51</wp:post_date>
		<wp:post_date_gmt>2012-11-15 07:26:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90express%e3%80%91ejs%e3%82%92%e6%8c%87%e5%ae%9a%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e3%81%ae%e3%81%ab%e3%80%8c500-error-cannot-find-module-jade%e3%80%8d%e8%a8%80%e3%82%8f%e3%82%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[539091512784915]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello worldまでたどりつけない人のためのプログラム独学入門</title>
		<link>http://shimz.me/blog/beginner/1764</link>
		<pubDate>Fri, 16 Nov 2012 14:21:14 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1764</guid>
		<description></description>
		<content:encoded><![CDATA[プログラミング入門の記事では、「Hello World!」を出力するところから始まることが多いのですが、まったくの初心者だと、そこにたどり着く前に越えないといけない壁や注意しないとならない事が、沢山あるので記事にしてみました。

<h1>インストールが簡単な言語を選ぼう</h1>
「今まで、まったくプログラミングをしたことがない」という人がプログラミングを"独学"するのであれば、まずは、とにかくインストールが簡単なプログラム言語を選びましょう。
インストール以外に、あれやこれやと設定しなくてはならないことが多かったりすると、そこでハマってHello Worldまでたどり着けなかったりすることが多々あります。


<h1>まずは、コピペから</h1>
開発環境を整えたら、いきなりコード書き始めるのではなく、サンプルコードをコピペして実行しまししょう。(参考書によっては、公式サイトでサンプルコードをダウンロードできます）
サンプルコードが実行できずエラーが出る場合は、設定を間違っているかバージョンが違っていたりする可能性があります。

<h1>ネットの記事や参考書には間違いもある</h1>
ネットの記事は当然として、参考書などにも残念ながら"誤記"というものがあります。とかく初めのうちは「参考書に間違いがあるはずない！」と思ってハマりやすいので以下の点に気を付けてください。
・なるべく新しい参考書を購入する。
・買ったら必ず公式サイトに正誤表が出てないか確認する。

<h1>バージョンを揃えよう</h1>
参考書等で学ぶ際は、言語のバージョンだけでなく、ライブラリや開発環境などのバージョンも参考書内で使用しているバージョンに合わせましょう。
バージョンが違うと、動かなかったり、記載されている通りの結果がでなかったりすることがあります。

<h1>エラーメッセージを検索しよう</h1>
とにかくエラーメッセージが表示されたら、そのメッセージをコピペしてググりましょう。
ただしエラーメッセージには自分が付けた名前（変数名や関数名など）が含まれている場合があります。
これらの"自分が付けた名前"を含んだまま検索すると正解にたどり着くのが遠のくので、それらを外して検索してください。


<h1>総括</h1>
個人的には、今まで一切「プログラミングを行ったことが無い」という人が"独学"でプログラミングを勉強しようというのであれば、<a href="http://jsdo.it/">jsdo.it</a>のようなコードが共有できて、ブラウザ上で編集してそのまま実行できる開発環境がおすすめです。
とりあえずブラウザさえあればプログラミングを始められますし、"間違いなく動いてるサンプルコード"を多数手に入れることができるのは、初心者にとってとても助けになります。

とにかく初めの頃は、「一字一句間違いなく入力できるか」だけでいっぱいいっぱいになりがちです。そこに「SDKへのPATHが通ってません」のようなエラーが英語で表示されたりすると、それだけで挫折しかねません。

特定の言語をマスターしようとするより、まずは、初期設定や環境構築が簡単な言語から初めて、「プログラミングの独学の仕方」を学ぶのが良いかと思います。


<strong>関連性がありそうな他の記事</strong>
<a href="http://shimz.me/blog/?p=643">新人プログラマーが理想と現実のギャップに打ちのめされる前に読んでおくと良いかもしれない参考書２冊</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1764</wp:post_id>
		<wp:post_date>2012-11-16 23:21:14</wp:post_date>
		<wp:post_date_gmt>2012-11-16 14:21:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world%e3%81%be%e3%81%a7%e3%81%9f%e3%81%a9%e3%82%8a%e3%81%a4%e3%81%91%e3%81%aa%e3%81%84%e4%ba%ba%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%a0%e7%8b%ac%e5%ad%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beginner"><![CDATA[入門]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[541026352591431]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.jsでコマンドライン引数の処理を行うなら「argv」が便利</title>
		<link>http://shimz.me/blog/node-js/1784</link>
		<pubDate>Tue, 20 Nov 2012 05:21:48 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1784</guid>
		<description></description>
		<content:encoded><![CDATA[複雑なオプションが指定された引数なども、とても簡単に取得できるので便利です。

<a href="https://npmjs.org/package/argv">argv</a>

インストールはnpmで
[shell]
$ npm install argv
[/shell] 

argvオブジェクトを作成してrunメソッドを実行すると、引数をオブジェクトとして取得することができます。
[javascript title="引数の取得"]
var argv = require('argv');
console.log(argv.run());
[/javascript]
[shell title="実行結果"]
$ node sample.js test aaa
{ targets: [ 'test', 'aaa' ], options: {} }
[/shell]


オプションが指定された引数を取得したい場合は、optionメソッドで取得するオプションの設定をします。

[javascript title="オプションを取得"]
var argv = require('argv');

argv.option({
	name: 'option',
	short: 'o',
	type : 'string',
	description :'あなたのスクリプトのオプションを定義します',
	example: &quot;'script --option=value' or 'script -o value'&quot;
});
console.log(argv.run());
[/javascript]
[shell title="実行結果"]
$ node sample test -o aaa
{ targets: [ 'test' ], options: { option: 'aaa' } }
[/shell]
ヘルプも自動的に作成されます
[shell]
$ node sample -h
Usage: sample [options]

        --help, -h
                Displays help information about this script
                'sample -h' or 'sample --help'

        --option, -o
                あなたのスクリプトのオプションを定義します
                'script --option=value' or 'script -o value'
[/shell]

オプションの値には型を指定することができます。
[javascript title="型指定"]
var argv = require('argv');

argv.option([
    {
        name: 'option',
        type: 'csv,int'
    },
    {
        name: 'path',
        short: 'p',
        type: 'list,path'
    }
]);

console.log(argv.run());
[/javascript]
[shell title="実行結果"]
$ node sample test --option=123,456.001,789.01
{ targets: [ 'test' ], options: { option: [ 123, 456, 789 ] } }

$ node sample test -p /path/to/file1 -p /path/to/file2
{ targets: [ 'test' ], options: { path: [ '/path/to/file1', '/path/to/file2' ] } }
[/shell]


独自の型を作成することができます。
[javascript title="カスタムタイプ"]
var argv = require('argv');

argv.type( 'squared', function( value ) { //squared型を定義
    value = parseFloat( value );
    return value * value;
});

argv.option({
    name: 'square',
    short: 's',
    type: 'squared'
});
console.log(argv.run());
[/javascript]
上記で作成したsquared型は、--square or -s オプションで指定された引数の2乗された値を返します。
[shell title="実行結果"]
$ node sample test -s 2
{ targets: [ 'test' ], options: { square: 4 } }
[/shell]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1784</wp:post_id>
		<wp:post_date>2012-11-20 14:21:48</wp:post_date>
		<wp:post_date_gmt>2012-11-20 05:21:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js%e3%81%a7%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%83%a9%e3%82%a4%e3%83%b3%e5%bc%95%e6%95%b0%e3%81%ae%e5%87%a6%e7%90%86%e3%82%92%e8%a1%8c%e3%81%86%e3%81%aa%e3%82%89%e3%80%8cargv%e3%80%8d%e3%81%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[541432105884189]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.jsでTCPプロキシ＆ポートフォワーディング</title>
		<link>http://shimz.me/blog/node-js/1797</link>
		<pubDate>Wed, 21 Nov 2012 02:44:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1797</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>node.jsでTCPプロキシ</strong>

[javascript title="tcp_proxy.js"]
var util = require('util');
var net = require(&quot;net&quot;);

process.on(&quot;uncaughtException&quot;, function(e) {
	console.log(e);
});

if (process.argv.length != 5) {
  console.log(&quot;引数が正しく入力されていません:&quot; +　&quot; proxy_port target_host target_port&quot;);
    console.log(&quot;node scriptfile 3000 www.google.com 80&quot;);
  process.exit();
}

var proxyPort = process.argv[2];
var targetHost = process.argv[3];
var targetPort = process.argv[4];

net.createServer(function (proxySocket) {
  var connected = false;
  var buffers = new Array();
  var targetSocket = new net.Socket();
  targetSocket.connect(parseInt(targetPort), targetHost, function() {
    connected = true;
    if (buffers.length &gt; 0) {
      for (i = 0; i &lt; buffers.length; i++) {
        console.log(buffers[i].toString());
        targetSocket.write(buffers[i]);
      }
    }
  });

  proxySocket.on(&quot;error&quot;, function (e) {
    targetSocket.end();
  });
  targetSocket.on(&quot;error&quot;, function (e) {
    console.log(&quot;targethostに接続できません &quot; + targetHost + ', port ' + targetPort);
    proxySocket.end();
  });

  proxySocket.on(&quot;data&quot;, function (data) {
	console.log(&quot;send: &quot;+data.toString()); //送信データ
    if (connected) {
      targetSocket.write(data);
    } else {
      buffers[buffers.length] = data;
    }
  });
  targetSocket.on(&quot;data&quot;, function(data) {
	console.log(&quot;rec: &quot; + data.toString());  //受信データ
    proxySocket.write(data);
  });

  proxySocket.on(&quot;close&quot;, function(had_error) {
    targetSocket.end();
  });
  targetSocket.on(&quot;close&quot;, function(had_error) {
    proxySocket.end();
  });

}).listen(proxyPort)

[/javascript]

使い方）
[shell]
$ node tcp_proxy.js [プロキシポート] [ターゲットホスト] [ターゲットポート]
[/shell]

例）
[shell]
$ node tcp_proxy.js 23 example.com 23
[/shell]


tcp_proxy.jsを実行した端末で、ローカルホストにtelnetクライアントで接続すると、プロキシ経由でexample.comにアクセスします。
smtpとかsshとかいろんなプロトコルで試してみると面白いかも？

&emsp;

<strong>http-proxyモジュールを使ったポートフォワーディング</strong>
モジュールのインストール

[shell]
npm install http-proxy
[/shell]
[javascript title="port_forwarding.js"]
var httpProxy = require('http-proxy');
var options = {
    hostnameOnly:true,
    router: {
        'example.com': '127.0.0.1:8080',
        'hoge.example.com': '127.0.0.1:9090'
    }

}
httpProxy.createServer(options).listen(80);
[/javascript]

実行すると80番ポートでlistenして、example.comにアクセスしてきた通信を8080ポートに、hoge.example.comでアクセスしてきた通信を9090ポートに送信します。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1797</wp:post_id>
		<wp:post_date>2012-11-21 11:44:09</wp:post_date>
		<wp:post_date_gmt>2012-11-21 02:44:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js%e3%81%a7tcp%e3%83%97%e3%83%ad%e3%82%ad%e3%82%b7%ef%bc%86%e3%83%9d%e3%83%bc%e3%83%88%e3%83%95%e3%82%a9%e3%83%af%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[541849332509133]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</title>
		<link>http://shimz.me/blog/editor/1812</link>
		<pubDate>Fri, 23 Nov 2012 09:06:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1812</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2012/11/37e3808047553cedb34daa9b1d7ab2a3.jpg" alt="" title="写真" width="1000" height="788" class="alignnone size-full wp-image-1834" />

<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>に引き続き、プログラミングだけでなくWEBサイトのデザインもiPadで行えたら素晴らしいですよね（？）

HTML Egg は、HTMLやCSSなどの知識がなくても<a href="http://ja.wikipedia.org/wiki/WYSIWYG">WYSIWYG</a>エディタを使って、簡単にWEBサイトのデザインを行うことができるホームページ作成アプリです。

<a href="https://itunes.apple.com/us/app/html-egg-web-page-creator/id446992850?ls=1&mt=8"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/ipad_egg-150x150.png" alt="" title="ipad_egg" width="150" height="150" class="alignnone size-thumbnail wp-image-1814" /></a>
<a href="http://www.htmlegg.com/">Web Page Creator for iOS - HTML Egg</a>


実際の動作については、下記の動画をごらんください。


<iframe width="540" height="380" src="http://www.youtube.com/embed/Jr78vGyU2Fc" frameborder="0" allowfullscreen></iframe>


<h1>特徴</h1>

<strong>直観的な操作</strong>
画像やテキストなどをペタペタ張り付けて行くだけで、WEBサイトを作成することができます。要素の移動やサイズの変更なども指でなぞるだけ。
<iframe width="540" height="310" src="http://www.youtube.com/embed/FWOD8sqUhFc" frameborder="0" allowfullscreen></iframe>


<strong>豊富なテンプレート</strong>
ＰＣサイト向けのみならず、スマートフォンサイト向けのテンプレートも豊富に用意にされています。
<iframe width="540" height="310" src="http://www.youtube.com/embed/4Ef-EH_V9Q8?list=PLA73F06C7E09205FB&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>dropboxと連携</strong>
dropboxとLINKすることでバックアップを保存することができます。リストアも簡単
<iframe width="540" height="310" src="http://www.youtube.com/embed/lJOJUaB9yHY?list=PLF375775E647C14E6&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>出力形式</strong>
作成したWEBファイルは、FTPで直接サーバーアップロードできるほか、PNGイメージやPDFとして出力することもできます。
<iframe width="540" height="310" src="http://www.youtube.com/embed/yx0nM-xWAX0?list=PL0812AC2DABC84F80&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>オプションのアプリが豊富</strong>

<a href="https://itunes.apple.com/jp/app/egg-nation-web-page-templates/id529246615?mt=8"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/0a7038cd8ae284ac1d20f62b07124f84.png" alt="" title="0a7038cd8ae284ac1d20f62b07124f84" width="144" height="144" class="alignnone size-full wp-image-1827" /></a>
<a href="https://itunes.apple.com/jp/app/egg-nation-web-page-templates/id529246615?mt=8">Egg Nation Web Page Templates</a>
HTML EGGユーザーによって作成されたテンプレートのギャラリーアプリです。HTML EGGに取り込んで編集することができます。

<a href="https://itunes.apple.com/jp/app/add-widgets-into-websites/id515742771?mt=8"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/ad023b3a853a3f2c422c3d3931815cee.png" alt="" title="ad023b3a853a3f2c422c3d3931815cee" width="144" height="144" class="alignnone size-full wp-image-1828" /></a>
HTML EGGに<a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88">ウィジェット</a>を追加することができるアプリです。独自のウィジェットを作成することもできます。
<iframe width="540" height="310" src="http://www.youtube.com/embed/S9kkbcg_6b4?list=PL5ABE1E4700F04555&amp;hl=ja_JP" frameborder="0" allowfullscreen></iframe>

<strong>豊富なチュートリアル</strong>
YOUTUBEに専門のチャンネルがあり多数のチュートリアル動画が投稿されています。
<a href="http://www.youtube.com/user/htmlegg">Web Page Creator for iOS - HTML Egg channel</a>

作成したHTMLファイルをアップロードするサーバーが必要になるので、<a href="http://webya.opdsgn.com/webservice/strikingly/">Striking.ly</a>のように気軽にホームページが作れるわけではないですが、なかなかよくできたアプリだと思います。

【関連】
<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>
<a href="http://shimz.me/blog/iphoneipad/2730">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1812</wp:post_id>
		<wp:post_date>2012-11-23 18:06:52</wp:post_date>
		<wp:post_date_gmt>2012-11-23 09:06:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>striking-ly%e3%81%ab%e3%82%82%e8%b2%a0%e3%81%91%e3%81%aa%e3%81%84%ef%bc%9f%ef%bc%81%e3%80%80ipad%e3%81%a7%e3%82%89%e3%81%8f%e3%82%89%e3%81%8f%e3%83%9b%e3%83%bc%e3%83%a0%e3%83%9a%e3%83%bc%e3%82%b8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1834]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[542893379071395]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【node.js】一度に実行する非同期処理の数を制限して、何回かに分けて処理する</title>
		<link>http://shimz.me/blog/node-js/1850</link>
		<pubDate>Tue, 27 Nov 2012 05:08:22 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1850</guid>
		<description></description>
		<content:encoded><![CDATA[
<a href="http://blog.mixu.net/2011/02/02/essential-node-js-patterns-and-snippets/">Essential Node.js patterns and snippets</a>


[javascript title="pile.js"]
exports.Pile = function() {
   this.pile = [];
   this.concurrency = 0;
   this.done = null;
   this.max_concurrency = 10;
}
exports.Pile.prototype = {
  add: function(callback) {
   this.pile.push(callback);
  },
  run: function(done, max_concurrency) {
      this.done = done || this.done;
      this.max_concurrency = max_concurrency || this.max_concurrency;
      var target = this.pile.length;
      var that = this;
      var next = function() {
         that.concurrency--;
         (--target == 0 ? that.done() : that.run());
      };
      while(this.concurrency &lt; this.max_concurrency &amp;&amp; this.pile.length &gt; 0) {
         this.concurrency++;
         var callback = this.pile.shift();
         callback(next);
      }
   }
};
[/javascript]

使用例）
[javascript title="test.js"]
var pile = require(&quot;./pile.js&quot;).Pile;
var pilex = new pile();

var counter = 0;
 
for(var i = 0; i &lt; 50; i++) {
   pilex.add( function test(next) {　　//実行する非同期処理を登録
      setTimeout( function() {
         counter++;
         console.log(counter +&quot; Hello world&quot;);
         next();
      }, 1500);
     }
   );
}
pilex.run(function() {  //登録した処理を実行
	console.log(&quot;Done &quot;+counter);
	}, 5); //一度に実行する非同期処理の制限数
[/javascript]


サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/35dh/js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1850</wp:post_id>
		<wp:post_date>2012-11-27 14:08:22</wp:post_date>
		<wp:post_date_gmt>2012-11-27 05:08:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90node-js%e3%80%91%e4%b8%80%e5%ba%a6%e3%81%ab%e5%ae%9f%e8%a1%8c%e3%81%99%e3%82%8b%e9%9d%9e%e5%90%8c%e6%9c%9f%e5%87%a6%e7%90%86%e3%81%ae%e6%95%b0%e3%82%92%e5%88%b6%e9%99%90%e3%81%97%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[544719642222102]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>中二病版「誕生日のことば」ジェネレーターを闇プログラマーっぽく作ってみた</title>
		<link>http://shimz.me/blog/javascript/1858</link>
		<pubDate>Wed, 28 Nov 2012 05:52:38 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1858</guid>
		<description></description>
		<content:encoded><![CDATA[元ネタはこちら。
<a href="http://twitpic.com/57pvr0">中二病版　「誕生日のことば」</a>


<script type="text/javascript" src="http://jsdo.it/blogparts/kPcK/js?width=465&height=496&view=play"></script>

完全なる悪ふざけ。頑張ればJavaScriptで日本語プログラミングもできるかも？　需要がありそうもないけど。

[javascript]
第壱式真言書 = 魔導書召喚();
施術開始(); 
術式.刻印取得('月印').刻印取得('日印').事象監視();

function 施術開始(){
	術式 = {
    &quot;刻印配列&quot;:[],
        &quot;真言&quot;:null,
    &quot;月因子&quot;:{
        &quot;0&quot;: &quot;&quot;,
        &quot;1&quot;: &quot;殺戮の&quot;,
        &quot;2&quot;: &quot;裏切りの&quot;,
        &quot;3&quot;: &quot;闇の&quot;,
        &quot;4&quot;: &quot;伝説の&quot;,
        &quot;5&quot;: &quot;漆黒の&quot;,
        &quot;6&quot;: &quot;暴虐の&quot;,
        &quot;7&quot;: &quot;鏡の中の&quot;,
        &quot;8&quot;: &quot;機関の&quot;,
        &quot;9&quot;: &quot;封印されし&quot;,
        &quot;10&quot;: &quot;円環の&quot;,
        &quot;11&quot;: &quot;禁じられた&quot;,
        &quot;12&quot;: &quot;血塗られた&quot;
    },
    &quot;日因子&quot;:{
        &quot;0&quot;: &quot;&quot;,
        &quot;1&quot;: &quot;烙印&quot;,
        &quot;2&quot;: &quot;炎&quot;,
        &quot;3&quot;: &quot;理&quot;,
        &quot;4&quot;: &quot;咎人&quot;,
        &quot;5&quot;: &quot;「　」&quot;,
        &quot;6&quot;: &quot;妖精&quot;,
        &quot;7&quot;: &quot;氷結&quot;,
        &quot;8&quot;: &quot;殺人兵器&quot;,
        &quot;9&quot;: &quot;獣&quot;,
        &quot;10&quot;: &quot;叡智&quot;,
        &quot;11&quot;: &quot;世界&quot;,
        &quot;12&quot;: &quot;人間牧場&quot;,
        &quot;13&quot;: &quot;死神&quot;,
        &quot;14&quot;: &quot;雷&quot;,
        &quot;15&quot;: &quot;狂戦士&quot;,
        &quot;16&quot;: &quot;閃光&quot;,
        &quot;17&quot;: &quot;愚者&quot;,
        &quot;18&quot;: &quot;刃&quot;,
        &quot;19&quot;: &quot;悪党&quot;,
        &quot;20&quot;: &quot;大罪&quot;,
        &quot;21&quot;: &quot;悪魔&quot;,
        &quot;22&quot;: &quot;マリオネット&quot;,
        &quot;23&quot;: &quot;水&quot;,
        &quot;24&quot;: &quot;独裁者&quot;,
        &quot;25&quot;: &quot;妖怪&quot;,
        &quot;26&quot;: &quot;遊戯&quot;,
        &quot;27&quot;: &quot;支配者&quot;,
        &quot;28&quot;: &quot;皇帝&quot;,
        &quot;29&quot;: &quot;堕天使&quot;,
        &quot;30&quot;: &quot;審判&quot;,
        &quot;31&quot;: &quot;魔術師&quot;
    },    
    &quot;刻印取得&quot;:function(刻印){
    	術式.刻印配列.装填(第壱式真言書.検索(刻印));
        return this;
    },
    &quot;事象監視&quot;:function(){
        for(var 索引=零; 索引 &lt; 術式.刻印配列.範囲(); 索引++){  
            因果付与(術式.刻印配列[索引], 変革, 術式.因果律);            
        }
    },
    &quot;因果律&quot;:function(){
        術式.真言 = 術式.月因子[第壱式真言書.検索('月印').選択済目録()];
        術式.真言 += 術式.日因子[第壱式真言書.検索('日印').選択済目録()];
		術式.出力();
		return this;        
    },
    &quot;出力&quot;:function(){
        第壱式真言書.検索('真言出力領域').出力(術式.真言);

    }
    
}

}





function 魔導書召喚(){
    因果付与 = function(elm, type, func) {
            if(! elm) { return false; }
            if(elm.addEventListener) { 
                elm.addEventListener(type, func, false);
            } else if(elm.attachEvent) { 
                elm.attachEvent('on'+type, func);
            } else {
                return false;
            }
            return true;
    }
    変革 = 'change';
　　零 = 0;
    Array.prototype['装填'] = function(val){
        this.push(val);
    }
    Array.prototype['範囲'] = function(){
        return this[&quot;length&quot;];
    }
    document.__proto__['検索'] = function(elm){
        return document.getElementById(elm);
    }
    document.getElementById('月印')[&quot;選択済目録&quot;] = function(){
        return this.options.selectedIndex;
    }
    document.getElementById('日印')[&quot;選択済目録&quot;] = function(){
        return this.options.selectedIndex;
    }
    document.getElementById('真言出力領域')[&quot;出力&quot;] = function(str){
        this.innerHTML = str;
    }
    return document;  
}
[/javascript]

コードを書いているうちに、どんどん迷子になって、自分でもよくわからなくなった orz
とりあえずchromeでは動きました。他は知らん。
ホント JavaScript は地獄だぜ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1858</wp:post_id>
		<wp:post_date>2012-11-28 14:52:38</wp:post_date>
		<wp:post_date_gmt>2012-11-28 05:52:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%ad%e4%ba%8c%e7%97%85%e7%89%88%e3%80%80%e3%80%8c%e8%aa%95%e7%94%9f%e6%97%a5%e3%81%ae%e3%81%93%e3%81%a8%e3%81%b0%e3%80%8d%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%ac%e3%83%bc%e3%82%bf%e3%83%bc%e3%82%92</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[545191125508287]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>documentオブジェクトの拡張</title>
		<link>http://shimz.me/blog/javascript/1866</link>
		<pubDate>Thu, 29 Nov 2012 00:29:32 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1866</guid>
		<description></description>
		<content:encoded><![CDATA[昨日、めちゃくちゃなコードを作っていて知った副産物

documentオブジェクトはprototypeでメソッドを追加できないけど、__proto__に直接入れしまえば動くブラウザもあるみたい。
サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/812A/js?width=465&height=496&view=play"></script>

まぁ、でも間違いなく非推奨なので、使い道はないけれども。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1866</wp:post_id>
		<wp:post_date>2012-11-29 09:29:32</wp:post_date>
		<wp:post_date_gmt>2012-11-29 00:29:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>document%e3%82%aa%e3%83%96%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%81%ae%e6%8b%a1%e5%bc%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[545567138804019]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Google Analytics 】「期待外れ」な記事を見つけ出すカスタムレポートをつくった。</title>
		<link>http://shimz.me/blog/analytics/1874</link>
		<pubDate>Fri, 30 Nov 2012 07:50:44 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1874</guid>
		<description></description>
		<content:encoded><![CDATA[Google アナリティクスを確認していて、直帰率の高さが気になったので、多少悪あがきをしようかなと。
SEOに関しては、まったくの素人なので分析とかは適当です。

<h1>やったこと</h1>
記事（ページ）ごとの、速度／直帰率／離脱率／訪問者数、を表示するカスタムレポートをつくります。

指標グループや、ディメンションの詳細の設定は以下のような感じ。
<img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000016.jpg" alt="" title="WS000016" width="860" height="379" class="alignnone size-full wp-image-1876" />

これでレポートの設定は終わり。

実際に作ったレポートを表示して、アドバンスフィルタで訪問者数の少ないページを切り落とします。
（訪問者数が少ないと、直帰率や離脱率があまりあてにならないので）
「アドバンス」のリンクをクリックして設定。
<a href="http://shimz.me/blog/wp-content/uploads/2012/11/WS000017.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000017.jpg" alt="" title="WS000017" width="1164" height="219" class="alignnone size-full wp-image-1878" /></a>

アドバンスフィルタを適用したら、直帰率でソートします。
<a href="http://shimz.me/blog/wp-content/uploads/2012/11/WS000018.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2012/11/WS000018.jpg" alt="" title="WS000018" width="1362" height="186" class="alignnone size-full wp-image-1880" /></a>

注意するのは以下の２点

<strong>・直帰率・離脱率が高く、平均表示時間が遅いページ</strong>
これらは、ページの読み込みに時間がかかっていて人が離脱していってる可能性が高いので、画像を軽くするなどして対応。
（ウチの場合は、画像より外部からスクリプトを読み込んでいたりする記事はどうしても重くなるので、仕方がない部分だったりします）

<strong>・直帰率・離脱率が高いが、平均表示時間はさほど遅くなく、平均ページ滞在時間が短いページ</strong>
これが、ずばり訪問者からみたときに「期待外れ」な記事である可能性が大です。
記事へのリンクをクリックしてみたものの、「ちっ、使えねぇ」といって離脱してくタイプのコンテンツ orz

……まぁ、仕方ないね～

とりあえず、件のページの詳細を調べてみたところ「タブレット」「キーボード」というキーワードで流入してくる率が高いようなので、記事の冒頭にそれらのキーワードで入ってくる訪問者の関心を惹きそうな記事へのリンクを付けることで、対応してみました。
これで、ちょっとでも直帰率が減るといいなぁ。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1874</wp:post_id>
		<wp:post_date>2012-11-30 16:50:44</wp:post_date>
		<wp:post_date_gmt>2012-11-30 07:50:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90google-analytics-%e3%80%91%e3%80%8c%e6%9c%9f%e5%be%85%e5%a4%96%e3%82%8c%e3%80%8d%e3%81%aa%e8%a8%98%e4%ba%8b%e3%82%92%e8%a6%8b%e3%81%a4%e3%81%91%e5%87%ba%e3%81%99%e3%82%ab%e3%82%b9%e3%82%bf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[アクセス解析]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[546175388743194]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>両親に贈るのに最適だった「iPad教科書」</title>
		<link>http://shimz.me/blog/other/1891</link>
		<pubDate>Sat, 01 Dec 2012 09:50:17 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1891</guid>
		<description></description>
		<content:encoded><![CDATA[両親がiPadを欲しがっていたのでプレゼントしたのですが、なにぶんパソコン等をいままでいっさい触ったことが無い人なので、いくらiPadが直感的な操作が可能といっても、やはりマニュアル的なものが必要になりました。

そこで、両親に贈るのに適したiPadの入門書がないかと書店でいろいろ探してみたのですが……なかなか思うような参考書がみつからりません。

欲しいのは、本当に基本的な操作方法<strong>だけ</strong>が掲載されている本で、初期設定等は自分が既に済ましてしまっているので「wifiの設定の仕方」の様な項目はむしろ邪魔だったりするのですが、そういった余計な内容の載っていない入門書がなかなか無くて困りました。

いろいろ書店を巡って、やっとみつけた理想に近い参考書が以下の本。

<a href="http://www.amazon.co.jp/gp/product/4822293742/ref=as_li_tf_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4822293742&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4822293742&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4822293742" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />


（Amazon で中身を閲覧することができます）

この本は、「本当になにも解らない人」に贈るiPadの入門書としてはもっとも理想的だと思います。

なによりも操作方法の説明に徹していて、iPadの設定関連についてはごっそり省いているのが素晴らしい！

文字も大きく、画像がふんだんに使われているので読みやすいですし、なにより薄いので「これを全部読まないとiPadは使いこなせないのか……」みたいなゲッソリ感を与えてしまうこともないでしょうｗ


とにかく、初心者中の初心者に贈る入門書を探しているのであれば、この参考書がお勧めです。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1891</wp:post_id>
		<wp:post_date>2012-12-01 18:50:17</wp:post_date>
		<wp:post_date_gmt>2012-12-01 09:50:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%a1%e8%a6%aa%e3%81%ab%e8%b4%88%e3%82%8b%e3%81%ae%e3%81%ab%e6%9c%80%e9%81%a9%e3%81%a0%e3%81%a3%e3%81%9f%e3%80%8cipad%e6%95%99%e7%a7%91%e6%9b%b8%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[546637842030282]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2555]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「コードは汚くてもいい」を条件付きで擁護してみる</title>
		<link>http://shimz.me/blog/programming/1899</link>
		<pubDate>Mon, 03 Dec 2012 03:43:45 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1899</guid>
		<description></description>
		<content:encoded><![CDATA[釣りじゃないですよ。わりとまじめに考えました。

<blockquote>実際にYコンビネーターで成功しているハッカーというのは、決して美しいコードが書けるわけではありません。プログラミングの上手さより大事なことは、まずどれだけユーザーの欲しいことを理解できるかということで、次に重要なのはその条件をもとに実際に使いやすい製品を作ることができるか、ということですね。そのなかのコードは別にきれいである必要はなくて、ユーザーが喜べばいいだけの話ですからね。むしろコードがどれくらいきれいかを気にする人は出来の悪いプログラマーだとぼくは思っているくらいです。コードが気になってしまうと締め切りに間に合わず、ビジネスにならないわけですから。ポール・グレアムもそのように考えている人だと思います

<a href="http://wired.jp/2012/02/03/interview-ginzamarkets/5/">美しいコードを書こうとするのは悪いプログラマーだ</a>
</blockquote>



<blockquote>極端な話、コードがもうメチャメチャでも、動いて金が回れば正解なんですよ。「アイツの書くコードは汚いけど、アイツが入ったプロジェクトは絶対勝つよね」ってエンジニアは、絶対に呼ばれます。もう間違いない。少なくとも、僕は欲しいですし。

<a href="http://careerhack.en-japan.com/report/detail/66">エンジニアよ、ゼネラリストなんて目指すな！―VASILY 金山裕樹のキャリア論</a></blockquote>

定期的にでてきますね、この話題。
そのたびにフルボッコに叩かれるわけなんですが……個人的に思うところを書いておきます。

結論から言うと、

WEBサービスのスタートアップなどでは、コードの美しさよりリリースのスピードを優先させることは十分ありえるし、妥当だと思います。



<img src="http://shimz.me/blog/wp-content/uploads/2012/12/a.gif" alt="" title="a" width="499" height="374" class="alignnone size-full wp-image-1907" />

<hr>

とりあえず、「美しい」とか「汚い」とかの表現があいまいなので、一応この記事の中での定義を決めておきます。



<div class='colorbox'>

<strong>美しいコード</strong>
可読性が高く、保守しやすく、拡張性が高く、再利用しやすいコード

<strong>汚いコード</strong>
最低限のバグは潰してあり、基本的な脆弱性は塞いであるが、読みづらく、とりあえず動いてますって感じのコード</div>

&nbsp;

コードは汚いより美しい方が良いに決まっているわけすが……実際にはそのコードの寿命によるかなと思います。

綺麗、汚いにかかわらずコードには寿命があります。

サービスが立ちいかなくなったりとか、技術の移り変わりだとかで、捨てなきゃならん、あるいは一から全部書き直さなくちゃならんってことは、必ず発生します。

使い捨てのコードでさえ美しさを最優先させるのってのは、仕事ではなくて趣味です。

これから作るサービスがちゃんとビジネスとして成功するかわからない、資金に余裕がなくて優秀なエンジニアなんて雇えない、そんなスタートアップの状況下でなら、コードの美しさよりリリースするスピードを優先させるのはそんなにおかしなことでもないですし、「資金調達が上手くいったら優秀なエンジニア引き抜いて、中身丸ごと綺麗に書き直そうぜ」ってのも、戦略としてありだと思います。
スタートアップ時に書くコードの寿命は短くていいし、むしろそんな初期に書いたコードをその後何年も使い続け、保守し拡張し続ける方が無茶だと思います。

実際には綺麗なコードが書けるエンジニアは書くスピードも速かったりするのですが、でも、そういう優秀なエンジニアはちゃんと高額な給与で向かい入れられるべきだと思うし、そうなるとスタートアップ時にそんな人材を調達するのはかなり困難であるはずで、そんな中で美しさとスピード、どちらかを優先しなくてはならないとしたらスピードでしょう。
とにかく、とっととリリースしてビジネスとして成功させていかないと、エンジニアに払う給与だっていずれなくなってしまうのです。 

それにこの方が、エンジニアの地位も向上すると思うんですよね。

優秀なエンジニアには、その優秀さ（美しいコードが書ける）がちゃんと評価され必要とされて大きなお金が払われるわけですから。


なんとなく、日本の「美しいコードであるべき」論争には、「上から下まで全ての人間があらゆる状況下で完璧な仕事をするべき」という職人魂の悪い部分が出ているような気がします。

そういう思想のもとでは、「汚いコードを書くエンジニアなんてものは許されないし、存在しないはず」とその姿が無視され、実際には大きな差があるはずの、優秀なエンジニアと未熟なエンジニアが十把一絡げにされて「全部で５人月でお願いします」みたいな話になってしまうのではないでしょうか。

スタートアップ時と、会社の成長期では必要となる人材が違ってくるという話がありますが、それはコードにも当てはまるってことだと思います。

美しさにこだわた挙句リリースが遅れて競合に先を行かれてビジネスとしてポシャッた、なんてことになれば、その綺麗に書いたコードもゴミ箱に捨てるしかないわけです。

まずはビジネス優先させないと……給与でないと困るし、会社潰れても困りますしね。


【余談】
ザッカーバーグが最初に書いたFacebookのコードも酷いスパゲッティだったって話もどっかで聞いたし、海外のスーパーなエンジニアの武勇伝には「今はでっかいサービスになってるが、俺が雇われた頃のコードは酷いスパゲッティで、それをFack!と罵りながら全部書き直したんだぜ、ハッハッハッハ」ってエピソードがわりと沢山あったと思うので、そんなに珍しい話でもないと思うんですけどね。

まぁ、SIerとかになるまた話が違ってくるとは思いますが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1899</wp:post_id>
		<wp:post_date>2012-12-03 12:43:45</wp:post_date>
		<wp:post_date_gmt>2012-12-03 03:43:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%b3%e3%83%bc%e3%83%89%e3%81%af%e6%b1%9a%e3%81%8f%e3%81%a6%e3%82%82%e3%81%84%e3%81%84%e3%80%8d%e3%82%92%e6%9d%a1%e4%bb%b6%e4%bb%98%e3%81%8d%e3%81%a7%e6%93%81%e8%ad%b7%e3%81%97%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[547515115275888]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1907]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.jsでスクレイピング（cheerio版）</title>
		<link>http://shimz.me/blog/node-js/1948</link>
		<pubDate>Tue, 04 Dec 2012 02:57:33 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1948</guid>
		<description></description>
		<content:encoded><![CDATA[以前<a href="http://shimz.me/blog/?p=19">、node.ioを使ったスクレイピング</a>についての記事を書きましたが、cheerioというライブラリ(XML/HTML parser)を使った方が簡単だということに気付いたので、そちらを紹介

<a href="https://github.com/MatthewMueller/cheerio">cheerio</a>

cheerio インストール
[shell]
$ npm install cheerio
[/shell]

サンプル
[javascript]
var request = require(&quot;request&quot;);
var cheerio = require(&quot;cheerio&quot;);

request(
	{
		uri: &quot;http://shimz.me/blog/&quot;,
	}, 
	function(error, response, body) {
		var $ = cheerio.load(body); //取得したページのbody部をパース

		$(&quot;.entry-title &gt; a&quot;).each(function() { //パースした内容にはjQuery風のセレクタでアクセスできる
			var link = $(this);
			var text = link.text();
			var href = link.attr(&quot;href&quot;);

			console.log(text + &quot; -&gt; &quot; + href);
		});
	}
);
[/javascript]

こっちの方が簡単ですね。

【追記】
どうも、ちゃんと取得できないときがあるっぽい。
[javascript]
&gt; $(&quot;channel &gt; link&quot;).toString()
'&lt;link&gt;'
&gt; $(&quot;channel &gt; title&quot;).toString()
'&lt;title&gt;GUNMA GIS GEEK&lt;/title&gt;'
[/javascript]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1948</wp:post_id>
		<wp:post_date>2012-12-04 11:57:33</wp:post_date>
		<wp:post_date_gmt>2012-12-04 02:57:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js%e3%81%a7%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%ef%bc%88cheerio%e7%89%88%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[547970125230387]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>反広告社をダサいと感じる理由。</title>
		<link>http://shimz.me/blog/other/1974</link>
		<pubDate>Thu, 06 Dec 2012 05:03:37 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1974</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ji-sedai.jp/special/generations/post_4.html">【すべての広告を焼燬する】悪戯広告結社『反広告社』、その愛憎と信念を聴く</a>


<blockquote>反広告社：はい。ルールというルールはありません。ただ、私共の方針に合致しない広告の場合、理由を説明し掲載を見送る場合があります。例えば実務家に少しでも負けてるコピー、嘘が入ったコピー、笑えないコピー、今この社会に出す必要がないコピー、私たちが言う必要のないコピー等です。改善余地があると考えた時は、私も一緒になって代案を制作します。伊勢丹の「恋が着せ、愛が脱がせる」やLUMINEの「悪い女ほど、清楚な服が、よく似合う」、JR東日本の「愛に雪、恋を白」に勝てるコピーとは何か、四六時中考えています。
</blockquote>

なるほど、このグループは「コピー」を単なる「言葉」としてしか考えていないから、出てくる作品があんなにも雑なデザインなのか。

反広告社のポスターは、とにかくフォントの選び方が適当（っていうか何も考えてないっぽく見える）だったり、ただ単に画像の上に文字をベターと貼り付けただけで、文字ツメやベースラインの調整もされてないものが多い。

デザインのセンスがないとか以前に、なにもやってない。つまり手抜き。

"一番「面白い言葉」や「好い言葉」思いついた奴が勝ち"ってのは、それ単なる大喜利だよ。

ネットで拾った画像に文字貼り付ければ「コピー」になると考えているのなら、その考えがダサイ。

<blockquote>反広告社：弊社が無断で作り、発表している広告を、ターゲットが自社広告として使いはじめた時です。そうなってはじめて、既存の広告会社を打破したと言えると考えます。弊社の活動が終わるとしたら、そのときです。</blockquote>

ネタにはなるだろうけど、ネタ以上のものにはなりえないだろうし、これが既存広告の脅威になるとも思えないし、本職からしたら「うん、そういう遊びは、まともにデザインできるようになってからやろうな？」って言われて終わると思う。

今の広告業界や広告そのものに疑問があったり、反発を感じるってのはわかるけど、"技術"を疎かに、軽視しているって所がダサイ。


<a href="http://www.amazon.co.jp/gp/product/4568502551/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4568502551&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4568502551&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4568502551" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1974</wp:post_id>
		<wp:post_date>2012-12-06 14:03:37</wp:post_date>
		<wp:post_date_gmt>2012-12-06 05:03:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%8d%e5%ba%83%e5%91%8a%e7%a4%be%e3%82%92%e3%83%80%e3%82%b5%e3%81%84%e3%81%a8%e6%84%9f%e3%81%98%e3%82%8b%e7%90%86%e7%94%b1%e3%81%8c%e3%82%8f%e3%81%8b%e3%81%a3%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar]たった２行の追加でFullCalendarをiPad対応にするスクリプト</title>
		<link>http://shimz.me/blog/jquery/1983</link>
		<pubDate>Mon, 10 Dec 2012 01:16:07 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=1983</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/joshgerdes/jquery.ui.touch">jquery.ui.touch</a>

FullCalendarをiPad等のタッチ操作に対応させる方法はいくつかあるみたいですが、今のところ上記のスクリプトを使うのが一番簡単だと思います。

使い方は以下。

ヘッダで上記スクリプトを読み込んで。
[html]
&lt;script src=&quot;jquery.ui.touch.js&quot;&gt;&lt;/script&gt;
[/html]

カレンダー設定後にaddTouchを付加する。
[javascript highlight="16"]
$(document).ready(function() {

	var date = new Date();
	var d = date.getDate();
	var m = date.getMonth();
	var y = date.getFullYear();
	
	var calendar = $('#calendar').fullCalendar({
		header: {
			left: 'prev,next today',
			center: 'title',
			right: 'month,agendaWeek,agendaDay'
		},
	});
	
	$('#calendar').addTouch();
});
[/javascript]

<a href="http://shimz.me/example/fullcalenar/02/">example</a>(iPadで見てください）

動作確認：iPad(iOS6)

イベント（スケジュール）の登録、移動、時間の変更をタッチ操作で行うことができます。
一応iPhoneでも操作できるはずですが小さすぎてあまり実用的ではありません。また、iPad以外のタブレット端末では動作確認してません。

【備考】
タッチ操作の場合タッチ（クリック）でスケジュールの登録を行わせると誤操作しやすいので、スケジュールの登録は別のイベント（ダブルクリック）などに割り振った方がよさそう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1983</wp:post_id>
		<wp:post_date>2012-12-10 10:16:07</wp:post_date>
		<wp:post_date_gmt>2012-12-10 01:16:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fullcalendar%e3%81%9f%e3%81%a3%e3%81%9f%ef%bc%92%e8%a1%8c%e3%81%ae%e8%bf%bd%e5%8a%a0%e3%81%a7fullcalendar%e3%82%92ipad%e5%af%be%e5%bf%9c%e3%81%ab%e3%81%99%e3%82%8b%e3%82%b9%e3%82%af%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>群馬の不動産屋は、そろそろ「駅」の重要さを認識すべきなんじゃないだろうか？</title>
		<link>http://shimz.me/blog/other/2001</link>
		<pubDate>Wed, 12 Dec 2012 07:25:01 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2001</guid>
		<description></description>
		<content:encoded><![CDATA[ものすごーくローカルで、地元民以外にはどうでもいい話だけれども。

<img src="http://shimz.me/blog/wp-content/uploads/2012/12/gunma-.jpg" alt="" title="gunma-" width="430" height="291" class="aligncenter size-full wp-image-2004" />

「群馬は車社会なんで、みんな"駅近"とか気にしないんですよ－」

と、なんど言われたか分からない。

実際、群馬県内の不動産企業のサイトでは、駅に近い物件を探すのが非常に困難な作りになっていることが多い。

地図上で物件を検索機能なんかもなかったりするので、駅近物件を探している人にとっては打つ手無しだ。
（まぁ、これにはいろいろくだらない理由があるらしけれど）

「でも、SUUMOのようなポータルなら路線駅などから検索できるからいいんじゃない？」

と思うかもしれないが、"駅"の重要性が低いのでまともに「最寄駅」のデータを登録してなかったりすることがある。
（※語弊あるとまずいんで追記・SUUMOの場合だと最寄の駅を３つ登録できるんだけど、この三駅登録率を上げると表示のされかたがちょっと変わったりする。もちろん路線検索した場合の表示回数も増えるので、できれば登録して欲しいんだけど、なかなかね～。まぁ、仕方がない部分もあるのだけれど）

今のところ、群馬は確かに車社会なので駅データの重要性は確かに低いのだろけれど……でもさ、車社会ってこの先何年続くの？　という疑問がある。

車社会というのは自然発生したものじゃない。

政府や自治体が誘導したから、車中心の社会になったというだけだ。

これが未来永劫続かと言えば、そんなはずはないわけで、まして今は全国的に方向性としてはコンパクトシティ化を目指している自治体の方が多い。

そりゃそうだろう。

ただでさえ、少子高齢化で支出は増え収支が減る傾向にあるなかで、今後いたるところで起きるであろうインフラの老朽化を考えれば、これ以上外に広がっていくのは無理があるのだから。

ドライバーの高齢化も進むだろうし、買い物難民・交通難民だって増えるだろう。

そんなコンパクトシティ化を進めるなかで、中心をどこに設定するかというとやっぱり「駅」ぐらいしかないのだ。

少なくとも、<a href="http://www.city.takasaki.gunma.jp/soshiki/toshikeikaku/index.htm">高崎市のここ数年間の都市計画</a>は「駅」を中心に進められている。

そろそろ、意識を変える必要がある時期だと思う。

つまり……

「最寄駅」のデータはちゃんと登録してください　ｍ（＿ ＿）ｍ







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2001</wp:post_id>
		<wp:post_date>2012-12-12 16:25:01</wp:post_date>
		<wp:post_date_gmt>2012-12-12 07:25:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%be%a4%e9%a6%ac%e3%81%ae%e4%b8%8d%e5%8b%95%e7%94%a3%e5%b1%8b%e3%81%af%e3%80%81%e3%81%9d%e3%82%8d%e3%81%9d%e3%82%8d%e3%80%8c%e9%a7%85%e3%80%8d%e3%81%ae%e9%87%8d%e8%a6%81%e3%81%95%e3%82%92%e8%aa%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2004]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 値の正規化(d3.scale)</title>
		<link>http://shimz.me/blog/d3-js/2020</link>
		<pubDate>Thu, 13 Dec 2012 08:28:23 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2020</guid>
		<description></description>
		<content:encoded><![CDATA[[javascript]
var dataset = [12, 159, 0, 5555, 24, 6243, 369, 2525, 9999, 1212]
[/javascript]
例えば、上記のような0～10000までの値が含まれたデータセットを0px～450pxのラインに収めたい場合にはデータセットをピクセルの範囲内に収めるため、値の<a href="http://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%8C%96">正規化</a>を行う必要があります。

わりとメンドクサイ作業なのですが、d3.jsにはこのデータの正規化を行うための便利な関数が用意されているので、簡単に正規化を行うことができます。

<strong>スケールオブジェクトの作成</strong>
[javascript]
var scale = d3.scale.linear()
    .domain( [&lt;データセットの最小値&gt;, &lt;データセットの最大値&gt;])
    .range( [&lt;スケールの最小値&gt;, &lt;スケールの最大値&gt;]);
[/javascript]
作成したscaleオブジェクトの引数に値を入れると、正規化された値が出力されます。
[javascript]
&gt; var scale = d3.scale.linear().domain([0, 10000]).range([0, 450]);
&gt; scale(10)
0.45
&gt; scale(100)
4.5
&gt; scale(1212)
54.54
[/javascript]


具体的な利用法は以下のサンプルを。
<script type="text/javascript" src="http://jsdo.it/blogparts/qUfcG/js?width=465&height=496&view=javascript"></script>
赤＝データセットの値をそのままポジションの値として配置
緑＝Ｘ軸にスケール（0～450)を適応
青＝Ｘ・Ｙ軸にスケール（0～450)を適応

また、通常のpx指定では、左上が(0,0)となり、右下に行くほど値が大きくなりますが、グラフなどの描写ではY軸を逆転させ、値が大きい要素を上に表示したい場合が多々あります。
そういった指定もreangeを逆転するだけで簡単に行う事ができます。
<script type="text/javascript" src="http://jsdo.it/blogparts/h7Lm/js?width=465&height=496&view=javascript"></script>
赤＝通常のスケールを指定して配置
緑＝padding(50px)を指定して配置
青＝Y軸を逆転（↓に行くほど値が低くなる）して配置


ちなみにrangeには数値だけなくカラーコードを指定することができます。
データセットの値をカラースケールに適応させたい場合に便利です。
<script type="text/javascript" src="http://jsdo.it/blogparts/mgul/js?width=465&height=496&view=javascript"></script>




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2020</wp:post_id>
		<wp:post_date>2012-12-13 17:28:23</wp:post_date>
		<wp:post_date_gmt>2012-12-13 08:28:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-%e5%80%a4%e3%81%ae%e6%ad%a3%e8%a6%8f%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【iPhone/iPad】フルスクリーンで「ホーム画面に追加」ジェネレーター</title>
		<link>http://shimz.me/blog/iphoneipad/2080</link>
		<pubDate>Fri, 14 Dec 2012 03:35:54 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2080</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/labo/FullScreeBKM/">iPhone/iPad Full Screen Bookmark</a>

特定のサイトをフルスクリーンで開くようにホーム画面に追加するジェネレーターです。
iPhone/iPad共にiOS6でしか動作確認してません。
ICON画像はPNGじゃないとたぶんダメです。大きすぎてもダメかな。
（ICON画像の指定は、iOS6のsafariでないとinput type="file"に対応してなかったと思うので使えません）


<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121451-01" rel="attachment wp-att-2081"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121451-01-156x300.png" alt="iOS Screenshot 20121214-121451 01" width="156" height="300" class="aligncenter size-medium wp-image-2081" /></a>
タイトル、サイトのURL、アイコンに使用する画像を選択して「実行」ボタンを押してください。

&nbsp;

<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121518-01" rel="attachment wp-att-2083"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121518-01-156x300.png" alt="iOS Screenshot 20121214-121518 01" width="156" height="300" class="aligncenter size-medium wp-image-2083" /></a>

<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121653-03" rel="attachment wp-att-2084"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121653-03-156x300.png" alt="iOS Screenshot 20121214-121653 03" width="156" height="300" class="aligncenter size-medium wp-image-2084" /></a>
画面が切り替わったら、safariのメニューから「ホーム画面に追加」を選択

&nbsp;

<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121645-02" rel="attachment wp-att-2085"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121645-02-156x300.png" alt="iOS Screenshot 20121214-121645 02" width="156" height="300" class="aligncenter size-medium wp-image-2085" /></a>
<a href="http://shimz.me/blog/iphoneipad/2080/attachment/ios-screenshot-20121214-121633-01" rel="attachment wp-att-2086"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/iOS-Screenshot-20121214-121633-01-156x300.png" alt="iOS Screenshot 20121214-121633 01" width="156" height="300" class="aligncenter size-medium wp-image-2086" /></a>
タイトルを編集して「追加」を行えば、ホーム画面にブックマークが追加されます。

&nbsp;

後は、追加したアイコンをタップすれば、指定したサイトがフルスクリーンで開きます。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2080</wp:post_id>
		<wp:post_date>2012-12-14 12:35:54</wp:post_date>
		<wp:post_date_gmt>2012-12-14 03:35:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%95%e3%83%ab%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%81%a7%e3%80%8c%e3%83%9b%e3%83%bc%e3%83%a0%e7%94%bb%e9%9d%a2%e3%81%ab%e8%bf%bd%e5%8a%a0%e3%80%8d%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2081]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CDN(Content Delivery Network)、JavaScriptライブラリまとめ</title>
		<link>http://shimz.me/blog/javascript/2107</link>
		<pubDate>Mon, 17 Dec 2012 05:25:24 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2107</guid>
		<description></description>
		<content:encoded><![CDATA[JavaScriptのライブラリをお手軽に導入できて便利な<a href="http://e-words.jp/w/CDN.html">CDN</a>ですが、どのサービスで何のライブラリが使えるのか忘れがちだったのでメモ。
ついでに、RequireJSを使ったTIPS

<hr>

RequireJSを用いたCDNからライブラリの読み込みに失敗した際のフォールバック

[javascript]
requirejs.config({
    enforceDefine: true,
    paths: {
        jquery: [
            'http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min',
            'http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.8.0.min',
            &quot;libs/jquery&quot;
        ]
    }
});

require(['jquery'], function ($) {
       console.log(jQuery);
});
[/javascript]
拡張子の「.js」は省いておく必要がある。

<hr>
<h2>CDNリスト</h2>

&emsp;

<h2><a href="https://developers.google.com/speed/libraries/devguide?hl=ja">Google Hosted Libraries</a></h2>
<a href="http://angularjs.org/">AngularJS</a>
<a href="http://www.chromium.org/developers/how-tos/chrome-frame-getting-started">Chrome Frame</a>
<a href="http://dojotoolkit.org/">Dojo</a>
<a href="http://extjs.co.jp/products/core/manual/">Ext Core</a>
<a href="http://jquery.com/">jQuery</a>
<a href="http://jqueryui.com/">jQuery UI</a>
<a href="http://mootools.net/">MooTools</a>
<a href="http://prototypejs.org/">Prototype</a>
<a href="http://script.aculo.us/">script_aculo_us</a>
<a href="http://code.google.com/p/swfobject/">SWFObject</a>
<a href="https://developers.google.com/webfonts/docs/webfont_loader">WebFont Loader</a>

<h2><a href="http://scriptsrc.net/">ScriptSrc.net</a></h2>
Google Hosted Librariesのscript読み込みタグをクリックするだけでクリップボードにコピーできるサービス。

<hr>
<h2><a href="http://www.asp.net/ajaxlibrary/cdn.ashx">Microsoft Ajax Content Delivery Network</a></h2>
<a href="http://jquery.com/">jQuery</a>
<a href="http://jqueryui.com/">jQuery UI</a>
<a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/">jQuery Validation</a>
<a href="http://jquerymobile.com/">jQuery Mobile</a>
<a href="http://api.jquery.com/category/plugins/templates/">jQuery Templates</a>
<a href="http://jquery.malsup.com/cycle/">jQuery Cycle</a>
<a href="http://datatables.net/">jQuery DataTables</a> - テーブル操作（<a href="http://shimz.me/blog/category/datatables">参考</a>）
<a href="http://modernizr.com/releases/">Modernizr Releases</a>
<a href="http://www.asp.net/ajaxlibrary/AjaxControlToolkitSampleSite/">Ajax Control Toolkit</a>
<a href="http://www.jshint.com/">JSHint</a>
<a href="http://knockoutjs.com/">Knockout</a>
<a href="http://www.asp.net/web-forms">ASP.NET Web Forms and Ajax</a>
<a href="http://msdn.microsoft.com/ja-jp/asp.net/aa336581.aspx">ASP.NET MVC</a>

<hr>


<h2><a href="http://developer.yahoo.com/yui/articles/hosting/">YUI 2: Dependency Configurator</a></h2>
<a href="http://yuilibrary.com/">YUI JavaScript Core
YUI CSS Packages
YUI JavaScript Utilities
YUI User Interface Widgets
YUI Aggregate (Rollup) Files
YUI Developer Tools</a>

<hr>


<h2><a href="http://cdnjs.com/">cdnjs</a></h2>
<a href="http://cssgrid.net/">1140</a>
<a href="http://960.gs/">960gs</a><a href="http://ace.ajax.org/">ace</a>
<a href="https://github.com/liferay/alloy-ui">alloy-ui</a>
<a href="http://amplifyjs.com/">amplifyjs</a>
<a href="http://angularjs.org/">angular.js</a>
<a href="http://augmentjs.com/">augment.js</a>
<a href="https://github.com/jeromegn/Backbone.localStorage">backbone-localstorage.js</a>
<a href="http://github.com/marionettejs/backbone.eventbinder">backbone.eventbinder</a>
<a href="http://documentcloud.github.com/backbone/">backbone.js</a>
<a href="http://github.com/marionettejs/backbone.marionette">backbone.marionette</a>
<a href="https://github.com/theironcook/Backbone.ModelBinder#prerequisites">backbone.modelbinder</a>
<a href="https://github.com/addyosmani/backbone.paginator">backbone.paginator</a>
<a href="http://github.com/derickbailey/backbone.syphon/">backbone.syphon</a>
<a href="http://thedersen.com/projects/backbone-validation">backbone.validation</a>
<a href="http://github.com/marionettejs/backbone.wreqr">backbone.wreqr</a>
<a href="http://benchmarkjs.com/">benchmark</a>
<a href="http://bonsaijs.org/">bonsai</a>
<a href="http://jbutz.github.com/bootstrap-lightbox/">bootstrap-lightbox</a>
<a href="http://camanjs.com/">camanjs</a>
<a href="http://schteppe.github.com/cannon.js">cannon.js</a>
<a href="http://harvesthq.github.com/chosen">chosen</a>
<a href="http://code.google.com/chrome/chromeframe/">chrome-frame</a>
<a href="http://jashkenas.github.com/coffee-script/">coffee-script</a>
<a href="http://www.lalit.org/lab/jsoncookies">cookiejar</a>
<a href="http://craftyjs.com/">crafty</a>
<a href="https://github.com/codler/jQuery-Css3-Finalize">css3finalize</a>
<a href="http://css3pie.com/">css3pie</a>
<a href="http://cufon.shoqolate.com/">cufon</a>
<a href="http://mbostock.github.com/d3/">d3</a> - データ可視化（<a href="http://shimz.me/blog/category/d3-js">参考</a>）
<a href="http://jsantell.github.com/dancer.js">dancer.js</a>
<a href="http://code.google.com/p/dat-gui/">dat-gui</a>
<a href="http://datatables.net/extras/fixedheader/">datatables-fixedheader</a>
<a href="http://datatables.net/">datatables</a>
<a href="http://www.datejs.com/">datejs</a>
<a href="http://davisjs.com/">davis.js</a>
<a href="http://www.dillerdesign.com/experiment/DD_belatedPNG/">dd_belatedpng</a>
<a href="http://documentup.com/">documentup</a>
<a href="http://dojotoolkit.org/">dojo</a>
<a href="https://dropbox.com/developers">dropbox.js</a>
<a href="http://dygraphs.com/">dygraph</a>
<a href="https://github.com/embedly/embedly-jquery">embedly-jquery</a>
<a href="https://github.com/emberjs/data">ember-data.js</a>
<a href="http://emberjs.com/">ember.js</a>
<a href="https://github.com/kriskowal/es5-shim">es5-shim</a>
<a href="http://evejs.com/">eve.js</a>
<a href="http://www.sencha.com/products/extjs/">ext-core</a>
<a href="http://fancyapps.com/fancybox/">fancybox</a>
<a href="http://fineuploader.com/">file-uploader</a>
<a href="https://getfirebug.com/firebuglite/">firebug-lite</a>
<a href="http://flexiejs.com/">flexie</a>
<a href="http://code.google.com/p/flot/">flot</a>
<a href="http://fortawesome.github.com/Font-Awesome/">font-awesome</a>
<a href="http://foundation.zurb.com/">foundation</a>
<a href="http://galleria.io/">galleria</a>
<a href="http://garlicjs.org/">garlic.js</a>
<a href="https://github.com/CardinalPath/gas">gas</a>
<a href="https://rubygems.org/gems/gmaps4rails">gmaps4rails</a>
<a href="http://g.raphaeljs.com/">graphael</a>
<a href="http://www.handlebarsjs.com/">handlebars.js</a>
<a href="http://hashgrid.com/">hashgrid</a>
<a href="http://headjs.com/">headjs</a>
<a href="http://highcharts.com/">highcharts</a>
<a href="http://highlightjs.org/">highlight.js</a>
<a href="http://mnot.github.com/hinclude/">hinclude</a>
<a href="https://github.com/balupton/History.js/">history.js</a>
<a href="http://twitter.github.com/hogan.js/">hogan.js</a>
<a href="https://github.com/aFarkas/html5shiv">html5shiv</a>
<a href="http://wavded.github.com/humane-js/">humane-js</a>
<a href="http://icanhazjs.com/">ICanHaz.js</a>
<a href="http://jade-lang.com/">jade</a>
<a href="https://github.com/jakesgordon/javascript-state-machine">javascript-state-machine</a>
<a href="http://joapp.com/">jo</a>
<a href="http://dev.iceburg.net/jquery/jqModal/">jqModal</a>
<a href="http://srobbin.com/jquery-plugins/backstretch/">jquery-backstretch</a>
<a href="https://github.com/carhartl/jquery-cookie">jquery-cookie</a>
<a href="http://keith-wood.name/countdown.html">jquery-countdown</a>
<a href="http://gsgd.co.uk/sandbox/jquery/easing/">jquery-easing</a>
<a href="http://gamequeryjs.com/">jquery-gamequery</a>
<a href="http://benalman.com/projects/jquery-hashchange-plugin/">jquery-hashchange</a>
<a href="https://github.com/tkyk/jquery-history-plugin">jquery-history</a>
<a href="http://www.infinite-scroll.com/infinite-scroll-jquery-plugin/">jquery-infinitescroll</a>
<a href="http://deepliquid.com/content/Jcrop.html">jquery-jcrop</a>
<a href="http://code.appendto.com/plugins/jquery-mockjax/">jquery-mockjax</a>
<a href="http://brandonaaron.net/code/mousewheel/docs">jquery-mousewheel</a>
<a href="http://nivo.dev7studios.com/">jquery-nivoslider</a>
<a href="http://needim.github.com/noty/">jquery-noty</a>
<a href="http://stevenbenner.github.com/jquery-powertip/">jquery-powertip</a>
<a href="http://flesler.blogspot.com/2007/10/jqueryscrollto.html">jquery-scrollTo</a>
<a href="http://omnipotent.net/jquery.sparkline">jquery-sparklines</a>
<a href="http://textextjs.com/">jquery-textext</a>
<a href="https://github.com/cowboy/jquery-throttle-debounce">jquery-throttle-debounce</a>
<a href="http://timeago.yarp.com/">jquery-timeago</a>
<a href="http://jquerytools.org/">jquery-tools</a>
<a href="https://github.com/allmarkedup/jQuery-URL-Parser">jquery-url-parser</a>
<a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation//">jquery-validate</a>
<a href="http://neteye.github.com/activity-indicator.html">jquery.activity-indicator</a>
<a href="http://www.asual.com/jquery/address/">jquery.address</a>
<a href="http://benalman.com/projects/jquery-bbq-plugin/">jquery.ba-bbq</a>
<a href="http://www.jacklmoore.com/colorbox">jquery.colorbox</a>
<a href="http://jquery.malsup.com/cycle/">jquery.cycle</a>
<a href="http://jquery.malsup.com/form/">jquery.form</a>
<a href="http://formalize.me/">jquery.formalize</a>
<a href="http://desandro.github.com/imagesloaded/">jquery.imagesloaded</a>
<a href="https://github.com/christianv/jquery-lifestream">jquery.lifestream</a>
<a href="http://jamesflorentino.github.com/nanoScrollerJS/">jquery.nanoscroller</a>
<a href="http://spservices.codeplex.com/">jquery.SPServices</a>
<a href="http://mottie.github.com/tablesorter/docs/">jquery.tablesorter</a>
<a href="http://ricostacruz.com/jquery.transit/">jquery.transit</a>
<a href="http://jquery.com/">jquery</a>
<a href="http://touchpunch.furf.com/">jqueryui-touch-punch</a>
<a href="http://jqueryui.com/">jqueryui</a>
<a href="http://millermedeiros.github.com/js-signals/">js-signals</a>
<a href="http://jscrollpane.kelvinluck.com/">jScrollPane</a>
<a href="https://github.com/douglascrockford/JSON-js">json2</a>
<a href="http://bestiejs.github.com/json3">json3</a>
<a href="http://jsoneditoronline.org/">jsoneditor</a>
<a href="http://jstorage.info/">jStorage</a>
<a href="http://jsxgraph.org/">jsxgraph</a>
<a href="http://kerningjs.com/">kerning.js</a>
<a href="http://cdnjs.com/">kiwi</a>
<a href="http://knockoutjs.com/documentation/plugins-mapping.html">knockout.mapping</a>
<a href="http://knockoutjs.com/">knockout</a>
<a href="http://labjs.com/">labjs</a>
<a href="http://leafletjs.com/">leaflet</a>
<a href="http://lesscss.org/">less.js</a>
<a href="http://lodash.com/">lodash.js</a>
<a href="http://masonry.desandro.com/">masonry</a>
<a href="http://meyerweb.com/eric/tools/css/reset/">meyer-reset</a>
<a href="http://mobilizejs.com/">mobilizejs</a>
<a href="http://www.modernizr.com/">modernizr</a>
<a href="http://momentjs.com/">moment.js</a>
<a href="http://mootools.net/">mootools-more</a>
<a href="http://mootools.net/">mootools</a>
<a href="http://oesmith.github.com/morris.js/">morris.js</a>
<a href="https://github.com/janl/mustache.js">mustache.js</a>
<a href="http://ninjaui.com/">ninjaui</a>
<a href="http://rappdaniel.com/noisy/">noisy</a>
<a href="http://necolas.github.com/normalize.css/">normalize</a>
<a href="http://ocanvas.org/">ocanvas</a>
<a href="http://www.openajax.org/member/wiki/OpenAjax_Hub_1.0_Specification">openajax-hub</a>
<a href="http://openlayers.org/">openlayers</a>
<a href="http://code.google.com/p/pagedown/wiki/PageDown">pagedown</a>
<a href="http://paperjs.org/">paper.js</a> - Canvas上でベクター描画を行う（<a href="http://shimz.me/blog/category/paper-js">参考</a>）
<a href="https://github.com/mtrpcic/pathjs">path.js</a>
<a href="http://css3pie.com/">pie</a>
<a href="https://github.com/walterdavis/placeholder-shiv">placeholder-shiv</a>
<a href="https://github.com/bestiejs/platform.js">platform</a>
<a href="http://leaverou.github.com/prefixfree/">prefixfree</a>
<a href="http://code.google.com/p/google-code-prettify/">prettify</a>
<a href="http://processingjs.org/">processing.js</a>
<a href="http://prototypejs.org/">prototype</a>
<a href="http://meltingice.github.com/psd.js/">psd.js</a>
<a href="http://www.pubnub.com/">pubnub</a>
<a href="http://mths.be/punycode">punycode</a>
<a href="http://pusher.com/">pusher</a>
<a href="http://qooxdoo.org/">qooxdoo</a>
<a href="http://qunitjs.com/">qunit</a>
<a href="http://raphaeljs.com/">raphael</a>
<a href="https://github.com/lincolnloop/raven-js">raven.js</a>
<a href="http://remotestoragejs.com/">remoteStorage</a>
<a href="https://github.com/jrburke/require-cs">require-cs</a>
<a href="https://github.com/requirejs/domReady">require-domReady</a>
<a href="http://github.com/requirejs/i18n">require-i18n</a>
<a href="https://github.com/requirejs/text">require-text</a>
<a href="https://github.com/jrburke/require-jquery">require.js</a>
<a href="http://requirejs.org/">require.js</a>
<a href="https://github.com/scottjehl/Respond">respond.js</a>
<a href="http://responsive-slides.viljamis.com/">ResponsiveSlides.js</a>
<a href="http://retinajs.com/">retina.js</a>
<a href="http://code.shutterstock.com/rickshaw/">rickshaw</a>
<a href="http://sammyjs.org/">sammy.js</a>
<a href="http://cdnjs.com/">scion</a>
<a href="http://www.dustindiaz.com/scriptjs/">script.js</a>
<a href="http://script.aculo.us/">scriptaculous</a>
<a href="http://selectivizr.com/">selectivizr</a>
<a href="https://github.com/automatthew/shred">shred</a>
<a href="http://simplecartjs.org/">simplecartjs</a>
<a href="http://sizzlejs.com/">sizzle</a>
<a href="http://socket.io/">socket.io</a>
<a href="https://github.com/sockjs/sockjs-client">sockjs-client</a>
<a href="https://github.com/dougmartin/Stop-Censorship">sopa</a>
<a href="http://fgnass.github.com/spin.js/">spin.js</a>
<a href="http://maccman.github.com/spine/">spinejs</a>
<a href="http://hay.github.com/stapes">stapes</a>
<a href="https://github.com/mrdoob/stats.js/">stats.js</a>
<a href="https://github.com/marcuswestin/store.js">store.js</a>
<a href="https://github.com/joshaven/string_score">string_score</a>
<a href="http://sugarjs.com/">sugar</a>
<a href="http://code.google.com/p/swfobject/">swfobject</a>
<a href="http://swipejs.com/">swipe</a>
<a href="http://sylvester.jcoglan.com/">sylvester</a>
<a href="http://alexgorbatchev.com/SyntaxHighlighter">SyntaxHighlighter</a>
<a href="http://mrdoob.github.com/three.js/">three.js</a>
<a href="http://baijs.nl/tinyscrollbar/">tinyscrollbar</a>
<a href="https://github.com/Treesaver/treesaver">treesaver</a>
<a href="http://tweet.seaofclouds.com/">tweet</a>
<a href="http://twitter.github.com/bootstrap/">twitter-bootstrap</a>
<a href="https://github.com/remy/twitterlib/">twitterlib.js</a>
<a href="http://documentcloud.github.com/underscore/">underscore.js</a>
<a href="http://epeli.github.com/underscore.string/">underscore.string</a>
<a href="http://medialize.github.com/URI.js/">URI.js</a>
<a href="https://github.com/tbranyen/use.js">use.js</a>
<a href="http://vertx.io/">vertx</a>
<a href="https://github.com/ai/visibility.js">visibility.js</a>
<a href="http://imakewebthings.github.com/jquery-waypoints">waypoints</a>
<a href="http://code.google.com/apis/webfonts/docs/webfont_loader.html">webfont</a>
<a href="http://xregexp.com/">xregexp</a>
<a href="http://xuijs.com/">xuijs</a>
<a href="http://yepnopejs.com/">yepnope</a>
<a href="http://developer.yahoo.com/yui/">yui</a>
<a href="http://zeptojs.com/">zepto</a>
<a href="http://tech.dropbox.com/?p=165">zxcvbn</a>

<hr>
<h2><a href="http://www.jsdelivr.com/">jsDelivr</a></h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2107</wp:post_id>
		<wp:post_date>2012-12-17 14:25:24</wp:post_date>
		<wp:post_date_gmt>2012-12-17 05:25:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cdncontent-delivery-network%e3%80%81javascript%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%81%be%e3%81%a8%e3%82%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[555088177851915]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>facebook_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:103:"Posted to <a href="https://www.facebook.com/555088177851915" target="_blank">your Facebook Timeline</a>";s:5:"error";b:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上に学校区情報（国土数値情報）を表示する</title>
		<link>http://shimz.me/blog/map/2135</link>
		<pubDate>Wed, 19 Dec 2012 01:19:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2135</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報</a>サイトからダウンロードしたJPGIS形式の情報をKMLに変換して、Google Map上に表示する手順です。

今回使用したのは以下。

<a href="http://nlftp.mlit.go.jp/ksj/jpgis/datalist/KsjTmplt-A27.html">国土数値情報　小学校区データ</a>

小学校区のデータをGoogle Map上にインポートします。

<a href="http://shimz.me/example/gmapv3/05/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000006-300x124.jpg" alt="WSd000006" width="300" height="124" class="aligncenter size-medium wp-image-2142" /></a>


&emsp;

<h1>手順</h1>
１．JPGIS形式のデータをSHAPE形式に変換（初めからSHAPE形式のデータがダウンロードできる場合は要らない）
２．SHAPE形式のデータをKML形式に変換
３．KML形式のデータを整形
４．Google Map上に読み込み
<hr>
<h1>■JPGIS形式のデータをSHAPE形式に変換</h1>
<a href="http://nlftp.mlit.go.jp/ksj/gml/gml_datalist.html">国土数値情報データ変換ツール</a>
データ変換ツール（KsjTool）を使って、ダウンロードしたXMLファイルをSHAPE形式に変換します。
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000000-300x234.jpg" alt="WSd000000" width="300" height="234" class="aligncenter size-medium wp-image-2136" />

&emsp;
&emsp;

<h1>■SHAPE形式のデータをKML形式に変換</h1>
<a href="http://www.qgis.org/index.php">Quantum GIS</a>をインストールします。
起動したら、変換したSHAPE形式のデータファイルの中からdbfのファイル（今回はポリゴンデータを使いたいのでSD02.dbfを使用します）をドラッグ＆ドロップします。
（空間参照系は「WGS 84」を選択）
このまますべてのデータをKMLに変換してもいいのですが、データ量が多すぎるとGoogle Mapに掲載できる制限を超えてしまうので、KMLに変換するデータを絞り込みます。
「レイヤー」→「属性テーブルのオープン」を選択。
今回はINSカラムの値が「高崎」のものだけを選択します。

<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000001-300x228.jpg" alt="WSd000001" width="300" height="228" class="aligncenter size-medium wp-image-2137" />
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000003-300x174.jpg" alt="WSd000003" width="300" height="174" class="aligncenter size-medium wp-image-2138" />

必要なデータだけが選択された状態になったら、「レイヤー」→「選択部分をベクタファイルとして保存する…」をクリックしKMLファイルとして出力します。
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSd000004-224x300.jpg" alt="WSd000004" width="224" height="300" class="aligncenter size-medium wp-image-2139" />

&emsp;
&emsp;

<h1>■KML形式のデータを整形</h1>
一応、KMLファイルが作成できたのですが、このままでは不要な情報などが多いので整形します。
今回は、Notepad++の正規表現置換を使って手動で書き換えました。
大量に整形が必要な場合は、変換スクリプトを作った方がいいかもしれません。

<a href="http://www.mergely.com/QdD5QXJy/">整形したKMLデータのdiff</a>
左が元データ、右が整形したデータとなります。

&emsp;
&emsp;

<h1>■Google Map上に読み込み</h1>
KMLファイルの読み込み方法は以下。
[html]
&lt;html&gt;
&lt;head&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;hl=ja&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  function initialize() {
    var initPos = new google.maps.LatLng(36.3219088, 139.0032936);
    var myOptions = {
      noClear : true,
      center : initPos,
      zoom : 12,
      mapTypeId : google.maps.MapTypeId.ROADMAP
    };
    var map_canvas = new google.maps.Map(document.getElementById(&quot;map_canvas&quot;), myOptions);
    
    var kmlUrl = &quot;http://&lt;ホスト名&gt;/takasaki.kml&quot;; //KMLファイルの読み込み
    var kmlLayer = new google.maps.KmlLayer(kmlUrl, {preserveViewport:true});
    kmlLayer.setMap(map_canvas);
        
  }
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload=&quot;initialize()&quot;&gt;
  &lt;div id=&quot;map_canvas&quot; style=&quot;width:100%; height:100%&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]
<a href="http://shimz.me/example/gmapv3/05/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2135</wp:post_id>
		<wp:post_date>2012-12-19 10:19:09</wp:post_date>
		<wp:post_date_gmt>2012-12-19 01:19:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-map%e4%b8%8a%e3%81%ab%e5%ad%a6%e6%a0%a1%e5%8c%ba%e6%83%85%e5%a0%b1%ef%bc%88%e5%9b%bd%e5%9c%9f%e6%95%b0%e5%80%a4%e6%83%85%e5%a0%b1%ef%bc%89%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2142]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上にヒートマップを表示する</title>
		<link>http://shimz.me/blog/map/2151</link>
		<pubDate>Thu, 20 Dec 2012 00:24:16 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2151</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報</a>サイトからダウンロードした<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-L02-v2_1.html">都道府県地価調査データ(点)</a>を元にGoogle Map上に群馬県の地価データをヒートマップで表示しました。

<a href="http://shimz.me/example/gmapv3/06/"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/WSmm000000-300x141.jpg" alt="WSmm000000" width="300" height="141" class="aligncenter size-medium wp-image-2152" /></a>

国土数値情報からダウンロードしたデータをKMLにコンバートし、さらにJavascriptの配列に変更(手動)してます。
（ぶっちゃけJPGIS(XML)から、直接JavaScriptの配列に変換した方が楽だったような気も…）
KML形式への変換の仕方は以下の記事を参照してください。

<a href="http://shimz.me/blog/map/2135">Google Map上に学校区情報（国土数値情報）を表示する</a>

※追記
Quantum GISでgeoJSON形式で出力することができるので、そっちを使う方がらくでした。

データさえできてしまえば、ヒートマップを表示するのは簡単です。
HeatmapLayerを使用するには、libraries=visualizationを付加してGoogle Map APIを読み込んでください。
[html]
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;v=3&amp;language=ja&amp;libraries=visualization&quot;&gt;&lt;/script&gt;
[/html]

[javascript title="GMAP API HeatmapLayer"]
var data = []; 
data =  [
{&quot;surveyedPrice&quot;:31500,pos:[138.549837,36.534579]},
{&quot;surveyedPrice&quot;:19600,pos:[138.552933,36.537296]},
{&quot;surveyedPrice&quot;:4950,pos:[138.564714,36.461183]},
{&quot;surveyedPrice&quot;:22800,pos:[138.585049,36.59217]},
{&quot;surveyedPrice&quot;:5300,pos:[138.585787,36.508158]},
{&quot;surveyedPrice&quot;:172000,pos:[138.590885,36.521871]},
　　　　　　　　　　　　　　　・
　　　　　　　　　　　　　　　・
　　　　　　　　　　　　　　　・
　　　　　　　　　　　　　　　・
{&quot;surveyedPrice&quot;:23800,pos:[139.61774,36.220006]}
];


function initialize() {
    //地図初期化
    var initPos = new google.maps.LatLng(36.3219088, 139.0032936);
    var myOptions = {
      noClear : true,
      center : initPos,
      zoom : 10,
      mapTypeId : google.maps.MapTypeId.ROADMAP
    };
    var map_canvas = new google.maps.Map(document.getElementById(&quot;map_canvas&quot;), myOptions);    
    
    
    
    //ヒートマップ用のデータの作成
    var bounds = new google.maps.LatLngBounds();
    var  pos, populations = [];
    for (var i=0; i &lt; data.length; i++) {
        pos = new google.maps.LatLng(data[i].pos[1], data[i].pos[0]);
        populations.push({
            location : pos,
            weight : data[i].surveyedPrice //ヒートマップの重み付けに使用するデータを指定
        })
        bounds.extend(pos); 
    }
    map_canvas.fitBounds(bounds); //全てのデータが画面に収まる様に表示を変更

    //ヒートマップレイヤの作成
    var heatmap = new google.maps.visualization.HeatmapLayer({
            radius:25 //ヒートマップの各ポイントの大きさ
        });
    
    heatmap.setData(populations);
    heatmap.setMap(map_canvas);

 
}
google.maps.event.addDomListener(window, &quot;load&quot;, initialize);

 

[/javascript]



<a href="http://shimz.me/example/gmapv3/06/">example</a>


【参考】
<a href="https://developers.google.com/maps/documentation/javascript/layers#JSHeatMaps">Google Developers - Google Maps JavaScript API v3  Heatmap Layer</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2151</wp:post_id>
		<wp:post_date>2012-12-20 09:24:16</wp:post_date>
		<wp:post_date_gmt>2012-12-20 00:24:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-map%e4%b8%8a%e3%81%ab%e3%83%92%e3%83%bc%e3%83%88%e3%83%9e%e3%83%83%e3%83%97%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[556599281034138]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>facebook_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:103:"Posted to <a href="https://www.facebook.com/556599281034138" target="_blank">your Facebook Timeline</a>";s:5:"error";b:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>175</wp:comment_id>
			<wp:comment_author><![CDATA[福岡市 防犯危険箇所ヒートマップ | GUNMA GIS GEEK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shimz.me/blog/d3-js/2916</wp:comment_author_url>
			<wp:comment_author_IP>133.242.49.153</wp:comment_author_IP>
			<wp:comment_date>2013-07-03 09:52:52</wp:comment_date>
			<wp:comment_date_gmt>2013-07-03 00:52:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 【参考】 ・ Google Map上にヒートマップを表示する ・【D3.js】Google Map上にボロノイ図を描く [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1372814057]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372812772.2707879543304443359375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>FTPで「451 Failure writing to local file」エラー</title>
		<link>http://shimz.me/blog/troubleshooting/2178</link>
		<pubDate>Fri, 21 Dec 2012 00:26:26 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2178</guid>
		<description></description>
		<content:encoded><![CDATA[入稿データを送ろうとしたら、「451 Failure writing to local file」エラーが発生してアップロードができない。
相手先に調べてもらったところ、単純に容量がいっぱいになっていただけだった orz

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2178</wp:post_id>
		<wp:post_date>2012-12-21 09:26:26</wp:post_date>
		<wp:post_date_gmt>2012-12-21 00:26:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ftp%e3%81%a7%e3%80%8c451-failure-writing-to-local-file%e3%80%8d%e3%82%a8%e3%83%a9%e3%83%bc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javascriptでtxtファイルの比較・差分(diff)を表示するライブラリ「Mergely」</title>
		<link>http://shimz.me/blog/javascript/2183</link>
		<pubDate>Sat, 22 Dec 2012 00:05:35 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2183</guid>
		<description></description>
		<content:encoded><![CDATA[以前、<a href="http://shimz.me/blog/map/2135">こちら</a>の記事で使用した二つのファイル（テキスト）の差異(diff)を表示してくれるWebサービス「<a href="http://www.mergely.com">Mergely</a>」ですが、ライブラリが公開されているので自サイトにdiffの仕組みを取り入れることができます。

<a href="http://www.mergely.com/about.php">Mergely(ライブラリ)</a>

使用方法は非常に簡単です。

[html]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Mergelyライブラリの読み込み --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://shimz.me/libs/mergely-3.0/lib/codemirror.js&quot;&gt;&lt;/script&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://shimz.me/libs/mergely-3.0/lib/codemirror.css&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://shimz.me/libs/mergely-3.0/lib/mergely.js&quot;&gt;&lt;/script&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://shimz.me/libs/mergely-3.0/lib/mergely.css&quot; /&gt;

&lt;/head&gt;


&lt;body&gt;
    &lt;div id=&quot;compare&quot;&gt;&lt;div&gt;
&lt;/body&gt;


&lt;script&gt;
$(document).ready(function () {
	$('#compare').mergely({
		cmsettings: { 
			readOnly: false, //読込みのみ
			lineNumbers: true //行番号の表示
		},
		lhs: function(setValue) {
			setValue('日本語でも\nちゃんとdiff\nできますか？\n編集もできたりしますか？'); //比較元テキスト
		},
		rhs: function(setValue) {
			setValue('日本語でも\nちゃんとdiff\nできる\n編集もできるので\n何か入力してみてね！'); //比較先テキスト
		}
	});
});
&lt;/script&gt;
&lt;/html&gt;

[/html]

サンプル
<iframe src="http://shimz.me/example/mergely/" height="240" width="100%"></iframe>

外部ファイルの読み込みは、jQueryのXHRオブジェクト使います。

[javascript]
        $(document).ready(function () {
			$('#compare').mergely({
				cmsettings: { readOnly: false, lineWrapping: true }
			});
			$.ajax({
				type: 'GET', async: true, dataType: 'text',
				url: 'lhs_hoge.txt',
				success: function (response) {
					$('#compare').mergely('lhs', response);
				}
			});
			$.ajax({
				type: 'GET', async: true, dataType: 'text',
				url: 'rhs_hoge.txt',
				success: function (response) {
					$('#compare').mergely('rhs', response);
				}
			});
		});
[/javascript]

対応しているブラウザは以下。
<ul>
<li>Firefox 2+</li>
<li>Chrome - any version</li>
<li>Internet Exporer 9+</li>
<li>Safari 3+</li>
<li>Opera 9+</li>
</ul>

なにげにファイルのドラッグ＆ドロップにも対応していたりするので便利です。その他、詳しい機能についてはリファレンスを参照してください。

<a href="http://www.mergely.com/doc/index.html">Mergely Reference Manual</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2183</wp:post_id>
		<wp:post_date>2012-12-22 09:05:35</wp:post_date>
		<wp:post_date_gmt>2012-12-22 00:05:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%a7diff%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%80%8cmergely%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2189]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【アクセスアップ】月間1万PVを超えたので、年末だしこの１年間でやってきたこととかまとめてみる</title>
		<link>http://shimz.me/blog/analytics/2194</link>
		<pubDate>Sat, 29 Dec 2012 03:23:02 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2194</guid>
		<description></description>
		<content:encoded><![CDATA[年末なので、Googleアナリティクスでも見ながら一年を振り返ってみます。

&emsp;

<h1>■ アクセス解析</h1>
<strong>アクセス数（直近１か月）</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000000.jpg" alt="ga000000" width="619" height="326" class="aligncenter size-full wp-image-2222" />
<strong>（2012/1/1～2012/12/28)</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000001.jpg" alt="ga000001" width="619" height="193" class="aligncenter size-full wp-image-2224" />
ブログをbloggerから移行したのが、2011年の11月頃なので、ひとまず順調に推移してきたかな？と。

&emsp;

<strong>流入元</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000002.jpg" alt="ga000002" width="619" height="178" class="aligncenter size-full wp-image-2226" />
殆どがGoogleからの流入で、Twitterやはてブなどからの流入は、それより２桁少ない数値になっています。
記事をアップした際にはTwitterに通知してみたりもしているのですが、あまり流入は無い感じ。
これはつまり、記事タイトルが興味をもたれるようなものになっていないってことですね orz
ただ、ブログ記事のタイトルについてはソーシャルメディアよりも、検索エンジンでのキーワードを重視していてそれがGoogleからの流入につながっている面もあるので難しいところですが。
&emsp;

<h1>■ アクセス解析総括</h1>
全体的にはそこそこ伸びたかな？と。
今年はわりと意識してアクセス数を増やす施行を行ってみたのでSEOを学ぶ良いきっかけとなりました。
以下は、アクセスアップのために今年行ってみた内容です。

&emsp;
&emsp;

<h1>■ アクセスアップのために行ったこと</h1>
その前に、このブログを構築した環境は以下となります。
ホスティング：さくらクラウド／プラン1
CMS:Wordpress
アクセス解析:Google アナリティクス, Jetpackプラグイン／サイト統計情報
この後紹介する「高速化」の中には、サーバーを借りてないと行えないものもあります。

SEO対策については以下の書籍を参考に行いました。
<a href="http://www.amazon.co.jp/gp/product/4844328093/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=toriaezu04b-22&linkCode=as2&camp=247&creative=1211&creativeASIN=4844328093"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=4844328093&MarketPlace=JP&ID=AsinImage&WS=1&tag=toriaezu04b-22&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4844328093" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />




&emsp;

<strong>WEBマスターツールへの登録</strong>
<a href="https://www.google.com/webmasters/tools/home?hl=ja">Google ウェブマスターツール</a>
<a href="http://www.bing.com/webmaster">Bing Webmaster Center</a>
ちゃんと登録していなかった(^^;)　GoogleとMSのWEBマスターツールへ登録しました。
サイトマップの作成には、「Google XML Sitemaps」プラグインを使用しています。

<a href="http://www.arnebrachhold.de/projects/wordpress-plugins/google-xml-sitemaps-generator/">Google XML Sitemaps</a>


&emsp;

<strong>高速化</strong>
これはアクセスアップのためというよりは、重いと自分がイライラするのでやっていたことですが、Googleに対してはわりと効果的だったようです。

・Apache コンテンツの圧縮転送を設定→<a href="mod_deflateによるコンテンツの圧縮転送　">参考</a>
・PHP-APCの導入→<a href="http://rewse.jp/blog/p/4213">参考</a>
・MySQL、bufferのサイズとlog Fileのサイズを変更→<a href="http://blog.flatlabs.net/20100727_212649/">参考</a>
・Head Cleanerプラグインの導入→<a href="http://dogmap.jp/2012/05/09/head-cleaner-4/">参考</a>
・JetPackプラグインのPhoton機能を導入
　(ブログにアップした画像をコンテンツ・デリバリー・ネットワーク (CDN) に転送することで画像の読み込み速度をアップする機能）

以上です。現状のサイト速度のサマリーのステータスは以下のようになってます。

<img src="http://shimz.me/blog/wp-content/uploads/2012/12/ga000004.jpg" alt="ga000004" width="578" height="249" class="aligncenter size-full wp-image-2230" />

表示時間がちょっと重いのですが、ウチの場合「SyntaxHighlighter」プラグインが構文強調表示を行うために、記事内のプログラムコードをパースするため遅くなる傾向があるので難しいですね。
なお、今のところ、wordpressの高速化で有名な「W3 Total Cache」や「WP Super Cache」などは導入してません。
あまりいろいろなプラグイン等でキャッシュが生成されると、なにかあった時の原因究明が難しくなるので。

&emsp;

<strong>キーワード選び</strong>
今まで記事を書く際にキーワードというものを意識してこなかったのですが、今年はちゃんと意識してキーワードを選ぶようにしてみました。
具体的には記事を書いた際に、GoogleのキーワードアドバイスツールやGoogleトレンドなどで検索して検索ボリュームが大きいキーワードを記事タイトルに含めるようにしてみました。
以下の記事は、diffで検索してみた際に、同時に検索されているキーワードとして「txt」や「比較」「差分」などの検索ボリュームが大きかったのでタイトルを変更した例です。

『Jvasscriptでdiffを表示するライブラリ「Mergely」』
　↓変更
『<a href="http://shimz.me/blog/javascript/2183">Javascriptでtxtファイルの比較・差分(diff)を表示するライブラリ「Mergely</a>」』

キーワード選びには、<a href="http://ferret-plus.com/">フェレット</a>やGoogle ウェブマスターツールの「検索クエリ」なども参考にしています。

&emsp;


<h1>■ やったこと総括</h1>
ホントに基本的なSEOしかやっていませんが、改めて「基本は大事だな」と感じました。
最近ではアクセスアップというとどうしてもソーシャルメディアに注目が集まりがちですが、<strong>このブログで一番のアクセス数を稼いでくれている記事は、Twitterに投げてもリツイートされることもなく、はてブもされていない記事だったりする</strong>ので、わからんもんですね。
アクセス解析などを使って「キーワード」を探す作業は、ゲーム的でなかなか面白かったです。
意図した通りの結果がでることはなかなかありませんでしたが orz
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2194</wp:post_id>
		<wp:post_date>2012-12-29 12:23:02</wp:post_date>
		<wp:post_date_gmt>2012-12-29 03:23:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e3%82%a2%e3%83%83%e3%83%97%e3%80%91%e6%9c%88%e9%96%931%e4%b8%87pv%e3%82%92%e8%b6%85%e3%81%88%e3%81%9f%e3%81%ae%e3%81%a7%e3%80%81%e5%b9%b4%e6%9c%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[アクセス解析]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[【アクセスアップ】月間ユニークユーザー数が１万を超えたので解析してみる | GUNMA GIS GEEK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shimz.me/blog/analytics/2903</wp:comment_author_url>
			<wp:comment_author_IP>133.242.49.153</wp:comment_author_IP>
			<wp:comment_date>2013-06-27 10:15:15</wp:comment_date>
			<wp:comment_date_gmt>2013-06-27 01:15:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 以前、月間PVが1万を超えた際に１度記事にしたのですが、いい節目なので改めてアクセスを解析してみようと思います。 [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1372295985]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372295715.5279829502105712890625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>D3.jsを使ってSVGで地図を描く</title>
		<link>http://shimz.me/blog/d3-js/2200</link>
		<pubDate>Mon, 24 Dec 2012 04:26:40 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2200</guid>
		<description></description>
		<content:encoded><![CDATA[詳しく説明できるほど理解できていないので、とりあえずサンプルとコードを載せておきます。

<a href="http://shimz.me/example/d3js/geo_example/geo1/"><img src="http://shimz.me/blog/wp-content/uploads/2012/12/diff000001-300x186.jpg" alt="diff000001" width="300" height="186" class="aligncenter size-medium wp-image-2202" /></a>



データは「<a href="http://www.naturalearthdata.com/">Natural Earth</a>」からダウンロードしたシェープデータを<a href="http://www.qgis.org/index.php">Quantum GIS</a>で<a href="http://s.kitazaki.name/docs/geojson-spec-ja.html">GeoJSON</a>に変換してd3.jsに読み込ませています。
Quantum GISでのデータの変換方法は<a href="http://shimz.me/blog/map/2135">こちら</a>を。

[html]

&lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;testgeo.js&quot;&gt;&lt;/script&gt;


&lt;/head&gt;

&lt;body&gt;
&lt;svg&gt;&lt;/svg&gt;
&lt;/body&gt;
&lt;/html&gt;

[/html]

[javascript title="testgeo.js"]
d3.json(&quot;world.geojson&quot;, function(json) {  
  var geodata = json.features;
  
  projection = d3.geo
    .mercator()		//投影法の指定
    .scale(100)	//スケール（ズーム）の指定
    .rotate([-150,0,0])
    .translate([300,200])


  path = d3.geo.path().projection(projection);　//投影
  
  var svg = d3.select(&quot;svg&quot;);

  var map =  svg.append(&quot;svg:g&quot;)
    .selectAll(&quot;path&quot;)
    .data(geodata)
    .enter()
    .append(&quot;svg:path&quot;)
    .attr({
      &quot;d&quot;: D(path),
      &quot;fill&quot;: &quot;green&quot;,
      &quot;fill-opacity&quot;: 0.5,
      &quot;stroke&quot;: &quot;black&quot;
    });   
});
[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo1/">example</a>


【関連】
<a href="http://shimz.me/blog/d3-js/2351">【D3.js】鶴舞う形の群馬県をSVGで描いてみる</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2200</wp:post_id>
		<wp:post_date>2012-12-24 13:26:40</wp:post_date>
		<wp:post_date_gmt>2012-12-24 04:26:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6svg%e3%81%a7%e5%9c%b0%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2202]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>今年やること。／ブログタイトル変更しました。</title>
		<link>http://shimz.me/blog/other/2263</link>
		<pubDate>Thu, 03 Jan 2013 03:45:08 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2263</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>■ 今年やること。</h1>

・d3.jsをもうちょっと使いこなせるように勉強
・GISについて勉強する
・Google Map API以外の地図APIも使えるように
・GISの勉強に疲れたらenchant.jsを勉強する

今年は、上記に関する記事が増える予定です。

<h1>■ ブログのタイトルを変更</h1>
もともと、何も思いつかなかったので「undefined」というタイトルになったのですが、これだと<a href="http://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%B3%E3%83%80%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3">ファインダビリティ</a>が低いのでタイトル変更しました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2263</wp:post_id>
		<wp:post_date>2013-01-03 12:45:08</wp:post_date>
		<wp:post_date_gmt>2013-01-03 03:45:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bb%8a%e5%b9%b4%e3%82%84%e3%82%8b%e3%81%93%e3%81%a8%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[564490900244976]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【JavaScriptコードメトリックス】 ソースコードの複雑さや保守の容易さを測定できるWEBサイト</title>
		<link>http://shimz.me/blog/web/2279</link>
		<pubDate>Sat, 05 Jan 2013 04:08:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2279</guid>
		<description></description>
		<content:encoded><![CDATA[あくまで目安です。

<a href="http://jscomplexity.org/">Analysis | JSComplexity.org</a>

<a href="http://jscomplexity.org/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/jssa.jpg" alt="jssa" width="542" height="467" class="aligncenter size-full wp-image-2280" /></a>

テキストエリアにJavaScriptコードを入力すると、全体のサイクロマティック複雑度(循環的複雑度)と保守容易性指数 、各ファンクション毎にプログラムステップ法(ハルステッドモデル)で測定した結果を出力してくれるサービス。

コードメトリックス値の算出には、node.jsの「<a href="https://github.com/philbooth/complexityReport.js">complexityReport.js</a>」プラグインを使用しているとのこと。




コードメトリックスの各用語については以下を参照してください。
<a href="http://msdn.microsoft.com/ja-jp/library/vstudio/bb385914.aspx">コード メトリックス値</a>
<a href="http://msdn.microsoft.com/ja-jp/library/vstudio/ms182212.aspx">サイクロマティック複雑度</a>

もっと詳しい内容はwikiで。
<a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E6%B8%AC%E5%AE%9A%E6%B3%95">ソフトウェア測定法</a>
<a href="http://ja.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E7%9A%84%E8%A4%87%E9%9B%91%E5%BA%A6">循環的複雑度</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2279</wp:post_id>
		<wp:post_date>2013-01-05 13:08:13</wp:post_date>
		<wp:post_date_gmt>2013-01-05 04:08:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90javascript%e3%82%b3%e3%83%bc%e3%83%89-%e3%83%a1%e3%83%88%e3%83%aa%e3%83%83%e3%82%af%e3%82%b9%e3%80%91-%e3%82%bd%e3%83%bc%e3%82%b9%e3%82%b3%e3%83%bc%e3%83%89%e3%81%ae%e8%a4%87%e9%9b%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2280]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「ライフゲームの世界」という動画が面白すぎて眠れなくなったのでブログ書く。</title>
		<link>http://shimz.me/blog/other/2295</link>
		<pubDate>Tue, 08 Jan 2013 13:27:46 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2295</guid>
		<description></description>
		<content:encoded><![CDATA[ネタが無いので更新する予定では無かったのですが、ニコ動でたまたま観た動画が面白すぎて感動したので紹介。
<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0">ライフゲーム</a>については動画１で丁寧に説明されているのでそちらを。
一つの動画につきだいたい５分から１０分程度なので、最初からちゃんとみることをお勧めします。
８個目の動画で、背中がゾクゾクとするような感動をきっと味わえるはずです。

いやー、良い動画と巡りあった。

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19347846?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19347846">【ニコニコ動画】ライフゲームの世界【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19355431?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19355431">【ニコニコ動画】ライフゲームの世界２【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19365540?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19365540">【ニコニコ動画】ライフゲームの世界３【複雑系】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19383175?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19383175">【ニコニコ動画】ライフゲームの世界４【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19393651?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19393651">【ニコニコ動画】ライフゲームの世界５【複雑系】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19429634?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19429634">【ニコニコ動画】ライフゲームの世界６【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19470535?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19470535">【ニコニコ動画】ライフゲームの世界７【複雑系】</a></noscript>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19509968?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19509968">【ニコニコ動画】ライフゲームの世界８【複雑系】</a></noscript>


<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm19566296?w=490&h=307"></script><noscript><a href="http://www.nicovideo.jp/watch/sm19566296">【ニコニコ動画】ライフゲームの世界 最終回【複雑系】</a></noscript>

ライフゲームはJavaScriptでも作成することが可能です。
下記サイトにデモとソースコードが掲載されています。

<a href="http://www.quesucede.com/public/gameoflife/index.html">HTML5, JavaScript and Canvas - Conway's Game of Life</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2295</wp:post_id>
		<wp:post_date>2013-01-08 22:27:46</wp:post_date>
		<wp:post_date_gmt>2013-01-08 13:27:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%83%a9%e3%82%a4%e3%83%95%e3%82%b2%e3%83%bc%e3%83%a0%e3%81%ae%e4%b8%96%e7%95%8c%e3%80%8d%e3%81%a8%e3%81%84%e3%81%86%e5%8b%95%e7%94%bb%e3%81%8c%e9%9d%a2%e7%99%bd%e3%81%99%e3%81%8e%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「D3をはじめよう」　サンプルコード</title>
		<link>http://shimz.me/blog/d3-js/2299</link>
		<pubDate>Wed, 09 Jan 2013 01:33:37 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2299</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.oreilly.co.jp/books/9784873115979/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/picture_large978-4-87311-597-9.jpeg" alt="picture_large978-4-87311-597-9" width="516" height="660" class="aligncenter size-full wp-image-2300" /></a>

「Getting Started with D3」の日本語版「<a href="http://www.oreilly.co.jp/books/9784873115979/">D3をはじめよう</a>」がオライリーのEbook Storeにて発売されていたので、購入しました。
とりあえず、写経中。
写経したものは以下に置いてあります。

<a href="http://shimz.me/example/Getting_Started_with_D3/">Getting_Started_with_D3</a>

O'Reilly Japan では、何故か書籍の詳細ページでサンプルコードをダウンロードできないようなのですが、本家の詳細ページではおとせます。
コードはともかくd3に読み込ませるJSONデータがないと写経もできないので、本家からサンプルコードをダウンロードしておくのをおすすめします。

<a href="http://shop.oreilly.com/product/0636920025429.do">Getting Started with D3</a>

「Download Example Code」からサンプルコードをダウンロードしてください。正規化されたJSONデータと、元データを正規化するためのPythonコードが付いてきます。

書籍の内容は、D3をまったく使ったことが無い人向けの入門書となってます。
d3の特徴である、データをDOMに結び付ける機能について丁寧に説明されていますが、そのかわり、レイアウト機能やプラグインについての説明などは少なめです。







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2299</wp:post_id>
		<wp:post_date>2013-01-09 10:33:37</wp:post_date>
		<wp:post_date_gmt>2013-01-09 01:33:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8cd3%e3%82%92%e3%81%af%e3%81%98%e3%82%81%e3%82%88%e3%81%86%e3%80%8d%e3%80%80%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%b3%e3%83%bc%e3%83%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2300]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Waypoints】特定のHTML要素にスクロールイベントを設置するjQueryプラグイン</title>
		<link>http://shimz.me/blog/jquery/2304</link>
		<pubDate>Thu, 10 Jan 2013 01:50:22 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2304</guid>
		<description></description>
		<content:encoded><![CDATA[ちょうど、スクロールイベントを制御するシンプルなライブラリを探していて見つけたプラグインです。
「このdivタグより下にスクロールしたらイベントを発生させて関数を呼ぶ」といったことが簡単に行えます。
その他、１つのHTML要素に複数のスクロールイベントを設置したり、オプションのoffset値を使えば、「この要素から下に100pxスクロールしたらイベントを発生させる」など細かい指定も可能です。

パララックス効果を使ったWEBサイトを作成する際などに便利ですね。

<a href="http://imakewebthings.com/jquery-waypoints/">jQuery Waypoints</a>

■サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/rzJd/js?width=465&height=496&view=play"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2304</wp:post_id>
		<wp:post_date>2013-01-10 10:50:22</wp:post_date>
		<wp:post_date_gmt>2013-01-10 01:50:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90waypoints%e3%80%91%e7%89%b9%e5%ae%9a%e3%81%aehtml%e8%a6%81%e7%b4%a0%e3%81%ab%e3%82%b9%e3%82%af%e3%83%ad%e3%83%bc%e3%83%ab%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e3%82%92%e8%a8%ad%e7%bd%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[568364843190915]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[2013年04月01日から2013年04月07日までのつぶやき | BENNO9]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://elegumi.com/benno9/1004</wp:comment_author_url>
			<wp:comment_author_IP>112.78.117.185</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 09:42:08</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 00:42:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] スクロールイベントを設置するjQueryプラグイン | GUNMA GIS GEEK shimz.me/blog/jquery/2304 posted at 13:19:59   [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370911328.0432150363922119140625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【ジェネラティブ・アート】ランダムを操作する技術</title>
		<link>http://shimz.me/blog/other/2311</link>
		<pubDate>Tue, 15 Jan 2013 08:43:55 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2311</guid>
		<description></description>
		<content:encoded><![CDATA[「ロジカルにカオスと戯れる。それがジェネラティブ・アート」

具体的な内容は<a href="http://www.cbc-net.com/topic/2012/12/processing-generative-art/">公式サイト</a>を。

<a href="http://www.amazon.co.jp/gp/product/4861008565/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4861008565&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4861008565&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4861008565" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />


<blockquote>私たちは不完全で予測不可能な形状を望んでいるのかもしれません。しかし、だからといって不明瞭であてもなくさまようような不完全さもいりません。私たちは、有機性（オーガニック）と機械性（メカニカル）の間、カオスと秩序の間の、ちょうど良くバランスがとれたスイートスポットを探しています。</blockquote>


第２章「ランダム性とノイズ」まで読了。

ジェネラティブ・アートのように、作り手にすら予測不可能な出力を行うプログラムを書くにはランダム性が欠かせません。
しかし、コンピューターが生み出すランダムは、どこかシステマチックで味気ないものです。
出目に偏りがないとそれはそれで不自然なランダムなわけで、そこから生まれるのは単に雑然としただけのカオスでしかありません。
そこで、ある程度自然な偏りを持ったランダム、「ノイズ」が必要になります。

この本で使用しているProcessingには、そのものずばりnoiseという関数があって<a href="http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%83%AA%E3%83%B3%E3%83%8E%E3%82%A4%E3%82%BA">パーリンノイズ</a>が手軽に使えたりしますが、第２章ではパーリンノイズだけに依存することなく、自分の手で独自のノイズ関数を作ってランダム性を操作する方法が詳しく説明されてます。

ランダムな要素を自分の作品の中に取り込みたのだけれど、コンピューターの融通の利かないランダムに手を焼いている……そんな方へお勧めです。

<a href="http://www.cbc-net.com/topic/2012/12/generative-art-in-html5/">HTML5でのジェネラティブ・アート［Processing、JavaScript、チュートリアル］ （『ジェネラティブ・アート』の未刊の章）
</a>

【その他、参考】
パーリンノイズの仕組みについては以下を。
<a href="http://www.technotype.net/hugo.elias/models/m_perlin.html">Perlinノイズ(Perlin Noise)</a>

javascriptでパーリンノイズを使用するためのライブラリもあります。
<a href="http://www.sjeiti.com/perlin-noise-versus-simplex-noise-in-javascript-final-comparison/">Perlin noise versus Simplex noise in Javascript (final comparison)</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2311</wp:post_id>
		<wp:post_date>2013-01-15 17:43:55</wp:post_date>
		<wp:post_date_gmt>2013-01-15 08:43:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%a9%e3%83%86%e3%82%a3%e3%83%96%e3%83%bb%e3%82%a2%e3%83%bc%e3%83%88%e3%80%91%e3%83%a9%e3%83%b3%e3%83%80%e3%83%a0%e3%82%92%e6%93%8d%e4%bd%9c%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[571334212893978]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>facebook_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:103:"Posted to <a href="https://www.facebook.com/571334212893978" target="_blank">your Facebook Timeline</a>";s:5:"error";b:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2313]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GIS入門リンクまとめ（自分用）</title>
		<link>http://shimz.me/blog/map/2321</link>
		<pubDate>Wed, 16 Jan 2013 06:57:01 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2321</guid>
		<description></description>
		<content:encoded><![CDATA[
<iframe width="540" height="360" src="//www.youtube.com/embed/oMUGp0rGf7I" frameborder="0" allowfullscreen></iframe>

「今年はGISを学ぶぞ！」と心に決め、ブログのタイトルまで変更したのですが、一向にGISに関する記事を投稿することができません。
なんにもやっていないというわけでは無いんですが……GIS広すぎ！

一言にGISと言っても、そこに含まれる知識や技術は膨大で、初心者がどこから手を付けていいものやらさっぱりです。
（当初は、「GISというのは地理情報データの規格なのかな？」とか「地理情報を扱うソフトウェアのことかな？」とかいろんな勘違いをしてました）

仕方がないので、とりあえず「GIS入門」なのどキーワードでググっては出てきたサイトをかったっぱしから読みわからない用語をググる、という再帰的検索に終始しています。

なので、記事に出来ることが今のところ何もないのですが、ひとまず自分的に勉強になったな～というサイトのリンクを貼り付けておきます。

<h1>GIS入門リンク</h1>
<a href="http://ja.wikipedia.org/wiki/%E5%9C%B0%E7%90%86%E6%83%85%E5%A0%B1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0">地理情報システム</a>
　とりあえず、Wikipedia。

<a href="http://home.csis.u-tokyo.ac.jp/~akuri/hajimete/kihon.htm">GISのキホン</a>
　個人的にココの説明が一番理解しやすかったです。

<a href="http://www.esrij.com/getting-started/what-is-gis/">GIS とは　－esriジャパン</a>
　ArcGISというGIS界(?)では有名なソフトウェアを出している会社

<a href="http://www.gis.jacic.or.jp/gis/gakushu/whatisgis/whatisgis6.html">ＧＩＳでできること</a>
　GISの具体的な活用方法

<a href="http://www.jmc.or.jp/faq/faq.html">地図博士の部屋</a>
　GISとか以前に、そもそも基本的な知識が足りなかったことに気付いたのでココで勉強中

<a href="http://www.osgeo.jp/wp-content/uploads/2010/11/qgis_hands_on_foss4g2010.pdf">初心者のための Quantum GIS入門(PDF)</a>
<a href="http://docs.osgeo.jp/foss4g/qgis/user_guide-1.6.0/user_guide.html">QGIS User Guide</a>
 オープンソースのGISソフトウェア。使いこなせるようになりたいなー。　

<a href="https://developers.google.com/kml/documentation/?hl=ja">KML 入門用ドキュメント</a>
　Google Mapで地理データを扱うならこの形式なのかな？

<a href="http://kshigeru.blogspot.jp/2012/05/geojson.html">GeoJSON の日本語訳</a>
　どういうポジションにあるのかわからないけど、とりあえずWebで使うならJSONは良いよね、楽で。

<a href="https://github.com/mbostock/d3/wiki/Geo-Projections">D3 Geo Projections</a>
　このライブラリを使いこなせるるようになりたくて、GISの勉強を始めたと言っても過言ではない。

<a href="http://www.slideshare.net/wata909/webgis-4626476">Web時代のデスクトップGIS</a>
　Web-GISなる言葉もあるらしい。このスライドに書かれているように、自分はまさにGoogle Mapから入ったタイプ。

<a href="http://lets.postgresql.jp/documents/tutorial/PostGIS">PostGISを使ってみよう</a>
　PostgreSQLで地理空間情報を扱うための拡張。ポスグレは結構使ってきたけど、これは手を出したことがなかった。

<a href="http://blog.madapaja.net/2010/11/mongodb.html">MongoDBの地理空間のインデックスを試してみる</a>
 MongoDBでも地理空間情報を扱えるらしい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2321</wp:post_id>
		<wp:post_date>2013-01-16 15:57:01</wp:post_date>
		<wp:post_date_gmt>2013-01-16 06:57:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gis%e5%85%a5%e9%96%80%e3%83%aa%e3%83%b3%e3%82%af%e3%81%be%e3%81%a8%e3%82%81%ef%bc%88%e8%87%aa%e5%88%86%e7%94%a8%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2327]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Evernoteをファイルストレージとして使うメリット</title>
		<link>http://shimz.me/blog/other/2331</link>
		<pubDate>Thu, 17 Jan 2013 05:17:26 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2331</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/01/evernote20130107.jpg" alt="evernote20130107" width="1280" height="758" class="aligncenter size-full wp-image-2338" />

<a href="http://appllio.com/explanation/o01-20130116-2986-dropbox-evernote">「Dropbox」と「Evernote」の違いとは - 書類作成に追われる人にオススメの機能と使い方</a>

そもそも、「まったく違う用途のアプリを比較するのが間違っている」という意見もあるみたいですが、自分のようにEvernoteをファイルストレージとしても利用していると、ファイルをEvernoteとDropbox のどちらに保管するかは結構迷います。
さすがに両方に同じファイルを保存しておくのはもったいないし。

そこで、ファイルストレージとしてみた場合の、双方の利点を考えてみます。

<h1>Evernoteの利点</h1>
Evernoteでは、ファイルにメタ情報を付加できます。正しくは「ファイルをクリップしたノートに」ですが。
Evernoteの基本は「ノート」なので、クリップされたファイルもノートに付加されたデータの一つでしかないわけです。
ノートには、ファイルの他にも、タイトルやタグ、URL、そしてもちろんテキストなどを付加することができ、それらを一まとめにして管理することができます。

これが結構便利です。

例えば「ちょっと良いな」と見つけたjQueryのプラグインなんかを、ダウンロードし保存しておこうとします。
この時、Evernoteならダウンロードしたファイルだけでなく、落としたサイトのURLや簡単な説明などを１つのノートにまとめておけるので、あとで必要になった際に探すのが楽になります。
また、ファイル数が増えると「これは何のためのプラグインだったかな？」と用途自体を忘れてしまったりすることがありますが、ファイルをクリップしたノートに一緒にスナップショットなどを貼り付けておくと、パッと見でもわかりやすくなるのでお勧めです。

↓こんな感じ。後で見たときに何に使うプラグインなのか分かりやすい。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/ga000009.jpg" alt="ga000009" width="891" height="910" class="aligncenter size-full wp-image-2332" />


画像の管理なんかにも便利ですね。画像ファイルだけだと「どこで落とした画像だったかな？」「作者は誰だっけ？」と分からなくなることが多々あるので。

<h1>Dropboxの利点</h1>
Dropboxは、ファイルの変更履歴などが自動的に保管されるので、自分が作成したドキュメントなどを保存しておくのに便利です。
あと、普通のフォルダとして意識しないで使える手軽さはやはり欠かせません。


最近は、「自分が作ったもの」はDropbox に、「人が作ったものは」Evernoteに保存するように使いわけています。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2331</wp:post_id>
		<wp:post_date>2013-01-17 14:17:26</wp:post_date>
		<wp:post_date_gmt>2013-01-17 05:17:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>evernote%e3%82%92%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%b9%e3%83%88%e3%83%ac%e3%83%bc%e3%82%b8%e3%81%a8%e3%81%97%e3%81%a6%e4%bd%bf%e3%81%86%e3%83%a1%e3%83%aa%e3%83%83%e3%83%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2338]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「サイド・バイ・サイド」</title>
		<link>http://shimz.me/blog/movie/2346</link>
		<pubDate>Sun, 20 Jan 2013 11:35:33 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2346</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="http://www.youtube.com/embed/mOXKQaxUqsc" frameborder="0" allowfullscreen></iframe>

「<a href="http://www.uplink.co.jp/sidebyside/">サイド・バイ・サイドーフィルムからデジタルシ</a>ネマへ」を観てきました。

デジタルシネマの台頭によってフィルムが消えつつある今、俳優であるキアヌ・リーブスが、ハリウッドの著名な映画監督や映画関係者に自らホスト役となってインタビューを行ったドキュメンタリーです。

デジタルカメラでの撮影が可能になったことで誰でも現場で即座に撮影した映像を確認できることになり、その結果撮影監督の権限が狭まったなど、なかなか興味深い話が多かったです。

フィルムの場合、品質にバラツキがあるため映画館によって映像の質が違うとか。

デジタル化がもたらす新たな可能性と問題点は、映画に限らずどの業界でも起きうる事で、なかなか勉強になりました。

……しかし、あらゆる映画監督の中でも、なんと言ってもデビッド・リンチの存在感は凄いｗ


<a href="http://takasaki-cc.jp/">シネマテークたかさき</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2346</wp:post_id>
		<wp:post_date>2013-01-20 20:35:33</wp:post_date>
		<wp:post_date_gmt>2013-01-20 11:35:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b5%e3%82%a4%e3%83%89%e3%83%bb%e3%83%90%e3%82%a4%e3%83%bb%e3%82%b5%e3%82%a4%e3%83%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2744]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】鶴舞う形の群馬県をSVGで描いてみる</title>
		<link>http://shimz.me/blog/d3-js/2351</link>
		<pubDate>Mon, 21 Jan 2013 05:40:38 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2351</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo2/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/tsuru_gunma.jpg" alt="tsuru_gunma" width="375" height="320" class="aligncenter size-full wp-image-2640" /></a>

<a href="http://shimz.me/blog/d3-js/2200">前回</a>のつづき。D3.js ver.3を使ってSVGで地図の作成をおこないます。

なお、D3.js ver.3の新機能については以下を。
<a href="https://github.com/mbostock/d3/wiki/JP-3.0">D3.js 3.0 の新機能</a>


<h1>データの作成</h1>
地図の元となるデータを作成します。
<a href="http://nlftp.mlit.go.jp/ksj/">国土数値情報ダウンロードサービス</a>から群馬県の<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html">行政区域データ</a>をダウンロードします。
ダウンロードしたファイルの中から、dbfファイルを<a href="http://www.qgis.org/index.php">Quantum GIS</a>に読み込ませてGeoJSONに変換。
「レイヤー」→「名前をつけて保存」→ GeoJSON形式で保存。

<h1>地図の表示</h1>
d3.jsの読み込み
[html]
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
[/html]
[javascript]
var path, map, xy;

xy = d3.geo
	.mercator()		//投影法の指定
	.scale(80000)	//スケール（ズーム）の指定
	.center([139.0032936, 36.3219088]); //中心の座標を指定

path = d3.geo.path().projection(xy);　//geoJSONのデータをパスに変換する関数を作成

map = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 960).attr(&quot;height&quot;, 600); //地図用のステージ(SVGタグ)を作成


d3.json(&quot;gunma.geojson&quot;, function(json) { //geoJSONファイルの読み込み
  return map.append(&quot;svg:g&quot;)
            .attr(&quot;class&quot;, &quot;tracts&quot;)
            .selectAll(&quot;path&quot;)
            .data(json.features)
            .enter()
            .append(&quot;svg:path&quot;)
            .attr(&quot;d&quot;, path)  //位置情報をPathのd属性に変換して適応
            .attr(&quot;fill-opacity&quot;, 0.5)
            .attr(&quot;fill&quot;, &quot;green&quot;)
            .attr(&quot;stroke&quot;, &quot;#222&quot;);
});
[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo2/">example</a>

参考
<a href="http://s.kitazaki.name/docs/geojson-spec-ja.html">GeoJSON フォーマット仕様</a>


<h1>TopoJSONを使う</h1>
GeoJSONをTopoJSONに変換することで、データセットのファイルサイズを小さくすることができます。

参考
<a href="http://ja.d3js.info/blocks/mike/map/">D3.jsとTopoJSONで地図を作る</a>

TopoJSON変換用のツールをインストール
[shell]
npm install -g topojson
[/shell]

GeoJSONをTopoJSONへ変換
[shell]
topojson -o gunma.topojson gunma.geojson
[/shell]

TopoJSON用のプラグインを読み込み。
[html]
&lt;script src=&quot;http://d3js.org/topojson.v0.min.js&quot;&gt;&lt;/script&gt;
[/html]
[javascript]

var width = 600,
    height = 600;

	//ステージとなるsvgを追加
var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

	
//topjson読み込み	
d3.json(&quot;gunma.topojson&quot;, function(error, japan) {

	//topojsonオブジェクトの作成
	var gunma = topojson.object(japan, japan.objects.gunma);
	
	var projection = d3.geo.mercator()
					   .center([139.0032936, 36.3219088])
					   .scale(80000)
					   .translate([width / 2, height / 2]);
	
	var path = d3.geo.path().projection(projection);

	
	//パスの描画
	svg.selectAll(&quot;.gunma&quot;)
    .data(topojson.object(japan, japan.objects.gunma).geometries) //topojson、geometriesデータを読み込み
	.enter().append(&quot;path&quot;)
    .attr(&quot;class&quot;, function(d) { return &quot;gunma&quot; + d.id; })
    .attr(&quot;d&quot;, path);
	
	
	//色塗り
	var grad = d3.scale.linear().domain([0, 38]).range([&quot;#0000FF&quot;, &quot;#FFFFFF&quot;]);
	for(var i=0; i &lt; 36+1; i++){
		d3.select(&quot;.gunma&quot;+i).attr(&quot;fill&quot;, grad(i));
	}
	
});
[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo2/topo.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2351</wp:post_id>
		<wp:post_date>2013-01-21 14:40:38</wp:post_date>
		<wp:post_date_gmt>2013-01-21 05:40:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e9%b6%b4%e8%88%9e%e3%81%86%e5%bd%a2%e3%81%ae%e7%be%a4%e9%a6%ac%e7%9c%8c%e3%82%92svg%e3%81%a7%e6%8f%8f%e3%81%84%e3%81%a6%e3%81%bf%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2640]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【OpenLayers】電子国土Web.NEXT</title>
		<link>http://shimz.me/blog/map/2369</link>
		<pubDate>Tue, 22 Jan 2013 06:51:41 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2369</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://internet.watch.impress.co.jp/docs/column/chizu/20130110_581167.html">国土地理院「電子国土Web.NEXT」開発担当者インタビュー</a>

記事を読むまでその存在をしらなかったのですが、Google Mapのように自サイトに埋め込んで使えるようです。

ver.4から「<a href="http://openlayers.org/">OpenLayers</a>」に対応して使いやすくなったみたい。

OpenLayersの勉強がてら、ちょっと触ってみようと思います。

サンプル
<script type="text/javascript" src="http://jsdo.it/blogparts/alKp/js?width=465&height=496&view=play"></script>


<a href="http://portal.cyberjapan.jp/portalsite/sample/index2.html">電子国土ポータル　OpenLayersサイトサンプル集</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2369</wp:post_id>
		<wp:post_date>2013-01-22 15:51:41</wp:post_date>
		<wp:post_date_gmt>2013-01-22 06:51:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90openlayers%e3%80%91%e9%9b%bb%e5%ad%90%e5%9b%bd%e5%9c%9fweb-next</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2373]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</title>
		<link>http://shimz.me/blog/d3-js/2379</link>
		<pubDate>Wed, 23 Jan 2013 02:38:55 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2379</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo3/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/ggooglemap.jpg" alt="ggooglemap" width="519" height="512" class="aligncenter size-full wp-image-2380" /></a>


<h1>Google MapにD3.jsで作成したSVGをオーバーレイする</h1>
<a href="http://shimz.me/blog/d3-js/2351">前回</a>作成した鶴（群馬県SVG）をGoogle Mapに貼り付けます。
詳しくは、<a href="http://shimz.me/example/d3js/geo_example/geo3/">example</a>のソースを直接みてください。

[css title="css"]
#map {
	width: 500px;
	height: 500px;
}

.SvgOverlay {
	position: relative;
	width: 500px;
	height: 500px;           
}

.SvgOverlay svg {
	position: absolute;
	top: -4000px;
	left: -4000px;
	width: 8000px;
	height: 8000px;        
}

.SvgOverlay path {
	stroke: black;
	stroke-width: 1px;
	fill-opacity: .6;
}
[/css]

[javascript title="javascript"]
d3.json(&quot;gunma.geojson&quot;, function(json) {
	main(json);
});

function main(json) {
	
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 9,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			center: new google.maps.LatLng(36.53, 139.06),       
		});

		
	var overlay = new google.maps.OverlayView(); //OverLayオブジェクトの作成
	overlay.onAdd = function () {
		
		//オーバーレイ設定
		var layer = d3.select(this.getPanes().overlayLayer).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;SvgOverlay&quot;);
		var svg = layer.append(&quot;svg&quot;);
		var gunmalayer = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions&quot;);
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection();

		//Google Projection作成
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}

		//パスジェネレーター作成
		path = d3.geo.path().projection(googleMapProjection);　
            
		overlay.draw = function () {
			
			
			//地図描く
			gunmalayer.selectAll(&quot;path&quot;)
				.data(json.features)
				.attr(&quot;d&quot;, path) 
			.enter().append(&quot;svg:path&quot;)
				.attr(&quot;d&quot;, path)
				.attr(&quot;class&quot;, function(d) { return &quot;gunma&quot; + d.id; });
		
			//色塗り
			var grad = d3.scale.linear().domain([0, 38]).range([&quot;#0000FF&quot;, &quot;#FFFFFF&quot;]);
			for(var i=0; i &lt; 36+1; i++){
				d3.select(&quot;.gunma&quot;+i).attr(&quot;fill&quot;, grad(i));
			}


		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);
	
	//せっかくなんでアニメーションとかも付けてみる。
	var anime = Anime();
	setInterval(anime, 1000);
		
};
function Anime(){			
	var flag = true;
	return function(){
		if(flag){
			d3.select(&quot;.gunma16&quot;).transition().attr(&quot;fill&quot;, &quot;red&quot;);
			flag = false;
		}else{
			d3.select(&quot;.gunma16&quot;).transition().attr(&quot;fill&quot;, &quot;blue&quot;);
			flag = true;
		}
	}

}

[/javascript]

OverlayViewを作成して、Google MapにsetMapします。
drawメソッドが、再描画（ズームイン、ズームアウト等）するたびに呼び出されるので、その中で地図を描画します。
ポイントは以下の２点
[css]
.SvgOverlay svg {
	position: absolute;
	top: -4000px;
	left: -4000px;
	width: 8000px;
	height: 8000px;        
}
[/css]
↑オーバーレイするSVGタグを画面外に-4000pxほどずらして設置
[javascript highlight="4"]
			var googleMapProjection = function (coordinates) {  //Google Map 用のprojectionを設定
				var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
				var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
				return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
			}
[/javascript]
↑Projection関数が返すx,yの値に+4000pxして返す

これで、D3.jsで作成したSVGをグーグルマップにオーバーレイすることができたのですが……ものすごく重いです。
再描画が行われるたびにいちいち止まって実用的ではないので、データセットの軽量化を行います。

<h1>SHAPEデータの簡素化</h1>
国土数値情報サイトからダウンロードしたままのデータではあまりに重いので、一部情報をそぎ落として簡素化します。
シェープファイルの簡素化は以下のオンラインサービスを使用することで簡単に行えます。

<a href="http://mapshaper.com/test/MapShaper.swf">MapShaper</a>

国土数値情報サイトからダウンロードしたデータの中から、SHPファイルを上記サイトにアップロードします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/shpe000000.jpg" alt="shpe000000" width="554" height="446" class="aligncenter size-full wp-image-2384" />
中央下にあるバーを右に動かすとデータが簡素化されます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/shpe000001.jpg" alt="shpe000001" width="554" height="446" class="aligncenter size-full wp-image-2385" />
あんまり動かしすぎると、出来の悪いポリゴンみたいになるので注意。
<img src="http://shimz.me/blog/wp-content/uploads/2013/01/shpe000002.jpg" alt="shpe000002" width="554" height="446" class="aligncenter size-full wp-image-2386" />

程よきところで「export」ボタンを押して、Shapefile形式のpolygonsとpolylinesをダウンロードします。
ダウンロードしたpolygonsとplylinesのshpファイルを<a href="http://shimz.me/blog/d3-js/2351">前回</a>同様<a href="http://www.qgis.org/index.php">Quantum GIS</a>を使ってGeoJSONファイルに変換します。

簡素化する前のGeoJSONファイルのサイズが「3.07MB」だったのに対して、「46KB」までデータセットのサイズを小さくすることができました。
これなら、グーグルマップ上にオーバーレイしてもそんなに重くならずに済みます。

<a href="http://shimz.me/example/d3js/geo_example/geo3/">example</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2379</wp:post_id>
		<wp:post_date>2013-01-23 11:38:55</wp:post_date>
		<wp:post_date_gmt>2013-01-23 02:38:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91google-map%e3%81%absvg%e3%82%92%e3%82%aa%e3%83%bc%e3%83%90%e3%83%bc%e3%83%ac%e3%82%a4%e3%81%99%e3%82%8bshape%e3%83%87%e3%83%bc%e3%82%bf%e8%bb%bd%e9%87%8f%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2380]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】画像をデータセットとして使う</title>
		<link>http://shimz.me/blog/d3-js/2406</link>
		<pubDate>Thu, 24 Jan 2013 08:22:19 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2406</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/d3canvas/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/54e63f844254d9c9d85b02a36349db2f.jpg" alt="分解" width="1158" height="206" class="aligncenter size-full wp-image-2408" /></a>

読み込んだ画像ファイルをcanvasに転写し、getImageDataで取得したcanvasPixelArrayを整形して、d3へ渡します。
後は受けとったデータを元にsvgのcircleで描画。
詳細は<a href="http://shimz.me/example/d3js/d3canvas/">example</a>のソースを参照してください。

ボタンクリックで、色情報を元に分解　→　あんまり綺麗に分解できず orz 


[javascript title="画像読み込み→canvasに転写→d3.jsで描画"]
var w = 100;
var h = 100;

//canvas 設置
d3.select('body').append('canvas')
  .attr('id', 'canvas')
  .attr('width', w)
  .attr('heigh', h)
  .attr('style', 'display:none')

var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');

//イメージオブジェクト作成
var imgObj = new Image();
imgObj.src = &quot;Parrots.jpg&quot;;


imgObj.onload = function() {   //画像の読み込み
	
	ctx.drawImage(imgObj, 0, 0); //canvasに転写
	
	var imgData = ctx.getImageData(0, 0, w, h); //ImageDataオブジェクト取得


	var imgDataArray  = [];
	for(var i=0; i &lt; imgData.width * imgData.height * 4 ; i+=4){	
		//canvasPixelArrayを整形したデータをimgDataArrayに
		imgDataArray.push( {
			r:imgData.data[i],
			g:imgData.data[i+1],
			b:imgData.data[i+2],
			color:(function(r,g,b){return ((((0&lt;&lt;8)+r&lt;&lt;8)+g&lt;&lt;8)+b)})(imgData.data[i], imgData.data[i+1], imgData.data[i+2])
		} ); 
		
		
	}

	var svg = d3.select('body').append('svg'); //svgタグ設置
	
	svg.selectAll(&quot;circle&quot;)
		.data(imgDataArray)  //canvasから取得したピクセルデータ
		.enter()
		.append(&quot;svg:circle&quot;)
		.attr('cx', function(d, i){ return (i % w) * 2})
		.attr('cy', function(d, i){ return Math.floor(i / w) * 2})
		.attr('fill', function(d, i){ return  &quot;#&quot; + d.color.toString(16)})
		.attr('r', 2)
	
}
[/javascript]


<a href="http://shimz.me/example/d3js/d3canvas/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2406</wp:post_id>
		<wp:post_date>2013-01-24 17:22:19</wp:post_date>
		<wp:post_date_gmt>2013-01-24 08:22:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e7%94%bb%e5%83%8f%e3%82%92%e3%83%87%e3%83%bc%e3%82%bf%e3%82%bb%e3%83%83%e3%83%88%e3%81%a8%e3%81%97%e3%81%a6%e4%bd%bf%e3%81%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2408]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 データの取得（ダウンロードできる公開情報まとめ）</title>
		<link>http://shimz.me/blog/d3-js/2416</link>
		<pubDate>Fri, 25 Jan 2013 08:26:38 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2416</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/01/stockvault-bookshelf-126368.jpg" alt="stockvault-bookshelf-126368" width="600" height="400" class="aligncenter size-full wp-image-2417" />

<a href="http://matome.naver.jp/odai/2135883023685089601">公開データまとめ</a>

データを可視化するにも、そもそもデータがなければ始まらないので、政府や官公庁が配信している情報をまとめています。

主に、GISデータやCSVなどで配信されているモノを集めました。

随時更新していきます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2416</wp:post_id>
		<wp:post_date>2013-01-25 17:26:38</wp:post_date>
		<wp:post_date_gmt>2013-01-25 08:26:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-%e3%83%87%e3%83%bc%e3%82%bf%e3%81%ae%e5%8f%96%e5%be%97%ef%bc%88%e3%83%80%e3%82%a6%e3%83%b3%e3%83%ad%e3%83%bc%e3%83%89%e3%81%a7%e3%81%8d%e3%82%8b%e5%85%ac%e9%96%8b%e6%83%85</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2417]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「アノニマス・ライフ 名を明かさない生命」展をみてきました。</title>
		<link>http://shimz.me/blog/other/2422</link>
		<pubDate>Mon, 28 Jan 2013 05:55:42 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2422</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.ntticc.or.jp/Exhibition/2012/AnonymousLife/work08_j.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/work_photo08.jpg" alt="work_photo08" width="294" height="523" class="aligncenter size-full wp-image-2429" /></a>
《アエウム》 2009-12年　渡辺豪


東京オペラシティ内にあるNTTインターコミュニケーション・センターで現在開催されている「アノニマス・ライフ 名を明かさない生命」展を観てきました。
内容は以下。

<blockquote>匿名の，名前のわからない，個性のないもの．アノニマス（anonymous）とは，そのような意味を持っています．ギリシア語の接頭辞an-（～なしの）にonyma（名前）が組み合わされて，「名前がない」を意味しますが，展覧会の作品はそれぞれに題名がつけられていて，名前がないわけではありません．では，「名前がない」とは一体どういうことを意味するのでしょうか．
　例えば，ロボット工学の一部では，テクノロジーの発達に後押しされ，「機械の生命」を作り出そうとしています．しかし，その成果物の多くは，私たちがSFなどに夢見る理想的なアンドロイドからすれば完全なものとは言えず，それはアンドロイドと呼ばれるひとつ手前の存在，名づけえぬ何ものかなのです．また，遺伝子操作に代表されるバイオ・テクノロジーやクローン技術などの生殖医療技術の急速な発達は，私たちがその本質を理解するよりも早く，名づけることのできない，もうひとつの「生」のあり方を現実のものとしてきました．
　この展覧会では，そのような名づけることのできない生命，本当の名を明かしていないものたち，「アノニマス・ライフ」ということばを手がかりに，機械と人間を分かつ自明であったはずの「生」の意味を問い直すとともに，テクノロジーの進歩が新たな光を当てたセクシュアリティやアイデンティティの問題をはじめ，私たちの社会の中に遍在する多様なゆらぎ，境界，そしてその侵犯をめぐる作品を紹介します．

<a href="http://www.ntticc.or.jp/Exhibition/2012/AnonymousLife/index_j.html">アノニマス・ライフ ― 名を明かさない生命</a></blockquote>


どの作品も非常に興味深く楽しめたのですが、展示会のタイトルやテーマと、実際に展示されている作品にズレがあったかな？　と。
この展示会における「アノニマス」の定義は、「まだ名まえの無いもの。名づけようの無いもの」ということなんだと思いますが、スプツニ子！さんの「<a href="http://www.youtube.com/watch?v=gnb-rdGbm6s">生理マシーン</a>」や高嶺格さんの「Ask for a Trade」なんかは、ジェンダーやアイデンティティの不確かさに問いかけを行うような作品だったと思います。
名づけようのない生命ということでは、展示されていた"キメラ"を描いた中世の版画（たしかプリニウス 『博物誌』）などの方がテーマに即していたように思えました。


■リプリーQ2

<a href="http://www.ntticc.or.jp/Exhibition/2012/AnonymousLife/work02_j.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/work_photo02-199x300.jpg" alt="work_photo02" width="199" height="300" class="aligncenter size-medium wp-image-2433" /></a>
本当は「米朝アンドロイド」を観たかったのですが、展示期間が過ぎてました orz
そのかわりに展示されていたのがアクトロイドの「リプリーQ2」
実際に見るのは初めてだったのですが、やはり直接見ると「<a href="http://ja.wikipedia.org/wiki/%E4%B8%8D%E6%B0%97%E5%91%B3%E3%81%AE%E8%B0%B7%E7%8F%BE%E8%B1%A1">不気味の谷</a>」を意識せざるおえません。
造形の精密さより、たぶん動作に意志を感じられないところがどうにも違和感を抱くのだと思います。
もしそうだとすると、この違和感をなくすには自律しないとならないってことなので……不気味の谷を越えるのはまだまだ遠そうです。
パフォーマンス作品「模像と鏡像 - 美容師篇」については動画が放映されてましたが、これはやっぱりライブで見ないといけない作品でしょうね。

■エミー・マランスと12組の足
<iframe src="http://embed.ted.com/talks/lang/ja/aimee_mullins_prosthetic_aesthetics.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

『義肢はもはや失ったものを補うのではない 新たに生まれた空間に 装着者が自由な創作を実現する 力の象徴』

元パラリンピックの選手でもあり、女優・モデルでもあるエミー・マランスさんのTEDでのプレゼンが展示会内で放映されてました。
個人的に一番興味深かったです。
義足は、足りない器官を補うための代替物ではなく、人間の能力を拡張する道具なのだなぁ～と納得。
攻殻機動隊で描かれたようにパラリンピックの選手が、オリンピックの選手の記録を抜くなんてこともそう遠くない話なのかもしれないですね。


■総論
作品自体は楽しめました。
ただ、「名づけようのない生命」とまで含めてしまったのは、展示会の規模にたいして風呂敷広げすぎたのかも。
むしろそのテーマなら、以前紹介した<a href="http://shimz.me/blog/other/2295">自己複製するライフゲーム</a>やモンサント社が作ってる遺伝子組み換え植物（下記動画参照）なんかの方が「なんかモヤモヤして、名づけようのない生命(?)」って感じがします。あと、今後かならず生命倫理的に問題になってくるであろうiPS細胞周辺の技術とか。前述した展示会の序文の中に書かれていた『遺伝子操作に代表されるバイオ・テクノロジーやクローン技術などの生殖医療技術』に関する展示品があったらよかったなーと。

<iframe width="560" height="315" src="http://www.youtube.com/embed/PO7RmRVZs6A" frameborder="0" allowfullscreen></iframe>

全体通して「機械と人間の境界があいまいになっていくこと」への問い、みたいな事がコンセプトだったのでしょうけど、結局そんな問いなんてどこ吹く風といった感じに、身体と機械の融合を新たな可能性として人生を謳歌するエミー・マランスさんの動画が一番印象に残るという不思議な後味を感じた展示会でした。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2422</wp:post_id>
		<wp:post_date>2013-01-28 14:55:42</wp:post_date>
		<wp:post_date_gmt>2013-01-28 05:55:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%a2%e3%83%8e%e3%83%8b%e3%83%9e%e3%82%b9%e3%83%bb%e3%83%a9%e3%82%a4%e3%83%95-%e5%90%8d%e3%82%92%e6%98%8e%e3%81%8b%e3%81%95%e3%81%aa%e3%81%84%e7%94%9f%e5%91%bd%e3%80%8d%e5%b1%95%e3%82%92</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2429]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>エレベーターの開閉ボタンってトグルじゃ駄目なのかな？</title>
		<link>http://shimz.me/blog/other/2445</link>
		<pubDate>Tue, 29 Jan 2013 06:40:43 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2445</guid>
		<description></description>
		<content:encoded><![CDATA[コードを書く暇と気力がない　orz

<a href="http://matome.naver.jp/odai/2135925440564258701">間違えやすい「エレベーターの開閉ボタン」をJAYPEGでデザイナーたちがリデザインしてみた</a>

こういうのは見ていて面白い。
確かに、押し間違えること多いものなー。

ちょっと思うのは、エレベーターの開閉ボタンって、ボタン一つでトグルになっていればいいのではないかという事。

同じボタンが、
扉が開いているときに押すと「閉まる」ボタン
扉が閉まりそうな時に押すと「開くボタン」になって、そのまま押し続けていると扉開きっぱなし。

これで、押し間違える事なくなるんじゃないかと思うのだけれど。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2445</wp:post_id>
		<wp:post_date>2013-01-29 15:40:43</wp:post_date>
		<wp:post_date_gmt>2013-01-29 06:40:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%a8%e3%83%ac%e3%83%99%e3%83%bc%e3%82%bf%e3%83%bc%e3%81%ae%e9%96%8b%e9%96%89%e3%83%9c%e3%82%bf%e3%83%b3%e3%81%a3%e3%81%a6%e3%83%88%e3%82%b0%e3%83%ab%e3%81%98%e3%82%83%e9%a7%84%e7%9b%ae%e3%81%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[579155958778470]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】全国の熱中症発生数を表示してみた（CSVデータ読み込み）</title>
		<link>http://shimz.me/blog/d3-js/2451</link>
		<pubDate>Wed, 30 Jan 2013 03:05:55 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2451</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/csv/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/Heatstroke-e1359513926393.jpg" alt="Heatstroke" width="600" height="314" class="aligncenter size-full wp-image-2452" /></a>

とりあえず、色々やってみて覚えよう！ってことで。
「<a href="http://tenbou.nies.go.jp/gis/">国立環境研究所</a>」よりいただいた熱中症発生数のデータを可視化。
ダウンロードしたtsvファイルをExcelを使ってcsvに変更、文字コードをUTF8にコンバートしてD3に読み込ませています。
[javascript]
d3.csv(&quot;Heatstroke.csv&quot;, function(rows) {
		
		var svg = d3.select('body').append('svg');
		var margin = 60;
		var textmargin = 10
		var interval = 110;
		var sort = Sort();
		
		var dmax =  d3.max(rows.map(function(d) { return parseInt(d['指標値(単位:人)']); })) //指標値の最大値を取得
		var dmin =  d3.min(rows.map(function(d) { return parseInt(d['指標値(単位:人)']); })) //指標値の最少値を取得
		var scaleX = d3.scale.linear().domain([dmin, dmax]).range([30, 120]);



		svg.selectAll('.circle')  //サークルを出力
		   .data(rows)
		   .enter()
		   .append('circle')
		   .attr('class', 'circle')

		svg.selectAll('.name')  //県名を出力
		   .data(rows)
		   .enter()
		   .append('text')
		   .attr('class', 'name')

		svg.selectAll('.count') //指標値を出力
		   .data(rows)
		   .enter()
		   .append('text')
		   .attr('class', 'count')
		   
		   
		draw(rows)
		
		d3.select('body')
		   .on('click', function(){   //bodyにクリックイベントを設置
			var tmp = sort(rows);
			draw(tmp);
		   })

		function Sort(){
			var sortNext = 0;
			return function (data){
				switch(sortNext){
					case 0:
						data.sort(function(a,b){return a['指標値(単位:人)'] - b['指標値(単位:人)']});
						break;
					case 1:
						data.sort(function(a,b){return b['指標値(単位:人)'] - a['指標値(単位:人)'] });
						break;
					
				}
				sortNext++;
				if(sortNext &gt; 1) sortNext = 0;
				return data;
			}

		}
			   
			   
		function draw(data){	

			svg.selectAll('.circle')
			   .data(rows)
			   .transition()
			   .attr('opacity',0.6)
			   .attr('fill', 'red')
			   .attr('r', function(d){ return Math.floor(scaleX(parseInt(d['指標値(単位:人)']))) })
			   .attr('cx', function(d, i) { return (i % 10) * interval + margin})
			   .attr('cy', function(d, i){ return Math.floor(i / 10) * interval + margin})
			
			svg.selectAll('.name')
			   .data(rows)
			   .transition()
			   .attr('x', function(d, i) { return (i % 10) * interval + margin})
			   .attr('y', function(d, i){ return Math.floor(i / 10) * interval + margin - textmargin})
			   .text(function(d){ return d['都道府県名'] })
				   
			svg.selectAll('.count')
			   .data(rows)
			   .transition()
			   .attr('x', function(d, i) { return (i % 10) * interval + margin})
			   .attr('y', function(d, i){ return Math.floor(i / 10) * interval + margin + textmargin})
			   .text(function(d){ return d['指標値(単位:人)'] + &quot;人&quot; })

		 
		}	
	});
[/javascript]

d3.csvでcsvファイルを読み込むと１行目をキーとした連想配列が返ってきます。あとはそれをデータセットとして使用するだけ。簡単！

<a href="http://shimz.me/example/d3js/csv/">example</a>

ホントは、ソートを行った時に、サークルが移動するようなインタラクションにしたかったのだけれど、力及ばすでした orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2451</wp:post_id>
		<wp:post_date>2013-01-30 12:05:55</wp:post_date>
		<wp:post_date_gmt>2013-01-30 03:05:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js-%e7%bf%92%e4%bd%9c%e3%80%91%e5%85%a8%e5%9b%bd%e3%81%ae%e7%86%b1%e4%b8%ad%e7%97%87%e7%99%ba%e7%94%9f%e6%95%b0%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f%ef%bc%88csv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2452]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 Satellite Projection（衛星俯瞰図）てすと</title>
		<link>http://shimz.me/blog/d3-js/2462</link>
		<pubDate>Thu, 31 Jan 2013 04:00:15 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2462</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2013/01/satellite1.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/satellite1.jpg" alt="satellite1" width="968" height="733" class="aligncenter size-full wp-image-2463" /></a>


D3.jsには上記のような地図を表示するためのProjection(投影法)関数が用意されているのですが……なかなか思うように使いこなせません。
投影法を指定する際の一番難しいポイントは正しい数値を指定しないと、すぐ地図が画面外へ消えてしまうところですね。

Satellite Projectionの各値(rotateやtiltなど）を変更すると、どのように地図の見え方が変わるのか確認するためにテストをつくってみました。

<a href="http://shimz.me/example/d3js/geo_example/geo4/"><img src="http://shimz.me/blog/wp-content/uploads/2013/01/satellite12.jpg" alt="satellite12" width="1265" height="829" class="aligncenter size-full wp-image-2464" /></a>

[javascript]
var path, map, xy;
var map = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 960).attr(&quot;height&quot;, 600); //地図用のステージ(SVGタグ)を作成

d3.json(&quot;japan.geojson&quot;, function(json) {
   map.selectAll(&quot;path&quot;)
            .data(json.features)
            .enter()
            .append(&quot;svg:path&quot;)
			.attr(&quot;class&quot;, &quot;base&quot;);
			
	draw(80000, [45.00, -10, -50], 60, 200);
			
});


function draw(scale, rotate, tilt, clipAngle){

	projection = d3.geo.satellite()  //Satellite Projectionの指定
		.center([139.0032936, 36.3219088])
		.scale(scale)
		.rotate(rotate) //3軸の回転角
		.tilt(tilt) //視点の傾き？
		.clipAngle(clipAngle) //地図の表示範囲をカットする角度？


	path = d3.geo.path().projection(projection);　

	d3.selectAll('.base')
		.transition()
		.attr(&quot;d&quot;, path)  
		.attr(&quot;fill-opacity&quot;, 1)
		.attr(&quot;fill&quot;, &quot;green&quot;)
		.attr(&quot;stroke&quot;, &quot;#222&quot;);

			
}

d3.selectAll('input').on('change', function(d){
	var scale = document.getElementById(&quot;scale&quot;).value; 　//　d3.select(this).attr('value') //d3.selectだとなぜかスライダーのvalue値がうまく取れない。
	d3.select('#scaleValue').attr(&quot;value&quot;, scale);
	var rotate = [];
	rotate.push(document.getElementById(&quot;rotate1&quot;).value);
	rotate.push(document.getElementById(&quot;rotate2&quot;).value);
	rotate.push(document.getElementById(&quot;rotate3&quot;).value);
	d3.select('#rotate1Value').attr(&quot;value&quot;, rotate[0]);
	d3.select('#rotate2Value').attr(&quot;value&quot;, rotate[1]);
	d3.select('#rotate3Value').attr(&quot;value&quot;, rotate[2]);
	var tilt = document.getElementById(&quot;tilt&quot;).value; 　
	d3.select('#tiltValue').attr(&quot;value&quot;, tilt);
	var clipAngle = document.getElementById(&quot;clipAngle&quot;).value; 　
	d3.select('#clipAngleValue').attr(&quot;value&quot;, clipAngle);

	draw(scale, rotate, tilt, clipAngle);
});
[/javascript]

Chromeでしか動作確認してません。
<a href="http://shimz.me/example/d3js/geo_example/geo4/">example</a>

各値のスライダーを変更すると地図に反映されます。

日本地図のデータは、<a href="http://www.diva-gis.org/gdata">DIVA-GIS</a>からダウンロードしたものを、<a href="http://mapshaper.com/test/MapShaper.swf">MapShaper</a>で軽くしてQuantum GISでGeoJSONに変換するといういつもの流れです。
詳しくは<a href="http://shimz.me/blog/d3-js/2379">こちら</a>の「SHAPEデータの簡素化」を参照してください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2462</wp:post_id>
		<wp:post_date>2013-01-31 13:00:15</wp:post_date>
		<wp:post_date_gmt>2013-01-31 04:00:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-satellite-projection%ef%bc%88%e8%a1%9b%e6%98%9f%e4%bf%af%e7%9e%b0%e5%9b%b3%ef%bc%89%e3%81%a6%e3%81%99%e3%81%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2463]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[FullCalendar]カレンダーに画像を表示する</title>
		<link>http://shimz.me/blog/fullcalendar/2475</link>
		<pubDate>Fri, 01 Feb 2013 08:57:58 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2475</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/fullcalenar/03/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/fullcalimage.jpg" alt="fullcalimage" width="604" height="451" class="aligncenter size-full wp-image-2478" /></a>

Googleカレンダーっぽいカレンダーを作成できるjQueryのプラグイン「<a href="http://arshaw.com/fullcalendar/">FullCalendar</a>」
通常、イベント（予定）は文字でしか登録できませんが、ちょっとした工夫で、カレンダーに画像をイベントとして表示することができます。

[javascript]
$('#calendar').fullCalendar({
	eventRender: function(events, element) {
		if(events.img){ $(element.context)  //imgプロパティが存在するイベントだけtitleを画像に差し替え
							.css(&quot;border-color&quot;, &quot;transparent&quot;)
							.css(&quot;background-color&quot;, &quot;transparent&quot;)
							.html('&lt;img class=&quot;photo&quot;  src=&quot;'+events.img+'&quot; /&gt;');
		}
	},
	events: [
		{
			title: '通常のイベント',
			start: new Date(y, m, 15),
		},			
		{
			title: '画像　イベント',
			start: new Date(y, m, 1),
			img:&quot;img2.jpg&quot;					
		},
		{
			title: '画像　イベント',
			start: new Date(y, m, 2),
			img:&quot;img3.jpg&quot;					
		}
	]
});
[/javascript]

<a href="http://shimz.me/example/fullcalenar/03/">example</a>

貼り付けた画像もイベントなので、ドラッグで移動することができます。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2475</wp:post_id>
		<wp:post_date>2013-02-01 17:57:58</wp:post_date>
		<wp:post_date_gmt>2013-02-01 08:57:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fullcalendar%e3%82%ab%e3%83%ac%e3%83%b3%e3%83%80%e3%83%bc%e3%81%ab%e7%94%bb%e5%83%8f%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fullcalendar"><![CDATA[Fullcalendar]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2478]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[WordPress]カテゴリ毎のフィード(rss)を配信する。</title>
		<link>http://shimz.me/blog/wordpress/2489</link>
		<pubDate>Sat, 02 Feb 2013 00:29:03 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2489</guid>
		<description></description>
		<content:encoded><![CDATA[ブログ記事の内容が大分バラツキがでてきたので、カテゴリ毎のRSSを配信することにしました。
カテゴリページにRSSへのリンクがあります。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/caterss.jpg" alt="caterss" width="455" height="128" class="aligncenter size-full wp-image-2491" />

D3.jsに関する記事のみ配信する<a href="http://shimz.me/blog/category/d3-js/feed">RSS</a>
Fullcalendarに関する記事のみの<a href="http://shimz.me/blog/category/fullcalendar/feed">RSS</a>

などと、必要なカテゴリの更新情報だけを受け取ることができます。

<hr>

<h2>■ カテゴリページにRSSのリンクを出力する</h2>
以下のコードをカテゴリページに記述するとrssへのリンクを出力することができます。

[javascript]
&lt;a href=&quot;../category/&lt;?php $cat = get_the_category(); echo $cat[0]-&gt;slug; ?&gt;/feed&quot;&gt;RSS&lt;/a&gt;
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2489</wp:post_id>
		<wp:post_date>2013-02-02 09:29:03</wp:post_date>
		<wp:post_date_gmt>2013-02-02 00:29:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress%e3%82%ab%e3%83%86%e3%82%b4%e3%83%aa%e6%af%8e%e3%81%ae%e3%83%95%e3%82%a3%e3%83%bc%e3%83%89rss%e3%82%92%e9%85%8d%e4%bf%a1%e3%81%99%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2491]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit] スニペットを使う</title>
		<link>http://shimz.me/blog/editor/2519</link>
		<pubDate>Thu, 07 Feb 2013 00:30:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2519</guid>
		<description></description>
		<content:encoded><![CDATA[Komodo Editの高機能なスニペットを使いこなしましょう。
&nbsp;
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000000.jpg" alt="snip000000" width="655" height="661" class="aligncenter size-full wp-image-2560" />
定型文を入力するのに欠かせない<a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88">スニペット</a>機能。
Komodo Editでのスニペットの登録はToolbox上で行います。

Toolboxビュー上で右クリック→「Add」→「new snipet」
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip.jpg" alt="snip" width="385" height="485" class="aligncenter size-full wp-image-2559" />

登録したスニペットはToolbox上でダブルクリックして実行します。
Ctrl+Shift+K で呼び出して使用することもできますし、各スニペットにキーバインドを設定することもできます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000005.jpg" alt="snip000005" width="655" height="661" class="aligncenter size-full wp-image-2561" />

また、Toolbox内のsampleファオルダ以下、Abbreviationsフォルダにプログラム言語毎のフォルダがあるのですが、その中にスニペットをいれて置くと、エディタ上でスニペット名を記述した後に Ctrl+t でスニペットを貼付けることができます。
<blockquote>
例）
sample ➡ Abbreviations ➡ javascriptフォルダに「snip」というスニペットを入れている場合

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000006.jpg" alt="snip000006" width="256" height="330" class="aligncenter size-full wp-image-2562" />
javascriptファイルの編集時のみ「snip」と記述して Ctrl+t を押すとスニペットの挿入がおこなわれます。
</blockquote>

&nbsp;
<hr>
<h2>Interpolation shortcut</h2>
&nbsp;
Komodo Editでは、「<a href="http://docs.activestate.com/komodo/4.4/shortcuts.html">Interpolation shortcut</a>」という、実行時にスニペットを動的に変化させて貼り付けを行う特殊なコードがあります。
（EmEditorのプレースホルダーのようなもの）
これを使用すると、スニペット機能が格段に便利になります。
いくつか代表的なものだけ紹介します。

<strong>■ %tabstop</strong>
%tabstopは、スニペットを貼り付けた際にタブの移動を制御することができるショートカットです。

[html title="書式"]
[[%tabstop:＜デフォルト値＞]]
[/html]

スニペットを実行した後、Tabキーを押すとフォーカスが%tabstop上を移動します。
値の変更を素早く行いたいときに重宝します。
また、ショートカットの語尾に数値を付けることで、一時的な変数のようにつかえます。

[javascript title="例"]
/*
 *[[%tabstop1:ClassName]]
 * /

var [[%tabstop1]] = function(){
    [[%tabstop]]
}
[/javascript]
上記のスニペットを実行した後、最初にフォーカスが当るコメント内の「ClassName」を変更すると、同時にvar横の変数名も変更されます。
下記動画参照

<iframe width="559" height="433" src="http://www.youtube.com/embed/FLbFCkNHLI4" frameborder="0" allowfullscreen></iframe>

&nbsp;

<strong>■ %s</strong>
%sは、エディタ上で選択しているテキストをスニペットに代入するショートカットです。

[html title="書式"]
[[%s]]
[/html]

エディタ上で文字を選択しながらスニペットを実行すると、選択したテキストが%sに代入されてスニペットが貼り付けられます。
下記のコードは、選択したテキストをh1タグで囲むスニペットです。
[html title="例"]
&lt;h1&gt;[[%s]]&lt;/h1&gt;
[/html]

%sショートカットを使用したスニペットは、実行時にテキストが選択されていないとエラーになります。
テキストが選択されていない場合にデフォルト値を出力するには以下のように記述します。

[html title="書式"]
[[%s:else:＜デフォルト値＞]]
[/html]

%sもショートカットの語尾に数値を付けることで、一時的な変数(後方参照)のようにつかえます。


&nbsp;

<strong>■ %date</strong>
%dateは、スニペット実行時の日次を代入するショートカットです。

[html title="書式"]
[[%date:＜出力形式＞]]
[/html]

スニペット実行時に、日次が代入されます。
出力形式は下記のようにカスタマイズできます。
[html title="例"]
[[%date:%d/%m/%Y %H:%M:%S]]
[/html]

&nbsp;

<strong>■ %ask</strong>
%askは、スニペット実行時にダイアログを表示し、入力された値を貼り付けるスニペットに反映します。
[html title="書式"]
[[%ask:＜ラベル名＞:＜デフォルト値＞]]
[/html]

%askの含まれたスニペットは、実行するとダイアログを開きます。
ダイアログに入力された値をスニペットに代入して貼り付けを行います。

[html title="例"]
$.ajax({
   type: &quot;[[%ask:type:post]]&quot;,
   url: [[%ask:url:&quot;hoge.php&quot;]],
   data: [[%ask:data]],
   success: function(msg){
     
   }
 });
[/html]
上記のスニペットを実行すると下記のようなダイアログが表示され、入力した値が貼り付けるスニペットに反映されます。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/snip000004.jpg" alt="snip000004" width="487" height="167" class="aligncenter size-full wp-image-2563" />

%askもショートカットの語尾に数値を付けることで、一時的な変数のように使えます。


&nbsp;

&nbsp;

いかかでしたでしょうか。
他にも様々な機能を持った「<a href="http://docs.activestate.com/komodo/4.4/shortcuts.html">Interpolation shortcut</a>」がありますので、調べてみると面白いかもしれません。


なお、スニペット設定画面の「Maintain indentation context after insertion」の項目にチェックを入れておくと、スニペットを貼付ける際に前後のインデントに合わせて貼付けを行ってくれるので、チェックを入れておきましょう。

次回は、Toolboxの別の機能「マクロ」か「コマンド」の紹介をする予定です。

&nbsp;

【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>

&nbsp;
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2519</wp:post_id>
		<wp:post_date>2013-02-07 09:30:49</wp:post_date>
		<wp:post_date_gmt>2013-02-07 00:30:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit-%e3%82%b9%e3%83%8b%e3%83%9a%e3%83%83%e3%83%88%e3%82%92%e4%bd%bf%e3%81%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2560]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 viewBox属性を使ったPan/Zoon</title>
		<link>http://shimz.me/blog/d3-js/2526</link>
		<pubDate>Sun, 03 Feb 2013 05:28:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2526</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/zoom1/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/vboxzoom1.jpg" alt="vboxzoom1" width="498" height="501" class="aligncenter size-full wp-image-2527" /></a>
ドラッグで移動、ホイールで拡大縮小が行えます。

[javascript]
	
	var width = 500;
	var height = 500;
	var vbox_x = 500;
	var vbox_y = 500;
	var vbox_default_width = vbox_width = 1000;
	var vbox_default_height = vbox_height = 1000;
	
	var svg = d3.select('body')
		.append('svg')
		.attr(&quot;width&quot;, width)
		.attr(&quot;height&quot;, height)
		.attr(&quot;viewBox&quot;, &quot;&quot; + vbox_x + &quot; &quot; + vbox_y + &quot; &quot; + vbox_width + &quot; &quot; + vbox_height); //viewBox属性を付加

	
	random = function(){
		var min = 0;
		var max = 1;
		if(arguments.length == 1){
			max = arguments[0];
		}else{
			min = arguments[0];
			max = arguments[1];
		}
		
		return Math.floor(Math.random() * (max - min) ) + min;
	}
	
	
	var dataSet = [];
	
	for(var i=0; i &lt; 50; i++){
		dataSet.push({x:random(0,2000),y:random(0,2000),r:random(60,200)});
	}
	
	
	var color = d3.scale.linear().domain([0, dataSet.length]).range([&quot;steelblue&quot;, &quot;red&quot;])
		.interpolate(d3.interpolateHsl);
		;
	
	
	svg.selectAll('.circle')
	   .data(dataSet)
	   .enter()
	   .append('circle')
	   .attr('opacity', 0.5)
	   .attr('cx', function(d){ return d.x })
	   .attr('cy', function(d){ return d.y })
	   .attr('r', function(d){ return d.r })
	   .attr('fill', function(d, i){ return color(i);  })
	   .attr('class', 'circle');
	   

	  drag = d3.behavior.drag().on(&quot;drag&quot;, function(d) {
		vbox_x -= d3.event.dx;
		vbox_y -= d3.event.dy;
		return svg.attr(&quot;translate&quot;, &quot;&quot; + vbox_x + &quot; &quot; + vbox_y); //基点の調整。svgタグのtranslate属性を更新
	  });
	  svg.call(drag);
	
	zoom = d3.behavior.zoom().on(&quot;zoom&quot;, function(d) {
		var befere_vbox_width, before_vbox_height, d_x, d_y;
		befere_vbox_width = vbox_width;
		before_vbox_height = vbox_height;
		vbox_width = vbox_default_width * d3.event.scale;
		vbox_height = vbox_default_height * d3.event.scale;
		d_x = (befere_vbox_width - vbox_width) / 2;
		d_y = (before_vbox_height - vbox_height) / 2;
		vbox_x += d_x;
		vbox_y += d_y;
		return svg.attr(&quot;viewBox&quot;, &quot;&quot; + vbox_x + &quot; &quot; + vbox_y + &quot; &quot; + vbox_width + &quot; &quot; + vbox_height);  //svgタグのviewBox属性を更新
	});
  
  　　svg.call(zoom);   
[/javascript]

<a href="http://shimz.me/example/d3js/zoom1/">example</a>

ドラッグでの移動が行われた際にはsvgタグのtranslate属性を更新し、拡大が行われた際にはviewBox属性を更新することで、pan/zoom機能を実装しています。

Web InspectorのElementsタブを開いて、操作によってSVGタグの属性値がどのように変わるのか確認すると、理解しやすいかもしれません。

<a href="http://shimz.me/blog/wp-content/uploads/2013/02/vboxzoom2.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/vboxzoom2-300x189.jpg" alt="vboxzoom2" width="300" height="189" class="aligncenter size-medium wp-image-2528" /></a>


参考
<a href="http://www6.airnet.ne.jp/manyo/xml/svg/step2.html">SVGの座標</a> (viewBox属性について）

<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_04.htm">図形の変形</a> (transform属性について)

<a href="http://msdn.microsoft.com/ja-jp/library/gg589508(v=vs.85).aspx">SVG でズームやパンを行う方法</a>







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2526</wp:post_id>
		<wp:post_date>2013-02-03 14:28:09</wp:post_date>
		<wp:post_date_gmt>2013-02-03 05:28:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-viewbox%e5%b1%9e%e6%80%a7%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9fpanzoon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2527]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptでフォトレタッチ(画像処理）を行うライブラリ「Pixastic」</title>
		<link>http://shimz.me/blog/pixastic/2534</link>
		<pubDate>Mon, 04 Feb 2013 06:48:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2534</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/pixastic/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/pixsticexm.jpg" alt="pixsticexm" width="522" height="304" class="aligncenter size-full wp-image-2542" /></a>

以前、「<a href="http://shimz.me/blog/javascript/238">javascriptで自動着色やってみた。</a>」という記事で、モノクロのコミック画像に着色をするautocolorというPixasticの自作アクション（エフェクト）を作成したのですが、「<a href="http://www.pixastic.com/lib/">Pixastic</a>」本体について改めて紹介してみたいと思います。


<a href="http://www.pixastic.com/lib/">Pixastic</a>


PixasticはJavaScriptで画像にぼかしをかけたり、トリミングや明るさ・コントラストの調整など様々な加工を行うことができるライブラリです。

詳しい内容は、Documentationの「<a href="http://www.pixastic.com/lib/docs/">Introduction</a>」にデモがあるのでそちらで確認できます。

また、このライブラリを使用して作られた同名のオンラインフォトレタッチサービスがありますので、それを使ってみることでこのライブラリのポテンシャルを知る事ができます。

<a href="http://editor.pixastic.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/epixastic.jpg" alt="epixastic" width="600" height="295" class="aligncenter size-full wp-image-2537" /></a>
<a href="http://editor.pixastic.com/">Pixastic Editor</a>
（先ほど試したらファイルアップロードができなくなっているようです。Sample Imagesからは画像が読み込めるので、その画像でならどのような加工がおこなえるのか試せます）


残念ながからcanvasを使用するため、モダンブラウザでないと一部アクションが動作しません。
（ぼかしや反転などのアクションはcanvasが使えないIEにも対応しています）

<h2>使用方法</h2>
pixasticコアライブラリと使用するアクションファイルを読み込みます。
[html title="pixastic読み込み"]
&lt;script type=&quot;text/javascript&quot; src=&quot;pixastic/pixastic.core.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;pixastic/actions/brightness.js&quot;&gt;&lt;/script&gt;
[/html]

画像(imgオブジェクト）にアクションを実行します。
[javascript title="アクションの実行"]
window.onload = function(){
	   var img = new Image();
	   img.src = &quot;01.jpg&quot;;   //イメージオブジェクトの読み込み 

	   
	  img.onload = function() {  //イメージの読み込みが完了したら実行されるコールバック
		var newimg = Pixastic.process(
			img,
			&quot;brightness&quot;,	// 使用するアクションの名前

			{		// オプション

				&quot;brightness&quot; : 120,	// 明るさ指定
				&quot;contrast&quot; : 0.5,	// コントラスト指定
				&quot;rect&quot; : {		// エフェクトを掛ける範囲指定
					&quot;left&quot; : 100,
					&quot;top&quot; : 100,
					&quot;width&quot; : 200,
					&quot;height&quot; : 150
				}
			}
		)
		document.body.appendChild(img);  //元画像をbodyに追加(img要素)		
		document.body.appendChild(newimg);  //加工済画像をbodyに追加(canvas要素)		
	  }

}
[/javascript]

<a href="http://shimz.me/example/pixastic/01/">example</a>

process関数の戻り値はcanvas要素になるので、加工したデータをimg要素として追加したい場合は、toDataURL()を使ってデータURIスキームに変換してください。

[javascript title="toDataURL() 使用例"]
var newImgElm = new Image();
newImgElm.src = newimg.toDataURL()  
newImgElm.onload = function(){
	document.body.appendChild(newImgElm);  //加工済画像をbodyに追加(img要素)		
}
[/javascript]

<hr>
■ CSSのクラスでエフェクトをかける
もっと簡単に、imgタグのclass属性にアクションを指定するだけで画像を加工するという方法もあります。
[html title="クラスにアクションを指定"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;Pixastic css&lt;/title&gt;

&lt;script&gt;
var pixastic_parseonload = true;  //ライブラリの読み込みより先に記述しないとダメ
&lt;/script&gt;
&lt;script src=&quot;pixastic/pixastic.core.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;pixastic/actions/invert.js&quot;&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;h2&gt;Pixastic css&lt;/h2&gt;

&lt;img src=&quot;01.jpg&quot; class=&quot;pixastic pixastic-invert(rect=50,50,150,150)&quot;/&gt; 
&lt;/body&gt;
&lt;/html&gt;
[/html]

<a href="http://shimz.me/example/pixastic/01/css.html">example</a>

たったこれだけ、非常に簡単ですね。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2534</wp:post_id>
		<wp:post_date>2013-02-04 15:48:52</wp:post_date>
		<wp:post_date_gmt>2013-02-04 06:48:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%a7%e3%83%95%e3%82%a9%e3%83%88%e3%83%ac%e3%82%bf%e3%83%83%e3%83%81%e7%94%bb%e5%83%8f%e5%87%a6%e7%90%86%ef%bc%89%e3%82%92%e8%a1%8c%e3%81%86%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="pixastic"><![CDATA[Pixastic]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2542]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SQL]PostgreSQLの幾何データ演算子TIPS</title>
		<link>http://shimz.me/blog/sql/2556</link>
		<pubDate>Wed, 06 Feb 2013 03:02:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2556</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/posGeometry.jpg" alt="posGeometry" width="406" height="284" class="aligncenter size-full wp-image-2557" />


PostgreSQLには豊富な幾何データ型と幾何データを扱うための演算子があります。

<a href="http://www.postgresql.jp/document/8.1/html/datatype-geometric.html">幾何データ型</a>
<a href="http://www.postgresql.jp/document/8.1/html/functions-geometry.html">幾何関数と演算子</a>

主に地理データを扱う時に使用することが多いのですが、地理データ以外に使っても便利な効果が得られます。

例えば、ある二つのデータ（ここでは、「価格」と「大きさ」とします)が、最大値からどれだけ離れているかを求めたい場合は、以下のクエリで最大値からの距離が求めることができます。
（先に求めておいた最大値と比較したいカラムを、それぞれpoint型に型変換したのち「<->」演算子で２点の距離を出力します）

[sql]
SELECT point(price, itemSize) &lt;-&gt; point(maxPrice, maxItemSize) from example_table
[/sql]

あるいは、複数のカラムの値が、ある範囲内に収まっているかどうか？　は以下のクエリで判定することができます。
[sql]
select box(point(price, itemSize), point(cost, amant)) ~ box(point(5000, 60), point(1200, 10)) from example_table
[/sql]
各カラムの値が、指定した範囲内に収まっていれば「真」が返ってきます。

その他にも、データが指定した範囲より右に有るか左にあるか？という比較が行えたり、boxの中心点の距離を取得することで、「どのくらい似ているか？」の指標が得られたりするので、簡単なレコメンドやクラスタリングなどを行いたいときに、使ってみると面白いかもしれません。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2556</wp:post_id>
		<wp:post_date>2013-02-06 12:02:10</wp:post_date>
		<wp:post_date_gmt>2013-02-06 03:02:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sqlpostgresql%e3%81%ae%e5%b9%be%e4%bd%95%e3%83%87%e3%83%bc%e3%82%bf%e6%bc%94%e7%ae%97%e5%ad%90tips</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2557]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SQL]SELECT文で行(レコード)同士の相関係数を取得する</title>
		<link>http://shimz.me/blog/sql/2564</link>
		<pubDate>Fri, 08 Feb 2013 01:34:50 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2564</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000000.jpg" alt="pear000000" width="435" height="164" class="aligncenter size-full wp-image-2565" />

例えば、上記のようなデータがあったとして、列同士の相関係数はcorr関数を使う事で簡単に取得することができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000001.jpg" alt="pear000001" width="434" height="166" class="aligncenter size-full wp-image-2566" />
[sql title="a列とc列の相関係数を取得する"]
select corr(a, c) from example_tb
[/sql]

しかし、時として行同士の相関係数を取得したい場合があります。
<a href="http://shimz.me/blog/other/2564/attachment/pear000002" rel="attachment wp-att-2567"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000002.jpg" alt="pear000002" width="435" height="172" class="aligncenter size-full wp-image-2567" /></a>
上記のデータだと、id:1のレコードに対してid:3のレコードとの相関係数が欲しいのですが……求め方がわかりません orz
仕方がないので、SELECT文の中でピアソンの積率相関係数計算を行って、相関係数を求めることにします。（もっと簡単に取得できる方法がありましたら教えてください）

id:1のレコードに対して他のレコードのピアソン相関係数を取得するSELECT文は以下となります。(対象とするのは、a,b,c,d,e の5項目とします)
[sql title="id:1のレコードに対して、他のレコードとの相関係数を取得する"]
SELECT
x.id, x.a, x.b, x.c, x.d, x.e,
(
    (
        (x.a*y.a)+(x.b*y.b)+(x.c*y.c)+(x.d*y.d)+(x.e*y.e) 
    )
    -
    (
        (x.a+x.b+x.c+x.d+x.e)*(y.a+y.b+y.c+y.d+y.e)/5
    )
)
/
NULLIF(
	(
	    sqrt(
	            (
	                (pow(x.a,2)+pow(x.b,2)+pow(x.c,2)+pow(x.d,2)+pow(x.e,2)) 
	                - 
	                (x.a+x.b+x.c+x.d+x.e)*(x.a+x.b+x.c+x.d+x.e)/5
	            )
	            *
	            (
	                (pow(y.a,2)+pow(y.b,2)+pow(y.c,2)+pow(y.d,2)+pow(y.e,2)) 
	                - 
	                (y.a+y.b+y.c+y.d+y.e)*(y.a+y.b+y.c+y.d+y.e)/5 
	            )
	        )
	 
	)
,0)
as pearson
from 
example_tb x,
example_tb y
where y.id = 1 
order by pearson DESC
[/sql]
上記クエリを実行した結果が以下です。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000003.jpg" alt="pear000003" width="284" height="170" class="aligncenter size-full wp-image-2568" />

正の相関関係にあたる、自分自身のレコードには「１」が、負の相関関係にあたるid:2のレコードに大しては「-1」がちゃんと返ってきました。同じカラムに入っている値が近いほど、1に近い値が返ってきます。

５項目全て同じ値のレコードは相関を計ることができずNULLが返ります。
postgreSQLのcorr関数の仕様にあわせました。
あと、５項目の中にNULLが含まれていても上記の式では相関係数を計算できないのでNULLを返します。

ExcelのPEARSON関数を使って相関係数を求めた結果と比較してみます。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/pear000004.jpg" alt="pear000004" width="543" height="215" class="aligncenter size-full wp-image-2569" />

ちょっと誤差が出ているのが気になりますが、まぁだいたい合ってますかね。

これで、行間の比較係数を取得することができました。
比較対象とする項目(カラム)が増える毎に、クエリを修正しなくてはならないので使い勝手はいまいちですが。

相関係数の計算式は下記書籍を参考にさせていただきました。
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4873113644&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<hr>
<h2>備考</h2>

上記コードでpow関数を使わずにベキ乗計算をおこなっている部分があります。
なぜか、ここでpow関数を使うと数値がずれるので回避策としてpow関数を使わずベキ乗計算をしています。

[sql title="正しく計算される" highlight="17,23"]
select
(
	(
		(5*5)+(3*3)+(5*5)+(3*3)+(5*5)
	)
	-
	(
		(5+3+5+3+5)*(5+3+5+3+5)/5
	)
)
/
(
	sqrt(
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				((5+3+5+3+5)*(5+3+5+3+5))/5  
			)
			*
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				((5+3+5+3+5)*(5+3+5+3+5))/5  
			)
		)
)
[/sql]
➡1

[sql title="正しく計算されない" highlight="17,23"]
select
(
	(
		(5*5)+(3*3)+(5*5)+(3*3)+(5*5)
	)
	-
	(
		(5+3+5+3+5)*(5+3+5+3+5)/5
	)
)
/
(
	sqrt(
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				pow((5+3+5+3+5),2)/5  
			)
			*
			(
				(pow(5,2)+pow(3,2)+pow(5,2)+pow(3,2)+pow(5,2)) 
				- 
				pow((5+3+5+3+5),2)/5  
			)
		)
)
[/sql]
➡1.04166666666667

同じ計算をしているはずなのに……なぜ？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2564</wp:post_id>
		<wp:post_date>2013-02-08 10:34:50</wp:post_date>
		<wp:post_date_gmt>2013-02-08 01:34:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sqlselect%e6%96%87%e3%81%a7%e5%88%97%e3%83%ac%e3%82%b3%e3%83%bc%e3%83%89%e9%96%93%e3%81%ae%e7%9b%b8%e9%96%a2%e4%bf%82%e6%95%b0%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2568]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gunmaweb #12に参加してきました。</title>
		<link>http://shimz.me/blog/other/2570</link>
		<pubDate>Sun, 10 Feb 2013 09:40:27 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2570</guid>
		<description></description>
		<content:encoded><![CDATA[地元群馬県で行われた勉強会、<a href="http://atnd.org/events/35921">Gunmaweb #12</a>に参加しました。

初参加だったのですが、参加者は32人とのことで大盛況。
普段会社にこもっているので、群馬にこんなにも同じ業界の方が居たんだ！　ということにまずビックリするというｗ
「やはり社外へと出て行かないといかんな」と新ためて感じた次第です。

次回は２か月後ということなので、ぜひまた参加したいと思います。

&nbsp;

&nbsp;

<hr>
以下、今回行われたライトニングトーク/プレゼンの感想


<strong>「正解がわかりません」 LT <a href="https://twitter.com/korogaru">@korogaru</a> さん</strong>
A/Bテストという、２種類のページを作成しトラフィックを分けて効果を測定する最適化手法についてプレゼンされていました。
一応、知ってはいたのですが実際に試したことはいままでなかったので、cookieを使って振り分けの確立を調整するなど、具体的なノウハウが聞けてありがたかったです。「あと測定する値を間違えると、効果についてまったく違った結論をだしてしまうことになるので気を付けなければいけない」など、ちょうどKindleで「<a href="http://www.amazon.co.jp/dp/B00B42SXH0/ref=kinw_dp_ke">統計学が最強の学問である</a>」を読んでいたところだったので、自分的にホットな話題でした。
仕事では、なかなか周囲を説得するのがまだまだ難しいので、ひとまず自分のサイトで試してみたいですね。

&nbsp;

<strong>「vimをつくってみた」 LT <a href="https://twitter.com/tsurumau">@tsurumau</a> さん</strong>
「JavaScriptのゲームエンジン<a href="http://impactjs.com/">Impact</a>でvim作った」、というまさに「その発想はなかったわー」というプレゼンでした。
vimクローンでありながら、独自コマンドで猫がミサイルぶっ放したり。
（何を言ってるのか わからねーと思うが……）
Impactについては、以前「<a href="http://matome.naver.jp/odai/2134682461157875201">Javascript 2Dゲームエンジンまとめ</a>」を作ったときに気にはなっていたのですが、有料のライブラリだったので手が出せなかったので具体的な使用例を知れてうれしいです。
同じ作者さんが作られている「Ejecta」(*1)も非常に興味深いので、今後目が離せないライブラリだと思いました。

&nbsp;

<strong>「Photoshopの自動処理で効率作業」 LT <a href="https://twitter.com/caz0404">@caz0404</a> さん</strong>
Photoshopのアクション機能について紹介されていました。
いわゆるエディタなどの録画マクロ（録画→操作→録画終了で再生を押すと操作が再生される）機能のようで、画像の明るさ調節などをアクションにしておくことで複数の画像を一括で処理することができるとのことでした。私はPhotoshopそのものにあまり触ることがないので、デザイナーさんの作業効率化のノウハウなどを聞けたのは興味深かったですね。
あと、おまけで紹介されていたPhotoshopの新機能(?)が凄かったです。
画像の一部を切り取って移動したら自動的に背景に合うように処理してくれる、みたいな」
（うまく説明できない　orz）

&nbsp;

<strong>「モダンすぎる静的サイトの作り方」 LT <a href="https://twitter.com/yterajima">@yterajima</a> さん</strong>
WEBサイト作成の生産性向上のために今や欠かせなくなりつつあるメタ言語。
CSSメタ言語の<a href="http://less-ja.studiomohawk.com/">Less</a>や<a href="http://sass-lang.com/">sass</a>、Javascriptメタ言語の<a href="http://ja.wikipedia.org/wiki/CoffeeScript">CoffeeScript</a>などが有名ですが、HTMLの記述を効率化する<a href="https://github.com/yterajima/slim/tree/README_ja">slim</a>というメタ言語について紹介されていました。
まったくその存在を知らなかったのですが、 記号含有率が低く構文も覚えやすいテンプレートエンジンですね、使ってみたいと思います。
また、メタ言語やテンプレートエンジンはどうしてもコンパイルするという手間が増えてしまうのが悩みの種ですが、それらをまとめて効率よく管理できる「<a href="http://middleman-guides.e2esound.com/">Middleman</a>」というサイトジェネレータについても教えていただきました。

&nbsp;

<strong>「エンジニアがTRPGをやるべき理由 〜隣り合わせの遊びと技術〜」 LT <a href="https://twitter.com/parrot_studio">@parrot_studio</a> さん</strong>
「TRPG=agile」とのことで、二つの共通点について話されいました。
中学生の頃、ソードワールドにハマってリプレイやルールブックなどを読み漁ったのですが、実際に体験したことはないのですが、説明を聞いていて「目標に向けて複数人協力しながら進めていく様」というのは、まさにプロジェクトだなと感じました。GM=PMとも言えるなぁ、と。
TRPGを共同で遊ぶなかで発生する問題や障害は、その他のプロジェクトで起きる問題と共通していて、だからこそ経験として生きるのでしょうね。
ちなみに、私はTRPGというと「<a href="http://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6%E3%83%A9%E3%83%B3">シャドウラン</a>」の世界観が凄い好きだったのですが、久々に思い出して調べてみたら……販売中止になっていました orz


&nbsp;

<strong>「javascriptで苦戦した経験」 LT <a href="https://twitter.com/kanayannet">@kanayannet</a></strong>
Javascriptのハマりどころやその解決方法についてプレゼンされてました。
こういう、ノウハウやトラブルシュートについての情報とかありがたいですね。
特に私のように、あまり周囲にエンジニアが居ない環境だったりするとどうしてもそういった情報に疎くなってしまうので。
（プライベートブラウズONにしていると、Mobile SafariでlocalStorageが使えない、とかはじめて知りました）
あと、iOS6のキャッシュ問題はやはりみなさん苦労しているみたいですね。


&nbsp;

<strong>「MTCafe Gunma 2013へのお誘い」 LT <a href="https://twitter.com/hjfuji">@hjfuj</a>i さん</strong>
来月、3/1に行われる「<a href="http://kokucheese.com/event/index/71371/">MTCafe</a>」といイベントと、MTの現状についてプレゼンされていました。
MTについては、最近話題を追っていなかったのでかなり疎くなっていましたが……いつの間にかMTの開発の中心が日本に移っていたというはビックリしまた。
開発元になっている会社(Six Apart, Ltd.)が国内にあるというのは、ある意味心強いですね。
文字コードがらみでハマったりすることがとかないでしょうし。(海外のマイナーなCMSとかで遊んでたりするとたまにハマったりするので）
2004年頃から始まったblogブームの立役者でもあり、実績も十分。パートナー会社も多いですし、企業ユース使うならWordpressより向いているのかもと思いました。
個人ユースでは、今のところWordpressの「テンプレート？　php直書きですがなにか？」という手軽さがなかなか手放せなかったりしますがｗ

&nbsp;

<strong>「Koi::Bana」LT <a href="https://twitter.com/clicktx">@clicktx</a> さん</strong>
始まって数分間は「婚約会見が始まるのかな？」と思いましたが、婚約したのは「SubLime Text」とだったようですｗ
<a href="http://shimz.me/blog/editor/74">Komodo Edit</a>派ではありますが、やはり他のエディタは気になりますし、<a href="http://liginc.co.jp/designer/archives/6774">”恋に落ちるエディタ”「Sublime Text」</a>といえば注目の的なので捨て置けません。
「ちょっと、いいかも」なんて心が揺らぎましたが、私も負けずにKomod Editをプッシュしていきたいと思います。

&nbsp;

<strong>「Nuuk Jam」 LT <a href="https://twitter.com/ivoryworks">@ivoryworks</a> さん</strong>
テキストをURLエンコードして疑似URLを作り、それをGoogle URL Shortenerに送って短縮URLに変換する……つまり短縮URLをデータの保存に使ってしまおうという、これまた「その発想はなかったわー」なプレゼンでした。
テキストだけでなく、画像もdata URI Schemeにして分割しそれぞれを短縮URLに変換、変換した短縮URLをまとめてさらに短縮URLを作る……という凄技。
Base64にエンコードしてしまえば、サイズの問題はありますが基本的にどんな形式のファイルでも短縮URL化できると思うので、秘密なファイルを短縮URL化して保存しておくとかできそうです（夢がひろがるますね！）
一番の問題点は、Googleに見つかるとバンされそうというところですがｗ 


&nbsp;

&nbsp;


<hr>
*1 <a href="http://impactjs.com/ejecta">Ejecta</a>
通常、ImpactやEnchant.jsなどのJavascriptエンジンで作ったゲームをPhoneGap等でアプリ化すると、作成したゲームはWebView の中で実行されるため処理速度がmobile safariで見たときよりも遅れることになります。
Ejectaは、独自に実装したcanvas APIを持ち、Javascriptで書かれた描画処理をopenGLで、またサウンドをopenALで実行するという、「そこまでするか！」という驚愕のフレームワークです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2570</wp:post_id>
		<wp:post_date>2013-02-10 18:40:27</wp:post_date>
		<wp:post_date_gmt>2013-02-10 09:40:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gunmaweb-12%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[Gunma.web#12に参加しました - e2esound.com業務日誌]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.e2esound.com/wp/2013/02/10/gunmaweb12%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%be%e3%81%97%e3%81%9f/</wp:comment_author_url>
			<wp:comment_author_IP>112.78.112.148</wp:comment_author_IP>
			<wp:comment_date>2013-02-10 21:49:27</wp:comment_date>
			<wp:comment_date_gmt>2013-02-10 12:49:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 12回目を迎えた群馬で開催されるそっち系の人向け勉強会Gunma.web#12に参加しました。個別の発表については_shimizuさんのブログ記事 Gunmaweb #12に参加してきました。 | GUNMA GIS GEEK に詳しいです。 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360500567.7833659648895263671875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1360536916.7078800201416015625;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Macでアスキーアートが崩れてしまう問題を回避する(webフォント)</title>
		<link>http://shimz.me/blog/troubleshooting/2573</link>
		<pubDate>Mon, 11 Feb 2013 11:31:31 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2573</guid>
		<description></description>
		<content:encoded><![CDATA[ただし、日本語を含むAAは無理。

<a href="http://shimz.me/labo/video_canvas/badapple/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/130211-0002.png" alt="130211-0002" width="753" height="630" class="aligncenter size-full wp-image-2574" /></a>

以前、canvasタグについて勉強していたときに、動画をアスキーアートに変換するスクリプトをつくってみたのですが、Macのブラウザで閲覧するとAAを動かしたときにどうしても崩れてしまい、解決策も思いつかずに放置していました。

preタグで囲ってmonospacedを指定しても崩れまくり、<a href="https://www.google.co.jp/search?q=%E7%AD%89%E5%80%8D+mono&oq=%E7%AD%89%E5%80%8D+mono&aqs=chrome.0.57j62.4365&sourceid=chrome&ie=UTF-8#hl=ja&safe=off&tbo=d&sclient=psy-ab&q=mac+%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%88&oq=mac+%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%88&gs_l=serp.3..0j0i30l5j0i8i30l2.52697.57401.2.57798.17.16.1.0.0.2.146.1535.11j5.16.0...0.0...1c.1j4.2.serp.nlht5ZbmBK8&pbx=1&bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&bvm=bv.42080656,d.aGc&fp=e35fca99988c77f2&biw=1362&bih=651">ググって</a>みても、クライアントにフォントをインストールするぐらいしか方法がなさそうだったので、webサイトでは無理かなーと。

最近になって「そういえばWebフォントなんてものがあったな」と思い出し試してみたところわりと巧くいったので、メモしておきます。

とはいっても、単純にwebフォント読み込むCSSを指定しただけなんですが。
使ったのは<a href="http://www.google.com/webfonts">Google WebFonts</a>からダウンロードした「<a href="http://www.google.com/webfonts/specimen/VT323">VT323</a>」です。
落としたフォントファイルをサーバーにアップして、あとはCSSでフォントの読み込みと指定を行うだけです。

[css title="例"]
@font-face {
   font-family: MyWebFont;
   src: url('VT323-Regular.ttf') format(&quot;truetype&quot;);
}

pre{
   font-family: MyWebFont;
}
[/css]

これで、Macで見ても文字が崩れることがなくなりました。
まぁ、日本語は当然ダメなままなので、使いどころは限られますが。

アルファベットはデータ量少なくてうらやましい……

<a href="http://shimz.me/labo/video_canvas/badapple/">example</a>
chrome or Firefoxでないと動きません。
初回アクセス時は、動画とwebフォントの読み込みで表示されるまでに時間がかかります。









]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2573</wp:post_id>
		<wp:post_date>2013-02-11 20:31:31</wp:post_date>
		<wp:post_date_gmt>2013-02-11 11:31:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac%e3%81%a7%e3%82%a2%e3%82%b9%e3%82%ad%e3%83%bc%e3%82%a2%e3%83%bc%e3%83%88%e3%81%8c%e5%b4%a9%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e5%95%8f%e9%a1%8c%e3%82%92%e5%9b%9e%e9%81%bf%e3%81%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2574]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 SVGで路線図を描く</title>
		<link>http://shimz.me/blog/d3-js/2575</link>
		<pubDate>Tue, 12 Feb 2013 12:31:29 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2575</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo5/"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/rosen1.jpg" alt="rosen1" width="673" height="622" class="aligncenter size-full wp-image-2576" /></a>


<a href="http://shimz.me/example/d3js/geo_example/geo5/">example</a>

今までやってきた内容の復習に、D3.jsを使って路線図を描いててみました。
当初は、バスの路線図を作っていたのですが、群馬県内に絞ってもバス停やバスルートの情報量が多く、重くて大変だったので途中で路線変更しました。

鉄道データは、いつものごとく<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N02.html">国土数値情報</a>より。

鉄道データ(Shape)を<a href="http://www.qgis.org/index.php">Quantum GIS</a>に読み込み、群馬県内を選択、選択したレイヤーをいったん切り出しShapeで保存、<a href="http://mapshaper.com/test/MapShaper.swf">MapShaper</a>で簡素化。
再度、Quantum GISに読み込んでGeoJSONに変換。
また、鉄道(線)データだけTopoJSONに変換しています。
(点データはTopoJSONに変換してもさほど軽量化の恩恵が得られないみたいなのでそのままつかってます）
途中、Quantum GISの属性データの文字化け問題に悩まされましたが、下記サイトを参考にさせてもらい解決。
<a href="https://sites.google.com/site/qgismemo/010-dao-ru/qgis1-8no-wen-zi-huake-dui-chu-fa">QGIS1.8の文字化け対処法</a>
とりあえず、形にはなったかなと。
パン／ズーム機能についてはviewBox属性を使用。
projectionのscaleを使った方が正確だし見やすくなるのですが、そうするとどうしても最描画が必要になって重くなるので。
(でも、鉄道データはバスデータに比べて大分小さくなったので、scale使ってもさほど重くならないかもしれません)

この辺りの行程は、過去記事を参照ください。


<a href="http://shimz.me/blog/d3-js/2351">鶴舞う形の群馬県をSVGで描いてみる</a>
<a href="http://shimz.me/blog/d3-js/2379">Google MapにSVGをオーバーレイする(SHAPEデータ軽量化)</a>
<a href="http://shimz.me/blog/d3-js/2526">viewBox属性を使ったPan/Zoon</a>

■今後の課題
<ul>
	<li>viewBox属性を使ったパン／ズームだとラベルの位置指定が難しい。</li>
	<li>svg要素が重なり合う時のコントロール(z-indexがsvgでは効かないので……どうしよう）</li>
	<li>バスのデータみたいに情報量が多い場合は「見えている範囲内のデータだけ読み込む」ような処理が必要</li>
</ul>

<s>当面、一番の問題は重なり合いのコントロールですかね。
DOMに追加する順番で重なり合いを操作したいところですが、d3.jsonなど非同期で読み込んでいるとどうしても一番上に置きたい要素が、他の要素の下に隠れてしまったりします。
あとは、追加後にDOMを並べ替えるか。
参照：<a href="http://stackoverflow.com/questions/6566406/svg-re-ordering-z-index-raphael-optional">SVG re-ordering z-index (Raphael optional)</a>
う〜ん、めんどくさい。
</s>
始めにレイヤー構造を含んだsvgを作っておいてそこに追加していくだけで解決しました（＾＾；）
完全に失念していて、Twitterで教えてもらうまでまったく気付きませんでした orz


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2575</wp:post_id>
		<wp:post_date>2013-02-12 21:31:29</wp:post_date>
		<wp:post_date_gmt>2013-02-12 12:31:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-svg%e3%81%a7%e8%b7%af%e7%b7%9a%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2576]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit]マクロを使う</title>
		<link>http://shimz.me/blog/editor/2579</link>
		<pubDate>Wed, 13 Feb 2013 09:57:18 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2579</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>の続きです。

<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000007.jpg" alt="macro000007" width="258" height="279" class="aligncenter size-full wp-image-2588" />


Komodo Editのマクロ機能はスニペット機能以上に多機能でとても紹介しきれません。
どのくらい高機能かというと、マクロ機能でチェスゲームが作れるぐらい高機能です。(下記動画参照)
<iframe width="560" height="315" src="http://www.youtube.com/embed/8AtxvfyZMSQ" frameborder="0" allowfullscreen></iframe>
ちなみにこの動画、制作元「ActiveStateSoftware」の公式動画です。バカですね―良い意味で。
詳細については、公式の「<a href="http://docs.activestate.com/komodo/4.4/macroapi.html">Macro API Reference</a>」を参照していただくとして、Komodo Editマクロ機能の特徴を紹介したいと思います。

&nbsp;

<strong>■ マクロの録画</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000001.jpg" alt="macro000001" width="110" height="32" class="aligncenter size-full wp-image-2580" />
もっとも簡単なマクロの作成方法です。
録画ボタンを押してキーストロークを録画します。

&nbsp;

<strong>■ スクリプティング</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000000.jpg" alt="macro000000" width="860" height="682" class="aligncenter size-full wp-image-2581" />
Komodo Editのマクロは、JavaScript／Pythonで記述します。
基本的にはJavaScriptが標準のようです。
マクロ作成は、Toolbox上で右クリック Add→new Macro、編集は右クリック「properties」から行ってください。
また、Toolbox上のmacroをドラッグしてエディタ上にドロップするとワークスペースでマクロの編集が行えます。この場合、マクロの編集に補完機能が効くので編集が楽になります。

&nbsp;

<strong>■ マクロの実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000002.jpg" alt="macro000002" width="252" height="242" class="aligncenter size-full wp-image-2583" />
Toolbox上でmacroをダブルクリックすると実行します。
Ctrl+Shift+Kで呼び出して使ったり、各マクロにキーバインドを指定して実行することができます。
後述しますが、エディタのキーバインドをviエミュレートモードにしていると、viコマンドとしてマクロを実行することができます。

&nbsp;

<strong>■ バックグラウンドでの実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000003.jpg" alt="macro000003" width="292" height="142" class="aligncenter size-full wp-image-2584" />

propertiesの「Run in Background」にチェックを入れるとマクロをバックグラウンドで実行することができます。

&nbsp;

<strong>■ イベントトリガーで実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000004.jpg" alt="macro000004" width="860" height="682" class="aligncenter size-full wp-image-2585" />
作成したマクロは、イベントを通じて自動的に実行することができます。
設定できるイベントは以下
<ul>
	<li>Komodo Edit の起動プロセス終了後(On startup)</li>

	<li>ファイルオープン後(After file open)</li>

	<li>ファイルを保存する直前(Before file save)</li>

	<li>ファイルの保存が完了した後(After file save)</li>

	<li>ファイルクローズ直前(Before file close)</li>

	<li>ファイルクローズ後(After file close)</li>

	<li>Komodo Editの終了時(On shutdown)</li>

	<li>システム通知を受けた時(On a system notification)</li>
</ul>


なお、イベントによって複数のマクロが実行される場合Rankが高いものが優先されます。

「Before file save」「Before file close」「On shutdown」をトリガーとしたマクロでは、マクロ内で戻り値にnullを指定(return null)することで、保存・クローズ・終了の処理をキャンセルすることができます。

&nbsp;

<strong>■ viコマンドとしてマクロを実行</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000006.jpg" alt="macro000006" width="285" height="57" class="aligncenter size-full wp-image-2586" />
<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000005.jpg" alt="macro000005" width="248" height="49" class="aligncenter size-full wp-image-2587" />
Komodo EditのPreferences→Editor→Key Bindings→Key Binding Schemesで「vi」を指定している場合、作成したマクロをviコマンドとして実行できます。(Viエミュレートモード)
※Toolboxに「Vi Commands」というフォルダを作成しその中にマクロを保存することで使用できるようになります。

&nbsp;

■ マクロを探す
以下リンク先でさがしてみてください。

<a href="http://community.activestate.com/forums/komodo-macros-and-extensions">Komodo Macros and Extensions</a>

&nbsp;

【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2661">[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</a>
&nbsp;

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2579</wp:post_id>
		<wp:post_date>2013-02-13 18:57:18</wp:post_date>
		<wp:post_date_gmt>2013-02-13 09:57:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit%e3%83%9e%e3%82%af%e3%83%ad%e3%82%92%e4%bd%bf%e3%81%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2588]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「モンサントの不自然な食べもの」</title>
		<link>http://shimz.me/blog/movie/2590</link>
		<pubDate>Mon, 18 Feb 2013 02:42:00 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2590</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/filmrental_img_dl-002-e1361155373291.jpg" alt="filmrental_img_dl-002" width="500" height="331" class="aligncenter size-full wp-image-2592" />

<a href="http://takasaki-cc.jp/top">シネマテーク高崎</a>にて上映していたので観てきました。

<a href="http://www.uplink.co.jp/monsanto/">映画『モンサントの不自然な食べもの』公式サイト</a>

<iframe width="560" height="315" src="http://www.youtube.com/embed/9YxO4RFffXE" frameborder="0" allowfullscreen></iframe>


GMO(遺伝子組み換え)作物のシェア90%を占めるモンサント社の疑惑を調査したドキュメンタリー。

モンサント社を追っかけているジャーナリストが、新たな用語や、登場人物、疑惑などを知るたびにググって調査し、取材を繰り返すという構成が面白かったです。（この構成は、モンサント社からの訴訟攻撃を避ける意味もあったそうですが）

多少バイアスを考慮したとしても、これを見る限りではGMO作物の安全性はまだまだ不安が残るなーという印象。

安全性以上に、GOM作物には特許が認められ独占販売が可能な点とFDA(アメリカ食品医薬品局)との癒着が問題を大きくしていると思いました。

GMO作物が含まれた食品であることを表記できなくしたのは、消費者から選択の自由を奪うことになっていると思うのですが、この辺アメリカの基準はよくわかりませんね。

厚生労働省の資料みたら、害虫抵抗性、除草剤耐性遺伝子が組み込まれたモンサント社の大豆は普通に日本でも安全性が確認された食品として入ってきてるんで、ちょっと不安。(「安全性審査が終了し公表された遺伝子組換え食品及び添加物リスト（平成25年1月31日現在版） 」にて確認)

<a href="http://www.mhlw.go.jp/seisakunitsuite/bunya/kenkou_iryou/shokuhin/idenshi/index.html">厚生労働省－遺伝子組換え食品とは</a>

作物種子の一社独占で競争相手なしってのはやっぱり怖いので、オープンソース化したGMO種子とか出てくるといいのかもしれません。(それはそれで怖いかもしれないけど)

遺伝子組み換え食品の実態を追ったドキュメンタリーとしては、今年の６月に「<a href="http://www.uplink.co.jp/sekatabe/">世界が食べられなくなる日</a>」という作品が公開されるらしいのでそちらも見に行きたいと思います。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2590</wp:post_id>
		<wp:post_date>2013-02-18 11:42:00</wp:post_date>
		<wp:post_date_gmt>2013-02-18 02:42:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8e%e3%83%a2%e3%83%b3%e3%82%b5%e3%83%b3%e3%83%88%e3%81%ae%e4%b8%8d%e8%87%aa%e7%84%b6%e3%81%aa%e9%a3%9f%e3%81%b9%e3%82%82%e3%81%ae%e3%80%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2591]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javasriptの型につまずく（ローン計算）</title>
		<link>http://shimz.me/blog/javascript/2593</link>
		<pubDate>Wed, 20 Feb 2013 12:19:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2593</guid>
		<description></description>
		<content:encoded><![CDATA[普段、余り型を気にすることのないJavascriptですが、たまに数値を計算を行うコードを書く必要があると型を忘れてつまずくことがあります。
d3.jsでも数値データを扱うことが多いので注意が必要です。

下記はローン計算を行うExcelのRMT関数をJavascriptで実装したものですが、引数を「input typ="text"」から取得した場合、値の型は「String」型になるのでそのまま計算するとかなり大きな誤差がでます。
このような場合は「parseInt」や「parseFloat」関数を使って型変換を行う必要があります。
[javascript]
//PMT関数
function pmt(rate_per_period, number_of_payments, present_value, future_value, type){
    if(rate_per_period != 0.0){
        var q = Math.pow(1 + rate_per_period, number_of_payments);
        return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));
    } else if(number_of_payments != 0.0){
        return -(future_value + present_value) / number_of_payments;
    }

    return 0;
}



window.onload = function(){
	var riritsu = $('input[name=riritsu]').val();	//0.005
	var kikan = $('input[name=kikan]').val();		//12
	var genzai = $('input[name=genzai]').val();		//150000
	var shourai = $('input[name=shourai]').val();	//0
	var kigen = $('input[name=kigen]').val();		//1

	//var shiharai = pmt(riritsu, kikan, genzai, shourai, kigen); //-&gt; -747 間違い
	var shiharai = pmt(parseFloat(riritsu), parseFloat(kikan), parseFloat(genzai), parseFloat(shourai), parseFloat(kigen)); //-&gt; -12846　正解
	$('input[name=shiharai]').val(Math.floor(shiharai));
}
[/javascript]

&emsp;

参考
<a href="http://blog.goo.ne.jp/kori39/e/03d9ce6a3180e9a553644a763fc42542">javascriptのキャスト</a>

&emsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2593</wp:post_id>
		<wp:post_date>2013-02-20 21:19:52</wp:post_date>
		<wp:post_date_gmt>2013-02-20 12:19:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javasript%e3%81%ae%e5%9e%8b%e3%81%ab%e3%81%a4%e3%81%be%e3%81%9a%e3%81%8f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>いまさらだけど「Kindle化リクエスト」ボタンはえげつなくていい。</title>
		<link>http://shimz.me/blog/other/2594</link>
		<pubDate>Thu, 21 Feb 2013 07:25:14 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2594</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/02/macro000008.jpg" alt="macro000008" width="312" height="135" class="aligncenter size-full wp-image-2595" />
↑このボタン。
アマゾンでは、Kindle版が出ていない本すべてにこの「Kindle化リクエスト」ボタンが表示されます。
このボタンを購入ボタンの近くに設置するのは、アマゾンにとっては諸刃の剣のはずです。
なぜなら「Kindle版が無いので仕方なく、紙の本を購入するつもりだったユーザー」が、このボタンが画面内にあることによって紙の本の購入を控える可能性があるからです。

「とりあえずKindle化リクエスト投げて様子をみよう」と。

でも、アマゾンは付けています。

買い控えを考えるきっかけになりうるボタン。

そのボタンをKindle化されていない書籍全ての画面に設置しています。

ここにアマゾンの余裕と本気が伺えると思うのです。

同時に、このボタンを設置することでアマゾンは「Kindle版があったら買っていたかもしれないユーザー」の数をデータとして取得しています。

これは、出版社がKindle版を用意しなかったために失った「機会損失の数」でもあるわけです。

つまりアマゾンは紙の本の売り上げを一部犠牲にしながら、出版社を説得(脅迫)するためのデータをせっせと集めているともいえるわけですね。

なかなかにえげつない。

しかし、一向に腹が据わらない様子の国内の出版社を見ていると、アマゾンのえげつなさが頼もしく思えます。

ただでさえ、電子書籍とか関係なく紙の本の売り上げは年々さがっていて、さらにリアル書店の減少でアマゾンの影響力は大きくなっている現状なわけで、時間が経つほどに累積されていくKindle化リクエストは、プレッシャーとなって出版社に圧力をかけてくれるのではないかと期待しています。

そんなわけで全力でアマゾンを応援するとともに、楽天ブックスとか紀伊國屋書店BookWebとかは、早急に「Kobo化リクエスト」ボタンや「Kinoppy化リクエスト」ボタンを付けて欲しいとなと思います。



【余談】
<a href="http://www.sankeibiz.jp/business/news/121209/bsj1212091903003-n1.htm">「電子教科書」出版社は複雑な思い　重たい医学書から解放！学生は歓迎の声</a>
<blockquote>府立大によると、電子教科書を販売する条件として、紙の教科書と電子教科書の双方を購入することを挙げる社が複数出てくる可能性があるという。「そうなれば学生の金銭的負担が大きくなり、大学が電子教科書を推奨するわけにはいかなくなる」。高畑学部長はこう憂慮する。</blockquote>

売りたいんだか売りたくないんだか。もはや本末転倒以外のなにものでもないなぁ。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2594</wp:post_id>
		<wp:post_date>2013-02-21 16:25:14</wp:post_date>
		<wp:post_date_gmt>2013-02-21 07:25:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%84%e3%81%be%e3%81%95%e3%82%89%e3%81%a0%e3%81%91%e3%81%a9%e3%80%8ckindle%e5%8c%96%e3%83%aa%e3%82%af%e3%82%a8%e3%82%b9%e3%83%88%e3%80%8d%e3%83%9c%e3%82%bf%e3%83%b3%e3%81%af%e3%81%88%e3%81%92</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2595]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[GMaps API v3] ストリートビューを使う。 </title>
		<link>http://shimz.me/blog/map/2598</link>
		<pubDate>Fri, 22 Feb 2013 10:09:40 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2598</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/streetview/01/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/streetview000000-e1361527646935.jpg" alt="streetview000000" width="559" height="312" class="aligncenter size-full wp-image-2599" /></a>

<a href="http://sankei.jp.msn.com/region/news/130221/gnm13022102210003-n1.htm">ストリートビュー、２７市町村も対象に　グーグル　群馬</a>

グーグル グッジョブ! (￣∇￣ﾉﾉ"ﾊﾟﾁﾊﾟﾁﾊﾟﾁ!!

これまでは「ストビューなんて使えるのは、所詮一部の都会人だけ」と手を出さずに拗ねていましたが、これから心を入れ替えて勉強しようと思います。

とりあえず基本から。

[html title="index.html"]
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;GMap Streetview example&lt;/title&gt;
&lt;script src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body onload=&quot;initialize()&quot;&gt;
&lt;h2&gt;GMap Streetview API　テスト &lt;/h2&gt;
&lt;div&gt;
    &lt;div id=&quot;map_canvas&quot; style=&quot;float:left;width: 400px; height: 300px&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;pano&quot; style=&quot;width: 400px; height: 300px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
    &lt;div id=&quot;panoInfo&quot; style=&quot;width: 425px; height: 240 px;&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Position&lt;/b&gt;&lt;/td&gt;&lt;td id=&quot;position_cell&quot;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;POV Heading&lt;/b&gt;&lt;/td&gt;&lt;td id=&quot;heading_cell&quot;&gt;270&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;POV Pitch&lt;/b&gt;&lt;/td&gt;&lt;td id=&quot;pitch_cell&quot;&gt;0.0&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;input id=&quot;address&quot; type=&quot;textbox&quot; value=&quot;群馬県前橋市&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;検索&quot; onclick=&quot;addressSearch()&quot;&gt;

&lt;/body&gt;
&lt;/html&gt;
[/html]
[javascript title="index.js"]
var map;
var geocoder = new google.maps.Geocoder();
var sv = new google.maps.StreetViewService();
var panorama;

    
function initialize() {
    defPos = new google.maps.LatLng(36.322161, 139.00613099999998);
    
    //地図初期化 
    var mapOptions = {
        center: defPos,
        zoom: 14,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

    //ストリートビュー初期化
    var panoramaOptions = {
        position: defPos,
        pov: {
            heading: 44,
            pitch: 13
        }
    };  
    panorama = new  google.maps.StreetViewPanorama(document.getElementById('pano'),panoramaOptions);
    map.setStreetView(panorama);
      
  
  
    //ストリートビューにeventListener登録
    google.maps.event.addListener(panorama, 'position_changed', function() {
        var positionCell = document.getElementById('position_cell');
        positionCell.firstChild.nodeValue = panorama.getPosition();
    });
    google.maps.event.addListener(panorama, 'pov_changed', function() {
        var headingCell = document.getElementById('heading_cell');
        var pitchCell = document.getElementById('pitch_cell');
        headingCell.firstChild.nodeValue = panorama.getPov().heading;
        pitchCell.firstChild.nodeValue = panorama.getPov().pitch;
    });     
}

//検索
function addressSearch(){    
    var address = document.getElementById('address').value;    
    geocoder.geocode({ 'address': address}, function(results, status){
        if(status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location); //地図移動
            
            sv.getPanoramaByLocation(    //指定された軽度緯度上にストリートビューが存在するかチェック
                results[0].geometry.location,
                500, //検索範囲(m)
                function(svData,svStatus){
                    if(svStatus == google.maps.StreetViewStatus.OK){
                        panorama.setPosition(svData.location.latLng);    //ストリートビュー移動                        
                    }else{
                        alert(&quot;ストリートビュー対象外の地域です。&quot;)
                    };
                }
            );
        } else {
             alert('座標の取得に失敗しました: ' + status);
        }
    });
} 

[/javascript]

<a href="http://shimz.me/example/gmapv3/streetview/01/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2598</wp:post_id>
		<wp:post_date>2013-02-22 19:09:40</wp:post_date>
		<wp:post_date_gmt>2013-02-22 10:09:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmaps-api-v3-%e3%82%b9%e3%83%88%e3%83%aa%e3%83%bc%e3%83%88%e3%83%93%e3%83%a5%e3%83%bc%e3%82%92%e4%bd%bf%e3%81%86%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2600]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>画像からExif情報(GPS)を取得する node.js or Javascript EXIF Reader</title>
		<link>http://shimz.me/blog/node-js/2601</link>
		<pubDate>Mon, 25 Feb 2013 00:32:35 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2601</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/getEXIF/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/02/streetview000003.jpg" alt="streetview000003" width="493" height="291" class="aligncenter size-full wp-image-2602" /></a>

画像から<a href="http://ja.wikipedia.org/wiki/Exchangeable_image_file_format">Exif</a>情報(の中の位置情報)を取得する方法メモ。

&nbsp;
&nbsp;

<strong>■ サーバーサイド(node.js)</strong>

<a href="https://github.com/gomfunkel/node-exif">node-exif</a>というライブラリがあったので使ってみる。
[shell title="インストール"]
npm install exif
[/shell]
[javascript title="getEXIF.js"]
var ExifImage = require('exif').ExifImage;

try {
    new ExifImage({ image : 'test.jpg' }, function (error, image) {
        if (error)
            console.log('Error: '+error.message);
        else
            console.dir(image['gps']);
    });
} catch (error) {
    console.log('Error: ' + error);
}
[/javascript]
[shell title="実行"]
$ node getEXIF.js
[/shell]

Exif情報は取得できるが、なぜか正しい位置情報が取得できない。
[javascript highlight="10, 20" title="出力"]
gps:[
  { tag: &lt;Buffer 00 01&gt;,
    format: 2,
    components: 2,
    value: 'N',
    tagName: 'GPSLatitudeRef' },
  { tag: &lt;Buffer 00 02&gt;,
    format: 5,
    components: 3,
    value: [ 36, 36, 36 ],
    tagName: 'GPSLatitude' },
  { tag: &lt;Buffer 00 03&gt;,
    format: 2,
    components: 2,
    value: 'E',
    tagName: 'GPSLongitudeRef' },
  { tag: &lt;Buffer 00 04&gt;,
    format: 5,
    components: 3,
    value: [ 139, 139, 139 ],
    tagName: 'GPSLongitude' },
  { tag: &lt;Buffer 00 07&gt;,
    format: 5,
    components: 3,
    value: [ 11, 11, 11 ],
    tagName: 'GPSTimeStamp' }
]
[/javascript]

しかたがないので、imagemagickのwrapper(<a href="https://github.com/rsms/node-imagemagick">node-imagemagick</a>)を使う。
非同期のフロー制御に<a href="https://github.com/caolan/async">async</a>を使うので、一緒にインストールする。
[shell title="インストール"]
$ yum install ImageMagick
$ npm install imagemagick
$ npm install async
[/shell]

[javascript title="getEXIF2.js"]
var im = require('imagemagick');
var async = require('async');
 
 var imgFile = 'test.jpg';
 
 async.series(
 [
	 function(callback) { im.identify(['-format', '%[EXIF:GPSLatitude]', imgFile],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLatitude': metadata.trimRight() });
		 });
	 }, function(callback) { im.identify(['-format', '%[EXIF:GPSLatitudeRef]', imgFile],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLatitudeRef': metadata.trimRight() });
		 });
	 }, function(callback) { im.identify(['-format', '%[EXIF:GPSLongitude]', imgFile],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLongitude': metadata.trimRight() });
		 });
	 }, function(callback) { im.identify(['-format', '%[EXIF:GPSLongitudeRef]', imgFile ],
		 function(err, metadata){ 
			if (err) callback(err);
			callback(null, { 'GPSLongitudeRef': metadata.trimRight() });
		 });
	 }
 ],
 function(err, results){
    console.dir(results);
});
[/javascript]
[shell title="実行"]
$ node getECIF2.js
[/shell]
正しく、位置情報が取得できた。
[javascript title="出力"]
[
  { GPSLatitude: '36/1, 1968/100, 0/1' },
  { GPSLatitudeRef: 'N' },
  { GPSLongitude: '139/1, 49/100, 0/1' },
  { GPSLongitudeRef: 'E' }
]
[/javascript]

&nbsp;
&nbsp;

<strong>■ クライアントサイド</strong>
下記ライブラリを使用する（今回はjQuery版を使用）
<a href="http://www.nihilogic.dk/labs/exif/">Javascript EXIF Reader</a>
<a href="http://www.nihilogic.dk/labs/exifjquery/">Javascript EXIF Reader - jQuery Plugin</a>
使用法はいたって簡単。
ライブラリを読み込んでjQueryオブジェクトのメソッドとして「.exif()」を使用するだけ。
[html title="index.html" highlight="7, 18, 19"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;jquery.exif.js&quot;&gt;&lt;/script&gt;
&lt;title&gt;Javascript EXIF Reader text&lt;/title&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;a href=&quot;http://www.nihilogic.dk/labs/exif/&quot;&gt;Javascript EXIF Reader&lt;/a&gt; テスト(クリックで位置情報表示)
&lt;img src=&quot;test.jpg&quot; id=&quot;img&quot; exif=&quot;true&quot; /&gt;

&lt;script&gt;
$(&quot;#img&quot;).click(function() {
	alert(
	      &quot;Longitude: &quot; + $(this).exif(&quot;GPSLongitude&quot;) + &quot;\n&quot; +
	      &quot;Latitude: &quot; + $(this).exif(&quot;GPSLatitude&quot;)
	      );
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]

<a href="http://shimz.me/example/getEXIF/index.html">example</a>

ただ、「input type='file'」で選択した画像から上記ライブラリでExif情報を取得する方法がわからない（できない？）
data URI schemeにしてしまうとExif情報は取得できないみたい。
クライアント側で完結できないみたいなので、結局サーバー側に画像を一旦保存する必要があるっぽい。

[javascript title="失敗例"]
$(&quot;#uploadFile&quot;).change(function() {

    var file = this.files[0]; //input type=&quot;file&quot;からファイルを取得
    if (!file.type.match(/^image\/(png|jpeg|gif)$/)) return;

    var reader = new FileReader();
    reader.readAsDataURL(file); //data URI schemeとしてファイルを読み込み
    reader.onload = function(evt) {
	    $(&quot;#img&quot;).attr(&quot;src&quot;, evt.target.result); //取得したデータをimgタグのsrcに追加
    }
    
    //imgタグのsrcに指定されているのがdata URI schemeだとExifが取得できない
   $(&quot;#img&quot;).click(function() { 
    alert(
	  &quot;Longitude: &quot; + $(this).exif(&quot;GPSLongitude&quot;) + &quot;\n&quot; +
	  &quot;Latitude: &quot; + $(this).exif(&quot;GPSLatitude&quot;)
	  );
    });        
});
[/javascript]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2601</wp:post_id>
		<wp:post_date>2013-02-25 09:32:35</wp:post_date>
		<wp:post_date_gmt>2013-02-25 00:32:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%94%bb%e5%83%8f%e3%81%8b%e3%82%89exif%e6%83%85%e5%a0%b1gps%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b-node-js-or-javascript-exif-reader</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2602]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】水平パンニング</title>
		<link>http://shimz.me/blog/d3-js/2607</link>
		<pubDate>Wed, 06 Mar 2013 07:46:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2607</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/zoom2/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/panning.jpg" alt="panning" width="522" height="417" class="alignleft size-full wp-image-2608" /></a>

データを表示する領域を制限して、ドラッグした際に続きのデータを見せる方法。
参考にしたサイトでは、この表示方法を「horizontal panning behavior」と呼んでいたので「水平パンニング」としました。
コードのコメントに書いた以上の説明が出来ないので、詳しく知りたい方は下記のリンク先を参照してください。

参考
<a href="http://computationallyendowed.com/blog/2013/01/21/bounded-panning-in-d3.html">Bounded Panning in D3</a>
<hr>
<a href="http://shimz.me/example/d3js/zoom2/index.html">example</a>
[javascript]
//データセットの作成
var dataSet = [];
var random = function(){ return parseInt(Math.random()*100) };    
for(var i=0; i &lt; 101; i++){
	dataSet.push(
		{
			x: i*10,
			y: random()
		}
	)
	
}


//svg ステージ設置
var svg_width = 500;
var svg = d3.select('body')
			.append('svg')
			.attr('width', svg_width)
			.attr('cursor', 'move'); 

//データセットの最大値取得
var x_max = d3.max(dataSet, function(d){ return d.x  }); //X最大値取得
var y_max = d3.max(dataSet, function(d){ return d.y  }); //Y最大値取得

var x_margin = 20; //X軸両端のマージン

//スケール関数を作成
var x_scale = d3.scale.linear().domain([0, x_max]).range([x_margin, x_max - x_margin])
var y_scale = d3.scale.linear().domain([0, y_max]).range([y_max, 0]);


//スケールを元にpathのd属性を設定するline関数を作成    
var line = d3.svg.line()
	.x(function(d) { return x_scale(d.x); })
	.y(function(d) { return y_scale(d.y); })
	.interpolate('basis');

//折れ線グラフ描画        
svg.append('g')
	.datum(dataSet)
  .append('path')
	.attr('class', 'data')
	.attr('d', line) //line関数をデータセットに適用
	.attr('stroke', 'red')
	.attr('fill', 'none')

//X軸補助目盛線描画
var x_axis = d3.svg.axis().scale(x_scale); //スケールを元に目盛線を作成
svg.append('g')
	.attr('class', 'x axis')
	.attr('transform', 'translate(0,' + 100 + ')') 
	.call(x_axis);
	
//ズームイベント設置
var zoom = d3.behavior.zoom()
	.x(x_scale)
	.scaleExtent([1, 1]) //zoom倍率の範囲？　[&quot;最小&quot;, &quot;最大&quot;]値らしい。
	.on('zoom', function(){
		
		var t = zoom.translate(); //translation vector取得。マウスの移動量。
		var tx = t[0]; //x軸に対するマウスの移動量
		var ty = t[1]; //Y軸に対するマウスの移動量
		//console.log(t);
		
		//txの値の範囲を制限
		tx = Math.min(tx, 0); //最大値を0までに制限
		tx = Math.max(tx, svg_width - x_max); //最小値を-500までに制限 
		//console.log(tx);
		
		//translation vectorをzoomに設定し再描画する
		zoom.translate([tx, ty]);
		svg.select('.data').attr('d', line);
		svg.select('.x').transition().attr('transform', 'translate(' + tx + ' ,' + y_max + ')');
	});
svg.call(zoom);
[/javascript]



目盛りにだけtransitionを設定したら、後を追っかけるような面白い動きになった。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2607</wp:post_id>
		<wp:post_date>2013-03-06 16:46:49</wp:post_date>
		<wp:post_date_gmt>2013-03-06 07:46:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e6%b0%b4%e5%b9%b3%e3%83%91%e3%83%b3%e3%83%8b%e3%83%b3%e3%82%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2608]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_429649857124104]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ネットで実名を使うメリット</title>
		<link>http://shimz.me/blog/other/2609</link>
		<pubDate>Thu, 07 Mar 2013 08:09:20 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2609</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/funny-pictures-auto-anonymous-photo-389629.jpeg" alt="funny-pictures-auto-anonymous-photo-389629" width="590" height="332" class="alignleft size-full wp-image-2610" />


&nbsp;
&nbsp;


<a href="http://sakedrink.info/1610/%E5%AE%9F%E5%90%8D%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%BF%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93/">実名でインターネットをはじめてみてよかったこと、悪かったこと
</a>



自分も実名を使用するようになってから「実名ってわりといいな」と思ってはいたのですが、なぜか日本では「実名にしろ！」と声高に騒ぐユーザーほど残念な傾向あったりするので……

まぁ、いい機会なので個人的に感じた「ネットで実名を使うメリット」を書いてみます。


<strong>■ オフで恥ずかしくない？</strong>
たとえば、ハンドルネームに「ダークフレイムマスター」なんて付けてしまったなら、オフで会った際に「ダークフレイムマスターこと○○です」という自己紹介が必要となるわけです。死にます。
懇談会で店員がそばいるときに「ダークフレイムマスターさん、何にします？」とか言われたらモリサマーのように床を転げまわって死にます。
そもそもオフで会う時点で匿名性なんて無くなったも同然になるわけで、勉強会等に参加すると決めたときから実名を使うようにしました。

<strong>■ 自制心が高まる？</strong>
さすがに実名だと安易に暴言吐いたり、軽はずみに誰かに絡んだりしなくなりますよね？　たぶん。

&nbsp;
&nbsp;
<h2>本題</h2>
<hr></hr>

<strong>■ 一番危ないのは匿名(半匿名)アカ＋実名アカ</strong>
最近はソー活などの流行もあって、Twitterでは匿名だけどFacebookやmixiは実名を使っているユーザーとか、仕事で自社のブログやソーシャルメディアでのPRを任されている、という方は結構居るんじゃないでしょうか。
個人的には、このような匿名アカと実名アカを使い分けるほうがリスクが高いと思います。
実際、炎上事件では「匿名だと思って好き勝手やってたら、わりと簡単に特定された」というケースの方が、結果が悲惨なことになっています。
匿名性を維持し続けるのって難しいんですよね。
車の写真をアップしたら、ボンネットに映りこんだ風景から家が特定されたとか。
匿名アカで飼い犬についてつぶやいたら、大学のＨＰに掲載しているプロフィールと照合されて特定された教授などもいました。
画像のExif情報は毎回ちゃんと削除してますか？
会社や学校の愚痴なんて特定のための大きなヒントになります。
「地震なう」「雪降ってる」「電車とまった」こんな単純な情報でも、ある程度地域を絞りこむ事が可能です。
どんなに情報を小出しにしたところで、<a href="http://ja.wikipedia.org/wiki/%E4%BA%BA%E8%82%89%E6%A4%9C%E7%B4%A2">人肉検索</a>のターゲットにされたらひとたまりもありません。
ネットでアクティブに活動すれば、どうしたってログが溜まり情報は漏れるので、だったら実名アカで発言の内容を自制するほうがセキュアな気がします。

<strong>■なんか流れ的に</strong>
スマートフォンのTwitter公式クライアントに「アドレス帳から友人を探す」機能が付きましたが、世の中的にはネット上にリアルな人間関係(ソーシャルグラフ）を持ち込ませるのが流行りのようです。
たぶん、その方がお金が動きそうな気がするからなんでしょうね。
海外のサービスだけでなく日本の企業が提供するサービス、「はてな」や「ニコニコ動画」「pixiv」などだっていつ何時「友達検索機能つけました！」とか言い出さないとも限りません。
日本の企業はそんなことしないだろうと思っていても、「業績が悪化したところを海外の企業に買い取られて……」なんてことがこの先絶対に無いとは言い切れないわけです。
ある日突然、リアルな友人知人のアカウントなどをお勧めされて慌てるぐらいなら、初めから見つかるもんだと思って利用するほうが楽な気がします。


<strong>■ 総括</strong>
リンク先の記事でも書かれていましたが「バレたらどうしよう」とか考えなくてすむようになるのは楽ですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2609</wp:post_id>
		<wp:post_date>2013-03-07 17:09:20</wp:post_date>
		<wp:post_date_gmt>2013-03-07 08:09:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%8d%e3%83%83%e3%83%88%e3%81%a7%e5%ae%9f%e5%90%8d%e3%82%92%e4%bd%bf%e3%81%86%e3%83%a1%e3%83%aa%e3%83%83%e3%83%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2610]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「もうひとりのシェイクスピア」</title>
		<link>http://shimz.me/blog/movie/2612</link>
		<pubDate>Sun, 10 Mar 2013 05:23:45 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2612</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="560" height="315" src="http://www.youtube.com/embed/In1dB3B13YM?list=PLFA46B9D55823F1DC" frameborder="0" allowfullscreen></iframe>

自筆原稿や日記などが見つかっていないことや、法律や古典などの知識がなければ書けない作品があるが学歴からみて不自然であることから、たびたび語られるシェイクスピア別人説。

シェイクスピア別人説の一つ「シェイクスピア＝フランシス・ベーコン説」に関してはアメリカのメンデンホールという物理学者がシェイクスピアの文章の40万語とベーコンの文章の20万語について比較分析を行った実験が計量文献学やテキストマイニングの事例としてよく挙げられます。
最近、<a href="http://www.amazon.co.jp/gp/product/B00B42SXH0/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B00B42SXH0&linkCode=as2&tag=toriaezu04b-22">統計学が最強の学問である</a>でこの事例を読んだばかりのところに、タイミングよく近くの映画館で放映されたので観に行ってきました。

この作品は別人説のひとつ、エドワード・ド・ヴィアー (第17代オックスフォード伯)説を主軸に、史実と虚構を織り交ぜて作成された策謀劇。

とにかく再現された１６世紀イギリスの舞台装置や美術がすばらしかった。

ただ、史実をある程度元にしたためか、敵役として登場したはずのロバート・セシル卿に後半に進むにつれなんだか肩入れしてしまうという困ったことにｗ

エセックス伯も陥れられたというより自爆にしか見えない描かれ方で、たぶん製作側もそのことは感じていたじゃないかな？　

終幕近くでセシルがベンにかける台詞はあきらかに敵役を超えたものだったし。

ともあれ、陰謀渦巻く宮廷劇が好きなかたには是非お勧め。


<a href="http://shakespeare-movie.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/anonymous_ws.jpg" alt="anonymous_ws" width="215" height="319" class="size-full wp-image-2613" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2612</wp:post_id>
		<wp:post_date>2013-03-10 14:23:45</wp:post_date>
		<wp:post_date_gmt>2013-03-10 05:23:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e3%82%82%e3%81%86%e3%81%b2%e3%81%a8%e3%82%8a%e3%81%ae%e3%82%b7%e3%82%a7%e3%82%a4%e3%82%af%e3%82%b9%e3%83%94%e3%82%a2%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2613]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_272469619553631]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 テーブルを使ったヒートマップ(Google Analytics 可視化)</title>
		<link>http://shimz.me/blog/d3-js/2614</link>
		<pubDate>Mon, 11 Mar 2013 10:09:07 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2614</guid>
		<description></description>
		<content:encoded><![CDATA[色が濃いほど訪問者数が多い時間となってます。
<a href="http://shimz.me/example/d3js/table/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/gsheatmap.jpg" alt="gsheatmap" width="737" height="606" class="alignleft size-full wp-image-2618" /></a>

Google Analyticsからエクスポートしたデータ(日時、時間毎の訪問者数)を元にd3.jsを使ってテーブルを作成しました。
下記のようなカスタムレポートを作成しCSVでエクスポートしています
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gad31.jpg" alt="gad31" width="975" height="261" class="alignleft size-full wp-image-2615" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gad32.jpg" alt="gad32" width="999" height="352" class="alignleft size-full wp-image-2616" />
ダウンロードしたcsvには余計なノイズが入っているので削除します。
↓６行目まで要らない
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gad33.jpg" alt="gad33" width="664" height="396" class="alignleft size-full wp-image-2617" />

これでデータの準備が完成。

<hr>

<a href="http://shimz.me/example/d3js/table/01/">example</a>

[javascript]
d3.csv('ga.csv', function(csv){ //csvデータの読み込み

	
	var max = d3.max(csv, function(d){ return d.visitors }); //訪問者数の最大値取得
	
	var colorScale = d3.scale.linear().domain([0, max]).range([&quot;#FFF0F5&quot;, &quot;#DC143C&quot;]); //カラースケールを作成
	
	var  hours  = d3.range(24); //時間表示用
	
	var data = 	d3.nest().key(function(d){return d.date;}).entries(csv); //CSVから取得したデータをdateフィールドの値でネスト		
	//console.log(data);
	
	
	var tbody = d3.select('body').append('table').append('tbody'); //table作成
	var tfoot = d3.select('table').append('tfoot'); //tableにtfootをappend
	
	tfoot.append('th'); //空th追加
	
	//tfootに時間thを追加
	tfoot.selectAll('class')
		.data(hours)
		.enter()
		.append('th')
		.attr(&quot;class&quot;, &quot;hours&quot;)
		.text(function(d){ return d});
	
	
	//tr追加
	var trs = tbody.selectAll('tr')
	  .data(data)
	  .enter()
	  .append('tr')
	  
	 //thに年月日を追加
	 trs.append('th').text(function(d){ 
		var Year = d.key.substring(0, 4);
		var Month = d.key.substring(4, 6);
		var Day = d.key.substring(6, 8);
		var text = Year + &quot;/&quot; + Month + &quot;/&quot; + Day;
		return text;
	});

	
	//td追加
	trs.selectAll('td')
	   .data(function(d){ return d.values} )
	   .enter()
	   .append('td')
	   .style(&quot;background-color&quot;, function(d){ return colorScale(d.visitors); })
	   .on('mouseover', function(d){
			d3.select(this).text(d.visitors); //mouoverした際に訪問者数を表示
	   })
	   .on(&quot;mouseout&quot;, function(d){
			d3.select(this).text(&quot;&quot;);		   
	   });
	  
});
[/javascript]


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2614</wp:post_id>
		<wp:post_date>2013-03-11 19:09:07</wp:post_date>
		<wp:post_date_gmt>2013-03-11 10:09:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-%e3%83%86%e3%83%bc%e3%83%96%e3%83%ab%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e3%83%92%e3%83%bc%e3%83%88%e3%83%9e%e3%83%83%e3%83%97google-analytics-%e5%8f%af%e8%a6%96%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2618]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_174911382657769]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】超基本！ コンソールでselect,data,enterメソッドを理解する。</title>
		<link>http://shimz.me/blog/d3-js/2619</link>
		<pubDate>Tue, 12 Mar 2013 02:19:36 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2619</guid>
		<description></description>
		<content:encoded><![CDATA[D3.jsの<a href="http://i1.wp.com/shimz.me/blog/wp-content/uploads/2013/03/evelearningcurve.jpg?resize=800%2C777">学習曲線</a>が急激な坂道を描くのは、D3独特のデータバインディングの仕組みを理解するのに時間がかかるためだと思います。

そこで、ブラウザの開発ツールを使用してD3.jsの基本であるデータバインディングの仕組みを細かく観察していきます。
&nbsp;
&nbsp;

ちなみに下記の記事を参考にさせていただきました。合わせて読むと理解がしやすいかもしれません。

<a href="http://alignedleft.com/tutorials/d3/binding-data/">D3 Tutorials: Binding data</a>

<hr>

<h2>サンプル</h2>
[html]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;D3 select,data,enter&lt;/title&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var a = [&quot;test&quot;,&quot;hoge&quot;,&quot;hello d3&quot;]; //今回バインドするデータ
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;&lt;/body&gt;
&lt;/html&gt;
[/html]
今回使用するHTMLです。
<a href="http://shimz.me/example/d3js/binding_data/demo.html">demo</a>
D3.jsライブラリの読み込みと、バインドするデータとして変数aを設定しているだけのソースです。
bodyタグの中には、何のエレメントも存在しません。
ここに、開発ツールのコンソールからD3.jsを使用してデータ(変数a)をバインドしたp要素を追加します。

&nbsp;
&nbsp;
<h2>1.要素の選択</h2>
[javascript]
d3.select('body')
[/javascript]
まずは、selectメソッドから。
jQueryのcssセレクタと殆どかわりません。
ここでは、bodyタグを選択しています。
戻り値としてD3 Selectionオブジェクトが返ってきます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000000.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000000.jpg" alt="d3select000000" width="1234" height="407" class="alignleft size-full wp-image-2620" /></a>

&nbsp;
&nbsp;
<h2>2.データをバインドする要素の選択</h2>
[javascript]
d3.select('body').selectAll('p')
[/javascript]
bodyタグの中の全てのpタグを選択しています。
ここで重要なのは、このステートメントが実行される段階では<strong>対象となるpタグはまだ存在していません</strong>。
DOM上に存在していないエレメントを選択しているわけですが、エラーにはなりません。
これが、データをバインディングする要素を決定する宣言となります。
戻り値として空の配列が返ります。
<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000001.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000001.jpg" alt="d3select000001" width="1234" height="407" class="alignleft size-full wp-image-2621" /></a>

&nbsp;
&nbsp;
<h2>3.データのバインドを開始</h2>
[javascript]
d3.select('body').selectAll('p').data(a)
[/javascript]
dataメソッドでデータのバインドを開始します。
先ほどの空の配列にデータ分(length)の空オブジェクトが準備され、戻り値として返ります。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000002.jpg" alt="d3select000002" width="1234" height="407" class="alignleft size-full wp-image-2622" /></a>

&nbsp;
&nbsp;
<h2>4.データの数だけ、d3オブジェクトを作成</h2>
[javascript]
d3.select('body').selectAll('p').data(a).enter()
[/javascript]
enterメソッドでdataメソッドで準備された空のオブジェクトにデータを保存します。
戻り値の中を確認すると、それぞれのオブジェクトに__data__プロパティが追加され、そこにデータが保存されているのが見えます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000003.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000003.jpg" alt="d3select000003" width="1234" height="407" class="alignleft size-full wp-image-2623" /></a>

&nbsp;
&nbsp;
<h2>5.データをバインドし、要素を追加</h2>
[javascript]
d3.select('body').selectAll('p').data(a).enter().append('p')
[/javascript]
appendメソッドでp要素とデータのバインディングを行います。
この時点で初めてDOMにPタグが挿入されます。


<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000004.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000004.jpg" alt="d3select000004" width="1234" height="407" class="alignleft size-full wp-image-2624" /></a>

戻り値を見ると、各要素に__data__プロパティが挿入されているのが見えます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000005.jpg" alt="d3select000005" width="467" height="81" class="size-full wp-image-2625" />

&nbsp;
&nbsp;
<h2>6.バインドされたデータを使用して要素を操作</h2>
[javascript]
d3.selectAll('p').text(function(d){console.log(d); return d })
[/javascript]
バインドされたデータを使ってpタグにテキストを挿入します。
textメソッドの中でコールバックを渡していますが、引数(d)には__data__プロパティの値が渡されます。
コールバック内のreturn で返した戻り値がテキストとしてpタグに挿入されます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000006.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000006.jpg" alt="d3select000006" width="1234" height="407" class="alignleft size-full wp-image-2626" /></a>


&nbsp;
&nbsp;

以上が、d3.jsのデータバインディングの基本的な仕組みとなります。
さらに詳しく知りたい方は、以下のドキュメントを参照してください。

<a href="http://ja.d3js.node.ws/document/tutorial/circle.html">d3.js - 三つの小円</a>


<hr>
実際に実行して試せるページを作ってみました。
ボタンを上から順にクリックしてconsole.logに出力された内容を確認してみてください。

<a href="http://shimz.me/example/d3js/binding_data/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3select000007.jpg" alt="d3select000007" width="590" height="377" class="alignleft size-full wp-image-2627" /></a>

<a href="http://shimz.me/example/d3js/binding_data/">example</a>
※Mac版のchromeだとfirebug liteが何故か動作しなくて動かない orz
&nbsp;
&nbsp;

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2619</wp:post_id>
		<wp:post_date>2013-03-12 11:19:36</wp:post_date>
		<wp:post_date_gmt>2013-03-12 02:19:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e8%b6%85%e5%9f%ba%e6%9c%ac%ef%bc%81-%e3%82%b3%e3%83%b3%e3%82%bd%e3%83%bc%e3%83%ab%e3%81%a7selectdataenter%e3%83%a1%e3%82%bd%e3%83%83%e3%83%89%e3%82%92%e7%90%86%e8%a7%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_517894454928990]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2628]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 SVGで地球儀を描く</title>
		<link>http://shimz.me/blog/d3-js/2631</link>
		<pubDate>Wed, 13 Mar 2013 02:35:03 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2631</guid>
		<description></description>
		<content:encoded><![CDATA[回転させるのも簡単、そうD3ならね。
<a href="http://shimz.me/example/d3js/geo_example/geo6/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3glob.jpg" alt="d3glob" width="564" height="503" class="alignleft size-full wp-image-2634" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo6/">example</a>

データはNaturalEarthの「<a href="http://www.naturalearthdata.com/downloads/110m-cultural-vectors/">Admin 0 – Countries</a>」から。
見づらくなるので南極大陸には消えていただいた。
消し方は、ダウンロードしたsahpeデータを <a href="http://www.qgis.org/">Quantum GIS</a>に取り込んで、メニューの「レイヤー」から「属性テーブルのオープン」を選択。
属性テーブルの中から「sovereignt」の値が「Antractica」になっている行を選択し、下のほうにあるアイコンから「選択部分を反転する」をクリック。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/qgisdelete.jpg" alt="qgisdelete" width="1211" height="608" class="size-full wp-image-2633" />
南極大陸以外が選択されているのを確認して「レイヤー」から「選択部分をベクタファイルとして保存する」をクリック→「Geo JSON」形式で保存。
一応topojsonに変換して軽量化。

[shell]
$ topojson -o conuntries.topojson conuntries.geojson
[/shell]

以上で、地図データ作成終了。
あとは、D3の「<a href="https://github.com/mbostock/d3/wiki/Geo-Projections">Geo Projections</a>」機能を使って表示するだけ。
この辺のデータ作成については、過去の記事に詳細を載せているので興味ある方は<a href="http://shimz.me/blog/category/map">こちら</a>を。

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />



[html title="index.html"]
&lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;D3 Globe&lt;/title&gt;
    &lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;http://d3js.org/topojson.v0.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]
[javascript title="index.js"]
window.onload = function(){
    var stage,path, map, xy;
    
    stage = d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 960).attr(&quot;height&quot;, 600); //地図を表示するステージ

    //海　実はただのcircle
    stage.append('circle')
        .attr({
            fill:&quot;blue&quot;,
            cx:480,
            cy:250,
            r:245
        });
        
    projection = d3.geo.orthographic() //投影法を指定
        .scale(245) //大きさ
        .rotate([0,0,0]) //x,y,z回転
        .clipAngle(90); //表示する角度 180度を指定すると裏側の大陸まで表示される
    
    path = d3.geo.path().projection(projection);
        
    d3.json(&quot;conuntries.topojson&quot;, function(json){ //地図情報の読み込み
        
        var data = topojson.object(json, json.objects.conuntries); //topojson変換
       
        stage.append(&quot;svg:g&quot;).attr({&quot;class&quot;:&quot;earth&quot;}); //g要素追加(グループ化)
       
       //地図表示
        map = stage
            .selectAll(&quot;path&quot;)
            .data(data.geometries) 
            .enter()
            .append(&quot;svg:path&quot;)
            .style(&quot;background-color&quot;, &quot;blue&quot;)
            .attr({
                &quot;d&quot;:path,
                &quot;fill-opacity&quot;:1,
                &quot;fill&quot;:&quot;green&quot;,
                &quot;stroke&quot;:&quot;#222&quot;
            })
            .on(&quot;mouseover&quot;, function(){
                d3.select(this).attr(&quot;fill&quot;, &quot;red&quot;);
            })
            .on(&quot;mouseout&quot;, function(){
                d3.select(this).transition().duration(500).attr(&quot;fill&quot;, &quot;green&quot;);
            });
    });
    
    setInterval(update, 200); //定期的に回転させる
    
    var i=0;
    function update(){
        i = i+1;
        projection.rotate([i,0,0]);  //x軸の値を増加
        path = d3.geo.path().projection(projection);    //path関数をアップデート
        map.attr(&quot;d&quot;, path); //paht関数をmapオブジェクトに適用
    }
}
[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo6/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2631</wp:post_id>
		<wp:post_date>2013-03-13 11:35:03</wp:post_date>
		<wp:post_date_gmt>2013-03-13 02:35:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-svg%e3%81%a7%e5%9c%b0%e7%90%83%e5%84%80%e3%82%92%e6%8f%8f%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_171791592972155]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2634]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】群馬県の賃貸価格データを可視化してみた（散布図＆地図）</title>
		<link>http://shimz.me/blog/d3-js/2635</link>
		<pubDate>Wed, 13 Mar 2013 16:50:40 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2635</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo7/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/scatter_map.jpg" alt="scatter_map" width="694" height="508" class="alignnone size-full wp-image-2636" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo7/">example</a>

クリックすると散布図上の要素を地図上にプロットします。

&nbsp;
&nbsp;
<h2>■ データの作成</h2>
<hr />
下記形式のCSV(物件データ)からgeoJSONデータを作成しました。

[shell]
id,rent,room,lat,lng,address,city
14388189,25000,1R,36.40078694,139.0906517,群馬県前橋市幸塚町,前橋
4032272,28000,1K,36.38146,139.0660219,群馬県前橋市紅雲町１丁目,前橋
6834694,55000,2DK,36.364055,139.0582739,群馬県前橋市後家町,前橋
14404269,49000,1LDK,36.29101675,139.0376737,群馬県高崎市下佐野町,高崎
16727463,56000,2LDK,36.35130443,139.3227214,群馬県太田市藪塚町,太田
4038181,48000,2DK,36.38122111,139.0359931,群馬県前橋市元総社町,前橋
[/shell]
CSVを<a href="http://www.qgis.org/">Quantum GIS</a>でよみこみます。
メニュー「レイヤー」→「デリミティッドテキストレイヤの追加」
CSVファイルを選択。デミリタは「カンマ」を指定。XYフィールドでは「x:lng」「y:lat」を指定。読み込みの際の空間参照システムの指定は、元データの位置情報形式によりますが通常は「WGS 84」でＯＫ。

CSV読み込み
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3scatter000000.jpg" alt="d3scatter000000" width="520" height="566" class="alignnone size-full wp-image-2638" />
読み込み成功
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/d3scatter000001-e1363218545940.jpg" alt="d3scatter000001" width="590" height="377" class="alignnone size-full wp-image-2639" />

問題なく読み込めたらgeoJSONとして保存します。
物件データはこれで完了
地図データ（群馬県）の作成は、<a href="http://shimz.me/blog/d3-js/2351" target="_blank">こちら</a>の記事を参考にしてください。

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />
[html title="index.html"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;style&gt;
body {
    padding: 10px;
}

.grid .tick {
    stroke: lightgrey;
    opacity: 0.7;
}
.grid path {
    stroke-width: 0;
}
&lt;/style&gt;
&lt;body&gt;
&lt;svg di=&quot;svg&quot;&gt;&lt;/svg&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]
[javascript title="index.js"]
window.onload = function(){
    var sw = 700; //ステージ横幅
    var sh = 600; //ステージ縦幅

    //svg追加
    var svg = d3.select('svg').attr({
        width:sw,
        height:sh
    })
    .style(&quot;background-color&quot;, &quot;#f5f5dc&quot;);

    var x_margin = 80; //X軸マージン
    var y_margin = 80; //Y軸マージン
    var y_step = 20; //Y軸間隔
    var mode_flag = &quot;graph&quot;; //モード切換用フラグ
    
    //投影法設定
    projection = d3.geo
    .mercator()        
    .scale(200000)
    .rotate([-0.4,0.3,0]) 
    .center([139.0032936, 36.3219088]); 
        
    path = d3.geo.path().projection(projection);
    
    //群馬地図データ読み込み
    d3.json('gunma.geojson', function(json){
    
    svg.selectAll(&quot;path&quot;) //群馬県地図追加
        .data(json.features)
        .enter()
        .append(&quot;svg:path&quot;)
        .attr({
        &quot;class&quot;:&quot;gunma&quot;,
        &quot;d&quot;:path,
        &quot;fill&quot;: &quot;green&quot;,
        &quot;fill-opacity&quot;:0, //非表示
        &quot;stroke&quot;:&quot;black&quot;,
        &quot;stroke-opacity&quot;:0 //非表示
        });
        
    });

    //物件データ読み込み
    d3.json('dummy.geojson?1', function(json){
    
    //データセット（賃料）の最小値、最大値取得　
    //var rentMin = d3.min(json.features ,function(d){ return d.properties.rent} ); //使ってない
    var rentMax = d3.max(json.features ,function(d){ return d.properties.rent} );
        
    //スケール設定
    var xScale = d3.scale.linear().domain([0, rentMax]).range([0, sw-(x_margin*2)]);
    var yScale = d3.scale.ordinal().domain([
                    &quot;&quot;,&quot;1R&quot;,&quot;1K&quot;, &quot;1DK&quot;, &quot;1LDK&quot;, &quot;1SLDK&quot;,
                    &quot;2R&quot;,&quot;2K&quot;, &quot;2DK&quot;, &quot;2LDK&quot;, &quot;2SLDK&quot;,
                    &quot;3R&quot;,&quot;3K&quot;, &quot;3DK&quot;, &quot;3LDK&quot;, &quot;3SLDK&quot;,
                    &quot;4R&quot;,&quot;4K&quot;, &quot;4DK&quot;, &quot;4LDK&quot;, &quot;4SLDK&quot;,
                ].reverse()).range(d3.range(0, 420, y_step));
        
    //目盛り設定
    var xAxis = d3.svg.axis().scale(xScale).tickSize(1).ticks(5).tickFormat(function(d){ return (d/10000)+&quot;万円&quot;});
    var yAxis = d3.svg.axis().scale(yScale).tickSize(1).orient('left');
        
    //目盛りX軸作成
    svg.append('g')
        .attr({
        &quot;class&quot;:&quot;axis&quot;,
        transform: &quot;translate(&quot;+x_margin+&quot;,&quot; + 480 + &quot;)&quot;
        })
        .call(xAxis);
    //X軸グリッド    
    svg.append(&quot;g&quot;)
        .attr(&quot;class&quot;, &quot;grid axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(&quot;+x_margin+&quot;,&quot; + 480 + &quot;)&quot;)
        .call(
        d3.svg.axis()
        .scale(xScale)
        .orient(&quot;bottom&quot;)
        .ticks(10)
        .tickSize(-400, 0, 0)
        .tickFormat(&quot;&quot;)
        );          
            
            
    //目盛りY軸作成
    svg.append('g')
        .attr({
        &quot;class&quot;:&quot;axis&quot;,
        transform: &quot;translate(&quot;+x_margin+&quot;,&quot; + y_margin + &quot;)&quot;
        })
        .call(yAxis);
    //Y軸グリッド    
    svg.append(&quot;g&quot;)
        .attr(&quot;class&quot;, &quot;grid axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(&quot;+x_margin+&quot;,&quot; + y_margin + &quot;)&quot;)
        .call(
        d3.svg.axis()
        .scale(yScale)
        .orient(&quot;left&quot;)
        .tickSize(-(sw-(x_margin*2)), 0, 0)
        .tickFormat(&quot;&quot;)
        );
        
    
    //物件データプロット(point)        
    svg.selectAll('circle')
        .data(json.features)
        .enter()
        .append('circle')
        .attr({
        &quot;r&quot;:6,
        &quot;fill-opacity&quot;:0.5,
        &quot;fill&quot;:function(d){ return cityColor(d.properties.city)},               
        &quot;cx&quot;:function(d){ return xScale(d.properties.rent) + x_margin},
        &quot;cy&quot;:function(d){ return yScale(d.properties.room) + y_margin} ,
        })
        .on(&quot;mouseover&quot;, function(){
        d3.select(this).attr({
            &quot;r&quot;:10,
            &quot;fill&quot;:&quot;black&quot;,
            &quot;fill-opacity&quot;:1
        });
        })
        .on(&quot;mouseout&quot;, function(){
            d3.select(this).attr({
            &quot;r&quot;:6,
            &quot;fill&quot;:function(d){ return cityColor(d.properties.city)},  
            &quot;fill-opacity&quot;:0.5
        });
        })
        .append('title') //ツールチップ追加
        .text(function(d){ return (d.properties.rent/10000) + &quot;万円/&quot; + d.properties.room + &quot; &quot; +d.properties.address });
         
     //ciry-&gt;color name 変換   
    function cityColor(city){
        var color = &quot;gray&quot;;
        switch(city){
        case '高崎': color=&quot;red&quot;;break;                
        case '前橋': color=&quot;teal&quot;;break;
        case '伊勢崎': color=&quot;maroon&quot;;break;
        case '安中': color=&quot;blue&quot;;break;
        case '太田': color=&quot;purple&quot;;break;
        case 'みどり': color=&quot;navy&quot;;break;
        case '佐波郡': color=&quot;lime&quot;;break;
        case '館林': color=&quot;aqua&quot;;break;
        case '藤岡': color=&quot;yellow&quot;;break;
        case '足利': color=&quot;pink&quot;;break;
        }
        return color;
    }
    
    //表示モード切替     
    svg.on(&quot;click&quot;, function(){
        if(mode_flag == &quot;graph&quot;){ map_mode(); mode_flag = &quot;map&quot; }
        else if(mode_flag == &quot;map&quot;){ graph_mode(); mode_flag = &quot;graph&quot; }
    });   
    
    //グラフ表示    
    function graph_mode(){
        d3.selectAll(&quot;.axis&quot;)  //目盛表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:1,    
            &quot;stroke-opacity&quot;:1 
        })
        .duration(1000) 
        .delay(100);
    
        d3.selectAll(&quot;.gunma&quot;)  //地図非表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:0,    
            &quot;stroke-opacity&quot;:0 
        })
        .duration(1000) 
        .delay(100);
                    
        svg.selectAll('circle') //pointをグラフ上に移動
        .transition()
        .attr({ //X軸：賃料,Y軸：間取からpointを配置する位置を指定
            &quot;cx&quot;:function(d, i){ return xScale(d.properties.rent) + x_margin},
            &quot;cy&quot;:function(d, i){ return yScale(d.properties.room) + y_margin} ,
        })
        .duration(1000) 
        .delay(100);
        
    }
        
    //地図表示
    function map_mode(){
        d3.selectAll(&quot;.axis&quot;)  //目盛非表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:0,    
            &quot;stroke-opacity&quot;:0 
        })
        .duration(1000) 
        .delay(100);
            
        d3.selectAll(&quot;.gunma&quot;) //地図表示
        .transition()
        .attr({
            &quot;fill-opacity&quot;:0.3,    
            &quot;stroke-opacity&quot;:0.3 
        })
        .duration(1000) 
        .delay(100);
    
        svg.selectAll('circle') //pointを地図上に移動
        .transition()
        .attr({ //緯度経度からpointを配置する位置を指定
            &quot;cx&quot;:function(d){ return projection(d.geometry.coordinates)[0]; },
            &quot;cy&quot;:function(d){ return projection(d.geometry.coordinates)[1]; }
        })
        .duration(1000) 
        .delay(100);
        
    }

    });
       
    
}
[/javascript]
<hr>
<h2>TIPS</h2>
グラフのY軸に間取りデータを適応していますが、グラフとして並べるには「2LDK」などの文字列を対応するコード(数値)に変換する必要があります。
53行目では、Scaleのordinalメソッドを使用して「間取り→コード」の変換を行っています。
[javascript firstline="53"]
    var yScale = d3.scale.ordinal().domain([
                    &quot;&quot;,&quot;1R&quot;,&quot;1K&quot;, &quot;1DK&quot;, &quot;1LDK&quot;, &quot;1SLDK&quot;,
                    &quot;2R&quot;,&quot;2K&quot;, &quot;2DK&quot;, &quot;2LDK&quot;, &quot;2SLDK&quot;,
                    &quot;3R&quot;,&quot;3K&quot;, &quot;3DK&quot;, &quot;3LDK&quot;, &quot;3SLDK&quot;,
                    &quot;4R&quot;,&quot;4K&quot;, &quot;4DK&quot;, &quot;4LDK&quot;, &quot;4SLDK&quot;,
                ].reverse()).range(d3.range(0, 420, y_step));
[/javascript]

scaleのrangeには以下の配列が挿入されています。
[javascript]
&gt; d3.range(0, 420, y_step)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400]
[/javascript]

作成したyScale関数に間取りを渡すと、対応する数値に変換されます。
[javascript]
&gt; yScale('1R')
380
&gt; yScale('1K')
360
&gt; yScale('4LDK')
20
&gt; yScale('4SLDK')
0
[/javascript]


<a href="http://shimz.me/example/d3js/geo_example/geo7/">example</a>

【関連】
<a href="http://shimz.me/blog/d3-js/2703" target="_blank">【D3.js + GMap】群馬県の過疎地域</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2635</wp:post_id>
		<wp:post_date>2013-03-14 01:50:40</wp:post_date>
		<wp:post_date_gmt>2013-03-13 16:50:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e7%be%a4%e9%a6%ac%e7%9c%8c%e3%81%ae%e8%b3%83%e8%b2%b8%e7%89%a9%e4%bb%b6%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e5%8f%af%e8%a6%96%e5%8c%96%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2636]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_344806108971066]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【node.js+D3.js】RSSリーダーを作る</title>
		<link>http://shimz.me/blog/node-js/2643</link>
		<pubDate>Fri, 15 Mar 2013 01:13:25 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2643</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>feedparserの仕様が変わったため現在動きません。</h2>
<hr></hr>

<img class="aligncenter size-full wp-image-2644" alt="googlereader2" src="http://shimz.me/blog/wp-content/uploads/2013/03/googlereader2.jpg" width="615" height="341" />

<a href="http://itpro.nikkeibp.co.jp/article/NEWS/20130314/463318/?top_nhl">Googleが酷いこと</a>をしたので自前のRSSリーダーを作成してみます。
フィードを読み込んでリストとして表示するだけの、最低限の機能しかありません。
<h2>node.jsでRSS取得サーバーを作成</h2>

<hr />

フィードの読み込みには「feedparser」ライブラリを使用します。

[shell]
$ npm install feedparser
[/shell]

feedパラメーターにフィードのURLを指定してGETリクエストを送ると取得した内容をJSONで返すだけのサーバーです。(WEB API)

[javascript title="server.js fix:2013/07/18"]
var FeedParser = require('feedparser')
	, request = require('request')
	, fs = require('fs')
	, http = require('http')
	, url = require('url');

http.createServer(function (req, res) {
	var pathname = url.parse(req.url).pathname;
	var queryData = url.parse(req.url, true).query;
	var feedurl = unescape(queryData.feed)
	var article = [];
	if(pathname === &quot;/favicon.ico&quot;) return;

	request(feedurl)
		.pipe(new FeedParser())
		.on('error', function(error) {
			console.error(error);
		})
		.on('meta', function (meta) {
			//console.error(meta);
		})
		.on('readable', function () {
			// do something else, then do the next thing
			var stream = this, item; 

			while (item = stream.read()) {
				article.push(item);
			}
			stream.end = function(){
				res.writeHead(200, {
					'Content-Type':'application/json; charset=utf-8',
					'Access-Control-Allow-Origin':'*',
					'Pragma': 'no-cache',
					'Cache-Control' : 'no-cache'
				});
				if(queryData.limit) article = article.slice(0, queryData.limit);
				res.write(JSON.stringify(article));
				res.end();			
			};

		});


	process.on('uncaughtException', function (err) {
		console.log('uncaughtException =&gt; ' + err);
		console.log(feedurl); 
		res.writeHead(500);
		res.write(&quot;error!&quot;);
		res.end(); 
	});
}).listen(1337, '127.0.0.1');


function send(){

}
console.log('Server running at http://127.0.0.1:1337/?feed=&lt;RSS URL&gt;&amp;limit=&lt;length&gt;');
[/javascript]

ローカルで動かすこと前提なので、セキュリティとか考慮してません。
<h2>D3.jsでRSSリーダーのフロントエンドを作成</h2>

<hr />

D3.jsはグラフの作成だけでなく、フロントエンドのUIを作成するのにも使えます。

[html title="reader.html"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var list = [ //読み込むフィードの指定
	{title:&quot;GUNMA GIS GEEK&quot;, url:&quot;http://shimz.me/blog/feed&quot;, limit:5},
	{title:&quot;はてブ&quot;, url:&quot;http://feeds.feedburner.com/hatena/b/hotentry&quot;, limit:5},
	{title:&quot;WIRED.jp&quot;, url:&quot;http://wiredvision.jp/feed/atom.xml&quot;, limit:5}
]

//IE v.9以下非対応
list.map(function(d){
	d.id　= d.title.replace(/\s|\t|　|\.|,|\\/g,&quot;&quot;); //titleからDOM idを作成
});

var date = new Date();

window.onload = function(){
	var ul = d3.select('body').selectAll('ul').data(list)
				.enter()
				.append('div')
				.attr('id', function(d){ return d.id})
				.append('ul')

	ul.html(function(d){ return &quot;&lt;h3&gt;&quot; + d.title + &quot;&lt;/h3&gt;&quot;})
		.attr('class', function(d){ return d.id + &quot;_ul&quot;})
		.selectAll(append_li)

	function　append_li(d){
			var date = new Date();
			var encUrl = escape(d.url);
			d3.json('http://127.0.0.1:1337/?feed='+encUrl+'&amp;limit='+d.limit + &quot;&amp;&quot;+date, function(json){
				d3.select('.'+d.id +&quot;_ul&quot;)
				  .selectAll(&quot;.&quot;+d.id+&quot;_list&quot;)
				  .data(json)
				  .enter()
				  .append('li')
				  .attr(&quot;class&quot;, d.id+&quot;_list&quot;)
				  .html(function(d){
					return '&lt;a href=&quot;'+d.link+'&quot; target=&quot;_blank&quot;&gt;' + d.title + '&lt;/a&gt;';
				  })
			});
			return 'li';
		  }

}
&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
[/html]
<h2>実行</h2>

<hr />

まずサーバーを起動します。

[shell]
node server.js
[/shell]

サーバーが起動したら、reader.htmlを開きます。以上。
<img class="aligncenter size-full wp-image-2645" alt="simplerssreader" src="http://shimz.me/blog/wp-content/uploads/2013/03/simplerssreader.jpg" width="590" height="272" />

<a href="https://github.com/shimizu/SimpleRssReader">https://github.com/shimizu/SimpleRssReader</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2643</wp:post_id>
		<wp:post_date>2013-03-15 10:13:25</wp:post_date>
		<wp:post_date_gmt>2013-03-15 01:13:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90node-jsd3-js%e3%80%91rss%e3%83%aa%e3%83%bc%e3%83%80%e3%83%bc%e3%82%92%e4%bd%9c%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2644]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_423461314415037]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>本は捨てるもの</title>
		<link>http://shimz.me/blog/other/2646</link>
		<pubDate>Sat, 16 Mar 2013 00:14:31 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2646</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/oldbook.jpg" alt="oldbook" width="590" height="392" class="aligncenter size-full wp-image-2648" />

１週間に１冊小説を買うと１年で48冊の本が増える。
他、コミックスや雑誌、仕事柄どうしても購入せざる終えない技術書などを含めると、年間でわりと簡単に100冊を超えたりする。

当然、これら全ての本をとっておくスペースはないので、幾つかは捨てたり古書店に売ったりする。

また、永遠に価値の変わらない本があれば賞味期限のある本もある。

Twitter API 1.0の頃に買った参考書はそろそろ賞味期限が切れる。

本を買うのと同じくらい頻繁に本を捨てる。

だから私は書籍に関してはDRMをあまり気にしない。

オンラインゲームやソーシャルゲームでサービスが終了したら電子の海に藻屑となって消える仮想的なアイテムに、何万円もつぎ込む人が居ることを考えればさほど特殊なことでもないような気がする。

読みたいときにすぐ買えて、場所もとらない。廃品回収に出す手間もない。

一時の利便性を購入していると思えば、そんなに高い買い物でもないだろう。

そんなわけで、今日もせっせとKindleで本を購入してる。

<a href="http://anond.hatelabo.jp/20130314194117">シンプルな生き方を目指す</a>


【備考】
まぁ、安くなる分には文句はないので、DRM付きの場合は値引きとかしてくれるといいのだけれど。
あと、そのうちどっかが「格安なストリーミングでの書籍レンタル」とかやったらいいと思う。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2646</wp:post_id>
		<wp:post_date>2013-03-16 09:14:31</wp:post_date>
		<wp:post_date_gmt>2013-03-16 00:14:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9c%ac%e3%81%af%e6%8d%a8%e3%81%a6%e3%82%8b%e3%82%82%e3%81%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2648]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_636019143089326]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】作っておくと便利な関数達</title>
		<link>http://shimz.me/blog/d3-js/2649</link>
		<pubDate>Sun, 17 Mar 2013 00:48:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2649</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>ショートカット</h2>
<hr>
D3はどうしても無名関数を多用することになるので、ショートカットを作っておくと便利です。
[javascript]
function D(params){
    return function(d, i){
        if(typeof params ==='function') { return params(d) }
        else if( typeof params ==='string'){ return (new Function( 'return (' + d + params + ')' )()) }
        else { return d};
    }
}

function I(params){
    return function(d, i){
        if(typeof params ==='function') { return params(i) }
        else if( typeof params ==='string'){ return (new Function( 'return (' + i + params + ')' )()) }
        else { return i};
    }
}

function F(name){
  var params=Array.prototype.slice.call(arguments,1);  
    return function(d){
        if(typeof params[0] ==='function') { return params[0](d[name]) }
        else if( typeof params[0] ==='string'){ return (new Function( 'return (' + d[name] + params[0] + ')' )()) }
        else if( typeof name === 'object' ){ return name }
        else { return d[name]};
    }
}
[/javascript]

使い方
[javascript title="sample"]
var data1 = [10, 20 30];

//before 

d3.selectAll('rect')
  .data(data1)
  .enter()
  .append('rect')
  .attr({
     x:function(d){ return d },
     y:function(d){ return d * 10 + 100 }
  });

// after 

d3.selectAll('rect')
  .data(data1)
  .enter()
  .append('rect')
  .attr({
     x:D(),
     y:D('* 10 + 100')
  });

// other

var data2 = [{x:10, y:20, color:10}, {x:10, y:20, color:20}, {x:10, y:20, color:30}}
var colorScale = d3.scale.category20();

d3.selectAll('circle')
  .data(data1)
  .enter()
  .append('circle')
  .attr({
     r:I(),
     x:F('X'),
     y:F('y', '* 10 + 100'),
     color:F('color', colorScale),
  });
[/javascript]   
   
&nbsp;
&nbsp;
<h2>部分適用、ランダム、データ生成</h2>
<hr>
curryは厳密にはカリー化ではなく部分適用かもしれませんが、覚えやすいのでこの名前を使ってます。
[javascript]
if (!Function.prototype.curry){
    (function(){
	var slice = Array.prototype.slice;
	
	Function.prototype.curry = function(){
	    var target = this;
	    var args = slice.call(arguments);
	    
	    return function(){
		var allArgs = args;
		if (arguments.length &gt; 0){
		    allArgs = args.concat(slice.call(arguments));
		}
		return target.apply(this, allArgs);
	    };
	};
    }());
}

function R(s){ return Math.floor(Math.random() * s) }; 

function createData(obj, length){
    var data = [];
    for(var i=0; i &lt; length; i++){
        if(typeof obj === 'function'){ data.push(obj())} 
        else{data.push(obj)};   
    }
    return data;
}
[/javascript]

使い方
[javascript title="sample"]
var rmdObj = function() { return {x:R(100), y:R(100)} };
var data = createData.curry(rmdObj);
data(4) // -&gt; [{&quot;x&quot;:93,&quot;y&quot;:57},{&quot;x&quot;:10,&quot;y&quot;:26},{&quot;x&quot;:26,&quot;y&quot;:46},{&quot;x&quot;:5,&quot;y&quot;:50}]
data(4) // -&gt; [{&quot;x&quot;:17,&quot;y&quot;:38},{&quot;x&quot;:88,&quot;y&quot;:77},{&quot;x&quot;:48,&quot;y&quot;:92},{&quot;x&quot;:71,&quot;y&quot;:26}]&quot;
[/javascript]
ランダムなデータを生成したいときに便利


&nbsp;
&nbsp;
<h2>トグル</h2>
<hr>
トグルにしたい関数を二つ渡します。
[javascript]
function toggle(){
    var fn = arguments;
    var l = Array.prototype.slice.call(fn,1).length;
    var i = 0;
    return function(){
        if(l &lt; i) i=0;
        fn[i++]();            
    }
}
[/javascript]

使い方
[javascript title="sample"]
    function a1(){
          alert('Hello');  
    }
    function a2(){
        alert('world');    
    }
setInterval(toggle(a1, a2), 1000)
[/javascript]


&nbsp;
&nbsp;
<h2>D3 Helper Function</h2>
<hr>
jsdo.itで試せます。
<script type="text/javascript" src="http://jsdo.it/blogparts/qliL/js"></script>
&nbsp;
&nbsp;
<h2>D3utilityを使ったサンプル</h2>
<hr>
<script type="text/javascript" src="http://jsdo.it/blogparts/hhMQ/js"></script>
<script type="text/javascript" src="http://jsdo.it/blogparts/aKGu/js"></script>
<script type="text/javascript" src="http://jsdo.it/blogparts/tZNX/js"></script>
<script type="text/javascript" src="http://jsdo.it/blogparts/uOE3/js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2649</wp:post_id>
		<wp:post_date>2013-03-17 09:48:52</wp:post_date>
		<wp:post_date_gmt>2013-03-17 00:48:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%8a%e3%81%8f%e3%81%a8%e4%be%bf%e5%88%a9%e3%81%aa%e9%96%a2%e6%95%b0%e9%81%94</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_180121295468890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】 Layout sample1</title>
		<link>http://shimz.me/blog/d3-js/2652</link>
		<pubDate>Mon, 18 Mar 2013 00:37:41 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2652</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/layout.jpg" alt="layout" width="462" height="461" class="aligncenter size-full wp-image-2653" />

D3.jsのLayout機能のサンプルです。

<a href="http://shimz.me/blog/d3-js/2649">こちら</a>で作成した関数を使っているので、合わせてどうぞ。


<a href="https://github.com/mbostock/d3/wiki/Pie-Layout"><strong>pie</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/hhMQ/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<a href="https://github.com/mbostock/d3/wiki/Stack-Layout"><strong>stack</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/qnNO/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<a href="https://github.com/mbostock/d3/wiki/Pack-Layout"><strong>pack</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/p52c/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<a href="https://github.com/mbostock/d3/wiki/Treemap-Layout"><strong>Treemap</strong></a>
<script type="text/javascript" src="http://jsdo.it/blogparts/2gSa/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2652</wp:post_id>
		<wp:post_date>2013-03-18 09:37:41</wp:post_date>
		<wp:post_date_gmt>2013-03-18 00:37:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-layout-sample1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2654]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_383477928426273]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map上に雲と天気を表示する</title>
		<link>http://shimz.me/blog/map/2656</link>
		<pubDate>Tue, 19 Mar 2013 00:31:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2656</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/07/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/googleweather1.jpg" alt="googleweather1" width="590" height="362" class="aligncenter size-full wp-image-2657" /></a>

いつのまにか、そんな機能がついていたらしい。

<a href="https://developers.google.com/maps/documentation/javascript/layers#WeatherLayer">The Weather and Cloud Layers (Library)</a>
なぜか、日本語版の「デベロッパーズガイド」にはこの機能のことが載ってない。

天気を表示するWeatherLayerと、雲を表示するCloudLayerを使用する場合は、libraries=weatherを付加してGoogle Map APIを読み込んでください。
[html]
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;v=3&amp;language=ja&amp;libraries=weather&quot;&gt;
[/html]
表示の仕方は<a href="http://shimz.me/blog/map/2151">ヒートマップ</a>に比べるとだいぶ簡単。
[javascript]
function initialize() {
        var mapDiv = document.getElementById(&quot;map_canvas&quot;);
        var mapCanvas = new google.maps.Map(mapDiv, {
                center : new google.maps.LatLng(35.681382, 139.766084),
                zoom : 6,
                mapTypeId : google.maps.MapTypeId.ROADMAP
        });
        
       //天気レイヤ追加
        var weatherLayer = new google.maps.weather.WeatherLayer(); 
        weatherLayer.setMap(mapCanvas);
       
        //雲レイヤ追加
        var cloudLayer = new google.maps.weather.CloudLayer(); 
        cloudLayer.setMap(mapCanvas);
        
        
}
google.maps.event.addDomListener(window, &quot;load&quot;, initialize);
[/javascript]

<a href="http://shimz.me/example/gmapv3/07/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2656</wp:post_id>
		<wp:post_date>2013-03-19 09:31:49</wp:post_date>
		<wp:post_date_gmt>2013-03-19 00:31:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-map%e4%b8%8a%e3%81%ab%e9%9b%b2%e3%81%a8%e5%a4%a9%e6%b0%97%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2657]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_580909865254385]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【英語】Kindleで買えるお勧めHTML5 Canvas技術書【読めない】</title>
		<link>http://shimz.me/blog/javascript/2659</link>
		<pubDate>Fri, 05 Apr 2013 06:14:48 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2659</guid>
		<description></description>
		<content:encoded><![CDATA[Kindleでは海外の技術書が手軽に買えてありがたいですね。
最近買った本の中から一冊お勧めしたいと思います。

<a href="http://www.amazon.co.jp/gp/product/B0085TJYKU/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B0085TJYKU&amp;linkCode=as2&amp;tag=toriaezu04b-22">Core HTML5 Canvas: Graphics, Animation, and Game Development (Core Series) [Kindle版]</a>
<a href="http://www.amazon.co.jp/gp/product/B0085TJYKU/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B0085TJYKU&amp;linkCode=as2&amp;tag=toriaezu04b-22"><img alt="" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;ASIN=B0085TJYKU&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=toriaezu04b-22" border="0" /></a><img style="border: none !important; margin: 0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&amp;l=as2&amp;o=9&amp;a=B0085TJYKU" width="1" height="1" border="0" />

Canvasについて初歩からアニメーション・衝突検出・物理演算と高度な内容まで包括的に解説したボリュームたっぷりな書籍です。
画像とサンプルコードによる説明が多くて英語が読めなくても結構なんとかなります。
おまけにフルカラー。
<a href="http://corehtml5canvas.com/">公式サイト</a>でデモ／サンプルコードや書籍の内容が確認できます。

デモはこちら。
<a href="http://corehtml5canvas.com/code-live/">http://corehtml5canvas.com/code-live/</a>

書籍のサンプルはメニューの「Free chapter」からどうぞ。86ページ分無料公開と大盤振る舞いです。
<a href="http://corehtml5canvas.com/">http://corehtml5canvas.com/</a>

ペーパーバックだと5,115円ですが、Kindle版だと半額以下の2,209円でお得です。	]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2659</wp:post_id>
		<wp:post_date>2013-04-05 15:14:48</wp:post_date>
		<wp:post_date_gmt>2013-04-05 06:14:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90%e8%8b%b1%e8%aa%9e%e3%80%91kindle%e3%81%a7%e8%b2%b7%e3%81%88%e3%82%8b%e3%81%8a%e5%8b%a7%e3%82%81html5-canvas%e6%8a%80%e8%a1%93%e6%9b%b8%e3%80%90%e8%aa%ad%e3%82%81%e3%81%aa%e3%81%84%e3%80%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2715]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Komodo Edit]複数端末でスニペットやマクロを同期(共有)させる</title>
		<link>http://shimz.me/blog/editor/2661</link>
		<pubDate>Wed, 20 Mar 2013 01:17:28 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2661</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/03/komodoTools.png" alt="komodoTools" width="140" height="113" class="aligncenter size-full wp-image-2665" />

Dropbox等を使って複数の端末にインストールされたKomodo Editのtoolboxを同期させることができます。

WindowsとMac間でもスニペットやマクロの共有が可能です。

やりかたは、とても簡単。

toolboxのディレクトリ(tools)をDorpbox等に移動して、元の場所にシンボリックリンクを貼るだけです。

toolsディレクトリの場所はKomodo Editを起動し、toolbox上で右クリック「show Exploer(show Finder)」を選べばtoosフォルダが開きます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/komodoTooboxrightClick.jpg" alt="komodoTooboxrightClick" width="172" height="244" class="size-full wp-image-2666" />

toolsフォルダまでのパスを調べたらDropboxに移動し、シンボリックリンクを貼ってください．

[shell title="Windows"]
mklink /d  &lt;&lt;komodo Edit Path &gt;&gt;¥KomodoEdit¥7.1¥tools   &lt;&lt;Dpropbox Paht&gt;&gt;¥Dropbox¥tools
[/shell]

[shell title="Mac"]
ln -s   &lt;&lt;Dpropbox Paht&gt;&gt;/Dropbox/tools &quot;&lt;&lt;komodo Edit Path &gt;&gt;/KomodoEdit/7.1/tools&quot;
[/shell]

WindowsのmklinkコマンドとMacのlnコマンドで<strong>引数が逆になる</strong>ので注意。(mklinkは管理者として実行しないとダメ)
macの場合、Komodo Editのパスに"/Application Support/"が含まれると思うのでダブルクォーテーションで囲みます。
また、mklinkの場合は「/d」オプションを忘れずに。


【関連記事】
<a href="http://shimz.me/blog/editor/148"> Komodo Editをとりあえず使ってみるための基本的な設定</a>
<a href="http://shimz.me/blog/editor/2519">[Komodo Edit] スニペットを使う</a>
<a href="http://shimz.me/blog/editor/2579">[Komodo Edit]マクロを使う</a>
&nbsp;


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2661</wp:post_id>
		<wp:post_date>2013-03-20 10:17:28</wp:post_date>
		<wp:post_date_gmt>2013-03-20 01:17:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kodoedit-%e8%a4%87%e6%95%b0%e7%ab%af%e6%9c%ab%e3%81%a7%e3%82%b9%e3%83%8b%e3%83%9a%e3%83%83%e3%83%88%e3%82%84%e3%83%9e%e3%82%af%e3%83%ad%e3%82%92%e5%90%8c%e6%9c%9f%e5%85%b1%e6%9c%89%e3%81%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2665]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_176342412516976]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinkStationにrsyncしたファイルをwindowsで開こうとしたら「アクセスが拒否されました。」と言われた時の対応</title>
		<link>http://shimz.me/blog/troubleshooting/2667</link>
		<pubDate>Thu, 21 Mar 2013 04:09:29 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2667</guid>
		<description></description>
		<content:encoded><![CDATA[バックアップを取るrsyncサーバーが必要になったので、LinkStationを購入。
rsyncサーバとして使う方法は以下の記事を参照。

<a href="http://d.hatena.ne.jp/rednes/20090806/1249516084">BuffaloのNASをrsyncサーバとして使う</a>

問題なくファイルは送れるのだけれど、Windowsから送ったファイルを開こうとすると拒否られた。

<img src="http://shimz.me/blog/wp-content/uploads/2013/03/linkstationrsync.jpg" alt="linkstationrsync" width="275" height="191" class="alignnone size-full wp-image-2668" />

とりあえず、メンドウなので「--chmodオプション」でパーミッションを「777」に指定することで回避
[shell]
rsync -avz --chmod=a+wr test.txt  rsync://admin@&lt;&lt;NAS IP-ADDRESS&gt;&gt;:873/disk1_rbackup
[/shell]

これで開ける。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2667</wp:post_id>
		<wp:post_date>2013-03-21 13:09:29</wp:post_date>
		<wp:post_date_gmt>2013-03-21 04:09:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linkstation%e3%81%abrsync%e3%81%97%e3%81%9f%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92windows%e3%81%a7%e9%96%8b%e3%81%93%e3%81%86%e3%81%a8%e3%81%97%e3%81%9f%e3%82%89%e3%80%8c%e3%82%a2%e3%82%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2668]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_121136258076856]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fusion TablesとGoogle Mapの連動が革命的に便利になっていた。</title>
		<link>http://shimz.me/blog/map/2670</link>
		<pubDate>Fri, 22 Mar 2013 11:38:51 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2670</guid>
		<description></description>
		<content:encoded><![CDATA[誰でも、地図を使った情報配信が出来る時代に……
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/fusion.jpg" alt="fusion" width="525" height="286" class="alignnone size-full wp-image-2687" />


<a href="http://pc.nikkeibp.co.jp/article/column/20110829/1036486/">Fusion Tables</a>とは「Google ドライブ」で利用できるデータベースです。
今年に入っていろいろと機能が追加されたらしく、以前に比べると非常に便利にそして手軽になっていました。
&nbsp;
<a href="https://www.google.com/fusiontables/DataSource?docid=1mlnItXyXD8lfmGtAhujeGgLMwLTB3OwZlLcZtdI">デモ１</a>
<a href="https://www.google.com/fusiontables/DataSource?docid=1hab1wE95GxzoQ7jwFwAkhFwJnli6d6g0zjf3AfY">デモ２</a>
&nbsp;
<h2>目次</h2>
<hr></hr>
１．MAPジェネレーター機能
２．住所等を位置情報に変換
３．Google Map Apiのコードとして出力する

&nbsp;
&nbsp;
<h2>１．MAPジェネレーター機能</h2>
<hr></hr>
以前は、ポイント表示ぐらいしか使えなかったような気がしたのですが、ポリゴンの情報などもアップロードできるようになり、KMLファイルなど位置情報を持つファイルをアップロードした場合、自動的にマッピングしてくれるようになっています。

今回は、国土数値情報からダウンロードした「交通流動量 パーソントリップ発生・集中量データ」をアップロードしてみます。
まずは、Quantum GISを使ってシェープデータを<a href="http://shimz.me/blog/map/2135">KMLに変換</a>します。

変換したKMLをアップロードします。

「作成」から「Fusion Tables」を選択します。
「Fusion Tables」をはじめて使うかたは「アプリを追加」から追加してください。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000014.jpg" alt="gmfusiontables000014" width="624" height="342" class="border alignnone size-full wp-image-2671" />

&nbsp;

作成したKMLをアップロードします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000002.jpg" alt="gmfusiontables000002" width="624" height="338" class="border alignnone size-full wp-image-2672" />

&nbsp;

しばらくするとプレビューが表示されるので問題なければ「Next」ボタンを押します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000003.jpg" alt="gmfusiontables000003" width="624" height="338" class="border alignnone size-full wp-image-2673" />

&nbsp;

「Fusion Tables」ファイルが作成されました。
既に「Map of geometry」というタブが作成されています。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000001.jpg" alt="gmfusiontables000001" width="624" height="345" class="border alignnone size-full wp-image-2675" />

&nbsp;

タブをクリックするとMap上にデータが表示されます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000004.jpg" alt="gmfusiontables000004" width="624" height="345" class="border alignnone size-full wp-image-2674" />

&nbsp;

「Tools」->「Change Map Styles」からデータ表示のカスタマイズを行います。
今回は「Polygons」の「Fill color」を「Gradient」に。
カラムを選択して最小値と最大値を入力すれば完成です。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000005.jpg" alt="gmfusiontables000005" width="590" height="531" class="border alignnone size-full wp-image-2676" />

&nbsp;

マップに戻ると…選択したカラムの値によって地図が塗り分けられるようになりました。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000007.jpg" alt="gmfusiontables000007" width="624" height="345" class="border size-full wp-image-2678" />

&nbsp;

フィルタを使って絞りこみ表示なども簡単です。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000009.jpg" alt="gmfusiontables000009" width="624" height="345" class="border size-full wp-image-2679" />

&nbsp;
&nbsp;
<h2>２．住所を位置情報に変換</h2>
<hr></hr>
簡単に言ってしまうと、住所や郵便番号などの入ったカラムをgeocodeを使って位置情報に変換する機能です。
緯度経度など地理情報を持たないデータも地図上にマッピングすることができます。

都道府県の「人口、面積、人口密度」を記載したcsvファイルをアップロードします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000000-e1363949308353.jpg" alt="ggmfusiontables000000" width="624" height="426" class="border size-full wp-image-2680" />

&nbsp;

カラムのメニューからChangeを選びます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000001.jpg" alt="ggmfusiontables000001" width="401" height="250" class="border size-full wp-image-2681" />

&nbsp;

「Type」をLocationに変更してセーブします。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000003.jpg" alt="ggmfusiontables000003" width="363" height="555" class="border size-full wp-image-2682" />

&nbsp;

選択したカラムの値の色が黄色くなります。
（この時点ではまだ位置情報に変換されていません）
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000004.jpg" alt="ggmfusiontables000004" width="624" height="426" class="border size-full wp-image-2683" />

&nbsp;

FileメニューからGeocodeを選択します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000005.jpg" alt="ggmfusiontables000005" width="282" height="401" class="border size-full wp-image-2684" />

&nbsp;

「star」ボタンをクリック。Geocodeによる変換が開始します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000008.jpg" alt="ggmfusiontables000008" width="624" height="426" class="border size-full wp-image-2685" />

&nbsp;

変換が終わったらMapタブを追加しちゃんと位置が合っているか確認します。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/ggmfusiontables000010.jpg" alt="ggmfusiontables000010" width="640" height="437" class="border size-full wp-image-2686" />

以上です。
この機能を使えば、今まで位置情報が手に入らず活用できていなかったデータも地図上に表示して使うことができます。

ちなみにGeocodeによる変換は1日2500件という制限があります。
変換が終わっっていない行は黄色く表示されたままなので、次の日にでもまた変換作業をおこなってください。
(分かりやすく色づけしてくれるなんてGoogleさんは親切ですねｗ)


&nbsp;
&nbsp;
<h2>３．Google Map Apiのコードとして出力する機能</h2>
Google Map APIのコードとして出力できるので、他データと組み合わせてレイヤーを重ねたりなどのカスタマイズもできます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/03/gmfusiontables000008.jpg" alt="gmfusiontables000008" width="473" height="622" class="border size-full wp-image-2689" />
&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2670</wp:post_id>
		<wp:post_date>2013-03-22 20:38:51</wp:post_date>
		<wp:post_date_gmt>2013-03-22 11:38:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fusion-tables%e3%81%a8google-map%e3%81%ae%e9%80%a3%e5%8b%95%e3%81%8c%e9%9d%a9%e5%91%bd%e7%9a%84%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_428601800562306]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2687]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]静的コンテンツを表示するWEBサーバー</title>
		<link>http://shimz.me/blog/node-js/2690</link>
		<pubDate>Tue, 26 Mar 2013 02:22:37 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2690</guid>
		<description></description>
		<content:encoded><![CDATA[ローカルでちょっとしたテストを行いたいときなどに。
実行するとカレントディレクトリをルートディレクトリとしたWEBサーバーがローカルで起動します。
下位フォルダなどに置かれたコンテンツにもアクセスできます。
ついでにJSONファイルなどには、ヘッダーに「Access-Control-Allow-Origin」を付加します。

[javascript title="server.js"]
var http = require(&quot;http&quot;),
    url = require(&quot;url&quot;),
    path = require(&quot;path&quot;),
    fs = require(&quot;fs&quot;)
    port = process.argv[2] || 8888;
 
     
http.createServer(function(request, response) {
  
  var uri = url.parse(request.url).pathname
    , filename = path.join(process.cwd(), uri);
   
    path.exists(filename, function(exists){
        if (!exists) { Response_404(); return ; }
        if (fs.statSync(filename).isDirectory()) { filename += '/index.html'; }
 
        fs.readFile(filename, &quot;binary&quot;, function(err, file){
            if (err) { Response_500(err); return ; }
            Response_200(file, filename);   
        }); 
 
    });
     
     
     
    function Response_200(file, falename){
        var extname = path.extname(filename);
        var headerStr = {
            '.json':{
                'Content-Type':'application/json; charset=utf-8',
                'Access-Control-Allow-Origin':'*',
                'Pragma': 'no-cache',
                'Cache-Control' : 'no-cache'
                },
        }
        headerStr['.topojson'] = headerStr['.geojson'] = headerStr['.csv'] =  headerStr['.json'];
        headerStr['.csv']['Content-Type'] = 'text/csv;  charset=utf-8';
        var header = (headerStr[extname]) ? headerStr[extname] : null;
 
        response.writeHead(200, header);
        response.write(file, &quot;binary&quot;);
        response.end();
    }  
       
       
    function Response_404(){
          response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
          response.write(&quot;404 Not Found\n&quot;);
          response.end();
    }  
 
    function Response_500(err){
            response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
            response.write(err + &quot;\n&quot;);
            response.end();
    }  
     
     
 
 
   
}).listen(parseInt(port, 10));
  
console.log(&quot;Server running at http://localhost:&quot; + port );
[/javascript]
（ちょっと、やっつけ仕事感がひどい）


実行
[shell]
$ node server.js 
[/shell]


D3.jsのcsvメソッドなんかはセキュリティの関係でローカルのファイルを読めない(chromeの起動オプションとかで回避できるみたいだけど)ので、シンプルなwebサーバーがあると重宝します。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2690</wp:post_id>
		<wp:post_date>2013-03-26 11:22:37</wp:post_date>
		<wp:post_date_gmt>2013-03-26 02:22:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js%e3%83%86%e3%82%b9%e3%83%88%e7%94%a8%e3%81%ab%e9%9d%99%e7%9a%84%e3%82%b3%e3%83%b3%e3%83%86%e3%83%b3%e3%83%84%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8bweb%e3%82%b5%e3%83%bc%e3%83%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[100000522124170_499760763416668]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【tipsy】シンプルでカッコいいツールチップを表示するjQueryプラグイン</title>
		<link>http://shimz.me/blog/jquery/2693</link>
		<pubDate>Wed, 27 Mar 2013 03:04:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2693</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/tipsy/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/tipsy.jpg" alt="tipsy" width="167" height="133" class="alignnone size-full wp-image-2694" /></a>

<a href="http://onehackoranother.com/projects/jquery/tipsy/">tipsy - Facebook-style tooltip plugin for jQuery</a>

使い方はとても簡単で要素を指定してtipsyを実行するだけ。

[javascript]
$('#example-1').tipsy();
[/javascript]
ツールチップの表示位置や表示されるまでのスピードなども設定できます。
また、HTMLだけではなくSVGのツールチップも装飾してくれます。

SVGでは、ツールチップをtitle属性ではなく、titile要素をツールチップを表示したい要素の子要素として記述します。
svgでのツールチップの記述。
[html]
&lt;svg&gt;
    &lt;circle class=&quot;circle&quot; fill=&quot;red&quot; r=&quot;21&quot; cx=&quot;100&quot; cy=&quot;100&quot;&gt;
        &lt;title&gt;hoge&lt;/title&gt;
   &lt;/circle&gt;
&lt;/svg&gt;
[/html]
tipsyはこの場合でも問題なくツールチップを装飾してくれます。
jQueryを読み込まないとならないけれど、D3.jsと組み合わせてつかっても便利です。

<a href="http://shimz.me/example/d3js/tipsy/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2693</wp:post_id>
		<wp:post_date>2013-03-27 12:04:10</wp:post_date>
		<wp:post_date_gmt>2013-03-27 03:04:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90tipsy%e3%80%91%e3%82%b7%e3%83%b3%e3%83%97%e3%83%ab%e3%81%a7%e3%82%ab%e3%83%83%e3%82%b3%e3%81%84%e3%81%84%e3%83%84%e3%83%bc%e3%83%ab%e3%83%81%e3%83%83%e3%83%97%e3%82%92%e8%a1%a8%e7%a4%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2694]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】時間毎のアクセス数を可視化</title>
		<link>http://shimz.me/blog/d3-js/2695</link>
		<pubDate>Thu, 28 Mar 2013 03:33:59 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2695</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/color/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/03/colormap000000.jpg" alt="colormap000000" width="600" height="346" class="alignnone size-full wp-image-2696" /></a>


今回は、週ごとと曜日ごとへの並べ変えができるようにしてみました。

&nbsp;
&nbsp;
<h2>データセットの準備</h2>
<hr></hr>
元データは、<a href="http://shimz.me/blog/d3-js/2614">こちら</a>と同じくGoogle Analyticsからエクスポートしたものを使ってます。
こんな感じ。
[html title="DataSet(csv)"]
date,hour,visitors
2013-01-01,0,2
2013-01-01,1,1
2013-01-01,3,1
2013-01-01,7,2
　　・
　　・
　　・
[/html]

上記のcsvを扱いやすいようにd3.nest関数を使って、日付(date)をキーとしたオブジェクトに変換しています。
変換後のデータはこんな感じ。
[javascript title="DataSet(json)"]
[
	{
		&quot;key&quot; : &quot;2013-01-01&quot;, &quot;values&quot; : [ {
			&quot;date&quot; : &quot;2013-01-01&quot;, &quot;hour&quot; : &quot;0&quot;, &quot;visitors&quot; : &quot;2&quot;
		},
		{
			&quot;date&quot; : &quot;2013-01-01&quot;, &quot;hour&quot; : &quot;1&quot;, &quot;visitors&quot; : &quot;1&quot;
		},
					・
					・
					・
		]
	},

	{
		&quot;key&quot; : &quot;2013-01-02&quot;, &quot;values&quot; : [ {
			&quot;date&quot; : &quot;2013-01-02&quot;, &quot;hour&quot; : &quot;0&quot;, &quot;visitors&quot; : &quot;2&quot;
		},
		{
			&quot;date&quot; : &quot;2013-01-02&quot;, &quot;hour&quot; : &quot;1&quot;, &quot;visitors&quot; : &quot;1&quot;
		},
					・
					・
					・			
		]
	},

	{
		&quot;key&quot; : &quot;2013-01-03&quot;, &quot;values&quot; : [ {
			&quot;date&quot; : &quot;2013-01-03&quot;, &quot;hour&quot; : &quot;0&quot;, &quot;visitors&quot; : &quot;5&quot;
		},
		{
			&quot;date&quot; : &quot;2013-01-03&quot;, &quot;hour&quot; : &quot;1&quot;, &quot;visitors&quot; : &quot;4&quot;
		},
					・
					・
					・			
		]
	},
	・
	・
	・			
]
[/javascript]

読み込むたびに変換処理が行われるのは重いので変換したデータをJSONで出力→保存して使いました。
<a href="http://shimz.me/example/d3js/color/01/nest.html">CSV→JSON変換</a>

[javascript title="変換スクリプト"]
d3.csv('access.csv', function(csv){

	data = d3.nest()
			.key(function(d){  return d.date; }) //dateをkeyにしてネスト
			.entries(csv);
			
	var jsonData = JSON.stringify(data);

	//Data URI schemeとしてエクスポート
	d3.select('body').append('p').append('a').text('Data URI schemeで出力').attr({
			href: &quot;data:text/plain;base64,&quot;+ btoa(jsonData)
	});

	//テキストエリアにエクスポート
	d3.select('body').append('textarea').text(jsonData);
	
});
[/javascript]
これでデータセットの準備が整ったので表示します。


&nbsp;
&nbsp;
<h2>表示</h2>
<hr></hr>
keyにしたdateの数だけグループ(&lt;g&gt;)を作成し、その中に１日分のラベルとセル(&lt;rect&gt;)を収めています。
週ごと、曜日ごとの切り替わりは、gタグのtarnsform属性をy軸だけ変化させて移動してます。
セルを並べるのが割とメンドクサクてマジックナンバー頻出の酷いコードになりました orz
あと、ネストしたデータから最大値を取り出すのは結構大変でした。
[javascript]
d3.json('access.json' ,function(data){
	var weekday = [&quot;日&quot;,&quot;月&quot;,&quot;火&quot;,&quot;水&quot;,&quot;木&quot;,&quot;金&quot;,&quot;土&quot;];

	//visitorsの最大値を取得
	var max = d3.max( 
			data.map(function(d){
				return parseInt(
					d.values.map(function(dd){
						return parseInt(dd.visitors)
					})
				)
			})
		 );
	
	var svg = d3.select('svg').data([data]);
	
	var colorScale = d3.scale.linear().domain([0,5, 15, max]).range([&quot;#FFFFFF&quot;,&quot;#FF9999&quot; ,&quot;#FF0000&quot;,&quot;#990000&quot;]);
	
	
	var groupAttr = {
			transform: function(){
				var m = 10;
				return function(d, i){
						if((new Date(d.key)).getDay()==0) m += 40;  //日曜日ごとにY軸のマージンを増加
						return &quot;translate(&quot; +[200, m + (i * 16)] + &quot;)&quot;;
					}
				}(),
			width:10,
			height:10									
	}
	
	
	var group = svg.selectAll('g') //日付ラベルと一日分のセルを囲むグループ
			.data(D())
			.enter()
			.append('g')
			.attr(groupAttr)
	
	
	var ylabelAttr = {
			x: -100,
			y: 10,
			&quot;text-anchor&quot;: &quot;middle&quot;,
			&quot;aligbment-baseline&quot;: &quot;center&quot;,
			fill: &quot;black&quot;,
			stroke: &quot;none&quot;																												
		}

	var ylabel = group.append('text') //日付ラベル追加
			.attr(ylabelAttr)
			.text(function(d){ return d.key + &quot;:&quot; + weekday[(new Date(d.key)).getDay()] })
	
	
	var rectAttr = {
			x: F('hour', '* 20'),
			y: 0,
			width:10,
			height:10,
			fill: F('visitors', colorScale)					
		}

	var rect = group.selectAll('rect') //カラーセル追加
			.data(F('values'))
			.enter()
			.append('rect')
			.attr(rectAttr)
			
	rect.append('title').text(function(d){ return d.date + &quot; &quot; + d.hour +&quot;時 訪問者:&quot; + d.visitors }) //tooltip追加
	
	
	
	svg.on(&quot;click&quot;, toggle(daySort, weekSort));	
	
		
	//曜日ごと表示
	function daySort(){
		group.transition().duration(1000).attr({
			transform:function(d, i){
				var day = (new Date(d.key)).getDay();
				return &quot;translate(&quot; + [200, day * 300 ] + &quot;)&quot;
			}
		});
		rect.attr({
			y:function(d, i){
				var l = 0, preDate;
				return function(d, i){
					if(d.date != preDate){ l += 2.5; preDate = d.date} //日付が変わったらセルのy軸を一段下げる
					return l
				}
			}()
		});				
		ylabel.attr(y:I('* 2.5+12'));
	}
	
	//週ごと表示	
	function weekSort(){
		group.transition().duration(1000).attr({
			transform: function(){
				var m = 10;
				return function(d, i){
					if((new Date(d.key)).getDay()==0) m += 40;  //日曜日ごとにY軸のマージンを増加
					return &quot;translate(&quot; +[200, m + (i * 16)] + &quot;)&quot;;
				}
			}(),				
		});
		rect.attr(rectAttr);
		ylabel.attr(ylabelAttr)	;		
	}


	

	/*
	 *D3 Utility
	 *http://shimz.me/blog/d3-js/2649
	 */
	
[/javascript]

<a href="http://shimz.me/example/d3js/color/01/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2695</wp:post_id>
		<wp:post_date>2013-03-28 12:33:59</wp:post_date>
		<wp:post_date_gmt>2013-03-28 03:33:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e6%99%82%e9%96%93%e6%af%8e%e3%81%ae%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e6%95%b0%e3%82%92%e5%8f%af%e8%a6%96%e5%8c%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2696]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>リアクティブドキュメントを作成するライブラリ、他</title>
		<link>http://shimz.me/blog/bookmark/2699</link>
		<pubDate>Fri, 29 Mar 2013 07:27:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2699</guid>
		<description></description>
		<content:encoded><![CDATA[気になった記事メモ。

<div class="box"><a href="http://worrydream.com/Tangle/" target="_blank">Tangle: a JavaScript library for reactive documents</a>
リアクティブドキュメント(?)を作成できるライブラリ。どんなことが出来るのかはデモを見たほうが早い。</div>
<div class="box"><a href="http://objrefnotset.blogspot.jp/2013/03/currying-favor-with-partial-application.html" target="_blank">Object Reference Not Set: Currying Favor with Partial Application to get JavaScript SQL</a>
カリー化を利用して、JavaScriptのオブジェクトからSQL風に値を取り出す機能を実装するチュートリアル。</div>
<div class="box"><a href="http://davidwalsh.name/vendor-prefix" target="_blank">Detect Vendor Prefix with JavaScript</a>
閲覧中のブラウザが使用しているベンダープレフィックスを検出する</div>
<div class="box"><a href="http://bilaw.al/2013/03/17/hacking-the-a-tag-in-100-characters.html" target="_blank">Hacking the &lt;a&gt; tag in 100 characters</a>
aタブにhref属性の値(リンク先)を変更するonclickイベントを仕込めば、マウスオーバーでリンク先を確認してもフィッシングが可能だよね、という話。</div>
<div class="box"><a href="http://o-0.me/pXY/" target="_blank">pXY.js - pixel analysis for HTML5 Canvas</a>
Canvasを使った画像分析用ライブラリ</div>
<div class="box"><a href="http://games.greggman.com/game/webgl-3d-cameras/" target="_blank">WebGL 3D – Cameras « games.greggman.com</a>
Web GLのカメラ操作についてのチュートリアル</div>

&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2699</wp:post_id>
		<wp:post_date>2013-03-29 16:27:10</wp:post_date>
		<wp:post_date_gmt>2013-03-29 07:27:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%aa%e3%82%a2%e3%82%af%e3%83%86%e3%82%a3%e3%83%96%e3%83%89%e3%82%ad%e3%83%a5%e3%83%a1%e3%83%b3%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90%e3%81%99%e3%82%8b%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>今後の予定(D3.jsとかGISとか他)</title>
		<link>http://shimz.me/blog/other/2700</link>
		<pubDate>Sun, 31 Mar 2013 11:28:40 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2700</guid>
		<description></description>
		<content:encoded><![CDATA[年度も終わるので改めて。
やることリスト。

<ul>
	<li>D3.js、データセットを追加したり減らしたりしてのアップデート、トランジションが意図した通りに動かない場合が多いので調べる。
</li>
	<li>シェープファイルをMapShaperで軽くすると属性情報がごっそり抜けるので、これの対処方法を調査。
</li>
	<li>↑Quantum GISで出来ないのかな？
</li>
	<li>Quantum GIS で属性テーブルの結合の仕方
</li>
	<li>Google Maps APIも機能が増えてきたので追う。カスタムストリートビュー作りたい。
</li>
</ul>


あと、データの作り方もうちょっと勉強したい。用意されているデータだけだと限界がある。

スクレイピングとかのデータの取得方法と、取得したデータを使いやすいように整形する方法の勉強が必要かな。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2700</wp:post_id>
		<wp:post_date>2013-03-31 20:28:40</wp:post_date>
		<wp:post_date_gmt>2013-03-31 11:28:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bb%8a%e5%be%8c%e3%81%ae%e4%ba%88%e5%ae%9ad3-js%e3%81%a8%e3%81%8bgis%e3%81%a8%e3%81%8b%e4%bb%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Gunma.webのソーシャルグラフ作ってみた。</title>
		<link>http://shimz.me/blog/node-js/2701</link>
		<pubDate>Mon, 01 Apr 2013 09:59:31 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2701</guid>
		<description></description>
		<content:encoded><![CDATA[ソーシャルグラフには浪漫があるよね。
<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/force.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/colormap000002.jpg" alt="colormap000002" width="600" height="422" class="aligncenter size-full wp-image-2702" /></a>

ソーシャルグラフを作ってみたかったので、Gunma.webに参加されたユーザーのグラフを作ってみました。
ユーザー間のリンクは、同じイベントに参加している回数が多いほど太く表示されます。
アイコンやユーザー名をクリックするとリンクが強調(赤)されます。
（アイコン画像はATNDから直で読み込んでいるので、そのうち弾かれるかも）

<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/force.html">Gunma.web Social Graph</a>
激重です。できればChromeで見てやってください。


Gunma.webについては<a href="http://gunma-web.org/">こちら</a>

&nbsp;
&nbsp;
<h2>やったこと</h2>
<hr></hr>
<ol>
	<li>ATNDからイベント参加ユーザの取得</li>

	<li>イベントに参加したユーザーの組み合わせ（Combination）リスト作成</li>

	<li>重複する組み合わせをカウント(同じイベントに参加している回数)</li>

	<li>上記のデータをCSVで出力</li>

	<li>CSVファイルをD3.jsでJSONに変換</li>

	<li>Force Layoutdで表示</li>
</ol>


&nbsp;
&nbsp;
<h2>データセットの作成(手作業多め)</h2>
<hr></hr>
ATNDからデータを取得するスクリプトをnode.jsで作成します。
(APIを使えばよかったということに後で気付きましたが、後の祭り)

まずは、必要なライブラリをインストールします。
[shell]
$ npm install request
$ npm install cheerio
[/shell]

Atndスクレイピング用スクリプト(atnd.js)
[javascript]
var request = require(&quot;request&quot;);
var cheerio = require(&quot;cheerio&quot;);
var atndId  = process.argv[2];
if(!atndId){
	console.log('Not Found atndId')
	return ;
}

request({
	uri: &quot;http://atnd.org/events/&quot; + atndId,
	}, function(error, response, body) {
	var $ = cheerio.load(body);
	var user =[]; 

	$(&quot;.a-b &gt; li &gt; span&quot;).each(function() {
		var link = $(this).find('a');
		var text = link.text();
		user.push(text);
	});

	var n = user.length;
	var i, j;

	for(i = 0; i &lt; n; i++){
		for(j = i + 1; j &lt; n; j++){
			console.log(user[i] + &quot;, &quot; + user[j]);
		}
	}
});
[/javascript]

&nbsp;
実行[shell]
$ node atnd.js [ATNDページのID] &gt; gunmaweb1.txt
[/shell]

実行すると対象のATNDページから参加ユーザーを取得し、全ての組み合わせを出力します。
これをgunma.web～gunma.web#12まで繰り返し、全てのユーザー組み合わせを取得。

&nbsp;
出力したテキストファイルをcatコマンドで一つにまとめます。
[shell]
$ cat * &gt; user.txt
[/shell]


&nbsp;
重複している組み合わせをカウントし、ユニークなユーザー組み合わせのみのリストに変換します
[shell]
cat user.txt|sort|uniq -c &gt; ulist.txt
[/shell]
（これで計算あっているはず……たぶん）


&nbsp;
作成したファイルをExcelで読み込み「データ→区切り位置」機能を使用して「重複カウント(value),ユーザー（source）、ユーザー（target）」のリストに変換しcsvで保存します。
出来上がったのが下記csvファイルです。
<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/data.csv">data.csv</a>

このcsvをForce Layoutで使用できるようにJSONに変換します。
d3.jsを使って変換スクリプトを作成しました。
[javascript]
d3.csv('data.csv', function(data){


	graph = {'nodes': [], 'links': [] };

	data.forEach(function(d){
		graph.nodes.push({'name': d.source });
		graph.nodes.push({'name': d.target });

		graph.links.push({
			'source': d.source,
			'target': d.target,
			'value': d.value
		});
	})
	graph.nodes = d3.keys(
		d3.nest()
		.key(function(d) { return d.name; })
		.map(graph.nodes)
	);

	graph.links.forEach(function(d, i){
		graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);
		graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);
	});


	graph.nodes.forEach(function(d,i){
		graph.nodes[i] = {'name': d };
	});
	

	var jsonData = JSON.stringify(graph);
	//テキストエリアにエクスポート
	d3.select('body').append('textarea').text(jsonData);	

});
[/javascript]

<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/convert.html">example convert.html</a>
上記のデータをjsonファイルとして保存して、データ作成は完了です。

source,targetのリストからnodeとlinkを含むオブジェクトを作る作業については、<a href="https://leanpub.com/D3-Tips-and-Tricks">D3 Tips and Tricks</a>「Sankey Diagramsn」の章に詳しく掲載されていますので興味ある方は参照ください。


&nbsp;
&nbsp;
<h2>Force Layout 表示</h2>
<hr></hr>
Force Layoutについては<a href="https://github.com/mbostock/d3/wiki/Force-Layout">こちら</a>を
[javascript]
d3.json('data.json', function(data){
			
	var w = d3.select('body').style('width').replace('px','');
	var h = 1000;
	
	//dataSet valueの最大値取得
	var valueMax = d3.max(data.links, function(d){ return d.value });
			
	var opacityScale = d3.scale.linear().domain([0, valueMax]).range([0.4, 0.8]);		//valueの値によって透明度を変化させる
	var colorScale = d3.scale.linear().domain([0, valueMax]).range([&quot;white&quot;, &quot;blue&quot;]); //valueの値によってカラーを変化させる
	

	//グラフを描画するステージ（svgタグ）を追加
	var svg = d3.select(&quot;svg&quot;).attr(&quot;width&quot;, w).attr(&quot;height&quot;, h);

	//グラフタイトル追加
	svg.append('text')
		.attr({
			x:10,
			y:80,
			fill: &quot;white&quot;,
			&quot;font-size&quot;:60
		})
		.text(&quot;Gunma.web Social Graph&quot;);
	 
	//グラフの初期設定
	var force  = d3.layout.force()
		.nodes(data.nodes)
		.links(data.links)
		.gravity(.05) //重力
		.distance(500) //ノード間の距離
		.charge(-300) //各ノードの引き合うor反発しあう力
		.size([w, h]); //図のサイズ
	
	
	//ユーザー間のリンク作成
	var link = svg.selectAll(&quot;line.link&quot;)
		.data(force.links(), function(d, i) {  return d.source + '-' + d.target; }) //linksデータを要素にバインド
		.enter().append(&quot;svg:line&quot;)
		.attr({
			&quot;class&quot;:function(d){ return &quot;link &quot; + &quot;l&quot;+data.nodes[d.source].name.replace(/\./g,'') + &quot; &quot; + &quot;l&quot;+data.nodes[d.target].name.replace(/\./g,'') }, 
			&quot;stroke&quot;: 'blue',
			&quot;stroke-opacity&quot;:function(d){ return opacityScale(d.value) },
			&quot;stroke-width&quot;:function(d){ return d.value } 
		});
			
	
	//nodeデータをバインディング 
	var node = svg.selectAll(&quot;g.node&quot;).data(force.nodes(), function(d) { return d.name;} );
	
	//ユーザーグループ
	var nodeEnter = node.enter().append(&quot;g&quot;)
		.attr(&quot;class&quot;, &quot;node&quot;)
		.attr(&quot;id&quot;, function(d){ return d.name.replace(/\./g,'') }) 
		.on('click', function(){
			d3.selectAll(&quot;.link&quot;).attr(&quot;stroke&quot;, &quot;blue&quot;)
			d3.selectAll(&quot;.l&quot;+d3.select(this).attr('id'))
			.attr(&quot;stroke&quot;, &quot;red&quot;)
		})
		.call(force.drag); //ノードをドラッグできるように設定
	
	//ユーザーアイコン追加
	nodeEnter.append(&quot;image&quot;)
		.attr(&quot;class&quot;, &quot;user&quot;)
		.attr({
			&quot;xlink:href&quot;:function(d){ return d.img }, //ノード用画像の設定
			&quot;x&quot;:&quot;-16px&quot;,
			&quot;y&quot;:&quot;-16px&quot;,
			&quot;width&quot;:&quot;32px&quot;,
			&quot;height&quot;:&quot;32px&quot;
		});
	
	//ユーザー名追加 
	nodeEnter.append(&quot;text&quot;)
		.attr(&quot;class&quot;, &quot;nodetext&quot;)
		.attr({
			&quot;dx&quot;:30,
			&quot;dy&quot;:&quot;.35em&quot;,
			&quot;fill&quot;:&quot;white&quot;
		})
		.text(function(d) { return d.name });
	
	//フォースレイアウトのアニメーションを開始
	force.start();
	
	//アニメーションループ
	force.on(&quot;tick&quot;, function() {
		node.attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;; });
		link.attr({
			x1: function(d) { return d.source.x; },
			y1: function(d) { return d.source.y; },
			x2: function(d) { return d.target.x; },
			y2: function(d) { return d.target.y; }
		});
	});
	
			
});

[/javascript]

<a href="http://shimz.me/example/d3js/forcelayout/gunmaweb/force.html">example</a>

&nbsp;
&nbsp;
<h2>やってみてわかったこと</h2>
<hr></hr>
データセットを作るのが一番大変。
特に今回はwindows上で作業したのでSJIS-UTF8の変換を繰り返す羽目になってしまった。
nkfはやっぱり便利。
Force Layouは、うまく動かなかったときのデバッグが難しい。

本当は、過去群馬で開催されたイベント全てからデータを取ろうと思っていたのですが、力付きました。
まぁ、これ以上データが多くなると見づらくなるし。
愚直にデータを全て表示するのではなく、程よく省略してフォーカスが当たったときに詳細を表示する（ズーム／パン）処理を行いたいのですが、なかなかうまくいきません orz 

その辺の処理がちゃんとできるようになったら再挑戦したいと思います。

&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2701</wp:post_id>
		<wp:post_date>2013-04-01 18:59:31</wp:post_date>
		<wp:post_date_gmt>2013-04-01 09:59:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-gunma-web%e3%81%ae%e3%82%bd%e3%83%bc%e3%82%b7%e3%83%a3%e3%83%ab%e3%82%b0%e3%83%a9%e3%83%95%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2702]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js + GMap】群馬県の過疎地域</title>
		<link>http://shimz.me/blog/d3-js/2703</link>
		<pubDate>Tue, 02 Apr 2013 05:29:54 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2703</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo9/"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/kasomap.jpg" alt="群馬県過疎地域" width="497" height="499" class="aligncenter size-full wp-image-2704" /></a>


<a href="http://shimz.me/example/d3js/geo_example/geo9/">example</a>

週末にノマドりながら作ったもの。
技術的には<a href="http://shimz.me/blog/d3-js/2379">以前の記事</a>の延長線上のものなので、新しい部分はない。
本当は、過去のデータも使って過疎地域の遷移を表示してみようと思ったのだけれど、昭和45年のデータと比較してもそんなに違いがなかったので断念。
どうせなら、OpenLayersで同じ事ができるか試せばよかったかも。
<del datetime="2013-05-07T09:42:13+00:00">D3.jsで過疎地域のSVGを描いてGoogleMapのレイヤーに重ねているけれど、ズーム／パンした際の再計算が結構重い。</del>
drawファンクションが呼ばれる度にgeojsonを読み込み直しているので、そりゃ遅いわ　orz
コード修正しました。


全国のデータを表示するなら、KMLにして<a href="http://shimz.me/blog/map/2670">Fusion Tables</a>を使った方が良いかも。

あと、国土数値情報サイトは都道府県毎以外に全国区のデータを一つのshapeファイルで落とせるようにしてくれるといいのに……。

&#160;
&#160;
<h2>サンプル</h2>
<hr></hr>
[javascript]
d3.json(&quot;gunma.geojson&quot;, function(gunmajson) {
	d3.json(&quot;kaso.geojson&quot;, function(kasojson) {  
		main(gunmajson, kasojson)
	});
});



function main(gunmajson, kasojson) {
	
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 9,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			center: new google.maps.LatLng(36.53, 139.06),       
		});

	//Google Map スタイル指定
	var styleOptions = [{
		featureType: 'all',
		elementType: 'labels',
		stylers: [{ visibility: 'on' }]
	}, {
		featureType: 'all',
		elementType: 'geometry',
		stylers: [{ hue: '#593869' }, { saturation: '-70' }, { gamma: '0.5' }]
	}];

	var lopanType = new google.maps.StyledMapType(styleOptions);
	map.mapTypes.set('noText', lopanType);
	map.setMapTypeId('noText');



	//OverLayオブジェクトの作成	
	var overlay = new google.maps.OverlayView(); 

	//オーバーレイ追加
	overlay.onAdd = function () {

		var layer = d3.select(this.getPanes().overlayLayer).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;SvgOverlay&quot;); //レイヤー作成(div)

		var svg = layer.append(&quot;svg&quot;); //レイヤーにSVGタグ追加
		var gunmalayer = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions1&quot;); //群馬県地図表示用グループ
		var kasolayer = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions2&quot;); //過疎地域表示用グループ
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection(); //オーバーレイのProjection取得

		// Google Map Projection 作成
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}

		//Google Map ProjectionをD3.jsのProjectionとして指定
		path = d3.geo.path().projection(googleMapProjection);		

		//地図描画イベントリスナー
		overlay.draw = function () {

			//群馬地図描く
			gunmalayer.selectAll(&quot;path&quot;)
				.data(gunmajson.features)
				.attr(&quot;d&quot;, path) 
				.enter().append(&quot;svg:path&quot;)
				.attr(&quot;d&quot;, path)
				.attr({
					&quot;class&quot;: 'gunma',
					&quot;fill&quot;: &quot;black&quot;,
					&quot;fill-opacity&quot;: 0.2
				});
			
			
			//過疎地域描く
			kasolayer.selectAll(&quot;path&quot;)
				.data(kasojson.features)
				.attr(&quot;d&quot;, path) 
				.enter().append(&quot;svg:path&quot;)
				.attr(&quot;d&quot;, path)
				.attr({
					&quot;class&quot;: &quot;kaso&quot;,
					&quot;fill&quot;: &quot;red&quot;,
					&quot;fill-opacity&quot;: 0.5
				});
				
			
		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);

}
[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo9/">example</a>


【関連】
<a href="http://shimz.me/blog/d3-js/2635" target="_blank">【D3.js】群馬県の賃貸価格データを可視化してみた（散布図＆地図</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2703</wp:post_id>
		<wp:post_date>2013-04-02 14:29:54</wp:post_date>
		<wp:post_date_gmt>2013-04-02 05:29:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3googlemapapi%e3%80%91%e7%be%a4%e9%a6%ac%e7%9c%8c%e3%81%ae%e9%81%8e%e7%96%8e%e5%9c%b0%e5%9f%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2704]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[OpenLayers3 Alphe版発表 | OpenなGISのこと]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.godo-tys.jp/2013/05/07/1526/</wp:comment_author_url>
			<wp:comment_author_IP>210.172.144.218</wp:comment_author_IP>
			<wp:comment_date>2013-05-07 16:40:00</wp:comment_date>
			<wp:comment_date_gmt>2013-05-07 07:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  d3.jsでMapなんていうものあり？ 【D3.js + GMap】群馬県の過疎地域で作成されてます。  [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367912625.2307898998260498046875;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367912400.8600800037384033203125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】「全ツイート履歴」からWord cloudを作ってみた。</title>
		<link>http://shimz.me/blog/d3-js/2711</link>
		<pubDate>Thu, 04 Apr 2013 03:42:18 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2711</guid>
		<description></description>
		<content:encoded><![CDATA[嗜好がバレる。
<a href="http://shimz.me/example/d3js/wordcloud/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/tweetswordcloud.jpg" alt="ツイートワードクラウド" width="561" height="566" class="aligncenter size-full wp-image-2714" /></a>

<a href="http://blog.jp.twitter.com/2012/12/blog-post_20.html">自分のすべてのツイートをダウンロードできるようにしました</a>
<a href="http://blog.jp.twitter.com/2013/03/blog-post_22.html">日本の皆さんにも「全ツイート履歴」が使えるようになりました</a>


全ツイートのダウンロードが可能になっていたので、ダウンロードしたtweets.csvを使ってワードクラウドを作成してみました。

<a href="http://shimz.me/example/d3js/wordcloud/index.html">example</a>


&nbsp;
&nbsp;
<h2>データセット作成</h2>
<hr></hr>
過去の全ツイートから固有名詞を抜き出して出現回数順にランキングにしたデータを作成します。
2007年から使っているわりに、累計ツイート数が10,939件と少ないのでテキスト処理系コマンドとExcelを使って行いました。ツイート数が多い場合は、以下の方法では難しいかもしれません。

まず、Windowsで処理しやすいようにS-JISに変換します。
[shell]
$ nkf -s tweets.csv &gt; tweets_sjis.csv
[/shell]


出力したtweets_sjis.csvをExcelで読み込み、ツイート(text)だけを残して他を全て削除します。
tweets_sjis.txtを<a href="http://ja.wikipedia.org/wiki/MeCab">MeCab</a>に読み込ませ形態素解析を行います。

MeCabの使い方については以下を。
<a href="http://www.mwsoft.jp/programming/munou/mecab_command.html">MeCabのコマンドライン引数一覧とその実行例</a>

[shell]
$ cat tweets_sjis.txt |mecab &gt; words.txt
[/shell]
↓こんな感じのファイルが出力されます。

<a href="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000001.jpg"><img class="border size-medium wp-image-2712" alt="twitterWC000001" src="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000001-300x148.jpg" width="300" height="148" /></a>
データの区切り位置とフィルタ機能を使って固有名詞のみ取り出し、単語以外を削除して別ファイル(meishi.txt)として保存します。
<a href="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/twitterWC000002-300x148.jpg" alt="twitterWC000002" width="300" height="148" class="bordersize-medium wp-image-2713" /></a>

保存したファイルをソートしてユニークで絞込み重複をカウントします。
[shell]
sort meishi.txt|uniq -c|sort /R &gt; ranking.txt
[/shell]
これで全ツイートから頻出単語の取出しが完了です。
ちなみに上位10件はこんな感じ。
[shell]
count word
 457 日本
 253 orz
 176 群馬
 170 高崎
  97 東京
  64 アメリカ
  63 Google
  58 iPhone
  55 中国
  51 前橋
[/shell]


どうやら日本が大好きらしい。そして凹みまくっているようです。
このファイルをまたExcel等でcsvに変換しデータ作成作業は終了です。

&nbsp;
&nbsp;
<h2>ワードクラウドの表示</h2>

<hr />

D3.jsとwordcludプラグインを使用してワードクラウドを作成します。

<a href="https://github.com/jasondavies/d3-cloud">jasondavies / d3-cloud
</a>
全ての出現単語に対して処理をすると表示されるまでにかなり時間がかかるので1200件に絞っています。
[javascript]
d3.csv('ranking.csv', function(data){
	var h = 800;
	var w = 800;
	data = data.splice(0, 1200); //処理wordを1200件に絞る

	var random = d3.random.irwinHall(2)

	var countMax = d3.max(data, function(d){ return d.count} );
	var sizeScale = d3.scale.linear().domain([0, countMax]).range([10, 100])
	var colorScale = d3.scale.category20();

	var words = data.map(function(d) {
		return {
			text: d.word,
			size: sizeScale(d.count) //頻出カウントを文字サイズに反映
		};
	});

	d3.layout.cloud().size([w, h])
		.words(words)
		.rotate(function() { return Math.round(1-random()) *90; }) //ランダムに文字を90度回転
		.font(&quot;Impact&quot;)
		.fontSize(function(d) { return d.size; })
		.on(&quot;end&quot;, draw) //描画関数の読み込み
		.start();

	//wordcloud 描画
	function draw(words) {
		d3.select(&quot;svg&quot;)
			.attr({
				&quot;width&quot;: w,
				&quot;height&quot;: h
			})
			.append(&quot;g&quot;)
			.attr(&quot;transform&quot;, &quot;translate(150,150)&quot;)
			.selectAll(&quot;text&quot;)
			.data(words)
			.enter()
			.append(&quot;text&quot;)
			.style({
				&quot;font-family&quot;: &quot;Impact&quot;,
				&quot;font-size&quot;:function(d) { return d.size + &quot;px&quot;; },
				&quot;fill&quot;: function(d, i) { return colorScale(i); }
			})
			.attr({
				&quot;text-anchor&quot;:&quot;middle&quot;,
				&quot;transform&quot;: function(d) {
					return &quot;translate(&quot; + [d.x, d.y] + &quot;)rotate(&quot; + d.rotate + &quot;)&quot;;
				}
			})
			.text(function(d) { return d.text; });
	}

});
[/javascript]

<a href="http://shimz.me/example/d3js/wordcloud/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2711</wp:post_id>
		<wp:post_date>2013-04-04 12:42:18</wp:post_date>
		<wp:post_date_gmt>2013-04-04 03:42:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e3%80%8c%e5%85%a8%e3%83%84%e3%82%a4%e3%83%bc%e3%83%88%e5%b1%a5%e6%ad%b4%e3%80%8d%e3%81%8b%e3%82%89word-cloud%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2714]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iOSは普及するとともにその魅力を失っていく</title>
		<link>http://shimz.me/blog/other/2716</link>
		<pubDate>Mon, 08 Apr 2013 01:02:58 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2716</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size:10px;"><a href="http://www.igosso.net/flk/4490601295.html" target="_blank"><img src="http://farm5.staticflickr.com/4049/4490601295_a0b00fb622.jpg" alt="" /></a><br />iPad stand / Veronica Belmont</span>

普及が進むほどに魅力を失っていくのではないかという推測。

あくまで自分の観測範囲内での話。

企業が営業の人間にもたせるデバイスとしてiPhone、iPadの普及が進んでいる。

iOS端末だと、どっかに置き忘れたときでもGPSで追跡ができるし、リモートでロックやデータの消去ができるのでノートPCを持たせるより安全というのがその理由らしい。

この方面では今のところiOS一択らしく某SI業界の営業と話したときも「Androidは自由すぎて……運用ノウハウも無いので今のところ手を出す予定はないですねー」なんて話をしていた。（ちなみにWindows8タブレットなんかも今のところ選択肢には上がっていないらしい）

ポリシーでガチガチに制限がかけられるので、その辺が好まれているそうだ。

まぁ、そんわけでエンタープライズでのiOSのシェアが今後拡大していくのではないかと思う。

ただ、それと同時にiPhoneやiPadに感じていた憧れやありがたみってのは薄れていくのかも。

会社から支給される端末って、なんか魅力を感じなくなるものね。

アリーアダプターは最新のAndroid端末などに惹かれる傾向が強くなっていくんだろう。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2716</wp:post_id>
		<wp:post_date>2013-04-08 10:02:58</wp:post_date>
		<wp:post_date_gmt>2013-04-08 01:02:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ios%e3%81%af%e6%99%ae%e5%8f%8a%e3%81%99%e3%82%8b%e3%81%a8%e3%81%a8%e3%82%82%e3%81%ab%e3%81%9d%e3%81%ae%e9%ad%85%e5%8a%9b%e3%82%92%e5%a4%b1%e3%81%a3%e3%81%a6%e3%81%84%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2717]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows8 64bit版のプリンタドライバが見つからない時の対処</title>
		<link>http://shimz.me/blog/troubleshooting/2719</link>
		<pubDate>Wed, 10 Apr 2013 03:15:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2719</guid>
		<description></description>
		<content:encoded><![CDATA[古いタイプのネットワークプリンタでWin8 64bit版のドライバが見つからなかったのでその対処方法。

他に方法があるのかもしれないけれど、まぁ楽だったので。

１．<a href="http://sourceforge.jp/projects/pdfcreator/">PDFCreator</a>をインストールする。
インストールすると「デバイスとプリンター」にPDFCreatorが追加される。

<a href="http://shimz.me/blog/wp-content/uploads/2013/04/WS000001.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000001.jpg" alt="WS000001" width="140" height="126" class="border size-full wp-image-2720" /></a>

２．PDFCreatorのポートを変更する。

「プリンターのプロパティ」を開き「ポート」タブで「pdfcmon」のチェックを外し代わりにネットワークプリンタのポートを指定(チェック)する。
ポートが存在しない場合は「ポートの追加」から追加する。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000002.jpg" alt="WS000002" width="479" height="525" class="border size-full wp-image-2721" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000003.jpg" alt="WS000003" width="490" height="525" class="border size-full wp-image-2722" />

これで、印刷できる。

以上。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2719</wp:post_id>
		<wp:post_date>2013-04-10 12:15:52</wp:post_date>
		<wp:post_date_gmt>2013-04-10 03:15:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows8-64bit%e7%89%88%e3%81%ae%e3%83%97%e3%83%aa%e3%83%b3%e3%82%bf%e3%83%89%e3%83%a9%e3%82%a4%e3%83%90%e3%83%bc%e3%81%8c%e8%a6%8b%e3%81%a4%e3%81%8b%e3%82%89%e3%81%aa%e3%81%84%e6%99%82%e3%81%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="troubleshooting"><![CDATA[トラブルシューティング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2720]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Komodo Edit 8.0にしてみた。</title>
		<link>http://shimz.me/blog/editor/2724</link>
		<pubDate>Wed, 10 Apr 2013 08:24:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2724</guid>
		<description></description>
		<content:encoded><![CDATA[バージョンアップしてみた。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000004.jpg" alt="WS000004" width="600" height="349" class="alignnone size-full wp-image-2725" />


7系からUIのデザインが変更、ちょっとモダンな雰囲気に。
デザインのカスタマイズもより多機能になったようです。
以下はカスタマイズの一例。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/customized.jpg" alt="customized" width="600" height="438" class="alignnone size-full wp-image-2727" />



個人的にはコードミニマップ機能の追加がうれしいです。
それ以外では、前バージョンからそんなに大きく変化したものもなく、ほとんど戸惑うこともなく使えます。
スニペットの機能が強化されたらしいので、その辺はおいおい調べてみようと思います。



<a href="http://www.activestate.com/komodo-edit">Komodo Edit 8.0</a>


<a href="http://shimz.me/blog/category/editor">Komodo Editの関連記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2724</wp:post_id>
		<wp:post_date>2013-04-10 17:24:13</wp:post_date>
		<wp:post_date_gmt>2013-04-10 08:24:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>komodo-edit-8-0%e3%81%ab%e3%81%97%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2727]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</title>
		<link>http://shimz.me/blog/iphoneipad/2730</link>
		<pubDate>Thu, 11 Apr 2013 01:10:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2730</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://scriptk.it/"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/ScriptKitDrag.jpg" alt="ScriptKitDrag" width="650" height="431" class="alignnone size-full wp-image-2731" /></a>

<a href="http://scriptk.it/">ScriptKit - Drag and Drop Programming for iPad.</a>

ScriptKitは、直感的なドラッグ＆ドロップのインタフェースを介してネイティブiOSのUIコンポーネントとソーシャルメディアのAPIを使用し、iPad上で簡単なプロトタイプを構築するができるプログラミング環境です。

似たアプリに「<a href="http://twolivesleft.com/Codea/">Codea</a>」がありますが、Codeaがメディアアートやゲームの作成に向いているのに対して、ScriptKitは実用的なアプリの作成に適しています。
操作感が独特で、全てのAPIにスニペットが用意され、それらをドラッグ＆ドロップでペタペタと貼り付けてコーディングを行います。

<video id="demovideo" autoplay="true" width="476" height="360" loop="true" preload=""> 
<source src="https://s3.amazonaws.com/scriptkit/scriptkit-example-ellipse-476x360.mp4" type="video/mp4">
<source src="https://s3.amazonaws.com/scriptkit/scriptkit-example-ellipse-476x360.webm" type="video/webm"> 
</video>

簡単に中身を確認してみましたが、iOSのMap viewを扱うためのAPIやカメラ・フォトライブラリへのアクセス、HttpgetやHttppost果てはSocketを扱うAPIまで用意されています。(iPadでネットワークプログラミング！)
Dropbox,Facebook,Google Drive,InstgramなどWebサービスを利用するAPIも豊富に用意されていて、数行のコードでDropboxからダウンロードした画像をInstgramにアップロードするようなプログラムを書くことができます。
サンプルコードを見ているだけでもちょっとワクワクしてきます。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/IMG_0031.png" alt="IMG_0031" width="600" height="450" class="alignnone size-full wp-image-2733" />


さて、ここまではあくまでScriptKitというアプリ内での話でしたが、Scriptkitには、作成したコードを実際のiPadアプリとしてビルドするためのXcodeプロジェクトが用意されています。

<a href="https://github.com/Buza/ScriptKit-Runner">ScriptKit-Runner</a>

このプロジェクトファイルを利用し、ScriptKitで作成したコードを「SKRunner」フォルダのscript.luaファイルにコピペすれば、iPadアプリとしてビルドすることができるわけです。

これは凄い。

まだ未完なところもあって、日本語が使えなかったり、ちょくちょく落ちることもありますが、今後に期待したいアプリです。


※ダウンロードは無料。スクラッチパッドで実際にコードを書いて実行できますが、MyScriptとして保存するにはアドオン(1000円)を購入する必要があります。


【追記】
CodeaにもXcodeのプロジェクトとしてexportする機能が付きました。
<a href="http://shimz.me/blog/programming/2781" target="_blank">[Codea]iPadでiPadアプリが作成できるiPadアプリがまた一つ増えました。</a>



【関連】
<a href="http://shimz.me/blog/?p=1561">iPadでプログラミング＆デバッグ（Web系）</a>
<a href="http://shimz.me/blog/editor/1812">Striking.lyにも負けない？！　iPadのらくらくホームページ作成アプリ「HTML Egg」</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2730</wp:post_id>
		<wp:post_date>2013-04-11 10:10:10</wp:post_date>
		<wp:post_date_gmt>2013-04-11 01:10:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipad%e3%81%a7ipad%e3%82%a2%e3%83%97%e3%83%aa%e3%81%8c%e4%bd%9c%e6%88%90%e3%81%a7%e3%81%8d%e3%82%8b%e3%80%8cscriptkit%e3%80%8d%e3%81%8c%e3%81%aa%e3%82%93%e3%81%8b%e5%87%84%e3%81%84%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2731]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>職場でWindows XPを使い続けるリスク</title>
		<link>http://shimz.me/blog/other/2738</link>
		<pubDate>Fri, 12 Apr 2013 03:47:44 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2738</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/computer-virus-.jpg" alt="computer-virus-" width="360" height="240" class="aligncenter size-full wp-image-2739" />

<a href="http://news.mynavi.jp/news/2013/04/12/030/index.html">XPは7の10倍危険!? マイクロソフト、国内企業へ「中古でもいいのでXPから移行を」呼びかけ</a>

もうすぐ、Windows XPのサポートが終了しますね。
正確には「サポート延長期間が終了する」ですが。
マイクロソフトがXPとともに心中するつもりにでもならない限り、これ以上サポートが延長されることは九分九厘ないと思われます。

中には「ウチには未だにWindows2000を使っている社員もいるので全然平気でしょ？」と思っている方もいるかもしれません。

しかし、ちょっとだけ考えを改めたほうがいいかもしれません。

※以降はあくまで推測です。

WindowsXPは、それまで発売された他バージョンのWindowsと比較しても爆発的に普及したOSです。

家庭でも企業でも、バージョンアップされないまま、ここまで利用され続けているOSは他にはなかなか見当たりません。

だからこそ、マイクロソフトが異例の「サポート延長」を行ったわけです。

そのOSにサポート終了後、永遠に塞がれることのない穴が開きます。

これは、いわゆるハック／クラック界の人々にとってはちょっとしたイベントです。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/Anonymous.jpg" alt="Anonymous" width="750" height="600" class="aligncenter size-full wp-image-2740" />

コンピューターウィルス等の製作者は、なるべく多くの端末に感染が広がることを期待します。
利用者の多いOS程ターゲットにされやすいわけです。
また、できる限り脆弱性の発見を遅らせて穴が塞がれるのを遅らせたいと考えるものです。

それが、サポート終了後にはどんなに派手な動作をおこなうウィルスが出現しても、その脆弱性が修正されることは永遠にありません。

そんな"おいしい"ターゲットが巷に大量に溢れる。

<a href="http://getnews.jp/archives/317781">Windows XPはサポート終了後も使われ続ける? その数は少なくとも数千万台規模か </a>

その筋の人からすれば、こんな"面白いイベント"はそうそう起きることではありません。

そんなわけで、<strong>過去サポートが終了したバージョンと比較しても、XPを狙ったウィルスが大量に作成される危険性はわりと高い</strong>のではないかと思います。


もちろん「なにも起きない」かもしれません。

脆弱性への<strong>サポートが切れたOSを使い続けるのは「スラム街で丸腰のまま家のドアに鍵も付けない」みたいなもの</strong>なので、運が良ければ何事もなく済むかもしれません。

しかし、何か起きたときはかなり大変なことになると予想されます。

大事な情報がある日突然全消去されてしまったり、流出したりするかもしれません。

あるいは気づかぬ内に、どこかの掲示板に大量に犯罪予告を書き込んでしまって会社に警察がやってきてPCを押収していく、なんてことがあるかもしれません。

そして何か起きた時には世間は多分同情してはくれないと思います。

多分、会社も守ってはくれないんじゃないでしょうかね。
(まぁ、そんなことがあれば会社も大ダメージでしょうけど）

そんなわけなので、もし職場でXPを使っているのなら<strong>「どうせ言っても無駄だ」なんて思わずに、とりあえず上司にでも「パソコン変えてください！」と進言しましょう。</strong>

すくなくとも"何かあった時"に「自分は散々危ないから変えてくれっていったんですよー」と言えるようにしておいた方が、いいのではないかとおもったりします。

個人的に使い続けるのは、まぁ自己責任の範疇だと思いますが。

【追記】
米マイクロソフトのセキュリティ担当のエンジニアも同じように忠告していますね。
<a href="http://itpro.nikkeibp.co.jp/article/NEWS/20130417/471461/?top_nhl">「サポートが終了したXPは狙われる」、マイクロソフトのセキュリティ担当 </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2738</wp:post_id>
		<wp:post_date>2013-04-12 12:47:44</wp:post_date>
		<wp:post_date_gmt>2013-04-12 03:47:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%81%b7%e5%a0%b4%e3%81%a7windowsxp%e3%82%92%e4%bd%bf%e3%81%84%e7%b6%9a%e3%81%91%e3%82%8b%e3%83%aa%e3%82%b9%e3%82%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2739]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[いまだにwindowsXP使ってる男の人って | ちゃんまみのぶろぐ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://chanmami.com/2013/04/17/48/</wp:comment_author_url>
			<wp:comment_author_IP>219.94.128.46</wp:comment_author_IP>
			<wp:comment_date>2013-04-17 18:57:33</wp:comment_date>
			<wp:comment_date_gmt>2013-04-17 09:57:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 先ほど見た記事  【職場でWindows XPを使い続けるリスク】 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366192653.9097011089324951171875;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366194517.65450000762939453125;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>「塀の中のジュリアス・シーザー」</title>
		<link>http://shimz.me/blog/movie/2743</link>
		<pubDate>Sat, 13 Apr 2013 03:29:35 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2743</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://heinonakano-c.com/index.html">塀の中のジュリアス・シーザー</a>

<iframe width="560" height="315" src="http://www.youtube.com/embed/XxhXk_u2-RY" frameborder="0" allowfullscreen></iframe>



<blockquote>イタリア、ローマ郊外にあるレビッビア刑務所。ここでは囚人たちによる演劇実習が定期的に行われている。
今年の演目として選ばれたのはシェークスピア作「ジュリアス・シーザー」。出演を希望する囚人たちの中からオーディションによって役者が選ばれ稽古が始まる。各々の監房で、廊下で、遊戯場で、一所懸命に台詞を繰り返す囚人たち。 それぞれの過去や性格などが次第にオーバーラップして演じる役柄と同化していく。そのとき、刑務所自体がローマ帝国へと変貌し、現実と虚構の境を越えていく。
</blockquote>


とまぁ、あらすじを読んだり予告編を見た限りだと一見「ドキュメンタリー」と勘違いしそうではありますが、あくまでフィクションです。
映画の中で演技を行っているのは現実の囚人たちなのですが、映画の中で起きている出来事は脚本がありそれに沿って演じられています。

つまり役者(囚人)たちは、映画の中で「刑務所のなかで、演劇に囚われ現実と虚構の境が融解していく自分たち」を演じているわけです。

実際の"現実"の上に"演劇"と"映画"という２枚の虚構が重なっている「メタ・ドキュメンター」といった感じ。

ここがこの映画の面白いところでもあり、評価の分かれるところでもあるかもしれません。

そういった背景を知り、メタな視点で眺めるといろいろと考えさせられる作品なのですが、逆に映画の背景を一切忘れて、あくまで「映画」としてみると割と微妙なできの作品だったりします。

何しろ、映画の中ではキャラクター(囚人)たちの関係性や過去といったものが殆ど描かれずキャラクターの口からわずかに語られるだけなので、「現実と虚構(劇)が融解していく」感じがあまりせず、全体として「囚人たちが演劇をしました。以上」という作品に見えてしまうんですね。

もうすこし、個々のキャラクターを掘り下げて欲しかった。

そんなわけで背景含みでメタな視点から眺めると興味深い作品ではありますが、率直に「この刑務所を撮った、ドキュメンタリーが見てみたいな」とも感じる評価の難しい作品でした。


<a href="http://heinonakano-c.com/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/20130208114142.jpg" alt="20130208114142" width="228" height="320" class="alignleft size-full wp-image-2745" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2743</wp:post_id>
		<wp:post_date>2013-04-13 12:29:35</wp:post_date>
		<wp:post_date_gmt>2013-04-13 03:29:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e5%a1%80%e3%81%ae%e4%b8%ad%e3%81%ae%e3%82%b8%e3%83%a5%e3%83%aa%e3%82%a2%e3%82%b9%e3%83%bb%e3%82%b7%e3%83%bc%e3%82%b6%e3%83%bc%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="movie"><![CDATA[映画]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2745]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WEB地図APIサービス　一覧</title>
		<link>http://shimz.me/blog/map/2746</link>
		<pubDate>Mon, 15 Apr 2013 01:03:08 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2746</guid>
		<description></description>
		<content:encoded><![CDATA[Googleにまたヒドイことされたときのためにも、GMAPS API以外も勉強しておかないといけないなと思いメモ。

<a href="https://developers.google.com/maps/?hl=ja">Google Maps API</a>
<a href="https://developers.google.com/maps/documentation/javascript/?hl=ja">Google Maps JavaScript API v3</a>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/01/"></iframe>
<a href="http://shimz.me/example/gmapv3/01/" target="_blank">Full Size</a>


<a href="http://olp.yahoo.co.jp/">Yahoo! Open Local Platform(地図)</a>
<a href="http://developer.yahoo.co.jp/webapi/map/">YOLP(地図) - Yahoo!デベロッパーネットワーク</a>
<iframe width="100%" height="300" src="http://shimz.me//example/YahooMap/01/"></iframe>
<a href="http://shimz.me//example/YahooMap/01/" target="_blank">Full Size</a>


<a href="http://www.microsoft.com/maps/developers/web.aspx">Bing Maps</a>
<a href="http://www.atmarkit.co.jp/ait/articles/1212/05/news008.html">Microsoftの地図サービス、Bing Mapsを使おう</a>
<iframe width="100%" height="300" src="http://shimz.me//example/bingMap/01/"></iframe>
<a href="http://shimz.me//example/bingMap/01/" target="_blank">Full Size</a>


<a href="http://portal.cyberjapan.jp/">電子国土Web.NEXT</a>
<iframe width="100%" height="300" src="http://shimz.me//example/kokudo/01/"></iframe>
<a href="http://shimz.me//example/kokudo/01/" target="_blank">Full Size</a>

<a href="http://openstreetmap.jp/">Open Street Map</a>
<a href="http://openstreetmap.piyolab.net/">OpenStreetMap API 実験室</a>
<iframe width="100%" height="300" src="http://shimz.me//example/OpenLayers/01/"></iframe>
<a href="http://shimz.me//example/OpenLayers/01/" target="_blank">Full Size</a>

&nbsp;
&nbsp;
<h2>その他</h2>
<hr></hr>
<a href="http://cloudmade.com/">Cloudmade</a>/<a href="https://github.com/mbostock/pixymaps">pixymaps</a>
<iframe width="100%" height="300" src="http://shimz.me//example/d3js/pixymaps/01/"></iframe>
<a href="http://shimz.me//example/d3js/pixymaps/01/" target="_blank">Full Size</a>
かっこいいのだけれど、D3 ver3では動かないみたいで残念。

cloudmade.comから取得したデータをOpenLayersで表示すればいいのだろうけど、やり方がわからない。
まずはOpenLayersから勉強しようかな。

<a href="http://openlayers.org/">OpenLayers: Free Maps for the Web</a>
<a href="http://openlayers.org/dev/examples/">OpenLayers Examples</a>
<a href="http://sourceforge.jp/magazine/08/12/26/0151203">OpenLayersで地図を表示する</a>

&nbsp;
&nbsp;
<h2>参考書</h2>
<hr></hr>
YOLPやBing Mapsの参考書をAmazonアソシエイトでベタベタ貼ったろ。と思ったのだけれど、検索してみたところ日本語での参考書が見つかりませんでした。 orz

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4048865382&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=5511330647&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=5510706945&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2746</wp:post_id>
		<wp:post_date>2013-04-15 10:03:08</wp:post_date>
		<wp:post_date_gmt>2013-04-15 01:03:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web%e5%9c%b0%e5%9b%b3api%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%80%80%e4%b8%80%e8%a6%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>モラルを理由に表現の自由に制限をかけるべきか。</title>
		<link>http://shimz.me/blog/copyright/2747</link>
		<pubDate>Tue, 16 Apr 2013 00:08:43 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2747</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/Erich-Salomon.jpg" alt="Erich-Salomon" width="480" height="346" class="aligncenter size-full wp-image-2748" />

<a href="http://d.hatena.ne.jp/kyoumoe/20130412/1365750948">他人の家を無断で撮影して小馬鹿にした挙句それを指摘されると即ブロックという自称工場萌え大山顕のクソっぷり</a>

※以下は、あくまで個人の見解。

基本的に公の場に置かれている人・物を撮影するのに許可は必要ない。

肖像が商品となる芸能人なんかの場合はパブリシティ権が、晒し目的の場合は名誉毀損や侮辱罪が引っかかる場合があるけれど、件の記事はどちらにも当てはまらないと思う。（あと自治体によっては迷惑防止条例に引っかかる場合があるけどね）

撮影に関して<a href="http://e-words.jp/w/E382AAE38397E38388E382A4E383B3.html">オプトイン</a>で無ければならないと考える人は多いけれど、プライバシーというのは定義が曖昧で個人によってその範囲が変わるので、権利を主張としようと思えばどこまでも主張できてしまうので、プライバシー侵害の拡大解釈はかなり危うい。

人権擁護法案でも、その辺りはかなり問題視されて議論されたけれども。
（<a href="http://ja.wikipedia.org/wiki/%E8%82%96%E5%83%8F%E6%A8%A9">肖像権</a>も定義が曖昧なんだよね）


最近だと問題になりそうなのは「東京六本木ギガピクセル」かな？

<a href="http://tokyogigapixel.360cities.net/">Tokyo Roppongi Gigapixel</a>

屋上で日光浴している人が写っていたり、車のナンバーが読めたりと一部で話題になっている。

<a href="http://kaigaikaramitanihon.blog.fc2.com/blog-entry-124.html">海外「45ギガピクセルの東京パノラマ写真がすごい」</a>

もし、事前に写りこむ全ての人・物に撮影の許可を取る必要があるとしたらこういう作品はまず作れなくなる。

結局のところ「表現の自由」との兼ね合いってことになるんだろうけど。


<blockquote>法的にどうこうじゃなくてお前の中のモラルはどうなってんのって話だから勘違いしないように。</blockquote>


自分だって勝手に撮影されるのは嫌だし、公開のされ方によっては名誉毀損や侮辱罪で訴えるかもしれないけど、公の場ではある程度は我慢しないといけない部分もあるだろうとは思っている。

法的根拠もないままに、みんなが、不快だからモラルに反しているからという理由で「あのライターを干せ！」とか「メディアはあのライターの記事を載せるな！」なんてことをやり出したら、「表現の自由なんてわりと簡単に死ぬぜ」ってネットの上では長いこと議論されてきたのではなかったのか。

ライターが糞だとか即ブロックはダメだろうというのはたぶんその通りなんだろうし、他でいろいろ問題を起こしているのも確かなのだろうけど、少なくとも上記の記事に関しては、「<strong>法的には問題ない記事に対して、直接の被害者でない人間がモラルを理由にWebメディアへ"表現の自由"の自粛を求めている</strong>」という構図であるので、賛同はできない。

それにしても、ポルノ規制の議論なんかでは自粛や自主規制含め表現の自由へ制限をかける事に、はてな民は非常に慎重なるのになぁと思うとなんかモヤモヤする。


【参考】
<a href="http://www.asahi-net.or.jp/~VR5J-mkn/point/privacy/">プライバシーとはなにか　－－「プライバシー保護」と「個人情報保護」の違いに関する考察－－</a>

公の場での撮影に関しては写真家の横木安良夫さんの記事なんかもいろいろ考えさせられる。

<a href="http://alao.cocolog-nifty.com/the_eye_forget/2005/04/post_5cb4.html">盗撮　盗み撮り　キャンデットフォト　スナップ写真 その１</a>
<a href="http://www.hi-ho.ne.jp/toyo-x/shouzou.html">肖像権について</a>
<a href="http://www.snow-flake.jp/%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E5%86%99%E7%9C%9F%E3%81%A8%E8%82%96%E5%83%8F%E6%A8%A9%E3%81%A8%E7%9B%97%E3%81%BF%E6%92%AE%E3%82%8A/">スナップ写真と肖像権と盗み撮り</a>

【余談】
とはいえ、法律なんて簡単に変わるし、法が変わらなくても世間の空気で社会的に「やっちゃだめ」なことに分類されてしまうなんてことは多々あることだけどね。条例で禁止されたり。
車のナンバープレートだって本来モザイクをかける必要なんてないはずなんだけど……怖い人が「プライバシーを侵害された」と乗り込んできたりするしなぁ。

<a href="http://d.hatena.ne.jp/Lhankor_Mhy/20130413/1365850477" target="_blank">洗濯物にモザイク - 不動産屋のラノベ読み</a>

<blockquote>具体的に言うと下着です。そうパンツですよ、パンツ！膨大な枚数の画像からパンツが含まれるものを認識して抜き出す！それしかないでしょう！</blockquote>

やはり、作るしかないのかな「パンツ認識」
となると、分類器の機械学習のために大量のパンツ画像が必要だな。
とりあえず１万枚ほど誰か私に下さい。

【関連】
<a href="http://shimz.me/blog/copyright/1538">著作権法について誤解していたこと</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2747</wp:post_id>
		<wp:post_date>2013-04-16 09:08:43</wp:post_date>
		<wp:post_date_gmt>2013-04-16 00:08:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%a2%e3%83%a9%e3%83%ab%e3%82%92%e7%90%86%e7%94%b1%e3%81%ab%e8%a1%a8%e7%8f%be%e3%81%ae%e8%87%aa%e7%94%b1%e3%81%ab%e5%88%b6%e9%99%90%e3%82%92%e3%81%8b%e3%81%91%e3%82%8b%e3%81%b9%e3%81%8d%e3%81%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="copyright"><![CDATA[著作権]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2748]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js] Geocodeサービスを使った住所→緯度経度変換処理</title>
		<link>http://shimz.me/blog/node-js/2749</link>
		<pubDate>Wed, 17 Apr 2013 00:21:03 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2749</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/geocoder.html">Yahoo!ジオコーダAPI</a>を利用して住所から緯度経度を求めるスニペット。

最初はGoogleのGeocodeサービスを使う予定だったのですが、地図を表示しないでGeocodeサービスだけ利用するのは規約違反になるらしいので却下。

<a href="https://developers.google.com/maps/documentation/geocoding/?hl=ja">Google Geocoding API</a>

<blockquote>Geocoding API は Google マップ上の結果表示と組み合わせる場合にのみ使用できます。地図に表示せずにジオコーディングの結果だけを利用することは禁止されています。</blockquote>

YahooのWeb APIの利用制限には、回数以外の記述がないのでわからないけれど、もしかすると地図を表示せずに変換にだけ使うのはこっちもだめかも。

<a href="http://developer.yahoo.co.jp/appendix/rate.html">利用制限について</a>

怒られたら消します。

[javascript]
var request = require('request');

var geocodeURI = 'http://geo.search.olp.yahooapis.jp/OpenLocalPlatform/V1/geoCoder?';
var address = process.argv[2];
if(!address){
    console.log('Not Found address')
    return ;
}
geocodeURI += &quot;&amp;appid=&quot; + &quot;アプリケーションID&quot;; //Yahooデベロッパーネットワークで取得
geocodeURI += &quot;&amp;output=json&quot;;
geocodeURI += &quot;&amp;query=&quot; +encodeURI(address.toString(&quot;utf8&quot;));

console.log(geocodeURI);

request(geocodeURI, function (error, response, body) {
  if (!error &amp;&amp; response.statusCode == 200) {
    var  json = JSON.parse(body);
    console.log(json)
  }
});
[/javascript]

実行
[shell]
$ node geocode.js 高崎市
[/shell]

Yahoo!ジオコーダAPIは、駅やランドマークには対応していないみたい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2749</wp:post_id>
		<wp:post_date>2013-04-17 09:21:03</wp:post_date>
		<wp:post_date_gmt>2013-04-17 00:21:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-geocode%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e4%bd%8f%e6%89%80%e2%86%92%e7%b7%af%e5%ba%a6%e7%b5%8c%e5%ba%a6%e5%a4%89%e6%8f%9b%e5%87%a6%e7%90%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>世界中の公開状態にあるWebcamを一覧表示するサイト</title>
		<link>http://shimz.me/blog/web/2752</link>
		<pubDate>Wed, 17 Apr 2013 09:49:25 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2752</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://cryptogasm.com/webcams/index.php?">Exposed Webcam Viewer</a> 

<a href="http://cryptogasm.com/webcams/index.php?"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000009-e1366191622370.jpg" alt="WS000009" width="580" height="324" class="aligncenter size-full wp-image-2753" /></a>

Goolge経由で公開状態にあるWebcamを表示。
現時点で8,876台のWebcamが公開状態にあるらしい。

"city:Tokyo"や"country:Japan"などのキーワードで絞り込みが可能。

<a href="http://cryptogasm.com/webcams/faq.php#filter">Exposed Webcam Viewer - FAQ</a>


【関連】
<a href="http://cryptogasm.com/2012/10/all-the-webcams/">All The Webcams</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2752</wp:post_id>
		<wp:post_date>2013-04-17 18:49:25</wp:post_date>
		<wp:post_date_gmt>2013-04-17 09:49:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%96%e7%95%8c%e4%b8%ad%e3%81%ae%e5%85%ac%e9%96%8b%e7%8a%b6%e6%85%8b%e3%81%ab%e3%81%82%e3%82%8bwebcam%e3%82%92%e4%b8%80%e8%a6%a7%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b%e3%82%b5%e3%82%a4%e3%83%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2753]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】参照元別の訪問者数をツリー マップで表示する</title>
		<link>http://shimz.me/blog/d3-js/2755</link>
		<pubDate>Fri, 19 Apr 2013 08:00:48 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2755</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://anond.hatelabo.jp/20130418163746">流行る記事、流行らない記事[追記あり]</a>

これは身につまされます。
体感では、時間をかけたエントリーほどはてブされない気が。
ただ、ブログのジャンルにもよりますが、長い目でみるとソーシャルメディアからの流入より検索エンジンからの流入の方がブログ全体のアクセスアップには貢献してくれたりもするので、気にしすぎない方がいいかもしれません。(たまにはてブされたりすると、一時的にPVが跳ね上がるのでどうしても気になってしまいますけどね)


そこで、参照元別訪問者数の比率を再確認するためにTreeMapを作ってみました。

<a href="http://shimz.me//example/d3js/treemap/01/">訪問者数／新規訪問の割合（TreeMap）</a>



&nbsp;
&nbsp;
<h2>データセットの作成</h2>
<hr></hr>
Googleアナリティクス「トラフィック→参照元→すべてのトラフィック」のデータをCSVでエクスポートします。
<a href="http://shimz.me/blog/wp-content/uploads/2013/04/WS000010.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000010-300x122.jpg" alt="WS000010" width="300" height="122" class="alignnone size-medium wp-image-2756" /></a>
エクスポートしたCSVをテキストエディタ等で整形します。

<a href="http://shimz.me//example/d3js/treemap/01/trafficSources.csv">trafficSources.csv(整形済)</a>


&nbsp;
&nbsp;
<h2>TreeMapとして表示</h2>
<hr></hr>
D3.jsのTreeMapレイアウトを使用して表示します。
ヘルパー関数として、<a href="http://shimz.me/blog/d3-js/2649">こちらの記事</a>で作成した関数を使用しています。
[javascript]
d3.csv('trafficSources.csv', function(csv){
    csv = csv.slice(0, 15); //表示する参照元を15件に絞り込み

    var data = { children:csv }; //csvから取得したデータを全てrootの配下(children)に追加する
    
    var svg = d3.select('svg');  //TreeMapを描画するステージを選択
                        
    //Treemapのboxサイズに対応させる要素を指定
    var retVisits = function(d){ return parseInt(d.Visits) };
    var retNew_Visits = function(d){ return parseInt(d.New_Visits.replace('%', '')) };　//「新規訪問者の割合」は%を削除して数値に変換する

    var w = 1000;   
    var h = 600; 

    var treemap = d3.layout.treemap().size([w, h]); //Treemapレイアウトオブジェクトを作成。Treemapのサイズ(縦横)を指定
    var TreemapData = treemap.value(retVisits).nodes(data); //Visitsの値を基準にTreemap用のデータに変換する

    var boxStyle = { //boxスタイル指定
        x:F('x'),
        y:F('y'),
        width:F('dx'),
        height:F('dy')  
    }
    
    var boxColorStyle = function(d){　//参照元のジャンル別にfillcolorを指定
        var color = &quot;blue&quot;;
        switch(d.Source){
            case 'yahoo':
            case 'google.co.jp':
            case 'google':color = 'green';break;
            case 'facebook.com':
            case 'm.facebook.com':
            case 't.co': 
            case 'b.hatena.ne.jp':color = 'red';break;
        }
        return color
    }
    
    
    var boxGroup = svg.selectAll(&quot;g&quot;) //Boxグループを追加
        .data(TreemapData) 
        .enter()
        .append(&quot;g&quot;); 

    var box =  boxGroup.append('rect') //各BoxをBoxグループに追加
        .attr({
            class:F('Source'),
            fill:boxColorStyle, 
            stroke: &quot;black&quot;,
            &quot;fill-opacity&quot;: 0.5
        })
        .attr(boxStyle)

    var textStyle = { //ラベルスタイル指定
        x:F('x', ' + 5'),
        y:F('y', ' + 20')
    }

    var text = boxGroup.append('text') //ラベル追加
        .attr({
            fill:&quot;white&quot;,
            &quot;font-size&quot;: 12
        })
        .attr(textStyle)
        .text(F('Source')); //参照元(Source)を表示


    var style1 = function(){ //訪問者数(Visits)を基準としたスタイル
        boxGroup.data(treemap.value(retVisits).nodes(data));
        box.transition().attr(boxStyle).duration(1000);
        text.transition().attr(textStyle).duration(1000);    
    }
    var style2 = function(){ //新規訪問者数の割合(New_Visits)を基準としたスタイル
        boxGroup.data(treemap.value(retNew_Visits).nodes(data));
        box.transition().attr(boxStyle).duration(1000);
        text.transition().attr(textStyle).duration(1000);    
    }

    //ボタンクリックイベントの設定
    d3.select('#Visits_btn').on('click', style1)
    d3.select('#New_Visits_btn').on('click', style2)
});
[/javascript]

<a href="http://shimz.me//example/d3js/treemap/01/">example</a>

&nbsp;
&nbsp;
<h2>結果</h2>
<hr></hr>
訪問者数の多い参照元ほど大きなBOXで表示されます。
赤　＝　はてブ／Twitter／Facebookなどソーシャルメディア
緑　＝　検索エンジン
青　＝　それ以外
<a href="http://shimz.me//example/d3js/treemap/01/">
<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000011.jpg" alt="WS000011" width="590" height="347" class="alignnone size-full wp-image-2758" />
</a>
図にしてみると、数字でみるよりわかりやすい気がしますね。
今回は、直近１ヶ月分のデータを使いましたが、年末あたりに１年間分のデータを使ってもっと細かい内容のツリーマップを作ってみようかと思います。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2755</wp:post_id>
		<wp:post_date>2013-04-19 17:00:48</wp:post_date>
		<wp:post_date_gmt>2013-04-19 08:00:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e5%8f%82%e7%85%a7%e5%85%83%e5%88%a5%e3%81%ae%e8%a8%aa%e5%95%8f%e8%80%85%e6%95%b0%e3%82%92%e3%83%84%e3%83%aa%e3%83%bc-%e3%83%9e%e3%83%83%e3%83%97%e3%81%a7%e8%a1%a8%e7%a4%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2758]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[【D3.js】サイズの大きなファイルを可視化する（ツリーマップ） | GUNMA GIS GEEK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shimz.me/blog/d3-js/2942</wp:comment_author_url>
			<wp:comment_author_IP>133.242.49.153</wp:comment_author_IP>
			<wp:comment_date>2013-07-17 11:10:42</wp:comment_date>
			<wp:comment_date_gmt>2013-07-17 02:10:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 以前、アクセス流入元をツリーマップで表示してみたことがあるのですが、今回はファイルリストを可視化してみました。ファイルサイズの多きものほど大きなブロックとして表示され [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1374027292]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374027042.397448062896728515625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:40:{s:15:"comment_post_ID";i:2755;s:14:"comment_author";s:103:"【D3.js】サイズの大きなファイルを可視化する（ツリーマップ） | GUNMA GIS GEEK";s:18:"comment_author_url";s:31:"http://shimz.me/blog/d3-js/2942";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:447:"[...] 以前、アクセス流入元をツリーマップで表示してみたことがあるのですが、今回はファイルリストを可視化してみました。ファイルサイズの多きものほど大きなブロックとして表示されます。ツールチップで実際のファイル名が表示されます。 サイズの大きいファイルは殆どが、地理情報ファイル(geojson)でした。 &nbsp; &nbsp; [...]";s:12:"comment_type";s:8:"pingback";s:7:"user_ip";s:14:"133.242.49.153";s:10:"user_agent";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:8:"referrer";N;s:4:"blog";s:20:"http://shimz.me/blog";s:9:"blog_lang";s:2:"ja";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://shimz.me/blog/d3-js/2755";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"SERVER_SOFTWARE";s:22:"Apache/2.2.15 (CentOS)";s:11:"REQUEST_URI";s:16:"/blog/xmlrpc.php";s:15:"HTTP_USER_AGENT";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:9:"HTTP_HOST";s:8:"shimz.me";s:11:"HTTP_ACCEPT";s:3:"*/*";s:12:"CONTENT_TYPE";s:8:"text/xml";s:20:"HTTP_ACCEPT_ENCODING";s:29:"deflate;q=1.0, compress;q=0.5";s:14:"CONTENT_LENGTH";s:3:"263";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:69:"<address>Apache/2.2.15 (CentOS) Server at shimz.me Port 80</address>
";s:11:"SERVER_NAME";s:8:"shimz.me";s:11:"SERVER_ADDR";s:14:"133.242.49.153";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"133.242.49.153";s:13:"DOCUMENT_ROOT";s:13:"/var/www/html";s:12:"SERVER_ADMIN";s:14:"root@localhost";s:15:"SCRIPT_FILENAME";s:29:"/var/www/html/blog/xmlrpc.php";s:11:"REMOTE_PORT";s:5:"49132";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:16:"/blog/xmlrpc.php";s:8:"PHP_SELF";s:16:"/blog/xmlrpc.php";s:12:"REQUEST_TIME";s:10:"1374027039";s:25:"comment_post_modified_gmt";s:19:"2013-07-16 09:30:24";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>JavaScriptでの機械学習チュートリアル、他</title>
		<link>http://shimz.me/blog/node-js/2760</link>
		<pubDate>Sun, 21 Apr 2013 02:16:31 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2760</guid>
		<description></description>
		<content:encoded><![CDATA[気になった記事メモ。

<div class="box">
<a href="http://burakkanber.com/blog/machine-learning-in-other-languages-introduction/" target="_blank">Machine Learning in Javascript: Introduction | Burak Kanber's Blog</a>
K近傍法、K平均法、遺伝的アルゴリズム、単純ベイズ分類器、などのチュートリアル。
</div>

<div class="box">
<a href="http://d.hatena.ne.jp/hecomi/20120619/1340116121" target="_blank">オンライン学習ライブラリ oll の node.js アドオンを作って JavaScript で機械学習させてみた - 凹みTips</a>
使ってみたい。
</div>


<div class="box">
<a href="http://subprotocol.com/verlet-js/?utm_source=feedly" target="_blank">Verlet-js</a>
物理演算ライブラリ
</div>

<div class="box">
<a href="http://jonobr1.github.io/Physics/" target="_blank">Physics for JavaScript</a>
こちらも、物理演算ライブラリ
</div>



<div class="box">
<a href="http://www.dns-lg.com/" target="_blank">DNS-LG - Multilocation DNS Looking Glass</a>
DNSの名前解決を行い、JSONで返してくれるAPI
</div>

<div class="box">
<a href="http://maplacejs.com/" target="_blank">Maplace.js - A small Google Maps Javascript helper.</a>
Google Map APIのヘルパーライブラリ
</div>


<div class="box">
<a href="http://darsa.in/fpsmeter/?utm_source=feedly" target="_blank">FPSMeter</a>
FPS計測
</div>


&nbsp;
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2760</wp:post_id>
		<wp:post_date>2013-04-21 11:16:31</wp:post_date>
		<wp:post_date_gmt>2013-04-21 02:16:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%a7%e3%81%ae%e6%a9%9f%e6%a2%b0%e5%ad%a6%e7%bf%92%e3%83%81%e3%83%a5%e3%83%bc%e3%83%88%e3%83%aa%e3%82%a2%e3%83%ab%e3%80%81%e4%bb%96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>エンジニアが正しく「I love you」と伝えるための遺伝的アルゴリズム(殺伐)</title>
		<link>http://shimz.me/blog/javascript/2762</link>
		<pubDate>Tue, 23 Apr 2013 08:54:31 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2762</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.naturalselection2.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/natural-selection-2-e1366706722976.jpg" alt="natural-selection-2" width="590" height="295" class="alignnone size-full wp-image-2763" /></a>

「<a href="http://www.atmarkit.co.jp/ait/articles/1304/19/news114.html">エンジニアが正しく「好き」と伝えるための実装法</a>」という記事が話題だったので、乗っかってみました。

内気なエンジニアのために「I love you」と言ってくれるプログラムを遺伝的アルゴリズムで作成します。


【参考】
<a href="http://bit.ly/10a6YPc">Machine Learning: Introduction to Genetic Algorithms</a>

&nbsp;
&nbsp;
<h2>遺伝的アルゴリズムとは？</h2>
<hr></hr>
<blockquote>この国はすっかりダメになってしまいました。 だから、偉い人達は相談して、この法律をつくりました。
 「バトル・ロワイアル」
 そこで今日はみなさんに、ちょっと殺し合いをしてもらいます。 最後の一人になるまでです。</blockquote>
↑これに"交配"と"突然変異"の仕組みが含まれれば遺伝的アルゴリズムです。
ニコニコ大百科にさらに<a href="http://dic.nicovideo.jp/a/%E9%81%BA%E4%BC%9D%E7%9A%84%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0">わかりやすい例</a>が掲載されています。
<blockquote>少年少女を100人ずつ用意します。
一生懸命歌っていただきます。
歌の上手い上位5人ずつを残して残りは抹殺します。
互いに交配して彼らの子供を男女100人ずつ用意します。
2〜4を何回も繰り返します。
どっかで停止し、その時一番うまかった一組を残して抹殺します。
残った2人が鏡音リン・レンです。
なんだってー！？
- <a href="http://dic.nicovideo.jp/b/a/%E9%81%BA%E4%BC%9D%E7%9A%84%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/1-#3">本掲示板>>3</a>より</blockquote>
とりあえず、なんとなく仕組みが分かったところでやってみましょう。


&nbsp;
&nbsp;
<h2>「I love you」に辿りつくまでの流れ</h2>
<hr></hr>
まず、２０人の個体を用意します。
<ol>
	<li>個体それぞれに文字を書かせます。</li>
	<li>文字の内容が「I love you」に近い順に並べます。</li>
	<li>上位２名が子作りして、子供を二人生みます。</li>
	<li>下位２名を処分して、生まれた子供と入れ替えます。</li>
	<li>ランダム選んだ個体の文字を一部変化させます(突然変異)</li>
</ol>
上記１〜５を「I love you」がちゃんと書ける個体が生まれるまで続けます。

&nbsp;
&nbsp;
<h2>サンプル</h2>
<hr></hr>
<script type="text/javascript" src="http://jsdo.it/blogparts/tt03/js?width=465&height=496&view=screenshot"></script>

&nbsp;
&nbsp;
<h2>コード</h2>
<hr></hr>
<a href="http://burakkanber.com/blog/machine-learning-genetic-algorithms-part-1-javascript/" target="_blank">Machine Learning: Introduction to Genetic Algorithms</a>に掲載されているコードにコメント付け加えただけなので、詳しくは先の記事を読んでください。
[javascript]
var Gene = function(code) { //個体
    if (code) this.code = code;
    this.cost = 9999;
};
Gene.prototype.code = ''; // 遺伝情報

Gene.prototype.calcCost = function(compareTo) { //コスト計算
    var total = 0;
    for (i = 0; i &lt; this.code.length; i++) {
        total += (this.code.charCodeAt(i) - compareTo.charCodeAt(i)) * (this.code.charCodeAt(i) - compareTo.charCodeAt(i)); //一文字ずつUnicodeコード値の差を計算
    }
    this.cost = total;
};

Gene.prototype.random = function(length) { //ランダムな遺伝子を作成する
    while (length--) {
        this.code += String.fromCharCode(Math.floor(Math.random() * 255));
        //fromCharCodeメソッドは0x41, 0x42, 0x43のような文字コード列を &quot;ABC&quot; のような文字列に変換して返します
    }
};

Gene.prototype.mate = function(gene) { //交叉
    var pivot = Math.round(this.code.length / 2) - 1; //交叉点(中心)取得
    
    //子作り（一点交叉）
    var child1 = this.code.substr(0, pivot) + gene.code.substr(pivot); 
    var child2 = gene.code.substr(0, pivot) + this.code.substr(pivot);

    return [new Gene(child1), new Gene(child2)]; //生誕
};

Gene.prototype.mutate = function(chance) { //突然変異
    if (Math.random() &gt; chance) return; //変異できずにバイバイ

    var index = Math.floor(Math.random() * this.code.length); //変異するインデックスを決定(ランダム)
    var upOrDown = Math.random() &lt;= 0.5 ? -1 : 1; //1 or -1  //増やすか減らすか決定
    var newChar = String.fromCharCode(this.code.charCodeAt(index) + upOrDown); //キャラクターコードを増減
    var newString = ''; //新しい遺伝情報
    for (i = 0; i &lt; this.code.length; i++) {
        if (i == index) newString += newChar; //変異させたキャラクターコードを挿入
        else newString += this.code[i];
    }

    this.code = newString; //遺伝情報を上書き

};






var Population = function(goal, size) { //群れ　
    this.members = []; //個体を入れとく箱
    this.goal = goal; //目指すゴール
    this.generationNumber = 0; //世代数
    while (size--) {
        var gene = new Gene(); //sizeの数だけ個体を用意する
        gene.random(this.goal.length); //ゴールの長さを元に染色体をランダムに作成
        this.members.push(gene); //群れに追加
    }
};

Population.prototype.sort = function() { //コストを基準にソート
    this.members.sort(function(a, b) {
        return a.cost - b.cost;
    });
}

Population.prototype.generation = function() { //世代処理
    for (var i = 0; i &lt; this.members.length; i++) {
        this.members[i].calcCost(this.goal); //コスト計算

    }

    this.sort(); //群れをソート
    this.display(); //画面出力
    
    var children = this.members[0].mate(this.members[1]); //上位２名で交叉
    
    //取捨選択
    this.members.splice(this.members.length - 2, 2, children[0], children[1]); //群れのなかから順位の低い２名が死亡。子供２人と入れ替え。

    
    for (var i = 0; i &lt; this.members.length; i++) {
        this.members[i].mutate(0.5); //突然変異
        this.members[i].calcCost(this.goal); //コスト計算
        if (this.members[i].code == this.goal) { //ゴールに辿りついたら終了
            this.sort();
            this.display();
            return true;
        }
    }
    
    this.generationNumber++; //世代カウント

    var scope = this;
    
    setTimeout(function() {
        scope.generation(); //次の世代へ
    }, 20);
    
};

Population.prototype.display = function() { //画面出力
    document.body.innerHTML = '';
    document.body.innerHTML += (&quot;&lt;h2&gt;Generation: &quot; + this.generationNumber + &quot;&lt;/h2&gt;&quot;);
    document.body.innerHTML += (&quot;&lt;ul&gt;&quot;);
    for (var i = 0; i &lt; this.members.length; i++) {
        document.body.innerHTML += (&quot;&lt;li&gt;&quot; + this.members[i].code + &quot; (&quot; + this.members[i].cost + &quot;)&quot;);
    }
    document.body.innerHTML += (&quot;&lt;/ul&gt;&quot;);
};

var population = new Population(&quot;I love you&quot;, 20);
population.generation();
[/javascript]

多大な犠牲を払って作成した「I love you」なら、きっと思いも伝わるはず！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2762</wp:post_id>
		<wp:post_date>2013-04-23 17:54:31</wp:post_date>
		<wp:post_date_gmt>2013-04-23 08:54:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%8c%e6%ad%a3%e3%81%97%e3%81%8f%e3%80%8ci-love-you%e3%80%8d%e3%81%a8%e4%bc%9d%e3%81%88%e3%82%8b%e3%81%9f%e3%82%81%e3%81%ae%e9%81%ba%e4%bc%9d%e7%9a%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2763]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>１ページに複数のH1タグがあるとBingに怒られる。</title>
		<link>http://shimz.me/blog/analytics/2764</link>
		<pubDate>Wed, 24 Apr 2013 01:08:52 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2764</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000013.jpg" alt="Bing Web Master Tool" width="590" height="414" class="alignnone size-full wp-image-2765" />


Google以外のSEO対策もしないとなーと思い、<a href="http://www.bing.com/toolbox/webmaster/">Bingウェブマスターツール</a>を使ってみた。

診断ツールのSEOアナライザで自分のブログを見てみたら重要度「高」のエラーが多発。

エラーメッセージは、

「ページに複数の&lt;h1&gt;タグが存在しています」

……だめなのか。

このブログで使用しているテーマだと、フロントページの各エントリーのタイトルが&lt;h1&gt;タグで括られているので、どうしても引っかかる。

テーマのソースコードを修正すれば、直すのは簡単なんだけど……W3C準じているとはいえ厳しいなぁBING。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2764</wp:post_id>
		<wp:post_date>2013-04-24 10:08:52</wp:post_date>
		<wp:post_date_gmt>2013-04-24 01:08:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%ef%bc%91%e3%83%9a%e3%83%bc%e3%82%b8%e3%81%ab%e8%a4%87%e6%95%b0%e3%81%aeh1%e3%82%bf%e3%82%b0%e3%81%8c%e3%81%82%e3%82%8b%e3%81%a8bing%e3%81%ab%e6%80%92%e3%82%89%e3%82%8c%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[アクセス解析]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2765]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>統計学を勉強するのにつかえるeラーニングサイト</title>
		<link>http://shimz.me/blog/other/2767</link>
		<pubDate>Thu, 25 Apr 2013 02:21:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2767</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/statistics.jpg" alt="statistics" width="400" height="300" class="aligncenter size-full wp-image-2768" />

データを弄っていたりすると「統計についてもっと知識があれば、このデータをもっと活用できるのはないか？」と思ったりします。
最近なにかと話題ですしね「統計学」
とはいえ独学ではなかなか学のが難しかったりするので、統計について学べるeラーニング講座をさがしてみました。



<a href="http://www.stats-guild.com/shopping/products/list.php" target="_blank">StatsGuild Inc.　統計解析、データマイニング、データ分析のeラーニング / コース一覧</a>
Rコマンダーを使った統計解析についてのeラーニング。値段も手ごろなので試してみたい。

<a href="http://www.ex-waseda.jp/opencollege/elearning_schedule.html" target="_blank">早稲田大学エクステンションセンター　eラーニング講座一覧</a>
「やさしくたのしい統計学」「やさしくたのしい統計学[相関分析編]」という講座を利用できる。

<a href="http://www.nhk.or.jp/kokokoza/index.html" target="_blank">NHK高校講座</a>
とりあえず基本から学び直すならここが良いかも。「数学Ⅰ」の３学期に「第5章　データの分析」の授業がある。

<a href="http://weblearningplaza.jst.go.jp/" target="_blank">Ｗｅｂラーニングプラザ 技術者 eラーニング （独）科学技術振興機構　無料</a>
統計とは直接関係ないけれど「データ構造とアルゴリズムコース」が良さげ。


<a href="http://www.ouj.ac.jp/hp/kamoku/H25/kyouyou/B/kiso/s_1234048.html" target="_blank">放送大学 授業科目案内 身近な統計（'12）</a>
eラーニングではないですが、放送大学にも統計学の講座がいくつかあるようですね。

<a href="http://matome.naver.jp/odai/2135883023685089601" target="_blank">オープンデータのまとめ </a>
データが必要な方はこちらをどうぞ。


【他、参考サイト】
<a href="http://matome.naver.jp/odai/2134521035124482601" target="_blank">次の10年で一番熱い学問は統計学！統計学を勉強する上で参考になるサイト・書籍まとめ</a>
<a href="http://www.anlyznews.com/2012/01/7.html" target="_blank">統計学を勉強するときに知っておきたい7つのポイント</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2767</wp:post_id>
		<wp:post_date>2013-04-25 11:21:13</wp:post_date>
		<wp:post_date_gmt>2013-04-25 02:21:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%b5%b1%e8%a8%88%e5%ad%a6%e3%82%92%e5%8b%89%e5%bc%b7%e3%81%99%e3%82%8b%e3%81%ae%e3%81%ab%e3%81%a4%e3%81%8b%e3%81%88%e3%82%8be%e3%83%a9%e3%83%bc%e3%83%8b%e3%83%b3%e3%82%b0%e3%82%b5%e3%82%a4%e3%83%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2768]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebookページを作ってみたけれど……</title>
		<link>http://shimz.me/blog/other/2769</link>
		<pubDate>Thu, 25 Apr 2013 04:46:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2769</guid>
		<description></description>
		<content:encoded><![CDATA[Likeboxというウィジェットを付けるにはFacebookページを作らないとならないらしく、とりあえず作ってみたものの……使い道がさっぱりわからない orz 

仕方がないので「RSS Graffiti」というアプリを使ってブログの新着エントリーをポストしてみたけれど、アイキャッチ画像が表示されない。

う〜ん、はじめてみたものの、使いこなすのは難しそうだなぁ。

ちなみに、Likeboxってのは↓これ
<iframe src="//www.facebook.com/plugins/likebox.php?href=http%3A%2F%2Fwww.facebook.com%2FGunmaGisGeek&amp;width=250&amp;height=290&amp;show_faces=true&amp;colorscheme=light&amp;stream=false&amp;border_color&amp;header=true&amp;appId=106329816175854" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:250px; height:290px;" allowTransparency="true" ></iframe>

【参考】
<a href="http://amsstudio.jp/news/2012/03/facebooklike-box.html" target="_blank">Facebook　Like Boxの作成・設置方法</a>
<a href="http://nex.fm/rss-graffiti2/" target="_blank">RSS Graffiti 2.0 の使い方 #Facebookアプリ </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2769</wp:post_id>
		<wp:post_date>2013-04-25 13:46:09</wp:post_date>
		<wp:post_date_gmt>2013-04-25 04:46:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebook%e3%83%9a%e3%83%bc%e3%82%b8%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%81%91%e3%82%8c%e3%81%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】世界の主要20言語　使用人口グラフ(バブルチャート)</title>
		<link>http://shimz.me/blog/d3-js/2770</link>
		<pubDate>Fri, 26 Apr 2013 00:16:33 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2770</guid>
		<description></description>
		<content:encoded><![CDATA[クリックで使用国数順にも。
<a href="http://shimz.me/example/d3js/bubble/"><img class="aligncenter size-full wp-image-2771" alt="世界の主要20言語　使用人口／使用国数" src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000014.jpg" width="726" height="788" /></a>

<a href="http://shimz.me/example/d3js/bubble/">example</a>

データは<a href="http://www.ethnologue.com/" target="_blank">Ethnologue</a>の<a href="http://www.ethnologue.com/statistics/size" target="_blank">Summary by language size</a>よりいただきました。
<a href="http://shimz.me/example/d3js/bubble/Language.csv">Language.csv</a>

&nbsp;
&nbsp;
<h2>バブルチャート表示</h2>
<hr />
バブルチャートを作成するのに<a href="https://github.com/mbostock/d3/wiki/Pack-Layout">Pack Layout</a>を使用しています。
ヘルパー関数として、<a href="http://shimz.me/blog/d3-js/2649">こちら</a>の記事で作成した関数を使用しています。
[javascript]
d3.svg('Language.csv', function(csv){
    var w = 800;
    var h = 800;

    var svg = d3.select('svg');

    var data = { //csvデータを一つのchidrenとしてデータセットを作成
        children:csv
    };

    //各要素のattrの内容（変数にしておくとアップデートを行うときに便利)
    var circleAttr = {
        cx: F('x'),
        cy: F('y'),
        r: F('r')
    };
    var labelAttr = {
        x: F('x'),
        y: F('y')
    };
    var countAttr = {
        x: F('x'),
        y: F('y', ' + 20')
    };

    var pack = d3.layout.pack().size([w,h]);  //バブルチャートで使用するpackレイアウトオブジェクトを作成

    var retSpeakers  = function(d){ return d.Speakers };   //Speakersの値を返す関数
    var reTotalCountries = function(d){ return d.TotalCountries };　//TotalCountriesの値を返す関数

    var circleGroup = svg.selectAll(&quot;g&quot;)
	.data(pack.value(retSpeakers).nodes(data)) //データセットからspeakersの値を元にレイアウトを作成する
	.enter()
	.append(&quot;g&quot;)
	.filter(function(d){
	    return d.Speakers &gt; 0; //speakersの値が無い要素(root)は描画しない
	}) ;

    var circle = circleGroup.append('circle') //各サークル作成
	.attr({
	    class:F('name'),
	    &quot;fill-opacity&quot;:0.8,
	    &quot;stroke-width&quot;:1,
	    fill: function(d){return (d.LangName==='日本語') ? &quot;red&quot; : &quot; blue &quot; ; },  //日本だけ赤く塗る
	    stroke:function(d){return &quot;white&quot;;},
	})
	.attr(circleAttr)

    var label = circleGroup.append('text') //ラベル(名称)作成
        .attr({
            fill: &quot;white&quot;,
            &quot;font-size&quot;: &quot;12px&quot;,
            &quot;text-anchor&quot;: &quot;middle&quot;,
            &quot;alignment-baseline&quot;: &quot;middle&quot;
        })
        .attr(labelAttr)
        .text(F('LangName'))

    var count = circleGroup.append('text') //ラベル(数値)作成
        .attr({
            fill: &quot;white&quot;,
            &quot;font-size&quot;: &quot;12px&quot;,
            &quot;text-anchor&quot;: &quot;middle&quot;,
            &quot;alignment-baseline&quot;: &quot;middle&quot;,
        })
        .attr(countAttr)
        .text(F('Speakers', &quot; / 1000000000 + '億人'&quot;)) //デフォルトは使用人口を表示

    var title =  svg.append('text') //タイトル
        .attr({
            fill:'black',
            'font-size':'24',
            x: 40,
            y: 100
        })
        .text('Speakers')

    var style1 = function() { //使用人口表示
        circleGroup.data(pack.value(retSpeakers).nodes(data));
        circle.transition().attr(circleAttr).duration(1000);
        label.transition().attr(labelAttr).duration(1000);
        count.transition().attr(countAttr).text(F('Speakers', &quot; / 1000000000 + '億人'&quot;)).duration(1000);
        title.text('Speakers')
    }
    var style2 = function() { //使用国数表示
        circleGroup.data(pack.value(reTotalCountries).nodes(data));
        circle.transition().attr(circleAttr).duration(1000);
        label.transition().attr(labelAttr).duration(1000);
        count.transition().attr(countAttr).text(F('TotalCountries', &quot;  + 'ヶ国'&quot;)).duration(1000);
        title.text('Total Countries')
    }

    d3.select('body').on('click', toggle(style2, style1) ); //クリックでスタイル切り替え
});
[/javascript]
<a href="http://shimz.me/example/d3js/bubble/">example</a>

&nbsp;
&nbsp;
<h2>ちょっとだけ解説</h2>
<hr />
[javascript]
var pack = d3.layout.pack().size([w,h]);
pack.value(retSpeakers).nodes(data);
console.log(pack.value(retSpeakers).nodes(data));
[/javascript]
packオブジェクトは、表示するステージのサイズ(縦横)を指定してデータセットを渡すと、ステージ内に収まるように値のスケールを調整しx,y,r値を付加して返します。
r値に対応させるデータ項目はvalueメソッドで指定することができます。
circleを使用したグラフを作成するのに非常に便利なオブジェクトです。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2770</wp:post_id>
		<wp:post_date>2013-04-26 09:16:33</wp:post_date>
		<wp:post_date_gmt>2013-04-26 00:16:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e4%b8%96%e7%95%8c%e3%81%ae%e4%b8%bb%e8%a6%8120%e8%a8%80%e8%aa%9e%e3%80%80%e4%bd%bf%e7%94%a8%e4%ba%ba%e5%8f%a3%e3%82%b0%e3%83%a9%e3%83%95%e3%83%90%e3%83%96%e3%83%ab%e3%83%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2771]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ</title>
		<link>http://shimz.me/blog/d3-js/2772</link>
		<pubDate>Sat, 27 Apr 2013 00:15:22 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2772</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/04/1137473491-8964-e1366998237539.jpg" alt="Data visualization" width="590" height="419" class="aligncenter size-full wp-image-2773" data-url="http://www.photorack.net/index.php?action=showpic&cat=89&pic=17099"/>

「<a href="http://matome.naver.jp/odai/2135289597995104801">データビジュアライゼーション（D3.js）を学ぶための教材まとめ</a>」も大分量が増えてきて、初めてD3.jsを学ぶという人にはどこから手をつけて良いものか解りづらくなってきました。

そこで、ゴールデンウィーク中に<a href="http://shimz.me/blog/d3-js/862">D3.js</a>を学んでみたいという方に、いくつか厳選してお勧めしてみたいと思います。

&nbsp;
&nbsp;
<h2>スライドを眺める</h2>
<hr />

まずはD3.jsがどんなライブラリなのか把握しましょう。
・<a href="http://kt3k.github.io/d3intro/#/" target="_blank">about d3.js</a>

&nbsp;
&nbsp;
<h2>チュートリアルを学ぶ</h2>
<hr />
とりあえず分量・内容的に下記のチュートリアルがお勧めです。
・<a href="http://ja.d3js.info/alignedleft/tutorials/d3/" target="_blank">D3 チュートリアル｜スコット・マレイ｜alignedleft</a>

下記資料は英語ですが、ほとんどサンプルコードなので問題なし。実際にその場で編集・実行することができるのでとても解りやすいです。
・<a href="http://vogievetsky.github.io/IntroD3/#1" target="_blank">D3 Intro</a>

余裕があっていろんなレイアウトのグラフを描いてみたいなら、下記サイトを。
・<a href="http://www.h2.dion.ne.jp/~defghi/svgMemo/svgMemo_20.htm" target="_blank">svg要素の基本的な使い方まとめ</a>

&nbsp;
&nbsp;
<h2>コード共有サイトを使って実践</h2>
<hr />
チュートリアルを手軽に試すなら、コード共有サイトを利用するのが楽チンです。
<a href="http://jsdo.it/_shimizu/fqlp">jsdo.it</a>, <a href="http://jsfiddle.net/_shimizu/Q5Jag/1/">jsfiddle</a>, <a href="http://tributary.io/inlet/5468836">Tributary</a> にテンプレート的なものを作ってみたのでForkするなどして使ってみてください。

<script type="text/javascript" src="http://jsdo.it/blogparts/fqlp/js?width=465&height=496&view=javascript"></script>

<iframe width="100%" height="300" src="http://jsfiddle.net/_shimizu/Q5Jag/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<a href="http://tributary.io/inlet/5468836" target="_blank">Tributary | D3.js Template</a>

&nbsp;
&nbsp;
<h2>動画で学ぶ</h2>
<hr />
[追記]
<a href="http://dotinstall.com/lessons/basic_d3js" target="_blank">D3.js入門 (全17回) - プログラミングならドットインストール</a>
プログラミング独学者の強い味方「ドットインストール」にD3.jsの講座が追加されました。


以下は<a href="http://tributary.io/">Tributary</a>を使ったD3.jsのライブコーディング動画です。
英語のコンテンツですが、下記動画は観ているだけでも楽しめるのでお勧めです。
・<a href="http://enjalot.github.io/dot-enter/" target="_blank">dot enter</a>
・<a href="http://enjalot.github.io/dot-append/" target="_blank">dot append</a>


&nbsp;
&nbsp;
<h2>D3に興味が湧いたら</h2>
<hr />
他のD3関連記事もどうぞ。
<a href="http://shimz.me/blog/category/d3-js">D3関連記事</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2772</wp:post_id>
		<wp:post_date>2013-04-27 09:15:22</wp:post_date>
		<wp:post_date_gmt>2013-04-27 00:15:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%b4%e3%83%bc%e3%83%ab%e3%83%87%e3%83%b3%e3%82%a6%e3%82%a3%e3%83%bc%e3%82%af%e4%b8%ad%e3%81%abd3-js%e3%82%92%e5%ad%a6%e3%81%b3%e3%81%9f%e3%81%84%e6%96%b9%e3%81%ab%e3%81%8a%e5%8b%a7%e3%82%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2773]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[2013/04/30 HTML5 勧告候補にmain要素が追加 – 本日のHTML5とか最新情報 | OpenWeb]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://bit.ly/Ya0Xpj</wp:comment_author_url>
			<wp:comment_author_IP>210.172.144.31</wp:comment_author_IP>
			<wp:comment_date>2013-04-30 10:40:16</wp:comment_date>
			<wp:comment_date_gmt>2013-04-30 01:40:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ゴールデンウィーク中にD3.jsを学びたい方にお勧めな厳選まとめ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367289563.9375588893890380859375;s:7:"message";s:56:"blogadmin がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367286016.2741219997406005859375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】 データビジュアライゼーション事例</title>
		<link>http://shimz.me/blog/d3-js/2775</link>
		<pubDate>Sun, 28 Apr 2013 11:33:34 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2775</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.btrax.com/jp/2013/01/17/data-design-d3/">New York Times</a>や<a href="http://artzub.com/ghv/" target="_blank">GitHub Visualizer</a>などの可視化で使用されているD3.jsですが「気になったデータビジュアライズ作品のソースを覗いてみたらD3.jsで作成されていた」という事が最近増えてきました。

最近見つけた中で、「これは凄い！」と感嘆させられた作品を３つほど紹介します。

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/d3130428-0001.png" alt="d3130428-0001" width="590" height="373" class="alignnone size-full wp-image-2777" />
<a href="http://www.visualizing.org/sprint/global-development-sprint" target="_blank">World Bank Global Development Sprint | visualizing.org</a>



<img src="http://shimz.me/blog/wp-content/uploads/2013/04/d3130428-0002.png" alt="d3130428-0002" width="590" height="376" class="alignnone size-full wp-image-2778" />
<a href="http://opendata.nikkei.co.jp/article/kakei-chosa-2005-2012/#did=1.1.1&year=2012" target="_blank">オープンデータで「食の日本地図」　家計調査（2005 - 2012年）より:オープンデータ情報ポータル</a>


<img src="http://shimz.me/blog/wp-content/uploads/2013/04/d3130428-0003.png" alt="d3130428-0003" width="590" height="330" class="alignnone size-full wp-image-2779" />
<a href="http://drones.pitchinteractive.com/" target="_blank">Out of Sight, Out of Mind: A visualization of drone strikes in Pakistan since 2004</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2775</wp:post_id>
		<wp:post_date>2013-04-28 20:33:34</wp:post_date>
		<wp:post_date_gmt>2013-04-28 11:33:34</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91-%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e4%ba%8b%e4%be%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2777]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Codea]iPadでiPadアプリが作成できるiPadアプリがまた一つ増えました。</title>
		<link>http://shimz.me/blog/programming/2781</link>
		<pubDate>Sun, 28 Apr 2013 23:59:23 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2781</guid>
		<description></description>
		<content:encoded><![CDATA[タイトルがゲシュタルト崩壊しそう……

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/codaexport.png" alt="codea" width="590" height="443" class="alignnone size-full wp-image-2782" />

以前、iPad上でプログラミング・実行でき、作成したスクリプトをXcodeのプロジェクトファイルを使うことで実際にアプリとしてビルドできる「ScriptKit」を紹介しました。

<a href="http://shimz.me/blog/iphoneipad/2730" target="_blank">iPadでiPadアプリが作成できる「ScriptKit」がなんか凄い。</a>

このScriptKitのビルド機能がcodeaのフォーラムで話題になっていて「もしや？」と思っていたのですが。

なんと、codeaも作成したプログラムをXcodeのプロジェクトとしてexportする機能を付けてきました！

<img src="http://shimz.me/blog/wp-content/uploads/2013/04/codeaexport2.png" alt="codeaexport2" width="590" height="787" class="alignnone size-full wp-image-2783" />

ScriptKitはまだまだベータ版といった感じでしたが、codeaはすでに日本語にも対応しているのでかなり本格的なアプリが作成できそうです。

今後はこういったiPadでプロトタイプを作成しXcodeでビルドするexport機能を持った開発系アプリが増えて行くのかもしれません。



&nbsp;
&nbsp;
<h2>Codeaおさらい</h2>
<hr />
CodeaはiPad上でゲームやメディアアート作品などを作成することができるプログラミング環境です。
<iframe width="560" height="315" src="http://www.youtube.com/embed/gTuzcgf_NyA" frameborder="0" allowfullscreen></iframe>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2781</wp:post_id>
		<wp:post_date>2013-04-29 08:59:23</wp:post_date>
		<wp:post_date_gmt>2013-04-28 23:59:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codeaipad%e3%81%a7ipad%e3%82%a2%e3%83%97%e3%83%aa%e3%81%8c%e4%bd%9c%e6%88%90%e3%81%a7%e3%81%8d%e3%82%8bipad%e3%82%a2%e3%83%97%e3%83%aa%e3%81%8c%e3%81%be%e3%81%9f%e4%b8%80%e3%81%a4%e5%a2%97%e3%81%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2782]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】選択されたデータ範囲のグラフを表示する(d3.svg.brush)</title>
		<link>http://shimz.me/blog/d3-js/2785</link>
		<pubDate>Tue, 30 Apr 2013 02:36:21 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2785</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me//example/d3js/brushing/"><img src="http://shimz.me/blog/wp-content/uploads/2013/04/WS000015.jpg" alt="d3.svg.brush" width="590" height="361" class="aligncenter size-full wp-image-2786" /></a>

下位のグラフで選択された範囲を上位のグラフで拡大表示します。
複雑なことをやっているように見えますが、D3.jsでは比較的簡単に実装することができます。

<a href="http://shimz.me//example/d3js/brushing/">example</a>

<p>&nbsp;<br />
&nbsp;</p>
<h2>サンプルコード</h2>
<hr />
データ範囲の選択機能を追加するために<a href="https://github.com/mbostock/d3/wiki/SVG-Controls#wiki-brush">d3.svg.brush()</a>を使用しています。
ヘルパー関数として、<a href="http://shimz.me/blog/d3-js/2649">こちら</a>の記事で作成した関数を使用しています。
[javascript]
d3.csv(&quot;access.csv&quot;, function(data){
    var parseDate = d3.time.format(&quot;%Y/%m/%d&quot;).parse; 

    //データセット型変換
      data.forEach(function(d) {
        d.date = parseDate(d.date);
        d.access = parseInt(d.access);
      });

    var dateExtent = d3.extent( data.map( F('date') ) ); //dateの最小値・最大値取得
    var accessMax =  d3.max( data.map( F('access') ) ); //accessの最大値取得

    //上位グラフ用、margin, scale, axis設定
    var margin = {top: 10, right: 10, bottom: 100, left: 40};
    var width = 960 - margin.left - margin.right;
    var height = 500 - margin.top - margin.bottom;
    var xScale = d3.time.scale()
      .domain(dateExtent)    
      .range([0, width]);
    var yScale = d3.scale.linear()
    .domain([0, accessMax])
    .range([height, 0]);
    var xAxis = d3.svg.axis().scale(xScale).orient(&quot;bottom&quot;);
    var yAxis = d3.svg.axis().scale(yScale).orient(&quot;left&quot;);

    //下位グラフ用、margin, scale, axis設定
    var margin2 = {top: 430, right: 10, bottom: 20, left: 40}; 
    var height2 = 500 - margin2.top - margin2.bottom;     
    var x2Scale = d3.time.scale()
      .domain(xScale.domain())
      .range([0, width]);  
    var y2Scale = d3.scale.linear()
      .domain(yScale.domain())
      .range([height2, 0]);    
    var xAxis2 = d3.svg.axis().scale(x2Scale).orient(&quot;bottom&quot;); 
    

    //上位グラフareaオブジェクト
    var area = d3.svg.area()
        .interpolate(&quot;monotone&quot;)
        .x(F('date', xScale))
        .y0(height)
        .y1(F('access', yScale));

    //下位グラフareaオブジェクト    
    var area2 = d3.svg.area()
        .interpolate(&quot;monotone&quot;)
        .x(F('date', x2Scale))
        .y0(height2)
        .y1(F('access', y2Scale));
  
    //ステージ作成
    var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
        .attr(&quot;width&quot;, width + margin.left + margin.right)
        .attr(&quot;height&quot;, height + margin.top + margin.bottom);
    
    //フォーカス時の上位グラフの表示位置調整のためにクリップパスを作成
    svg.append(&quot;defs&quot;).append(&quot;clipPath&quot;)
        .attr(&quot;id&quot;, &quot;clip&quot;)
        .append(&quot;rect&quot;)
        .attr(&quot;width&quot;, width)
        .attr(&quot;height&quot;, height);
  
  
    
    var focus = svg.append(&quot;g&quot;) //上位グラフグループ作成
        .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);
    
    var context = svg.append(&quot;g&quot;) //下位グラフグループ作成
        .attr(&quot;transform&quot;, &quot;translate(&quot; + margin2.left + &quot;,&quot; + margin2.top + &quot;)&quot;);
    
       
      focus.append(&quot;path&quot;)
          .datum(data)
          .attr(&quot;clip-path&quot;, &quot;url(#clip)&quot;) //クリップパスを適用
          .attr(&quot;d&quot;, area);
        
      focus.append(&quot;g&quot;)  //x目盛軸
          .attr(&quot;class&quot;, &quot;x axis&quot;)
          .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;)
          .call(xAxis);
    
      focus.append(&quot;g&quot;) //y目盛軸
          .attr(&quot;class&quot;, &quot;y axis&quot;)
          .call(yAxis);
 
 
      context.append(&quot;path&quot;) //下位グラフ
          .datum(data)
          .attr(&quot;d&quot;, area2);

      context.append(&quot;g&quot;) //下位x目盛軸
          .attr(&quot;class&quot;, &quot;x axis&quot;)
          .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height2 + &quot;)&quot;)
          .call(xAxis2);
 
 
    /*
     *brushは透明なrectをグループ上設置しマウスイベントを取得する。
     *設置したrect上ではドラッグで範囲選択が可能
     *範囲が選択されている状態でbrush.extent()メソッドを実行するとその範囲のデータ値を返す
     */
    
     var brush = d3.svg.brush() //brushオブジェクト作成
        .x(x2Scale) //x軸を選択可能範囲に指定
        .on(&quot;brush&quot;, brushed);
    
      context.append(&quot;g&quot;) //brushグループを作成
        .attr(&quot;class&quot;, &quot;x brush&quot;)
        .call(brush)
        .selectAll(&quot;rect&quot;)
        .attr(&quot;y&quot;, -6)
        .attr(&quot;height&quot;, height2 + 7);

    
    function brushed() {
      console.log( brush.extent());
      xScale.domain(brush.empty() ? x2Scale.domain() : brush.extent()); //選択されたデータセットの範囲をxScaleのdomainに反映
      focus.select(&quot;path&quot;).attr(&quot;d&quot;, area); //上位グラフアップデート
      focus.select(&quot;.x.axis&quot;).call(xAxis); //上位x軸アップデート
    }

});
[/javascript]

<a href="http://shimz.me//example/d3js/brushing/">example</a>

&nbsp;
&nbsp;
<h2>ちょっとだけ解説</h2>
<hr />
[javascript]
var brush = d3.svg.brush() 
	.x(x2Scale) 
	.on(&quot;brush&quot;, brushed);
[/javascript]
brushオブジェクトは、グラフ上にマウスドラッグで範囲選択を行う機能を提供します。
選択対象はxメソッド、yメソッドにscaleオブジェクトを渡すことで設定します。
(xメソッドだけだと横軸のみ、x,y両メソッドにスケールが設定されている場合は縦横の選択が可能になります)
brushイベントは選択時に呼ばれます。
[javascript]
function brushed() {
  xScale.domain(brush.empty() ? x2Scale.domain() : brush.extent()); //選択されたデータセットの範囲をxScaleのdomainに反映
  focus.select(&quot;path&quot;).attr(&quot;d&quot;, area); //上位グラフアップデート
  focus.select(&quot;.x.axis&quot;).call(xAxis); //上位x軸アップデート
}
[/javascript]
brushイベントによって呼ばれたコールバックの中では、brush.extent()メソッドによって選択されたデータ値を取得し、その値でxScaleのドメインを更新します。
xScaleが適用されている上位グラフと上位x軸(xaxis)のアップデートを行うことで、下位グラフで選択された範囲のデータを上位グラフ上で表示されます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2785</wp:post_id>
		<wp:post_date>2013-04-30 11:36:21</wp:post_date>
		<wp:post_date_gmt>2013-04-30 02:36:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e9%81%b8%e6%8a%9e%e3%81%95%e3%82%8c%e3%81%9f%e3%83%87%e3%83%bc%e3%82%bf%e7%af%84%e5%9b%b2%e3%81%ae%e3%82%b0%e3%83%a9%e3%83%95%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8bd3-sv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2786]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>オープンデータまで待てない人の、スクレーパー共有サイト(ScraperWiki)</title>
		<link>http://shimz.me/blog/other/2787</link>
		<pubDate>Wed, 01 May 2013 03:16:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2787</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://scraperwiki.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki.jpg" alt="scraperwiki" width="560" height="500" class="alignnone size-full wp-image-2791" /></a>

Webページからプログラムを使って情報を取り出すことを<a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0">Webスクレイピング</a>、プログラムの名前をスクレイパーと呼びます。
(Webクローリング、クローラーと呼ぶ場合も)

<a href="https://scraperwiki.com/">ScraperWiki</a>は、ブラウザ上でスクレイパーを記述しデータを取得・保存することができるWebサービスです。
作成したスクレイパーコードや保存したデータは、他のユーザーと共有したり一般に公開することができます。


<a href="http://blog.scraperwiki.com/2012/01/06/scraperwiki%E3%82%92%E3%81%9F%E3%82%81%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86/" target="_blank">ScraperWikiをためしてみよう | ScraperWiki Data Blog</a>

&nbsp;
&nbsp;
<h2>スクレイパーの作成画面</h2>
<hr />
PHP,Python,rubyを使ってスクレイパーを記述することができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki1.jpg" alt="scraperwiki1" width="590" height="411" class="border size-full wp-image-2788" />

&nbsp;
&nbsp;
<h2>スクレイパーの自動実行</h2>
<hr />
作成したスクレイパーを定期的に自動実行するよう設定できます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki2.jpg" alt="scraperwiki2" width="454" height="200" class="alignnone size-full wp-image-2789" />

&nbsp;
&nbsp;
<h2>取得したデータの公開</h2>
<hr />
スクレイパーによって取得したデータは、CSVやJSONファイルとしてダウンロードすることができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/scraperwiki3.jpg" alt="scraperwiki3" width="590" height="226" class="alignnone size-full wp-image-2790" />
また、「Explorer with AP」を利用すればWeb APIを使ってJSONデータを取得することもできます。


<a href="https://scraperwiki.com/profiles/_shimizu/" target="_blank">Profile Details: _shimizu | ScraperWiki</a>

&nbsp;
&nbsp;
【参考】
<a href="http://d.hatena.ne.jp/uasi/20110603/1307098299" target="_blank">スクレイピングするなら ScraperWiki 使うといいよ - ヤルキデナイズドだった</a>
<a href="http://d.hatena.ne.jp/Mariyudu/20110903/1315037137" target="_blank">ScraperWiki を使って勝手 RSS フィードしてみた - 旧・私と私の猫の他は誰でも隠し事を持っている</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2787</wp:post_id>
		<wp:post_date>2013-05-01 12:16:49</wp:post_date>
		<wp:post_date_gmt>2013-05-01 03:16:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%81%be%e3%81%a7%e5%be%85%e3%81%a6%e3%81%aa%e3%81%84%e4%ba%ba%e3%81%ae%e3%80%81%e3%82%b9%e3%82%af%e3%83%ac%e3%83%bc%e3%83%91%e3%83%bc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2791]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[dataseries.js]テスト用のダミーデータセットを生成するJavaScriptライブラリ</title>
		<link>http://shimz.me/blog/javascript/2792</link>
		<pubDate>Thu, 02 May 2013 01:36:11 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2792</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/libs/dataseries/examples/functions.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/dataseries.jpg" alt="dataseries.js" width="590" height="370" class="alignnone size-full wp-image-2793" /></a>

<a href="http://metmajer.github.io/dataseries.js/">dataseries.js</a>

dataseries.jsは、さまざまなダミーデータを生成することができるジェネレイターライブラリです。
データビジュアライゼーションのプログラムで適当なダミーデータが必要なときに便利です。

&nbsp;
&nbsp;
<h2>サンプル</h2>
<hr />
&nbsp;
<strong>配列の生成</strong>
[javascript]
ds.range(2);
// =&gt; [0, 1, 2]

ds.range(-2, 2);
// =&gt; [-2, -1, 0, 1, 2]

ds.range(0, 2, 0.5);
// =&gt; [0, 0.5, 1, 1.5, 2]
[/javascript]

&nbsp;
<strong>関数からデータセットを生成</strong>
[javascript]
ds.generators.f(ds.functions.linear, { a: 2, b: 1 })
  .inputs(ds.range(2))
  .values();
// f(x) = 2·x + 1 for x in [0, 1, 2] =&gt; [1, 3, 5]

ds.generators.f(ds.functions.exp, { a: 2 })
  .inputs(ds.range(2))
  .values();
// f(x) = 2ˣ for x in [0, 1, 2] =&gt; [1, 2, 4]
[/javascript]

&nbsp;
<strong>X,Y値を持つオブジェクト(point)配列の生成</strong>
[javascript]
ds.generators.f(ds.functions.exp, { a: 2 })
    .inputs(ds.range(3))
    .transform(ds.transforms.point)
    .values();
// =&gt; [ {x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 4}, {x: 3, y: 8} ]
[/javascript]

&nbsp;
<strong>Dateオブジェクトを持つ配列の生成</strong>
[javascript]
ds.generators.f(ds.functions.exp, { a: 2 })
    .inputs(ds.range(3))
    .time(new Date(2012, 0, 1), ds.time.DAY)
    .transform(ds.transforms.point)
    .values();
// =&gt; [ {x: new Date(2012, 0, 1), y: 1}, {x: new Date(2012, 0, 2), y: 2}, {x: new Date(2012, 0, 3), y: 4}, {x: new Date(2012, 0, 4), y: 8} ]
[/javascript]

&nbsp;
&nbsp;
<a href="http://shimz.me/libs/dataseries/examples/functions.html">example</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2792</wp:post_id>
		<wp:post_date>2013-05-02 10:36:11</wp:post_date>
		<wp:post_date_gmt>2013-05-02 01:36:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dataseries-js%e3%83%86%e3%82%b9%e3%83%88%e7%94%a8%e3%81%ae%e3%83%80%e3%83%9f%e3%83%bc%e3%83%87%e3%83%bc%e3%82%bf%e3%82%bb%e3%83%83%e3%83%88%e3%82%92%e7%94%9f%e6%88%90%e3%81%99%e3%82%8bjavascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2793]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】グラフと地図を連動させる</title>
		<link>http://shimz.me/blog/d3-js/2797</link>
		<pubDate>Sat, 04 May 2013 06:46:05 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2797</guid>
		<description></description>
		<content:encoded><![CDATA[散布図上でドラッグすると、選択した範囲の都道府県に色が付きます。
<a href="http://shimz.me/example/d3js/geo_example/geo8/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/plotmap.jpg" alt="plotmap" width="590" height="382" class="alignnone size-full wp-image-2798" /></a>

<a href="http://shimz.me/blog/d3-js/2785">d3.svg.brush</a>を使って、散布図と地図を連動させるサンプルを作成しました。


<a href="http://shimz.me/example/d3js/geo_example/geo8/">example</a>

&nbsp;
&nbsp;
<h2>データセットの作成</h2>
<hr />
有効求人倍率と充足率の情報は「<a href="http://www.e-stat.go.jp/SG1/estat/List.do?bid=000001046052&cycode=0">社会生活統計指標</a>」より。
都道府県の地図データは以下よりいただきました。
<a href="http://itochiriback.seesaa.net/article/245436179.html">都道府県色塗り用shapeファイル（英語表記）</a>

社会生活統計指標からダウンロードした「労働」統計表をExcel上で編集してcsvに。
作成したcsvと都道府県色塗り用shapeファイルを<a href="http://www.qgis.org/">Quantum GIS</a>に読み込み結合。(結合の方法は以下を)
<a href="https://sites.google.com/site/qgismemo/040-bian-ji/shu-xingdetanicsvmatahadbffairuwo-jie-heshitai" target="_blank">属性データにCSVまたはDBFファイルを結合したい</a>

結合したデータをgeojsonで出力し、さらにtopojsonに変換します。
topojsonへの変換は「<a href="http://shimz.me/blog/d3-js/2351">TopoJSONを使う</a>」を参照してください。
出来上がったデータセットは以下。

<a href="http://shimz.me/example/d3js/geo_example/geo8/todofuken.topojson">todofuken.topojson</a>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />
[javascript]
d3.json(&quot;todofuken.topojson&quot;, function(json) {
    var plotsize = 320;　//散布図の縦横サイズ
    var baseColor = &quot;#fef4f4&quot;; //地図、circleのベースカラー


    //塗り分けカラーの設定    
    var colorList = [&quot;#ce6dbd&quot;, &quot;#f7b6d2&quot;, &quot;#8ca252&quot;, &quot;#ff7f0e&quot;, &quot;#de9ed6&quot;, &quot;#d62728&quot;, &quot;#e377c2&quot;, &quot;#e7ba52&quot;, &quot;#2ca02c&quot;, &quot;#e377c2&quot;, &quot;#f7b6d2&quot;, &quot;#c7c7c7&quot;, &quot;#ffbb78&quot;, &quot;#e7cb94&quot;, &quot;#dbdb8d&quot;, &quot;#8c564b&quot;, &quot;#b5cf6b&quot;, &quot;#843c39&quot;, &quot;#7b4173&quot;, &quot;#aec7e8&quot;, &quot;#ffbb78&quot;, &quot;#8c564b&quot;, &quot;#bd9e39&quot;, &quot;#dbdb8d&quot;, &quot;#c5b0d5&quot;, &quot;#7f7f7f&quot;, &quot;#9edae5&quot;, &quot;#c49c94&quot;, &quot;#c49c94&quot;, &quot;#393b79&quot;, &quot;#9467bd&quot;, &quot;#5254a3&quot;, &quot;#a55194&quot;, &quot;#637939&quot;, &quot;#17becf&quot;, &quot;#cedb9c&quot;, &quot;#1f77b4&quot;, &quot;#1f77b4&quot;, &quot;#9467bd&quot;, &quot;#ff9896&quot;, &quot;#ff7f0e&quot;, &quot;#9c9ede&quot;, &quot;#ad494a&quot;, &quot;#ff9896&quot;, &quot;#98df8a&quot;, &quot;#17becf&quot;, &quot;#7f7f7f&quot;, &quot;#bcbd22&quot;, &quot;#98df8a&quot;, &quot;#bcbd22&quot;, &quot;#c5b0d5&quot;, &quot;#2ca02c&quot;, &quot;#8c6d31&quot;, &quot;#aec7e8&quot;, &quot;#6b6ecf&quot;, &quot;#d6616b&quot;, &quot;#e7969c&quot;, &quot;#c7c7c7&quot;, &quot;#d62728&quot;, &quot;#9edae5&quot;];
    var colorScale=d3.scale.ordinal().domain([1,47]).range(colorList); 


    //dataSetの準備
    var geodata = topojson.object(json, json.objects.todofuken).geometries; //topojosnデータ
    //var geodata = json.features; //geojsonを使う場合はこちら

    //データセットの型変換  
    geodata.forEach(function(d) {
        d.properties.jobs_ratio = parseFloat(d.properties.jobs_ratio);
        d.properties.fullness_rate = parseFloat(d.properties.fullness_rate);
    });
  
    //有効求人倍率の最大値取得
    var jobs_ratioMax = d3.max(geodata, function(d){
        return d.properties.jobs_ratio;
    });

    //充足率の最大値取得  
    var fullness_rateMax = d3.max(geodata, function(d){
        return d.properties.fullness_rate;
    });

    //scale関数(正規化)生成  
    var xScale = d3.scale.linear().domain([2, fullness_rateMax+1]).range([0, plotsize]);
    var yScale = d3.scale.linear().domain([jobs_ratioMax+0.05,  0.2]).range([0, plotsize]);
  
    //axis関数(目盛り)の生成    
    var xAxis = d3.svg.axis().scale(xScale).orient('bottom');
    var yAxis = d3.svg.axis().scale(yScale).orient('left');


    //地図投影法設定  
    projection = d3.geo
        .mercator()		//投影法の指定
        .scale(1500)	//スケール（ズーム）の指定
        .translate([600,350]) //表示位置調整 x,y
        .center([139.0032936, 36.3219088]); //中心の座標を指定

    //geoデータ→svg path変換関数生成
    path = d3.geo.path().projection(projection);
  
    //表示ステージ
    var svg = d3.select(&quot;svg&quot;);

    //mapを作成するグループ
    var mapGroup = svg.select('#map');
  
    //map表示
    var map = mapGroup.append(&quot;svg:g&quot;)
        .selectAll(&quot;path&quot;)
        .data(geodata)
        .enter()
        .append(&quot;svg:path&quot;)
        .attr('class', function(d){ return d.properties.ObjName } )
        .attr({
          &quot;d&quot;: function(d){ return path(d)},
          &quot;fill&quot;: baseColor,
          &quot;fill-opacity&quot;: 1,
          &quot;stroke&quot;: &quot;black&quot;
        })
        .on('mouseover', function(){
            d3.selectAll( &quot;.&quot;+d3.select(this).attr('class') ) //マウスオーバーしたエリアと同じclass名の要素を選択
            .attr(&quot;fill&quot;, &quot;red&quot;);
        })
        .on('mouseout', function(){
            d3.selectAll( &quot;.&quot;+d3.select(this).attr('class') )
            .attr(&quot;fill&quot;, baseColor); //バグあり　あとで直す
        });
    
    
    
    //散布図を作成するグループ
    var plotGroup = svg.select('#plot')
        .attr(&quot;transform&quot;, &quot;translate(&quot; + [100, 10] + &quot;)&quot;);

        
    /*
     *circleより下のレイヤーにbrushを表示したいので先に作成する
     *circleの上にbrushを表示すると、ツールチップを表示するイベントが取得できなくなるため。
     */
    var brush = d3.svg.brush() //brushオブジェクト作成
        .x(xScale) //x軸を選択可能範囲に指定
        .y(yScale)
        .on(&quot;brush&quot;, brushed);
    
    plotGroup.append(&quot;g&quot;) //brushグループを作成
        .attr(&quot;class&quot;, &quot;brush&quot;)
        .call(brush)
        .selectAll(&quot;rect&quot;)
        
        
    //circleを作成するグループ
    var circlegroup = plotGroup.append('g');
    
    //circle表示
    var circle = circlegroup.selectAll('circle')
        .data(geodata)
        .enter()
        .append('circle')
        .attr('class', function(d){ return &quot;tipsy &quot; + d.properties.ObjName } )
        .attr({
            r:5,
            cx:function(d){ return  xScale( d.properties.fullness_rate )},
            cy:function(d){ return yScale( d.properties.jobs_ratio )},
            fill: baseColor
        })
     
     //ツールチップを表示するためtitle要素を追加 
    circle.append('title').text(function(d){ return d.properties.pref});  

    
     //x目盛軸表示
    var xAxisline = plotGroup.append(&quot;g&quot;) 
        .attr(&quot;class&quot;, &quot;x axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(0,&quot; + plotsize + &quot;)&quot;)
        .call(xAxis);
    
    //x目盛軸タイトル表示
    xAxisline.append('text')
        .attr({
            y:40,
            x:Math.floor(plotsize/2)-20
        })
        .text('充足率')  
    
    //y目盛軸
    var yAxisline = plotGroup.append(&quot;g&quot;) 
        .attr(&quot;class&quot;, &quot;y axis&quot;)
        .attr(&quot;transform&quot;, &quot;translate(0,&quot; + 0 + &quot;)&quot;)
        .call(yAxis);
    
    //y目盛軸タイトル表示
    yAxisline.append('text')
        .attr({
            &quot;transform&quot;:'rotate(-90 -43, 0) translate(-240)' 
        })
        .text('有効求人倍率')           
     


    //brashイベントのコールバック
    function brushed() {
        var select = brush.extent();
        var rightBotom = select[0]; //選択範囲右下のデータ値を取得
        var leftTop = select[1]; //選択範囲右上のデータ値を取得
        circle.attr(&quot;fill&quot;, fillFnc); //circleに着色     
        map.attr(&quot;fill&quot;,fillFnc); //地図に着色
     
        //選択範囲内を色塗り 
        function fillFnc(d,i){
            if(
               d.properties.fullness_rate &gt; rightBotom[0] 
               &amp;&amp; d.properties.jobs_ratio &gt; rightBotom[1]
               &amp;&amp; d.properties.fullness_rate &lt; leftTop[0]
               &amp;&amp; d.properties.jobs_ratio &lt; leftTop[1]
               )  return colorScale(d.properties.jis);
            return baseColor; //条件以外（選択範囲外）の要素はbaseColorで塗る
        }
    }
 
    //ツールチップイベント設定
    $(&quot;.tipsy&quot;).tipsy({gravity:'n', fade: false});      
});
[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo8/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2797</wp:post_id>
		<wp:post_date>2013-05-04 15:46:05</wp:post_date>
		<wp:post_date_gmt>2013-05-04 06:46:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e3%82%b0%e3%83%a9%e3%83%95%e3%81%a8%e5%9c%b0%e5%9b%b3%e3%82%92%e9%80%a3%e5%8b%95%e3%81%95%e3%81%9b%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2798]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[使いこなせるようになってきたかも。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[統計データをどうビジネスに活かすか？発達するデータ表示技術とその活用方法 | glovix]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://glovix.wordpress.com/2013/05/31/statistics/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.105</wp:comment_author_IP>
			<wp:comment_date>2013-05-31 09:29:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-31 00:29:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 【参考】散布図と地図の連携の例 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369960161.5071389675140380859375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【D3.js】地図上にボロノイ図を描く</title>
		<link>http://shimz.me/blog/d3-js/2817</link>
		<pubDate>Mon, 06 May 2013 08:02:11 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2817</guid>
		<description></description>
		<content:encoded><![CDATA[各黒い点(母点)がガソリンスタンドの位置です。
<a href="http://shimz.me/example/d3js/geo_example/geo10/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/test000012.jpg" alt="D3.js Voronoi Map" width="590" height="390" class="alignnone size-full wp-image-2818" /></a>

<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-P07.html">国土数値情報　燃料給油所データ(点)</a>を使って、高崎市の地図上にボロノイ図を書いてみました。

<a href="http://shimz.me/example/d3js/geo_example/geo10/">example</a>

【参考】
<a href="http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/voronoi-diagram/voronoi-diagram.html">ボロノイ図とは　</a>


&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />

[javascript]
d3.json(&quot;takasaki.topojson&quot;, function(json) {
	var svg = d3.select(&quot;svg&quot;);

	var geodata = topojson.object(json, json.objects.takasaki).geometries;
	//var geodata = json.features;

	projection = d3.geo
		.mercator()		//投影法の指定
		.scale(90000)	//スケール（ズーム）の指定
		.translate([500,300])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	path = d3.geo.path().projection(projection);　//投影

	//地図表示
	var map =  svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;map&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: &quot;#99ff99&quot;,
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		});
	
	//燃料給油所データ読み込み
	d3.json('point.geojson', function(json){
		//cellを表示するグループを作成
		var cellgroup = svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;cells&quot;); 

		var pointdata = json.features;
		var positions = [];

		pointdata.forEach(function(d) {		
			positions.push(projection(d.geometry.coordinates)); //位置情報→ピクセル
		});
		
		//ボロノイ変換関数
		var polygons = d3.geom.voronoi(positions); 
		
		//ポイントデータをバインディング
		var cell = cellgroup.selectAll(&quot;g&quot;)
			.data(pointdata)
			.enter()
			.append(&quot;svg:g&quot;);
		
		//境界表示
		cell.append(&quot;svg:path&quot;)
			  .attr(&quot;class&quot;, &quot;cell&quot;)
			  .attr({
				&quot;d&quot;:function(d, i) { return &quot;M&quot; + polygons[i].join(&quot;L&quot;) + &quot;Z&quot;},
				stroke:&quot;#43676b&quot;,
				fill:&quot;none&quot;
			})
		
		//母点表示
		cell.append(&quot;svg:circle&quot;)
		  .attr({
			  &quot;cx&quot;:function(d, i) { return positions[i][0]; },
			  &quot;cy&quot;:function(d, i) { return positions[i][1]; },
			  &quot;r&quot;:2,
			  fill:&quot;#1f3134&quot;
		  });
	});
});
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2817</wp:post_id>
		<wp:post_date>2013-05-06 17:02:11</wp:post_date>
		<wp:post_date_gmt>2013-05-06 08:02:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ab%e3%83%9c%e3%83%ad%e3%83%8e%e3%82%a4%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2818]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】Google Map上にボロノイ図を描く</title>
		<link>http://shimz.me/blog/d3-js/2819</link>
		<pubDate>Mon, 06 May 2013 23:59:04 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2819</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo11/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/gmapVoronoi.jpg" alt="D3.js GoogleMap Voronoi Diagram" width="590" height="390" class="alignnone size-full wp-image-2821" /></a>

<a href="http://shimz.me/blog/d3-js/2817">前の記事</a>では、ガソリンスタンドの位置情報を用いて高崎市の地図上にボロノイ図を表示しました。
今回は、同じデータを使ってGoogle Map上にボロノイ図を描き、パン／ズームにも対応してみました。

<a href="http://shimz.me/example/d3js/geo_example/geo11/">example</a>

D3.jsを使えば地図上にボロノイ図を書くのも比較的簡単に行えます。
医療機関データなどを使ってボロノイ図を描いてみても面白いかもしれません。

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />
[javascript]

d3.json('point.geojson', function(pointjson){
	main(pointjson); 
});

function main(pointjson) {
        
	//Google Map 初期化
	var map = new google.maps.Map(document.getElementById('map'), {
		zoom: 11,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		center: new google.maps.LatLng(36.322356, 139.013057),       
	});

		
	var overlay = new google.maps.OverlayView(); //OverLayオブジェクトの作成

	//オーバレイ追加
	overlay.onAdd = function () {

		var layer = d3.select(this.getPanes().overlayLayer).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;SvgOverlay&quot;);
		var svg = layer.append(&quot;svg&quot;);
		var svgoverlay = svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;AdminDivisions&quot;);
		var markerOverlay = this;
		var overlayProjection = markerOverlay.getProjection();

		//Google Mapの投影法設定
		var googleMapProjection = function (coordinates) {
			var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
			var pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
			return [pixelCoordinates.x + 4000, pixelCoordinates.y + 4000];
		}
		
			
			
		//再描画時に呼ばれるコールバック    
		overlay.draw = function () {


			//母点位置情報
			var pointdata = pointjson.features;
			
			//ピクセルポジション情報
			var positions = [];

			pointdata.forEach(function(d) {		
				positions.push(googleMapProjection(d.geometry.coordinates)); //位置情報→ピクセル
			});
	
			//ボロノイ変換関数
			var polygons = d3.geom.voronoi(positions);
			
			var pathAttr = {
				&quot;d&quot;:function(d, i) { return &quot;M&quot; + polygons[i].join(&quot;L&quot;) + &quot;Z&quot;},
				stroke:&quot;red&quot;,
				fill:&quot;none&quot;			
			};

			//境界表示
			svgoverlay.selectAll(&quot;path&quot;)
				.data(pointdata)
				.attr(pathAttr)
				.enter()
				.append(&quot;svg:path&quot;)
				.attr(&quot;class&quot;, &quot;cell&quot;)
				.attr(pathAttr)
				
			var circleAttr = {
				    &quot;cx&quot;:function(d, i) { return positions[i][0]; },
				    &quot;cy&quot;:function(d, i) { return positions[i][1]; },
				    &quot;r&quot;:2,
				    fill:&quot;red&quot;			
			}
	
			//母点表示
			svgoverlay.selectAll(&quot;circle&quot;)
				.data(pointdata)
				.attr(circleAttr)
				.enter()
				.append(&quot;svg:circle&quot;)
				.attr(circleAttr);
	  
		};

	};

	//作成したSVGを地図にオーバーレイする
	overlay.setMap(map);
	
		
};
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2819</wp:post_id>
		<wp:post_date>2013-05-07 08:59:04</wp:post_date>
		<wp:post_date_gmt>2013-05-06 23:59:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91google-map%e4%b8%8a%e3%81%ab%e3%83%9c%e3%83%ad%e3%83%8e%e3%82%a4%e5%9b%b3%e3%82%92%e6%8f%8f%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2821]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Excelを買った。参考書も買った。</title>
		<link>http://shimz.me/blog/other/2826</link>
		<pubDate>Thu, 09 May 2013 03:31:58 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2826</guid>
		<description></description>
		<content:encoded><![CDATA[Excel2013、初めて触りましたが……わりと良いですね。
<a href="http://shimz.me/blog/wp-content/uploads/2013/05/Microsoft_Excel_2013_icon.png"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/Microsoft_Excel_2013_icon.png" alt="Microsoft_Excel_2013" width="256" height="256" class="alignnone size-full wp-image-2828" /></a>

仕事ではよく使うけれど、個人的に買ったのは初めてかもしれない。

単に公開されているデータを可視化するだけじゃなく、あるていどデータを分析できるスキルを身に着けたいなと思い、<a href="http://www.r-project.org/">R</a>とか<a href="https://code.google.com/p/pythonxy/">Python(X,y)</a>とかいろいろ検討した結果、「とりあえず、まずはExcelちゃんと使えるようになろう」という結論に至りました。

以下のサイトや書籍を参考に、勉強を始めてみます。


&nbsp;
<h2>参考サイト</h2>
<hr />
<a href="http://office.microsoft.com/ja-jp/support/FX102832586.aspx" target="_blank">Excel 2013 を使う - Office.com</a>
<a href="http://excelstatistics.mathlab.info/index.html" target="_blank">エクセル(Excel)統計解析入門</a>
<a href="http://quality-control.sakura.ne.jp/excel-toukei/excel-toukei-kouza.htm" target="_blank">Excel統計手法　ＷＥＢ講座（ｅ－Learning）</a>

&nbsp;
<h2>参考書</h2>
<hr />
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4785631775&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
基本操作からグラフの作成、統計処理まで一通り学ぶのに良さげだったので購入。

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=toriaezu04b-22&o=9&p=8&l=as1&asins=4274065707&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<a href="http://blog.livedoor.jp/fairypot/archives/51594779.html">"Googleの中の人"お墨付き</a>の統計入門書！


&nbsp;
<h2>動画</h2>
<hr />
<iframe width="480" height="360" src="http://www.youtube.com/embed/4YG_WWZYqUs" frameborder="0" allowfullscreen></iframe>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2826</wp:post_id>
		<wp:post_date>2013-05-09 12:31:58</wp:post_date>
		<wp:post_date_gmt>2013-05-09 03:31:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>excel%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%80%82%e5%8f%82%e8%80%83%e8%b3%87%e6%96%99%e3%82%82%e8%b2%b7%e3%81%a3%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2828]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】OpenLayers上にD3.jsで作成したSVGをオーバーレイ</title>
		<link>http://shimz.me/blog/d3-js/2831</link>
		<pubDate>Fri, 10 May 2013 03:04:05 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2831</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo12/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/d3.jsopenlayers.jpg" alt="D3.js Openlayers" width="590" height="306" class="alignnone size-full wp-image-2833" /></a>

出来た……けど、理解できてない orz
<a href="http://openlayers.org/">OpenLayers</a>ライブラリを使って<a href="http://www.openstreetmap.org/">Open Street Map</a>を表示し、その上にD3.jsで作成したSVG(グンマー)を表示しています。
正直、「表示できた！」というだけでちゃんと理解できていません。
特にextentの値が何を示しているのかが……分からん。


<a href="http://shimz.me/example/d3js/geo_example/geo12/">example</a>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />
[javascript]
d3.json(&quot;gunma.geojson&quot;, function (geoData) {
    main(geoData);
});


function main(geoData) {

    //表示する地図の最大空間範囲と地図スクロール範囲？
    var extent = [
        -20037508.34, -20037508.34,
        20037508.34, 20037508.34
    ];

    
   
    
    var map = new OpenLayers.Map('map', {
        numZoomLevels: 20,
//      projection: new OpenLayers.Projection(&quot;EPSG:900913&quot;), // 地図の投影(真球メルカトル投影)
        projection: new OpenLayers.Projection(&quot;EPSG:3857&quot;), // 地図の投影(真球メルカトル投影)
        displayProjection: new OpenLayers.Projection(&quot;EPSG: 4326&quot;),  // 等経緯度投影を定義
        maxExtent: extent, //最大の空間範囲
        restrictedExtent: extent,　//地図スクロール範囲
        controls: [
            new OpenLayers.Control.Navigation(),
            new OpenLayers.Control.Zoom(),
            new OpenLayers.Control.ScaleLine(),
            new OpenLayers.Control.LayerSwitcher(),
            new OpenLayers.Control.MousePosition(),
            new OpenLayers.Control.KeyboardDefaults()
        ]
    });


    //open streat map レイヤを指定
    var ol_wms = new OpenLayers.Layer.OSM();

    //OpenStreetMapレイヤーを追加
    map.addLayers([ol_wms]);

    //初期位置指定
    map.setCenter(new OpenLayers.LonLat(139.0032936, 36.3219088).transform(&quot;EPSG:4326&quot;, &quot;EPSG:900913&quot;), 8);

    //svgを表示するオーバーレイオブジェクトを作成
    var overlay = new OpenLayers.Layer.Vector(&quot;states&quot;);

    // 地図にオーバーレイを追加する際のコンテナを作成
    overlay.afterAdd = function () {
        //ベクターレイヤーのdivエレメントを取得
        var div = d3.selectAll(&quot;#&quot; + overlay.div.id);
        //既存のsvgレイヤを削除して新たなsvg要素を追加
        div.selectAll(&quot;svg&quot;).remove();
        var svg = div.append(&quot;svg&quot;);

        g = svg.append(&quot;g&quot;);

         //地図の左下と右上の緯度経度取得
        var bounds = d3.geo.bounds(geoData);

         //緯度経度-&gt;パスジェネレーター関数作成
        var path = d3.geo.path().projection(project);

        //geojsonデータからpathを作成
        var feature = g.selectAll(&quot;path&quot;)
                .data(geoData.features)
                .enter()
                .append(&quot;path&quot;);
                
        //MapにMove Event登録
        map.events.register(&quot;moveend&quot;, map, update); 

        update();

        function update() {
            var bottomLeft = project(bounds[0]); //地図左下緯度経度→ピクセル
            var topRight = project(bounds[1]);//地図右上緯度経度→ピクセル
            console.log(topRight)

            //svgのサイズを更新
            svg.attr(&quot;width&quot;, topRight[0] - bottomLeft[0])
                .attr(&quot;height&quot;, bottomLeft[1] - topRight[1])
                .style(&quot;margin-left&quot;, bottomLeft[0] + &quot;px&quot;)
                .style(&quot;margin-top&quot;, topRight[1] + &quot;px&quot;);

            g.attr(&quot;transform&quot;, &quot;translate(&quot; + -bottomLeft[0] + &quot;,&quot; + -topRight[1] + &quot;)&quot;);

            //描画したsvgのアップデート
            feature.attr(&quot;d&quot;, path);
        }

        //位置情報→ピクセル変換
        function project(x) {
                var point = map.getViewPortPxFromLonLat(new OpenLayers.LonLat(x[0], x[1]).transform(&quot;EPSG:4326&quot;, &quot;EPSG:900913&quot;));
                return [point.x, point.y];
        }
    }

    map.addLayer(overlay);
 
}

[/javascript]

<a href="http://shimz.me/example/d3js/geo_example/geo12/">example</a>


【追記】
「EPSG:900913」はなし崩しに使われていて正式には「EPSG:3857」を使った方がよいということを教えていただいたので修正。
（調べてみたところ、<a href="http://wiki.openstreetmap.org/wiki/EPSG:3857#Codes">いろいろな経緯</a>を経て「EPSG:3857」に収まったようです)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2831</wp:post_id>
		<wp:post_date>2013-05-10 12:04:05</wp:post_date>
		<wp:post_date_gmt>2013-05-10 03:04:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91openlayers%e4%b8%8a%e3%81%abd3-js%e3%81%a7%e4%bd%9c%e6%88%90%e3%81%97%e3%81%9fsvg%e3%82%92%e3%82%aa%e3%83%bc%e3%83%90%e3%83%bc%e3%83%ac%e3%82%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<category domain="category" nicename="openlayers"><![CDATA[OpenLayers]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2833]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>女性手帳と議事次第</title>
		<link>http://shimz.me/blog/other/2834</link>
		<pubDate>Fri, 10 May 2013 09:18:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2834</guid>
		<description></description>
		<content:encoded><![CDATA[最近ちょっとネットで話題になったやつ。

<a href="http://business.nikkeibp.co.jp/article/life/20130509/247789/?top_updt" target="_blank">「女性手帳」というパルプ・フィクション：日経ビジネスオンライン</a>

議事次第が公開されたようなので読んでみました。

<a href="http://www8.cao.go.jp/shoushi/taskforce/k_3/index.html" target="_blank">少子化危機突破タスクフォース（第3回）議事次第 - 内閣府</a>

女性手帳に関する提言は、今回会議に初めて参加した「妊娠・出産検討サブチーム」が行ったプレゼンの中の１案だったようです。
簡単に内容を引用すると、

<blockquote>○ 少子化対策は、これまでは、「子育て支援」と「働き方改革」が中心的な取り組みであり、『子ども・子育て関連３法』の成立など一定程度の成果。
○ 一方、出生率への影響が大きい「結婚・妊娠・出産」に係る課題については、取り組みが弱い。
（中略）
我が国の国民は、卵子数の変化など妊娠可能性や妊娠適齢期等に関する知識度合いは、先進国の中で最下位、新興国を含めても低位との調査結果がある。</blockquote>

という問題意識があって、その対案として挙げられたのが「１．『生命（いのち）と女性の手帳（愛称別途検討）』の作成・配布等」ということらしいです。ちなみに、ここで挙げられている「卵子数の変化など妊娠可能性や妊娠適齢期等に関する知識度合いは、先進国の中で最下位、新興国を含めても低位」というデータの出典はHuman Reproductionで、これみると確かに低いみたいですね。

要するに「妊娠・出産検討サブチーム」としては「少子化対策というと働く女性への支援とか、そういう話が多いけれど妊娠・出産に関する知識をより知ってもらうのも大事なことだと思います」という提案だったようです。（「子育て支援」と「働き方改革」で一定程の成果がでているかは微妙な気がしますが）

また主張の中では、「男性や企業の経営者、自治体の首長などに妊娠・出産に関する知識を知ってもらって意識改革してもらう必要がある」とも言っているので全体としては、別に女性に限った話でもないようです。

どうも、ニュース記事から感じた内容とはギャップがあるような気がするんですが。

たしかに、「手帳って方法はどうかな？」とも思うし、他メンバーの資料にも突っ込みどころがないわけではないんですが……女性手帳の話題ってこの会議の中のほんの一部の事でしかないわけで、<strong>これってマスコミが「ここだけ取りあげれば読者の反応が良いだろう」と記事にしたら案の定燃え上がった</strong>という、いつものパターンなんじゃないでしょうか？

なんとなくenchantMOONの<a href="http://d.hatena.ne.jp/shi3z/20130509">「Dynabookを超えるコンピュータを作れるのは僕たちだけ</a>」記事と同じながれを感じずにはいられません。

ともあれ、議事録（というより資料？）が公開されているので、興味のある方は一次情報を読んでみてはいかがでしょう。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2834</wp:post_id>
		<wp:post_date>2013-05-10 18:18:13</wp:post_date>
		<wp:post_date_gmt>2013-05-10 09:18:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a5%b3%e6%80%a7%e6%89%8b%e5%b8%b3%e3%81%a8%e8%ad%b0%e4%ba%8b%e6%ac%a1%e7%ac%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Mapを使って水彩画風／モノクロームの地図を表示する</title>
		<link>http://shimz.me/blog/google-map-api/2838</link>
		<pubDate>Tue, 14 May 2013 09:09:22 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2838</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/stamen/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/test000013.jpg" alt="Google Map 水彩画風" width="590" height="339" class="alignnone size-full wp-image-2839" /></a>

クリエイティブ・コモンズライセンスで配布されているマップタイルを使用して水彩画風の地図を表示します。

配布元は以下。
<a href="http://maps.stamen.com/">http://maps.stamen.com/</a>

Google Map API以外の<a href="http://openlayers.org/">OpenLayers</a>や<a href="http://leafletjs.com/">Leaflet</a>などの地図表示ライブラリでも使用することができます。


&nbsp;
&nbsp;
<h2>DEMO</h2>
<hr />

<strong>水彩画風</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/stamen/index.html"></iframe>
<a href="http://shimz.me/example/gmapv3/stamen/index.html" target="_blank">Full Size</a>

<strong>モノクロ</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/stamen/index2.html"></iframe>
<a href="http://shimz.me/example/gmapv3/stamen/index2.html" target="_blank">Full Size</a>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr />
Google Map APIでの水彩画風地図表示サンプル
[html]
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Google Maps モノクロ&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.stamen.com/js/tile.stamen.js?v1.2.1&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	function initialize() {
            var layer = &quot;watercolor&quot;; //レイヤー指定　watercolor:水彩画風、toner:モノクロ
            var map = new google.maps.Map(document.getElementById(&quot;map_canvas&quot;), {
                center: new google.maps.LatLng(36.322356, 139.013057),
                zoom: 5,
                mapTypeId: layer,
                mapTypeControlOptions: {
                    mapTypeIds: [layer]
                }
            });
            map.mapTypes.set(layer, new google.maps.StamenMapType(layer));
	}
        

	google.maps.event.addDomListener(window, &quot;load&quot;, initialize);
&lt;/script&gt;
&lt;style type=&quot;text/css&quot;&gt;
html, body{
    margin: 0px;
    padding: 0px;
}
html, body, #map_canvas {
	width: 100%;
	height: 100%;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div id=&quot;map_canvas&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2838</wp:post_id>
		<wp:post_date>2013-05-14 18:09:22</wp:post_date>
		<wp:post_date_gmt>2013-05-14 09:09:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-map%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e6%b0%b4%e5%bd%a9%e7%94%bb%e9%a2%a8%ef%bc%8f%e3%83%a2%e3%83%8e%e3%82%af%e3%83%ad%e3%83%bc%e3%83%a0%e3%81%ae%e5%9c%b0%e5%9b%b3%e3%82%92%e8%a1%a8%e7%a4%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2839]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]便利な配列操作ライブラリVodevil.js</title>
		<link>http://shimz.me/blog/node-js/2840</link>
		<pubDate>Thu, 16 May 2013 04:25:53 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2840</guid>
		<description></description>
		<content:encoded><![CDATA[配列の結合や切り出しなどが簡単に行えます。
<a href="http://vodevil.herokuapp.com/" target="_blank">Vodevil node.js module</a>

<h2>インストール</h2>
<hr />
[shell]
$ npm install vodevil
[/shell]

&nbsp;
<h2>サンプル</h2>
<hr />
[javascript]
var vodevil = require('vodevil');

//vodevil.range 配列を生成する１
vodevil.range( 5 ) //=&gt; [0, 1, 2, 3, 4, 5]
vodevil.range( 2, 5 ) //=&gt; [2, 3, 4, 5]
vodevil.range( '..5' ) //=&gt; [0, 1, 2, 3, 4, 5]
vodevil.range( '2..5' ) //=&gt; [2, 3, 4, 5]
vodevil.range( 'b..f' ) //=&gt; ['b', 'c', 'd', 'e', 'f']
vodevil.range( '..c' ) //=&gt; ['a', 'b', 'c']
vodevil.range( 'A..C' ) //=&gt; ['A', 'B', 'C']

//vodevil.bang 配列を生成する２
vodevil.bang( '', 2 ) //=&gt; ['', '']
vodevil.bang( 'doug', 5 ) //=&gt; ['doug', 'doug', 'doug', 'doug', 'doug']
vodevil.bang( null, 2 ) //=&gt; [null, null]
vodevil.bang( undefined, 2 ) //=&gt; [undefined, undefined]

//vodevil.clean nullやundefined、他特定の値を配列から消去する
vodevil.clean( [undefined, 'doug', 'john'] ) //=&gt; ['doug', 'john']
vodevil.clean( [null, 'doug', 'john'] ) //=&gt; ['doug', 'john']
vodevil.clean( [ 100, 'doug', 'john'], 100 ) //=&gt; ['doug', 'john']

//vodevil.union 配列を結合する
vodevil.union( [1, 2, 3], [4, 5, 6] ) //=&gt; [1, 2, 3, 4, 5, 6]
vodevil.union( 'ab', ['c', 'd'] ) //=&gt; ['a', 'b', 'c', 'd']
vodevil.union( ['a', 'b'], 'cd' ) //=&gt; ['a', 'b', 'c', 'd']

//vodevil.intersect 配列に反復処理を行う
vodevil.intersect( [1, 2, 3, 4, 5], function ( x ) { return x*2; }) //=&gt; [2, 4, 6, 8, 10]
vodevil.intersect( [1, 2, 3], function ( item, index, array ) { console.log( x ); } ) //=&gt; []
vodevil.intersect( [1, 2, 3, 4, 5], function ( x ) { return x 2; }, ':2' ) //=&gt; [2, 4, 6]
vodevil.intersect( [1, 2, 3, 4, 5, 6], function ( x ) { return x*2 }, '2::' ) //=&gt; [6, 4, 2]

//vodevil.sail 配列を切り出す
vodevil.sail( [1, 2, 3, 4, 5], '2:' ) //=&gt; [3, 4, 5]
vodevil.sail( [1, 2, 3, 4, 5], '2::' ) //=&gt; [3, 2, 1]
vodevil.sail( [1, 2, 3, 4, 5, 6], '2:3' ) //=&gt; [3, 4]

//vodevil.flush 入れ子になった値を平坦にする
vodevil.flush( [1, [2, [3, [4, [5, [6, [7, [8, [9, [0]]]]]]]]]] ) //=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

[/javascript]

&nbsp;
&nbsp;
<h2>クライアントサイド(ブラウザ)で使用</h2>
<hr />
ブラウザでもvodevil.jsをscriptタグで読み込めば使用することができます。
(vodevil.setメソッドは使用できません)

vodevil.jsソースコードの以下(最後の行)をコメントアウトする
[javascript]
//exports.core = Vodevil;
[/javascript]
後は普通に読み込むだけ。
[html]
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;script src=&quot;vodevil.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
console.log( Vodevil.range( '..5' ) );

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2840</wp:post_id>
		<wp:post_date>2013-05-16 13:25:53</wp:post_date>
		<wp:post_date_gmt>2013-05-16 04:25:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js%e4%be%bf%e5%88%a9%e3%81%aa%e9%85%8d%e5%88%97%e6%93%8d%e4%bd%9c%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aavodevil-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Mapの新しいビジュアルをAPIで使用する</title>
		<link>http://shimz.me/blog/google-map-api/2841</link>
		<pubDate>Thu, 16 May 2013 04:54:56 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2841</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/wp-content/uploads/2013/05/new.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/new.jpg" alt="new" width="300" height="319" class="aligncenter size-full wp-image-2842" /></a>

Google Map APIで新しい地図の外観を指定できるようになりました。

<strong>旧ビジュアル</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/01/"></iframe>
<a href="http://shimz.me/example/gmapv3/01/" target="_blank">Full Size</a>

<strong>新ビジュアル</strong>
<iframe width="100%" height="300" src="http://shimz.me/example/gmapv3/new_visual/"></iframe>
<a href="http://shimz.me/example/gmapv3/new_visual/" target="_blank">Full Size</a>


新しいビジュアルを使いたいときはURLパラメーターに「&visual_refresh=true」つけてGoogle Map Apiライブラリを読みこみ「google.maps.visualRefresh=true」を実行します。

&nbsp;
&nbsp;
<h2>サンプル</h2>
<hr />
[html]
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Google Maps API New visual&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://maps.googleapis.com/maps/api/js?sensor=false&amp;visual_refresh=true&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	function initialize() {
		google.maps.visualRefresh=true;
		var mapDiv = document.getElementById(&quot;map_canvas&quot;);
		var mapCanvas = new google.maps.Map(mapDiv, {
			center : new google.maps.LatLng(36.322356, 139.013057),
			zoom : 15,
			mapTypeId : google.maps.MapTypeId.ROADMAP
		});
	}
	google.maps.event.addDomListener(window, &quot;load&quot;, initialize);
&lt;/script&gt;
&lt;style type=&quot;text/css&quot;&gt;
html, body{
    margin: 0px;
    padding: 0px;
}
html, body, #map_canvas {
	width: 100%;
	height: 100%;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;div id=&quot;map_canvas&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
[/html]


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2841</wp:post_id>
		<wp:post_date>2013-05-16 13:54:56</wp:post_date>
		<wp:post_date_gmt>2013-05-16 04:54:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-map%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e5%a4%96%e8%a6%b3%e3%82%92api%e3%81%a7%e4%bd%bf%e7%94%a8%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2842]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Javascript]関数のカリー化と部分適用</title>
		<link>http://shimz.me/blog/javascript/2843</link>
		<pubDate>Sat, 18 May 2013 01:29:46 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2843</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/05/curryphoto.jpg" alt="curryphoto" width="590" height="393" class="aligncenter size-full wp-image-2844" />

<a href="http://matome.naver.jp/odai/2133495802300247001" target="_blank">関数のカリー化 (currying)と部分適用 - NAVER まとめ</a>

関数の部分適用とカリー化の違いが、なかなか理解できずにいたのですが非常にわかりやすく解説されていた記事を見つけました。

<a href="http://benalman.com/news/2010/09/partial-application-in-javascript/" target="_blank">Ben Alman » Partial application in JavaScript?</a>

サンプルコードが分かりやすくてたすかります。
しかし、動作の違いは分かったもののまだ言葉ではうまく説明できません。
ちゃんと理解するのはなかな難しいですね。

<strong>サンプル</strong>
<script type="text/javascript" src="http://jsdo.it/blogparts/bayf/js?width=465&height=496&view=javascript"></script>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2843</wp:post_id>
		<wp:post_date>2013-05-18 10:29:46</wp:post_date>
		<wp:post_date_gmt>2013-05-18 01:29:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%ae%e3%82%ab%e3%83%aa%e3%83%bc%e5%8c%96%e3%81%a8%e9%96%a2%e6%95%b0%e3%81%ae%e9%83%a8%e5%88%86%e9%81%a9%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2844]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>d3.js Living Code</title>
		<link>http://shimz.me/blog/d3-js/2846</link>
		<pubDate>Mon, 20 May 2013 02:13:16 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2846</guid>
		<description></description>
		<content:encoded><![CDATA[週末にちょっと作ってみました。
<a href="http://shimz.me/example/d3js/LivingCode/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/livingcode.png" alt="D3 living code" width="590" height="380" class="aligncenter size-full wp-image-2848" /></a>

昔懐かしいコンソール画面風のcanvasにD3.jsのコードが自動的に記述され、一行ごとに実行されていきます。
IE ver10と最新版のchrome、Firefoxで動作確認しています。

<a href="http://shimz.me/example/d3js/LivingCode/">example</a>

参考
<a href="http://js1k.com/2013-spring/details/1387">Living Code</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2846</wp:post_id>
		<wp:post_date>2013-05-20 11:13:16</wp:post_date>
		<wp:post_date_gmt>2013-05-20 02:13:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js-living-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2848]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>カリー化関数を利用して非同期処理を整理する</title>
		<link>http://shimz.me/blog/javascript/2851</link>
		<pubDate>Wed, 22 May 2013 11:04:03 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2851</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/blog/javascript/2843">カリー化関数</a>を使うと、複雑になりがちな非同期処理のコールバックを比較的シンプルに記述できます。
[javascript]
//非同期処理
var  GetJSON = function(fn) {
	$.ajax({
		url:'json.php',
		dataType:'json',
		success:function(json){
		  fn(json);
		}                
	});
}

//束縛
var getJson =  curry(GetJSON ,function(d){
	console.log(d)
});

//実行
getJson();

[/javascript]

&nbsp;
&nbsp;
<h2>サンプル１</h2>
<hr />
<script type="text/javascript" src="http://jsdo.it/blogparts/7gbo/js?width=465&height=496&view=javascript"></script>

&nbsp;
&nbsp;
<h2>サンプル２</h2>
<hr />
Google Map Apiを使っての地図作成では、
<ul>
<li>geocodeで緯度経度取得→地図移動→XHR→地図上にマーカー表示</li>
<li>位置情報取得→地図移動→XHR→地図上にマーカー表示</li>
</ul>
上記の処理をよく行いますが、「geocode」「位置情報取得」「XHRでのデータの取得」などは基本"非同期"の処理のためコールバックが入れ子になって複雑になりがちです。
そんなときは、curryを使って非同期処理のコールバックをまとめるとシンプルに整理できたりします。

実際にsampleを作ってみました。

位置情報を取得して周辺500m内の車椅子可のお店を表示する地図です。（位置情報が使えない場合は住所で検索してください）
<a href="http://shimz.me/example/gmapv3/gurunavi/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/gurunavi.jpg" alt="gurunavi" width="590" height="327" class="aligncenter size-full wp-image-2852" /></a>

<a href="http://shimz.me/example/gmapv3/gurunavi/index.html">sample</a>

↓ curryを使うことで非同期処理をこんな感じに書けます。詳しい内容はリンク先のソースを参照してください。
[javascript]
//json取得時のコールバックを束縛
var getJson =  curry(GetJSON ,function(d){
	Markers.setMember(getLatLong(d), getContent(d));　//マーカーをセット
}) ;

//geocode 検索時のコールバックを束縛
var searchAddress = curry(SearchAddress,  function(d){
	panTo(d);                      //地図移動
	Markers.deleteAllMarkers();    //マーカーを全削除  
	getJson([d.lat(), d.lng()]) ;  //json取得
});    

//位置情報取得時のコールバックを束縛
var getCurrentPosition = curry(GetCurrentPosition, function(d){
	panTo(d);                     //地図移動
	Markers.deleteAllMarkers();   //マーカーを全削除  
	getJson([d.lat(), d.lng()]) ; //json取得
});

 //住所検索ボタン、イベント設定  
$('#search').click(function(){
	searchAddress(document.getElementById('address').value);　//geocodeで検索
});

//現在位置取得ボタン、イベント設定
$('#getCurrentPosition').click(function(){
	getCurrentPosition(); //位置情報取得
});
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2851</wp:post_id>
		<wp:post_date>2013-05-22 20:04:03</wp:post_date>
		<wp:post_date_gmt>2013-05-22 11:04:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%ab%e3%83%aa%e3%83%bc%e5%8c%96%e9%96%a2%e6%95%b0%e3%82%92%e5%88%a9%e7%94%a8%e3%81%97%e3%81%a6%e9%9d%9e%e5%90%8c%e6%9c%9f%e5%87%a6%e7%90%86%e3%82%92%e6%95%b4%e7%90%86%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2852]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>住所ドリルダウン検索(ADDRAjax)ライブラリとGoogle Maps APIをカリーで。</title>
		<link>http://shimz.me/blog/javascript/2854</link>
		<pubDate>Fri, 24 May 2013 10:39:05 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2854</guid>
		<description></description>
		<content:encoded><![CDATA[おいしいカリーのつくりかた勉強中。

<a href="http://shimz.me/example/gmapv3/ADDRAjaxGmap/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/addrajxGmap.jpg" alt="addrajxGmap" width="589" height="365" class="border aligncenter size-full wp-image-2855" /></a>

Google Geocodeは住所を与えればだいたい正確な緯度経度を返してくれるのですが、たまに微妙にズレている時もあって、入力画面等で正確な緯度経度を入力してほしい時に困ることがあります。
自分の場合、そんな時は、以下のようなUIを作ることが多いです。

<ul>	<li>住所をドリルダウンで選択してもらう。</li>
	<li>位置がずれていたらGoogle Mapのマーカーをドラッグして微調整してもらう。</li>
</ul>

しかし、これも<a href="http://shimz.me/blog/javascript/2851">昨日の記事</a>と同じで非同期処理がからむためコードが複雑になりがちだったので、カリー化をつかってなるべく宣言的に書けるよう整理してみました。

<a href="http://shimz.me/example/gmapv3/ADDRAjaxGmap/index.html">example</a>
Github:<a href="https://github.com/shimizu/ADDRAjaxGmap">ADDRAjaxGmap</a>

「カリー化や関数合成って、実際のコーディングでどうやって使っていったらいいのか？」と疑問に思っていたのですが、多少使い方が分かってきたような気がします。





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2854</wp:post_id>
		<wp:post_date>2013-05-24 19:39:05</wp:post_date>
		<wp:post_date_gmt>2013-05-24 10:39:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%8f%e6%89%80%e3%83%89%e3%83%aa%e3%83%ab%e3%83%80%e3%82%a6%e3%83%b3%e6%a4%9c%e7%b4%a2addrajax%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%81%a8google-maps-api%e3%82%92%e3%82%ab%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2855]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最近気になっているもの（Javascriptで関数型プログラミング等)まとめ</title>
		<link>http://shimz.me/blog/javascript/2856</link>
		<pubDate>Tue, 28 May 2013 03:21:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2856</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/05/book20130528.jpg" alt="book20130528" width="590" height="443" class="aligncenter size-full wp-image-2857" />

最近ちょっと仕事モードで、仕事と関係ない事をやる余裕があまりありません。記事も手抜きモードです。

以下、最近気になっているものをまとめてみました。

<strong>■ フレームワーク</strong>
<a href="http://knockoutjs.com/">Knockout.js</a>

<a href="http://backbonejs.org/">Backbone.js</a>とか<a href="http://angularjs.org/">Angular.js</a>とかいろいろある中で、Knockout.jsがわりと軽くて自分の好みに近いようなので、とりあえずコレを今後勉強しようかなと。(まぁ、ぶっちゃけ自分が関わる範囲ではjQueryで十分だったりもしますが orz)


<strong>■ テストフレームワーク</strong>
<a href="http://pivotal.github.io/jasmine/">jasmine</a>
なるべく個人的なプロジェクトでもテスト書く習慣を付けたいのでテストフレームワークを調べてます。とりあえず、調べた中ではjasmineが使い勝手が良さそうでした。下記記事によるとKnockout.jsとの相性もいいらしいので、一石二鳥っぽいし。
<a href="http://www.softfinity.com/blog/the-battle-of-modern-javascript-frameworks-part-ii-knockout-js/">The Battle of Modern Javascript Frameworks: Part II – Knockout.js</a>

<strong>■ 関数型プログラミング in Javascript</strong>
<a href="https://gist.github.com/ympbyc/5564146">Functional JavaScript</a>
<a href="http://slid.es/gsklee/functional-programming-in-5-minutes">Functional Programming in 5 Minutes</a>
<a href="http://cjohansen.no/talks/2012/sdc-functional">Pure, functional JavaScript</a>
<a href="http://msdn.microsoft.com/en-us/magazine/gg575560.aspx">Partial Application in JavaScript</a>

多分、「大規模なフロントエンドを複数人で開発する」とかだとまた違うのかもしれませんが、自分のようにほぼ一人で開発することが多い場合には関数型プログラミングの手法を取り入れられれば生産性がかなり向上できるのではないか？　と思い最近学習の必要性を感じています。
あとは……とりあえず調べていて面白いので。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2856</wp:post_id>
		<wp:post_date>2013-05-28 12:21:10</wp:post_date>
		<wp:post_date_gmt>2013-05-28 03:21:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9c%80%e8%bf%91%e6%b0%97%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%82%8b%e3%82%82%e3%81%ae%ef%bc%88javascript%e3%81%a7%e9%96%a2%e6%95%b0%e5%9e%8b%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmark"><![CDATA[bookmark]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2857]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プログラミング学習の新しいかたち？！チャットをしながらライブコーディングや共同プログラミングができるCodePen Pro</title>
		<link>http://shimz.me/blog/web/2860</link>
		<pubDate>Fri, 31 May 2013 00:53:08 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2860</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codepen.io/"><img src="http://shimz.me/blog/wp-content/uploads/2013/05/codepen.jpg" alt="codepen" width="590" height="418" class="aligncenter size-full wp-image-2861" /></a>

CodePenはCSS+HTML+JavaScriptで作成したコードを公開し共有(Fork)できるサービスです。
日本でいうところの<a href="http://jsdo.it/">jsdo.it</a>に似たサイトですね。
Githubのアカウントでログインし、作成したコードをGithubにアップロードすることができ、SlimやSass、CoffeeScriptなどを利用してコーディングすることもできるのでフロントエンドの開発環境としても便利なサービスです。
日々、海外のエンジニアの凄い作品がアップロードされていて見ているだけで勉強になり楽しめます。

基本、無料で使うことができるCodePenですが、<strong>月額9ドル</strong>の有料版「<a href="http://codepen.io/pro/">Pro</a>」に申し込むと「PROFESSOR MODE」や「COLLAB MODE」などを利用することができます。
(Pro版では、shareメニューに多くの機能が追加されます)
<img src="http://shimz.me/blog/wp-content/uploads/2013/05/codepen1.jpg" alt="codepen1" width="549" height="462" class="size-full wp-image-2862" />



&nbsp;
&nbsp;
<h2>PROFESSOR MODE</h2>
<hr></hr>
ライブコーディングを配信できる機能です。
コードを入力すると同じ画面を見ている他ユーザーのブラウザに、入力した内容や出力結果がリアルタイムに反映されます。
(入力画面のタブの切換えや読み込むライブラリの設定などの操作もリアルタイムで反映されるので、受信側からすると本当に自動的にコードが書き込まれて行くように見えます）

<img src="http://shimz.me/blog/wp-content/uploads/2013/05/codepen2-th.jpg" alt="codepen2-th" width="590" height="319" class="size-full wp-image-2864" />

「PROFESSOR MODE」はライブコーディングを配信するだけですが、「COLLAB MODE」では複数人で同時にコードを編集することができます。
これらの機能を使えば、リモートでプログラミングの授業をおこなったり、離れた場所にいるもの同士でもペアプログラミングなどが可能になります。
詳しいに人に「ちょっと、ここのところが解らないんだけど？」とか「もっと良い書き方が無いかな？」と質問するのに便利ですし、オンライン上で勉強会のようなことも出来るかもしれません。
利用者が増えれば、<a href="http://dotinstall.com/">ドットインストール</a>などの動画コンテンツとはまた違ったプログラミング学習の助けになるのではないかと期待しています。


<iframe width="560" height="315" src="http://www.youtube.com/embed/oRHlvtvfILY" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2860</wp:post_id>
		<wp:post_date>2013-05-31 09:53:08</wp:post_date>
		<wp:post_date_gmt>2013-05-31 00:53:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e5%ad%a6%e7%bf%92%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e3%81%8b%e3%81%9f%e3%81%a1%ef%bc%9f%ef%bc%81%e3%83%81%e3%83%a3%e3%83%83%e3%83%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2861]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_author_message</wp:meta_key>
			<wp:meta_value><![CDATA[コラボしたい。]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> [GMaps API v3] geometryライブラリを使って距離や面積を測る。</title>
		<link>http://shimz.me/blog/map/2865</link>
		<pubDate>Sat, 01 Jun 2013 09:25:28 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2865</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/gmapv3/geometry/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/Gmap_geometry.jpg" alt="Gmap_geometry" width="590" height="355" class="alignnone size-full wp-image-2866" /></a>

<a href="http://shimz.me/example/gmapv3/geometry/">example</a>

Google Maps APIのgeometryライブラリを使用すると、地図上の地点間の距離や面積を簡単に取得することができます。


&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
geometryライブラリを使用する際はGoogle Maps APIの読み込み時に「libraries=geometry」を付けて読み込みます。
[html]
&lt;script src=&quot;http://maps.googleapis.com/maps/api/js?v=3.6&amp;sensor=false&amp;libraries=geometry&quot;&gt;&lt;/script&gt;
[/html]

[javascript]
google.maps.event.addDomListener(window, &quot;load&quot;, initialize);


function initialize() {
    google.maps.visualRefresh=true;　//Google map新スタイルを使用
    
    //Mapオブジェクトを作成
    var mapDiv = document.getElementById(&quot;map_canvas&quot;);
    var mapObj = new google.maps.Map(mapDiv, {
        center : new google.maps.LatLng(36.322356, 139.013057),
        zoom : 15,
        mapTypeId : google.maps.MapTypeId.ROADMAP,
        draggableCursor: &quot;crosshair&quot; 
    });

    // マーカー・ライン・ポリゴン情報を保管するオブジェクト
    var measure = {
        mvcLine: new google.maps.MVCArray(),
        mvcPolygon: new google.maps.MVCArray(),
        mvcMarkers: new google.maps.MVCArray(),
        line: null,
        polygon: null
    };

    //地図にクリックイベントを設定
    google.maps.event.addListener(mapObj, &quot;click&quot;, function(evt) {
            //地図クリック時にマーカー、ライン、ポリゴンを追加
            measureAdd(evt.latLng);
    });


    //マーカー、ライン、ポリゴンを追加する
    function measureAdd(latLng) {
        //新規マーカー作成
        var marker = new google.maps.Marker({
            map: mapObj,
            position: latLng,
            draggable: true,
            raiseOnDrag: false,
            title: &quot;ドラッグで移動できます&quot;
        });

        //ライン情報を追加
        measure.mvcLine.push(latLng);
        //ポリゴン情報を追加
        measure.mvcPolygon.push(latLng);
        //マーカー情報を追加
        measure.mvcMarkers.push(marker);

        //ラインの頂点の数を更新
        var latLngIndex = measure.mvcLine.getLength() - 1;

        //マーカードラッグイベント設定、ドラッグされたらライン情報・ポリゴン情報を更新する
        google.maps.event.addListener(marker, &quot;drag&quot;, function(evt) {
                measure.mvcLine.setAt(latLngIndex, evt.latLng);
                measure.mvcPolygon.setAt(latLngIndex, evt.latLng);
        });

        //マーカードラッグ終了後イベント設定、マーカーのドラッグ・移動が終わったら距離・面積の計算を行う
        google.maps.event.addListener(marker, &quot;dragend&quot;, function() {
            if (measure.mvcLine.getLength() &gt; 1) {
                 measureCalc();
            }
        });

        // ラインの頂点が１以上ある場合
        if (measure.mvcLine.getLength() &gt; 1) {
            // ラインが作成されていなければ作成する
            if (!measure.line) {
                measure.line = new google.maps.Polyline({
                    map: mapObj,
                    clickable: false,
                    strokeColor: &quot;#FF0000&quot;,
                    strokeOpacity: 1,
                    strokeWeight: 3,
                    path:measure. mvcLine
                });
            }

            // ラインの頂点が２つ以上ある場合
            if (measure.mvcPolygon.getLength() &gt; 2) {
                // ポリゴンが作成されていなければ作成する
                if (!measure.polygon) {
                    measure.polygon = new google.maps.Polygon({
                        clickable: false,
                        map: mapObj,
                        fillOpacity: 0.25,
                        strokeOpacity: 0,
                        paths: measure.mvcPolygon
                    });
                }
            }
        }

        // ラインの頂点の数が１以上の時は距離と面積を計算する
        if (measure.mvcLine.getLength() &gt; 1) {
            measureCalc();
        }
    }
	
	//距離・面積の計算
    function measureCalc() {
        // geometryライブラリ使用して距離を計算する
        var length = google.maps.geometry.spherical.computeLength(measure.line.getPath());
        jQuery(&quot;#distance&quot;).text(length.toFixed(1))

        // ラインの頂点が２つ以上ある場合は面積を計算する
        if (measure.mvcPolygon.getLength() &gt; 2) {
            var area = google.maps.geometry.spherical.computeArea(measure.polygon.getPath());
            jQuery(&quot;#area&quot;).text(area.toFixed(1));
        }
    }

    //マーカー・ライン・ポリゴンのリセット
    function measureReset() {
        // ポリゴンが作成されているならばnullをセット
        if (measure.polygon) {
            measure.polygon.setMap(null);
            measure.polygon = null;
        }
        // ラインが作成されているならばnullをセット
        if (measure.line) {
            measure.line.setMap(null);
            measure.line = null
        }

        //MVCArraysのライン・ポリゴン情報をクリア
        measure.mvcLine.clear();
        measure.mvcPolygon.clear();

        // マーカーを削除する
        measure.mvcMarkers.forEach(function(elem, index) {
            elem.setMap(null);
        });
        measure.mvcMarkers.clear();

        jQuery(&quot;#distance,#area&quot;).text(0);
    }
    
    //リセットボタンにイベントを設置
    $('#reset').click(measureReset);
}
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2865</wp:post_id>
		<wp:post_date>2013-06-01 18:25:28</wp:post_date>
		<wp:post_date_gmt>2013-06-01 09:25:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmaps-api-v3-geometry%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e8%b7%9d%e9%9b%a2%e3%82%84%e9%9d%a2%e7%a9%8d%e3%82%92%e6%b8%ac%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2866]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebGLを利用して3Dな地図を作成できるライブラリ「Cesium」</title>
		<link>http://shimz.me/blog/map/2867</link>
		<pubDate>Tue, 04 Jun 2013 05:31:48 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2867</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/cesium/02/index.html"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/HelloWorld.png" alt="HelloWorld" width="467" height="452" class="aligncenter size-full wp-image-2868" /></a>


<a href="http://cesium.agi.com/">Cesium</a> はApache 2.0ライセンスの下、オープンソースとして作成された3D地図作成ライブラリです。
ハードウェアアクセラレーショングラフィックスにWebGLを使用しており、クロスプラットフォーム、クロスブラウザで、動的なデータ可視化を行うのに利用することができます。
公式サイトのデモなどを見ると、その性能の高さを感じることができます。
(以下スクリーンショット、公式サイトより）


<img src="http://shimz.me/blog/wp-content/uploads/2013/06/OneApiThreeViews.png" alt="OneApiThreeViews" width="590" height="355" class="alignnone size-full wp-image-2869" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/KoreaLaunch.png" alt="KoreaLaunch" width="590" height="393" class="alignnone size-full wp-image-2870" />

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/Terrain.png" alt="Terrain" width="590" height="393" class="alignnone size-full wp-image-2871" />

ほんの少しだけ触ってみました。

<h2>サンプルコード</h2>
<hr></hr>
ぐんまちゃんを群馬に貼り付けてみました。
[javascript]
//セシウムウィジェットを作成
var widget = new Cesium.CesiumWidget('cesiumContainer');

//イメージレイヤーを取得
var layers = widget.centralBody.getImageryLayers();
//イメージレイヤにぐんまちゃん画像を貼り付け
layers.addImageryProvider(new Cesium.SingleTileImageryProvider({
    url : 'gunmachan.jpg',
    extent : new Cesium.Extent(
            Cesium.Math.toRadians(139.0032936),
            Cesium.Math.toRadians(36.3219088),
            Cesium.Math.toRadians(139.0634281),
            Cesium.Math.toRadians(36.3894816)
        )
}));

//アニメーション設定    
function flyToExtent() {
      var scene = widget.scene; 
     var west = Cesium.Math.toRadians(139.91093183215332);
     var south = Cesium.Math.toRadians(35.73934085382143);
     var east = Cesium.Math.toRadians(138.26298261340332);
     var north = Cesium.Math.toRadians(37.06566045805025);

     var extent = new Cesium.Extent(west, south, east, north);
     
     var flight = Cesium.CameraFlightPath.createAnimationExtent(scene.getFrameState(), {
         destination : extent
     });
     scene.getAnimations().add(flight);      
 }
[/javascript]

<a href="http://shimz.me/example/cesium/02/index.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2867</wp:post_id>
		<wp:post_date>2013-06-04 14:31:48</wp:post_date>
		<wp:post_date_gmt>2013-06-04 05:31:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webgl%e3%82%92%e5%88%a9%e7%94%a8%e3%81%97%e3%81%a63d%e3%81%aa%e5%9c%b0%e5%9b%b3%e3%82%92%e4%bd%9c%e6%88%90%e3%81%a7%e3%81%8d%e3%82%8b%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%80%8ccesium</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cesium"><![CDATA[Cesium]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2868]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iphoneに搭載されているセンサー(GPS位置情報、ジャイロセンサー、電子コンパス、加速度センサー)の情報を取得</title>
		<link>http://shimz.me/blog/javascript/2872</link>
		<pubDate>Thu, 06 Jun 2013 01:23:04 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2872</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/06/mobileapi-e1370481850258.jpg" alt="mobileapi" width="588" height="327" class="aligncenter size-full wp-image-2873" />

現時点における、モバイルデバイスの各センサーから情報を取得する方法を確認してみました。
iPhone4sでしか試していません。

<a href="http://shimz.me/example/mobileAPI/all/">example</a>
(iphone,ipadでアクセスしてください)

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
[javascript]
//位置情報取得
 window.onload = function(){
    navigator.geolocation.watchPosition(update); //現在位置情報を定期的に監視

    // navigator.geolocation.getCurrentPosition(); //現在位置情報を取得
    // navigator.geolocation.clearWatch(); //watchPosition()での監視を中止
}
function update(position){
    //下記すべての情報が取得できるわけでは無い
    var lat = position.coords.latitude; //緯度
    var lng = position.coords.longitude; //経度
    var alt = position.coords.altiude; //高度
    var acc = position.coords.accuracy; //緯度経度の誤差
    var alc = position.coords.altiudeAccuracy; //高度の誤差
    var hed = position.coords.heading; //方角
    var spe = position.coords.speed; //スピード

    var html =&quot;&quot;;
        html += &quot;緯度:&quot; + lat + &quot;&lt;br&gt;&quot;;
        html += &quot;経度:&quot; + lng + &quot;&lt;br&gt;&quot;;
        html += &quot;高度:&quot; + alt + &quot;&lt;br&gt;&quot;;
        html += &quot;緯度経度誤差:&quot; + acc + &quot;&lt;br&gt;&quot;;
        html += &quot;高度誤差:&quot; + alc + &quot;&lt;br&gt;&quot;;
        html += &quot;方角:&quot; + hed + &quot;&lt;br&gt;&quot;;
        html += &quot;速度:&quot; + spe + &quot;&lt;br&gt;&quot;;
        
    document.getElementById(&quot;geolocation&quot;).innerHTML = html;
}

//デジタルコンパス情報取得&amp;ジャイロセンサー情報
window.addEventListener(&quot;deviceorientation&quot;, function(evt){
    //デジタルコンパス情報取得
    var ch = evt.webkitCompassHeading;
    var chAcc = evt.webkitCompassAccuracy;
    var html =&quot;&quot;;
        html += &quot;方角：&quot;+ch
        html += &quot;　誤差：&quot;+chAcc;
    document.getElementById(&quot;compass&quot;).innerHTML = html;
    
    //ジャイロセンサー情報取得
    var alpha = evt.alpha;   // z-axis
    var beta = evt.beta;     // x-axis
    var gamma = evt.gamma;   // y-axis
    var html =&quot;&quot;;
        html += 'Z回転(alpha):' + alpha + &quot;&lt;br&gt;&quot;;
        html += &quot;X回転(beta):&quot; + beta + &quot;&lt;br&gt;&quot;;
        html += &quot;Y回転(gumma):&quot; + gamma;
    document.getElementById(&quot;gyroscope&quot;).innerHTML = html;
    
}, false);

//加速度センサー情報取得
window.addEventListener(&quot;devicemotion&quot;, function(evt){

   //加速度
   var x = evt.acceleration.x;
   var y = evt.acceleration.y;
   var z = evt.acceleration.z;


   //傾き
   var xg = evt.accelerationIncludingGravity.x; //左右
   var yg = evt.accelerationIncludingGravity.y; //上下
   var zg = evt.accelerationIncludingGravity.z; //前後

   //回転値
   var a = evt.rotationRate.alpha; //z方向
   var b = evt.rotationRate.beta; //x方向
   var g = evt.rotationRate.gamma; // y方向

    var html =&quot;&quot;;
        html  += &quot;x:&quot;+x+&quot;&lt;br&gt;&quot;;
        html += &quot;y:&quot;+y+&quot;&lt;br&gt;&quot;;
        html += &quot;z:&quot;+z+&quot;&lt;br&gt;&quot;;
        
        html += &quot;傾きx:&quot;+xg+&quot;&lt;br&gt;&quot;;
        html += &quot;傾きy:&quot;+yg+&quot;&lt;br&gt;&quot;;
        html += &quot;傾きz:&quot;+zg+&quot;&lt;br&gt;&quot;;
        
        html += &quot;alpha(z):&quot;+a+&quot;&lt;br&gt;&quot;;
        html += &quot;beta(x):&quot;+b+&quot;&lt;br&gt;&quot;;
        html += &quot;gamma(y):&quot;+g+&quot;&lt;br&gt;&quot;;

   document.getElementById(&quot;rotation&quot;).innerHTML = html;

}, true); 
[/javascript]

javascriptでデバイスのセンサーにアクセスできるようになるなんて……良い時代ですね。
"一般人がGPSを搭載したデバイスを肌身離さず持ち歩いている"なんてことも今までにはなかったことで、WebGISとかと組み合わせたらきっと面白いことができる気がします。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2872</wp:post_id>
		<wp:post_date>2013-06-06 10:23:04</wp:post_date>
		<wp:post_date_gmt>2013-06-06 01:23:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iphone%e3%81%ab%e6%90%ad%e8%bc%89%e3%81%95%e3%82%8c%e3%81%a6%e3%81%84%e3%82%8b%e3%82%bb%e3%83%b3%e3%82%b5%e3%83%bcgps%e4%bd%8d%e7%bd%ae%e6%83%85%e5%a0%b1%e3%80%81%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphoneipad"><![CDATA[iPhone/iPad]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2873]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>電子書籍が普及しないのは図書館のせいじゃないよ。</title>
		<link>http://shimz.me/blog/other/2876</link>
		<pubDate>Thu, 06 Jun 2013 11:05:05 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2876</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.insightnow.jp/article/7735" target="_blank">電子書籍の仇敵は図書館 :: INSIGHT NOW!</a>

図書館のせいにするのはあまりに勝手が過ぎるんじゃないでしょうかね。



『なれる！SE』という小説があります。
別名「SE残酷物語」
ライトノベルでありながらシステムエンジニアの過酷な日常を(多少盛っている部分は否めませんが)リアルに描画することで、一部業界人のトラウマを心地よく刺激した人気作品です。
一時期はKindleストアのラノベ・ベストセラーランキングを総なめにしたほどです。

<a href="http://lunaticprophet.org/archives/13693" target="_blank">Amazon・Kindleストアのライトノベル・ベストセラーを『なれる！SE』が席巻！＆BLベストセラー</a>

紙の本では、現在９巻まで発刊されているのですが、kindleストアには７巻までしかありません。

とくに８巻はすでに紙で発売されてから半年経とうしていますが、いまだにKindleストアに並びません。

2012年に発売された本ですら電子書籍化するのに半年もかかるのか……と天を仰ぎたくなりますが、実は角川の電子書籍プラットフォームBOOKWALKERでは８巻がすでに発売されていたりします。

「先行販売」という位置づけだそうですよ。

紙の売上を守るために電子書籍の発売を遅らせ、さらに自社プラットフォームの付加価値を高めるために他プラットフォームへの配信を遅らせているわけですね。

「それがビジネスってもんだ」と言われれば返す言葉もありませんが、その行為にどれほどの効果があるんでしょうか。

だったら、初めからKindleに配信しなきゃいいのに。

プラットフォームばかり乱立させて何がしたいのか。

まだまだ普及の進んでいない国内の電子書籍市場で、チマチマした足の引っ張り合いしながらどっちつかずで中途半端な態度ばかりとっているので、出版業界の電子書籍にたいする「やる気」がいまいち信用できないんですよ。

「本も雑誌も売れなくなってどんどん書店が減っていく中で新たな市場を作らなきゃならないことは分かっているんだけど、電子書籍が爆発的に普及しちゃって紙の書籍が売れなくなるとそれも困るしプラットフォームも独占したい、でもリスクは取りたくない……どうしよう？と思ってたらとうとうKindleが来ちゃった！」

という、腰も覚悟も座ってない感じを消費者に見透かされているんじゃないでしょうか。

【余談】
とりあず、本を買う側からしたら「買いたい本を、とっとと買えるようにしてくれ」というのが一番の願いです。
あと国内のプラットフォームはせめて２・３個に収束させて欲しいし、それができないなら主要なプラットフォームには同じタイミングでコンテンツを配信してほしいです。発売を遅らせるとかで消費者に不便を押し付けたところでプラットフォームを乗り換えさせる効果など期待できませんし、付加価値を付けたいなら独占販売にして「他では出しません」とちゃんと言ってほしいですね。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2876</wp:post_id>
		<wp:post_date>2013-06-06 20:05:05</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:05:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9b%bb%e5%ad%90%e6%9b%b8%e7%b1%8d%e3%81%8c%e6%99%ae%e5%8f%8a%e3%81%97%e3%81%aa%e3%81%84%e3%81%ae%e3%81%af%e5%9b%b3%e6%9b%b8%e9%a4%a8%e3%81%ae%e3%81%9b%e3%81%84%e3%81%98%e3%82%83%e3%81%aa%e3%81%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上に四分木を描く</title>
		<link>http://shimz.me/blog/d3-js/2877</link>
		<pubDate>Fri, 07 Jun 2013 06:35:05 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2877</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo13/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/test000009.jpg" alt="test000009" width="590" height="393" class="aligncenter size-full wp-image-2878" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo13/">example</a>

以前、<a href="http://shimz.me/blog/d3-js/2819">地図上にボロノイ図を描いてみました</a>が、今回は四分木を描いてみました。
データは前回同様、高崎市のガソリンスタンド位置情報を使用しています。

<a href="http://ja.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E6%9C%A8">Wikipedia:四分木</a>


&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
[javascript]
d3.json(&quot;takasaki.topojson&quot;, function(json) {
	var widht = 900;	
	var svg = d3.select(&quot;svg&quot;);

	var geodata = topojson.object(json, json.objects.takasaki).geometries;

	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(90000)	//スケール（ズーム）の指定
		.translate([500,300])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//投影

	//地図表示
	var map =  svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;map&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: &quot;#99ff99&quot;,
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		});

	//燃料給油所データ読み込み
	d3.json('point.geojson', function(json){
		//母点位置情報
		var pointdata = json.features;
	
		//ピクセルポジション情報
		var positions = [];
		pointdata.forEach(function(d) {
			var point = projection(d.geometry.coordinates);//位置情報→ピクセル
			positions.push({x:point[0], y:point[1]}); 
		});
		
		//母点表示
		svg.selectAll(&quot;circle&quot;)
			.data(positions)
			.enter()
			.append(&quot;circle&quot;)
			.attr({
				&quot;cx&quot;:function(d, i) { return d.x; },
				&quot;cy&quot;:function(d, i) { return d.y; },
				&quot;r&quot;:2,
				fill:&quot;#1f3134&quot;
			});
				
		// 四分木生成
		var quadtree = d3.geom.quadtree(positions, 0, widht);
		
		//領域描画
		svg.selectAll(&quot;rect&quot;)
		.data(nodes(quadtree))
		.enter().append(&quot;svg:rect&quot;)
		.attr({
			&quot;x&quot;: function(d) { return d.x; },
			&quot;y&quot;: function(d) { return d.y; },
			&quot;width&quot;: function(d) { return d.width; },
			&quot;height&quot;: function(d) { return d.height; },
		});
		
		//四分木→ 矩形データの配列に変換。
		function nodes(quadtree) {
			var nodes = [];
			quadtree.visit(function(node, x1, y1, x2, y2) {
				nodes.push({x: x1, y: y1, width: x2 - x1, height: y2 - y1});
			});
			return nodes;
		}
		
		
	});

});
[/javascript]

&nbsp;
&nbsp;
<h2>Google Map上でも描いてみた</h2>
<hr></hr>
一応、表示はできましたが拡大していくと四分木の表示がおかしくなります。
原因不明 orz

<a href="http://shimz.me/example/d3js/geo_example/geo14/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/test000010.jpg" alt="test000010" width="590" height="389" class="aligncenter size-full wp-image-2879" /></a>

<a href="http://shimz.me/example/d3js/geo_example/geo14/">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2877</wp:post_id>
		<wp:post_date>2013-06-07 15:35:05</wp:post_date>
		<wp:post_date_gmt>2013-06-07 06:35:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ab%e5%9b%9b%e5%88%86%e6%9c%a8%e3%82%92%e6%8f%8f%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2878]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上にHexbin(六角形)を表示する</title>
		<link>http://shimz.me/blog/d3-js/2881</link>
		<pubDate>Tue, 11 Jun 2013 04:00:09 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2881</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example/geo15/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/d3hexbin.jpg" alt="d3.js map hexbin" width="590" height="518" class="alignnone size-full wp-image-2882" /></a>
地図上に表示するポイントが多くなるとゴチャゴチャして見難くなります。
「そんな時は六角形にまとめて表示すると見やすくなるよ！」と聞いたのでやってみました。


国土数値情報サイトがらいただいた<a href="http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A30b.html">竜巻等の突風（点）情報</a>を表示しています。竜巻等の突風の多いエリア程、色が濃く表示されます。
<a href="http://shimz.me/example/d3js/geo_example/geo15/">example</a>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
D3.jsと一緒にHexbinプラグインを読み込んでください。
[html]
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://d3js.org/d3.hexbin.v0.min.js&quot;&gt;&lt;/script&gt;
[/html]

[javascript]
window.onload = function(){
	日本地図データの読み込み
	d3.json(&quot;japan.topojson&quot;, function(json) {
		d3main(json);
	});
}

function d3main(json){
	var width = 1200;
	var height = 1200;
	
	var svg = d3.select(&quot;svg&quot;);

	//topojson読み込み
	var geodata = topojson.object(json, json.objects.japan).geometries;


	var projection = d3.geo
		.mercator()		//投影法の指定
		.scale(3000)	//スケール（ズーム）の指定
		.translate([600,700])
		.center([139.0032936, 36.3219088]); //中心の座標を指定

	var path = d3.geo.path().projection(projection);　//投影

	//地図表示
	var map =  svg.append(&quot;svg:g&quot;).attr(&quot;id&quot;, &quot;map&quot;)
		.selectAll(&quot;path&quot;)
		.data(geodata)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: &quot;white&quot;,
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		});

	//竜巻・突風データ読み込み
	d3.json('tatsumaki.geojson', function(json){
		//母点位置情報
		var pointdata = json.features;
	
		//ピクセルポジション情報
		var positions = [];
		pointdata.forEach(function(d) {
			var point = projection(d.geometry.coordinates);//位置情報→ピクセル
			positions.push([point[0], point[1]]); 
		});
		
		//竜巻・突風ポイント生成(初期・非表示)		
		var circle = svg.selectAll(&quot;circle&quot;)
			.data(positions)
			.enter()
			.append(&quot;circle&quot;)
			.attr({
				&quot;cx&quot;:function(d, i) { return d[0]; },
				&quot;cy&quot;:function(d, i) { return d[1]; },
				&quot;r&quot;:2,
				fill:&quot;red&quot;,
				&quot;fill-opacity&quot;:0
			});
	
		//六角形を塗るカラースケールを作成
		var hexColor = d3.scale.linear()
			.domain([0, 20])
			.range([&quot;pink&quot;, &quot;red&quot;])
			.interpolate(d3.interpolateLab);
		
		//hex生成関数	
		var hexbin = d3.hexbin()
			.size([900, 600])
			.radius(10);
			
		//hex生成
		svg.append(&quot;g&quot;)
			.selectAll(&quot;.hexagon&quot;)
			.data(hexbin(positions)) //positionsデータからhexデータを生成
			.enter()
			.append(&quot;path&quot;)
			.attr(&quot;class&quot;, &quot;hexagon&quot;)
			.attr({
				&quot;d&quot;: hexbin.hexagon(),
				&quot;transform&quot;: function(d) { return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;; },
				&quot;stroke&quot;: &quot;white&quot;,
				&quot;fill&quot;:function(d) { return hexColor(d.length); }, //六角形内の基点の数によって色の濃度を調整
				&quot;opacity&quot;: .5
			});

		//ポイントの表示・非表示設定
		d3.select(&quot;#btn&quot;).on('click', toggle(
				function(){ circle.attr(&quot;fill-opacity&quot;, 1)},
				function(){ circle.attr(&quot;fill-opacity&quot;, 0)}
			)
		)
	});

}
[/javascript]

&nbsp;
&nbsp;
<h2>散布図 Hex表示</h2>
<hr></hr>
Hex表示のみのサンプルです。
<script type="text/javascript" src="http://jsdo.it/blogparts/yqSk/js?width=465&height=496&view=screenshot"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2881</wp:post_id>
		<wp:post_date>2013-06-11 13:00:09</wp:post_date>
		<wp:post_date_gmt>2013-06-11 04:00:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%abhexbin%e5%85%ad%e8%a7%92%e5%bd%a2%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2882]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>「地理空間データ分析」買ってみた。</title>
		<link>http://shimz.me/blog/book/2884</link>
		<pubDate>Wed, 12 Jun 2013 06:41:19 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2884</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.amazon.co.jp/gp/product/432001927X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=432001927X&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=432001927X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=toriaezu04b-22&l=as2&o=9&a=432001927X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
購入。
うむ、わからん。
ちょっと買うのが早すぎた。Rと統計の勉強しないと。
でも、「何がわからないのか」が分かったのでよしとする。
地理空間データの分析というのは具体的に何をやればいいのかというイメージがおぼろげながらもつかめたのはありがたい。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2884</wp:post_id>
		<wp:post_date>2013-06-12 15:41:19</wp:post_date>
		<wp:post_date_gmt>2013-06-12 06:41:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8c%e5%9c%b0%e7%90%86%e7%a9%ba%e9%96%93%e3%83%87%e3%83%bc%e3%82%bf%e5%88%86%e6%9e%90%e3%80%8d%e8%b2%b7%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2885]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>プログラミング教育はプログラマーの育成を目的としなくていい</title>
		<link>http://shimz.me/blog/programming/2886</link>
		<pubDate>Thu, 13 Jun 2013 01:53:23 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2886</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.rubyist.net/~matz/20130612.html">ちょっと待った！小中学校でのプログラミング教育</a>

小中学校でのプログラミング教育については賛否両論あるみたいですね。

個人的には賛成です。

美術の授業は子供を絵描きやアーティストとして育てるために行われるわけでは無いし、音楽の授業も別に世の中に音楽家を増やす目的で行われているものでもないのだから、プログラミングの授業だって別に将来の優秀なプログラマーを育てることを目的としなくてもいいはずです。

むしろプログラミングというものを理解してもらうことを目的とすればいいのではないかと思います。

だからグループ制作とかやるといいんじゃないでしょうか。
採点方法は簡単に"期日に間に合うかどうか"で決めるとして。
途中で「先生、良い事思いつちゃったぞ。みんな○○を追加してみよう！」と突然仕様の変更や追加が起こるというイベントが発生するとより面白いかもしれません。

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/DeathMarch.jpg" alt="DeathMarch" width="350" height="350" class="aligncenter size-full wp-image-2890" />

プログラミングでは頭数の多いグループより、「優秀な奴が一人いるグループの方が少人数でも圧倒的に早くクオリティの高いものが出来上がる」という認識を多くの生徒が持ってくれるだけでも、将来その子供たちが<strong>プログラマーを雇う側</strong>になったときに役に立つはずです。
（日頃隅っこに追いやられがちなパソコン少年も、この授業の時だけは輝けるわけです)
「自分のパソコンでは動いたんです！」とか「○○君のプログラムを追加したら動かなくなったんだから、間に合わなくなったのは僕たちの所為じゃありません！」みたいな微笑ましいやり取りが小中学校で見れることを期待しています。


いずれ子供たちが大人になった時に、
「このスケジュールでは期日に間に合いません」
「なに！？　じゃぁ、あと何人プログラマーがいればいいんだ。１０人か？　２０人か？　今すぐ派遣会社に連絡しろ！」
というようなやりとりが少しでも減るならば、プログラミング教育はある意味成功といえるのではないでしょうか。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2886</wp:post_id>
		<wp:post_date>2013-06-13 10:53:23</wp:post_date>
		<wp:post_date_gmt>2013-06-13 01:53:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e6%95%99%e8%82%b2%e3%81%af%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9e%e3%83%bc%e3%81%ae%e8%82%b2%e6%88%90%e3%82%92%e7%9b%ae%e7%9a%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[プログラミング]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2890]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Fabric.js]SVGをcanvasに転写する</title>
		<link>http://shimz.me/blog/d3-js/2892</link>
		<pubDate>Tue, 18 Jun 2013 10:24:33 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2892</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://fabricjs.com/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/fablic.jpg" alt="fablic" width="493" height="470" class="aligncenter size-full wp-image-2893" /></a>

<a href="http://fabricjs.com/">Fabric.js</a>は、canvasを操作するためのJavascriptライブラリです。
同様のライブラリは多数ありますがFabricの特徴は、内部にSVGパーサーを持ちsvgからcanvasへのインポートおよびcanvasからsvgへのエクスポートを行う機能があります。


[javascript title="SVG要素をcanvasへ転写する"]
//canvas要素の取得
var canvas = new fabric.Canvas('canvas');
canvas.setWidth(300);
canvas.setHeight(300);

//SVG要素取得
var SVGstring = document.getElementById('wrapSVG').innerHTML;  

//SVGをcanvasへ転写
fabric.loadSVGFromString(SVGstring , function(objects, options) {
	options.top = 0;
	options.left = 0;
	var svgGroups = fabric.util.groupSVGElements(objects, options);
	canvas.add(svgGroups).renderAll();
});
[/javascript]

注意点としては、svg要素のサイズとcanvas要素のサイズをそろえないと正しいサイズで転写されません。

&nbsp;
&nbsp;
<h2>D3.js & Fabric.js</h2>
<hr></hr>
<a href="http://shimz.me/example/d3js/fabric/01/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/d3_fablic-e1371550956952.jpg" alt="d3_fablic" width="561" height="539" class="aligncenter size-full wp-image-2894" /></a>

Fabric.jsとD3.jsを組み合わせることで、D3.jsで作成した地図(SVG)をcanvasへ転写することもできます。


[javascript title="D3 &amp; Fabric"]
var path, map, xy;

xy = d3.geo
	.mercator()		//投影法の指定
	.scale(12000)	//スケール（ズーム）の指定
	.center([139.0032936, 36.3219088]); //中心の座標を指定


path = d3.geo.path().projection(xy);　//投影

map = d3.select(&quot;svg&quot;); //地図用のステージ(SVGタグ)を作成


var gunma = d3.json(&quot;gunma.geojson&quot;, function(json) {
	map.append(&quot;svg:g&quot;)
		.attr(&quot;class&quot;, &quot;gunma&quot;)
		.selectAll(&quot;path&quot;)
		.data(json.features)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr(&quot;d&quot;, path)  //dataに投影法を適応
		.attr(&quot;fill-opacity&quot;, 1)
		.attr(&quot;fill&quot;, &quot;green&quot;)
		.attr(&quot;stroke&quot;, &quot;#222&quot;)
		.attr(&quot;transform&quot;, &quot;translate (&quot; +[-350 ,-50] + &quot;)&quot;)

});


d3.select('body').on('click', function(){
	canvasDraw();		
})

//fabric.jsを使ってcanvasに転写
function canvasDraw(){
	var canvas = new fabric.Canvas('canvas');
	canvas.setWidth(300);
	canvas.setHeight(300);
		
	var SVGstring = document.getElementById('wrapSVG').innerHTML;  //SVG取得
	fabric.loadSVGFromString(SVGstring , function(objects, options) {
		options.top = 0;
		options.left = 0;
		var svgGroups = fabric.util.groupSVGElements(objects, options);

		canvas.add(svgGroups).renderAll();
	});
}
[/javascript]

<a href="http://shimz.me/example/d3js/fabric/01/">example</a>


動的に作成したグラフ(SVG)をキャンバスに転写しdata URI schemeとして出力すれば、グラフを画像としてダウンロードする機能なども比較的簡単に作成できます。


……ただ、<a href="http://shimz.me/example/d3js/fabric/02/">axis(目盛り)の転写</a>がいまのところ上手くいきません。　orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2892</wp:post_id>
		<wp:post_date>2013-06-18 19:24:33</wp:post_date>
		<wp:post_date_gmt>2013-06-18 10:24:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fabric-jssvg%e3%82%92canvas%e3%81%ab%e8%bb%a2%e5%86%99%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2893]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsで再利用可能なコードの書き方を教えてくれる参考書</title>
		<link>http://shimz.me/blog/d3-js/2898</link>
		<pubDate>Mon, 24 Jun 2013 00:49:57 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2898</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bleedingedgepress.com/our-books/developing-a-d3-js-edge/"><img src="http://shimz.me/blog/wp-content/uploads/2013/06/d3_cover.png" alt="d3_cover" width="160" height="256" class="aligncenter size-full wp-image-2899" /></a>

<a href="http://bleedingedgepress.com/our-books/developing-a-d3-js-edge/">Developing a D3.js Edge</a>

D3.jsを取り扱った参考書としては、「<a href="http://www.amazon.co.jp/gp/product/B008FPJST6/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B008FPJST6&linkCode=as2&tag=toriaezu04b-22">Getting Started with D3</a>（<a href="http://www.oreilly.co.jp/books/9784873115979/">D3をはじめよう</a>）」や「<a href="http://www.amazon.co.jp/gp/product/B00BSG68UQ/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B00BSG68UQ&linkCode=as2&tag=toriaezu04b-22">Interactive Data Visualization for the Web</a>」、「<a href="https://leanpub.com/D3-Tips-and-Tricks">D3 Tips and Tricks</a>」などがありますが、「<a href="http://bleedingedgepress.com/our-books/developing-a-d3-js-edge/">Developing a D3.js Edge</a>」は、一連の参考書より深く踏み込んだ内容となっています。

本書の概要は以下となります。

<ul>
	<li>再利用可能なD3プラグインの作成</li>
	<li><a href="http://pivotal.github.io/jasmine/">Jasmine</a>を用いてのユニットテストやTDD/BDD</li>
	<li><a href="http://square.github.io/crossfilter/">Crossfilter.js</a>とD3.jsの連動</li>
	<li>アプリケーションへ<a href="http://shimz.me/blog/d3-js/2785">ブラッシング</a>を組み込む</li>
	<li>地図APIの作成</li>
</ul>


最終的に以下のような、円形のヒストグラム図と地図が連動するビジュアライゼーションを再利用可能なプラグイン(オリジナルなグラフレイアウト)として作成します。

<img src="http://shimz.me/blog/wp-content/uploads/2013/06/dde_example.png" alt="dde_example" width="590" height="270" class="aligncenter size-full wp-image-2900" />

現時点で$14.95(約1460円)とちょっとお値段はりますが、D3についてより高度な内容を扱った参考書を必要としているなら、手にとってみてはいかがでしょう。(公式サイトでサンプルをダウンロードできます)


英語じゃ読めない？……大丈夫。本文が何言っているかわからなくてもコードを見れは何やっているかは分かりますし、最終手段としてepubファイルの拡張子をzipに変更して解凍し、出てきたxhtmlファイルをGoogle web翻訳に渡せば大体のところは読めますよ！ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2898</wp:post_id>
		<wp:post_date>2013-06-24 09:49:57</wp:post_date>
		<wp:post_date_gmt>2013-06-24 00:49:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%81%a7%e5%86%8d%e5%88%a9%e7%94%a8%e5%8f%af%e8%83%bd%e3%81%aa%e3%82%b3%e3%83%bc%e3%83%89%e3%81%ae%e6%9b%b8%e3%81%8d%e6%96%b9%e3%82%92%e6%95%99%e3%81%88%e3%81%a6%e3%81%8f%e3%82%8c%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2899]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】D3 Arrays sample</title>
		<link>http://shimz.me/blog/d3-js/2902</link>
		<pubDate>Wed, 26 Jun 2013 06:05:01 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2902</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/mbostock/d3/wiki/Arrays">D3 Arrays</a>

D3には、配列を操作するのに非常に便利な関数がたくさんあります。
一つ一つ取り上げて説明するのは難しいので、jsdoitにサンプルを作ってみました。

<script type="text/javascript" src="http://jsdo.it/blogparts/yR6z/js?width=465&height=496&view=javascript"></script>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2902</wp:post_id>
		<wp:post_date>2013-06-26 15:05:01</wp:post_date>
		<wp:post_date_gmt>2013-06-26 06:05:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91d3-arrays-sample</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【アクセスアップ】月間ユニークユーザー数が１万を超えたので解析してみる</title>
		<link>http://shimz.me/blog/analytics/2903</link>
		<pubDate>Thu, 27 Jun 2013 01:15:10 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2903</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306071.jpg" alt="ga201306071" width="590" height="281" class="aligncenter size-full wp-image-2904" />

特定の記事がバズったり、沢山はてブされたりしたときに一時的に１万ユーザーを超えることはあったのですが、おかげさまで平均的に月間UU数が１万を超えるようになりました。

以前、<a href="http://shimz.me/blog/analytics/2194">月間PVが1万を超えた際に１度記事にした</a>のですが、いい節目なので改めてアクセスを解析してみようと思います。


&nbsp;
&nbsp;
<h2>参照元</h2>
<hr></hr>
<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306072.jpg" alt="参照元グラフ" width="590" height="263" class="aligncenter size-full wp-image-2905" />
相変わらず約半数以上がGoogleからの流入となってます。
まさにGoogle依存。ペンギンアップデートやパンダアップデートに怯える日々です。
以前の記事にした時との違いは参照元第４位に「zenback.itmedia.co.jp」が上がってきているところですかね。
「zenbackキーワーズ」からの流入は瞬発力こそないものの、長期にわたりコンスタントにアクセスを流してくれているようです。


&nbsp;
&nbsp;
<h2>検索キーワード</h2>
<hr></hr>
サマリーを確認してみるかぎり際立って流入数の多いビックキーワードはなく、小さなキーワードでちょこちょこアクセスを稼いでいるという感じです。
ウェブマスターツールの「検索クエリ」をみてみるとクリック率が高い記事の傾向は、「javascriptライブラリ紹介記事」「エディタ紹介記事」「iPhone/iPadアプリ紹介記事」で、何らかの紹介記事や入門的な記事への流入数が多いです。
最近はD3.jsの記事ばかり書いているわけですが、残念ながらD3.js関連の記事はあまり検索からの流入はありません orz
かといってアクセスアップのために「紹介記事」ばかり書くというのは、もともと「学習日記」としてブログを始めた意味がなくなってしまうので、痛し痒しというところですね。


&nbsp;
&nbsp;
<h2>ソーシャルメディア</h2>
<hr></hr>
<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306073.jpg" alt="ソーシャルメディアからの流入数" width="588" height="338" class="aligncenter size-full wp-image-2906" />
とりあえず「Twitter」が１位。ただ、ソーシャルメディアからの流入自体が少ないのであまり大きな差はありません。
「はてブ」は爆発的にアクセス数が増えますがどうしても一時的なもので終わってしまうので、通常時のアクセスは「Facebook」の方が上位に来ています。
Facebookからの流入ってあまり目に入ることが無いので実感がわかず、この結果は意外でした。


&nbsp;
&nbsp;
<h2>アフェリエイト</h2>
<hr></hr>
<img src="http://shimz.me/blog/wp-content/uploads/2013/06/ga201306074.jpg" alt="アフェリエイト　見積もり収益" width="396" height="85" class="aligncenter size-full wp-image-2907" />
月約2000円といったところです。まぁ、儲かりませんな。
さくらクラウドの料金が月額2,980円なので、とりあえずサーバー代を相殺できるぐらいを目標としようと思います。


&nbsp;
&nbsp;
<h2>総括</h2>
<hr></hr>
全体としてGoogle依存傾向は変わらず。
最近は、YahooやBingなど他検索エンジンからの流入を増やせないものかと試行錯誤してみたのですが、まったく効果出ずでした。
正直この２つ検索エンジンに対しては何をすればいいのか皆目見当もつかない状態なんですが、Googleばかりに依存しているのも問題なのでしばらくジタバタしてみるつもりです。
この辺のノウハウは、いずれ業務でも活かせるかもしれませんしね。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2903</wp:post_id>
		<wp:post_date>2013-06-27 10:15:10</wp:post_date>
		<wp:post_date_gmt>2013-06-27 01:15:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e3%82%a2%e3%83%83%e3%83%97%e3%80%91%e6%9c%88%e9%96%93%e3%83%a6%e3%83%8b%e3%83%bc%e3%82%af%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc%e6%95%b0%e3%81%8c%ef%bc%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="analytics"><![CDATA[アクセス解析]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2904]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーション失敗</title>
		<link>http://shimz.me/blog/d3-js/2909</link>
		<pubDate>Mon, 01 Jul 2013 02:24:26 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2909</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>目的を頭に置き続けましょう。それが試金石となり、導きの光となります。円形のレイアウトという誘惑の言葉や、追加データの誘惑に、「できるのだから」とささやく偽預言者に惑わされそうになったら、目的を思い出しましょう。これらは旅の障害です。
<br>
<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・データビジュアライゼーション</a>
</blockquote>

目的も計画もないまま、なんとなく手に入ったデータを「とりあえず、できそうだから」とやってみた結果、見事に失敗したデータ可視化作品が以下となります。

<a href="http://shimz.me/example/d3js/geo_example2/geo1/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/DATAmiss.jpg" alt="可視化失敗例" width="590" height="462" class="aligncenter size-full wp-image-2910" /></a>

とても見づらく、何も伝わらない。
当初は47都道府県を色分けしようとして失敗し、カテゴリー(業種)毎に28色に色分けしてみましたが……だめですね。
地図とグラフのつながりが非常に分かりずらい。
マウスオーバーした際に、対象となるグラフと地図の色を変えるなどしてつながりを表示することもできますが、それだとそもそも色分けした意味もないわけで……。
作っているうちに、よくわかんなくなってきたのでとりあえず辞めました。

そろそろ単に「ライブラリが使えます」というポジションから抜け出して、ちゃんとしたデータ可視化作品を作ってみたいなと思ったのですが、ここにきて最大のハードルが現われました。
絶望的なほどにデザインのセンスが無い orz
困った。


&nbsp;
&nbsp;
<a href="http://www.oreilly.co.jp/books/9784873115429/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/Designing_Data_Visualizations.gif" alt="Designing_Data_Visualizations" width="145" height="186" class="size-full wp-image-2911" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2909</wp:post_id>
		<wp:post_date>2013-07-01 11:24:26</wp:post_date>
		<wp:post_date_gmt>2013-07-01 02:24:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e5%a4%b1%e6%95%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2910]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】地図上に都市と都市を結ぶ線を引く</title>
		<link>http://shimz.me/blog/d3-js/2913</link>
		<pubDate>Tue, 02 Jul 2013 03:58:02 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2913</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_template/line/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/geoline.jpg" alt="geoline" width="590" height="315" class="aligncenter size-full wp-image-2914" /></a>

<a href="http://shimz.me/example/d3js/geo_template/line/">example</a>

都市と都市を結ぶ線を引くサンプルです。
地図をY軸方向に回転などさせてみました。

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
基本的には d3.geo.path().projection で作成したパスジェネレーターにgeoJSON形式にした都市の緯度経度を渡してあげれば、あとはいつも通りsvgのpathを使ってラインを生成するだけです。
地図を回転させたりしても各要素のd属性をアップデートするだけで再計算し描画してくれるので便利です。
[javascript]
d3.json(&quot;conuntries.topojson&quot;, function(json) {
	d3main(json);
});


function d3main(json){
	var width = 960;
	var height = 480;
	
	var svg = d3.select(&quot;svg&quot;)
	.attr(&quot;width&quot;, width)
	.attr(&quot;height&quot;, height);

	//投影法設定
	var projection = d3.geo.equirectangular()
	.scale(153)
	.translate([width / 2, height / 2])
	.rotate([-180,0,0])
	.precision(.1);

	//パスジェネレーター
	var path = d3.geo.path().projection(projection);

	//グリッド情報ジェネレーター
	var graticule = d3.geo.graticule();

	//グリッド線追加    
	var grid = svg.append(&quot;path&quot;)
		.datum(graticule)
		.attr({
			&quot;class&quot;: &quot;graticule&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;none&quot;,
			&quot;stroke&quot;: &quot;#777&quot;,
			&quot;stroke-width&quot;: &quot;.5px&quot;,
			&quot;stroke-opacity&quot;: .5
		});

	//国土追加  
	var land = svg.insert(&quot;path&quot;, &quot;.graticule&quot;)
		.datum(topojson.object(json, json.objects.conuntries))
		.attr({
			&quot;class&quot;: &quot;land&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;green&quot;	    
		});
    
	//国境線追加
	var boundary = svg.insert(&quot;path&quot;, &quot;.graticule&quot;)
		.datum(topojson.object(json, json.objects.conuntries, function(a, b) { return a !== b; }))
		.attr({
			&quot;class&quot;: &quot;boundary&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;none&quot;,
			&quot;stroke&quot;: &quot;white&quot;,
			&quot;stroke-width&quot;: .5
		});

	//都市　位置情報
	var pointdata = {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [
		[139.69170639999993, 35.6894875], //東京
		[-122.41941550000001, 37.7749295], //サンフランシスコ
		[149.1242241, -35.30823549999999], //キャンベラ
		[77.22496000000001, 28.635308], //ニューデリー
		[-47.92916980000001,  -15.7801482], //ブラジリア
		[116.40752599999996,  39.90403], //北京
	]}
    
	//都市間ライン追加
	var line = svg.selectAll(&quot;.line&quot;)
		.data([pointdata])
		.enter()
		.append(&quot;path&quot;)
		.attr({
			&quot;class&quot;:&quot;line&quot;,
			&quot;d&quot;: path,
			&quot;fill&quot;: &quot;none&quot;,
			&quot;stroke&quot;: &quot;red&quot;,
			&quot;stroke-width&quot;: 1.5
		});

	//都市ポイント追加	    
	var point = svg.selectAll(&quot;.point&quot;)
		.data(pointdata.coordinates)
		.enter()
		.append(&quot;circle&quot;)
		.attr({
			&quot;cx&quot;:function(d) { return projection(d)[0]; },
			&quot;cy&quot;:function(d) { return projection(d)[1]; },
			&quot;r&quot;:6,
			&quot;fill&quot;:&quot;red&quot;,
			&quot;fill-opacity&quot;:1
		});

	/***Y軸回転させる***************************************/
	rotateY=0;
	setInterval(function(){
		//projection 更新
		rotateY++;
		if (rotateY &gt;= 360) rotateY=0
		projection.rotate([-180,rotateY,0]);

		//各要素を更新
		grid.attr(&quot;d&quot;, path);
		land.attr(&quot;d&quot;, path);
		boundary.attr(&quot;d&quot;, path);
		line.attr(&quot;d&quot;, path);		
		point.attr({
			&quot;cx&quot;:function(d) {  return projection(d)[0]; },
			&quot;cy&quot;:function(d) { return projection(d)[1]; },
		})
	},100);	
	  
}
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2913</wp:post_id>
		<wp:post_date>2013-07-02 12:58:02</wp:post_date>
		<wp:post_date_gmt>2013-07-02 03:58:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e5%9c%b0%e5%9b%b3%e4%b8%8a%e3%81%ab%e9%83%bd%e5%b8%82%e3%81%a8%e9%83%bd%e5%b8%82%e3%82%92%e7%b5%90%e3%81%b6%e7%b7%9a%e3%82%92%e5%bc%95%e3%81%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2914]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>福岡市 防犯危険箇所ヒートマップ</title>
		<link>http://shimz.me/blog/d3-js/2916</link>
		<pubDate>Wed, 03 Jul 2013 00:52:45 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2916</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/fukuoka/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/fukuokajiken.jpg" alt="fukuokajiken" width="590" height="270" class="aligncenter size-full wp-image-2917" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/fukuoka/">example</a>


「ビッグデータ・オープンデータの活用アイデアコンテスト」用に福岡市がサンプルデータを公開していたので、その中の「防犯危険箇所(犯罪発生箇所など)」データを使ってGoogle Map上にヒートマップを作成してみました。

<a href="http://www.city.fukuoka.lg.jp/soki/joho/shisei/BDODkyougikai_sampledata.html">福岡市サンプルデータサイト</a>

また、同時に公開されている「警察署・交番」データの位置情報を元にボロノイ図を作成し防犯危険箇所ヒートマップの上に重ねてエリアを分割しています。
サンプルでは一部分のデータしかありませんが、もう少し広範囲の実データが公開されれば、なにか面白い分析とかができそうな気もします。
やっぱり、位置情報を含んだデータは弄っていて面白いですね。



【参考】
・<a href="http://shimz.me/blog/map/2151"> Google Map上にヒートマップを表示する</a>
・<a href="http://shimz.me/blog/d3-js/2819">【D3.js】Google Map上にボロノイ図を描く</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2916</wp:post_id>
		<wp:post_date>2013-07-03 09:52:45</wp:post_date>
		<wp:post_date_gmt>2013-07-03 00:52:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%a6%8f%e5%b2%a1%e5%b8%82-%e9%98%b2%e7%8a%af%e5%8d%b1%e9%99%ba%e7%ae%87%e6%89%80%e3%83%92%e3%83%bc%e3%83%88%e3%83%9e%e3%83%83%e3%83%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="google-map-api"><![CDATA[Google Map API]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2917]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>データビジュアライゼーションとインフォグラフィックの違い</title>
		<link>http://shimz.me/blog/other/2918</link>
		<pubDate>Thu, 04 Jul 2013 04:04:27 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2918</guid>
		<description></description>
		<content:encoded><![CDATA[あくまで、自分の中での区分です。

<img src="http://shimz.me/blog/wp-content/uploads/2013/07/infograh_datavis.jpg" alt="infograh_datavis" width="590" height="166" class="aligncenter border size-full wp-image-2919" />

データビジュアライゼーションとインフォグラフィックはよく混同されがちです。
この二つについて明確な定義があるわけではないみたいで、「<a href="http://datavis.tumblr.com/">We Love Datavis</a>」でも、データビジュアライゼーションとインフォグラフィックが混同されて掲載されています。
そこで、データビジュアライゼーションとインフォグラフィックの違いについて考えてみました。

&nbsp;
<h2>なにが違うのか</h2>
<hr></hr>

「<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・データビジュアライゼーション</a>」の中では以下のように分類されています。


<blockquote>
<strong>インフォグラフィック</strong>
<ul>
	<li>手作業で書かれている(そのため、情報を独自に処理する)。</li>
	<li>手元にあるデータに特有である(そのため、別のデータを使用して再作成するのが容易ではない)。</li>
	<li>美的な要素に富む(目を引き興味を維持するために作成される協力なビジュアルコンテンツである)。</li>
	<li>比較的データが貧弱である(情報のひとつひとつをそれぞれ手作業で表現しなければならないため)。</li>
</ul>


<strong>データビジュアライゼーション</strong>
<ul>
	<li>アルゴリズムにより描かれる(カスタムな作風を持つ場合もあるが、大部分はコンピュータ化された方法の力を借りて描かれる)。</li>
	<li>異なるデータを使用して再生成することが容易である(同じ形が、似た次元や特徴を持つ異なるデータセットを表示するために再利用される可能性がある)。</li>
	<li>美的な要素に乏しい(データが飾られていない)。</li>
	<li>比較的データの量が多い(インフォグラフィックと対照的に大量のデータを受け取り使用可能)。</li>
</ul>
</blockquote>

また、データビジュアライゼーションは以下３つに分類されると説明されています。
<blockquote>
<ul>
	<li><strong>探索的データビジュアライゼーション</strong><br>データセット内のパターン、傾向、副次的問題を発見するためのデータビジュアライゼーション。探索的ビジュアライゼーションには通常、すでにわかっているストーリーは存在しません。</li>

	<li><strong>説明的データビジュアライゼーション</strong><br>情報や考え方を伝えるために使用するデータのビジュアライゼーション。説明的ビジュアライゼーションは通常送り手が意図する特定の「ストーリー」や情報を持っています。</li>

	<li><strong>探索的説明的(ハイブリッド)データビジュアライゼーション</strong><br>上記二つの混合。整理・監修されたデータセットを伴いながらも、受け手の側に何らかの探索を許します。受け手がいくつかのパラメータを選択し制約をかけ、それによってデータセットが提供すべきヒントを自分自身で発見できるようにします。</li>
</ul>
</blockquote>

ただ、個人的には制作方法の違いでこの二つを区分けするのは違和感を感じます。
むしろ分類としては、説明的ビジュアライゼーションをさらに先鋭化していった先にインフォグラフィックがあるのではないかと思うのです。
データビジュアライゼーションの主役はあくまで「データ」ですが説明のためにいろいろそぎ落としていく過程で主客転倒が起こり「ストーリー」が主役になったものがインフォグラフィックなのではないかと。

そして、もっとも大きな違いは「<strong>優れたインフォグラフィックは静的なコンテンツ以外にはなりえない</strong>」ことだと思います。

伝えたい「ストーリー」に注力し、不要なものを削り取ってより分かり易い作品を作るとなれば、動的にビジュアルが変化したりインタラクティブな要素などはむしろ邪魔なものでしかありません。(補足：いくつかの静的なインフォグラフィックを組み合わせた動画などはありえると思います）
目に入ってきた瞬間に製作者の意図(ストーリー)が伝わる、それが優れたインフォグラフィックであるとするならばデータはストーリーを伝えるための付属物でしかなく、そこがデータビジュアライゼーションとの違いになるのだと思います。

データを主役にするか、ストーリーを主役にするか、目的に合わせてデータビジュアライゼーションで表現するかインフォグラフィックで表現するかを選択する必要があるのでしょう。

&nbsp;
<h2>結論</h2>
<hr></hr>
「データ」を伝えるために作るのがデータビジュアライゼーション
「ストーリー」を伝えるために作るのがインフォグラフィック

&nbsp;
<h2>余談</h2>
<hr></hr>
たとえば「危険な地域」というデータを伝えたいときにはデータビジュアライゼーションで、「この地域はこんなにも危険だ」というストーリーを伝えたいならばインフォグラフィックで表現するというのが適切な使い分けなのかなと。
データビジュアライゼーションでもストーリを伝えることとはできるわけですが、分かり易さやインパクトでは優れたインフォグラフィックには及ばない、という違いがあるような気がします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2918</wp:post_id>
		<wp:post_date>2013-07-04 13:04:27</wp:post_date>
		<wp:post_date_gmt>2013-07-04 04:04:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%87%e3%83%bc%e3%82%bf%e3%83%93%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%a9%e3%82%a4%e3%82%bc%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%a8%e3%82%a4%e3%83%b3%e3%83%95%e3%82%a9%e3%82%b0%e3%83%a9%e3%83%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[windows 8アプリ]プレゼンテーション用のスライドも作成できるMarkdown Editor「md」がシンプル便利</title>
		<link>http://shimz.me/blog/editor/2920</link>
		<pubDate>Fri, 05 Jul 2013 00:50:12 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2920</guid>
		<description></description>
		<content:encoded><![CDATA[正確には「スライド表示ができる」だけれども。
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md2.png" alt="md2" width="590" height="332" class="aligncenter size-full wp-image-2921" />

windows8アプリのMarkdown Editor「md」をインストールしてみたところ、とても便利だったので紹介します。
とくにwindow8タブレットを使っている方にお勧めです。

<a href="http://apps.microsoft.com/windows/ja-jp/app/markdown-editor/2f8e8415-12f2-477f-b270-a85374de1e4c">Markdown Editor「md」</a>

&nbsp;
<strong>・シンプルなMarkdown Edoitor</strong>
左がエディタエリア、右側がプレビューエリアになります。
書いた文章が即座にプレビューに反映されます。
window8タブレットは横幅の比率が大きいのでエディタ／プレビューエリアで２分割されてもちょうど良い感じです。
ベーシックなmarkdownのシンタックスに加えgithub flavorシンタックスも使用できます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md1.png" alt="md1" width="590" height="332" class="alignnone size-full wp-image-2922" />

<strong>・スライド(プレゼンテーション)機能</strong>
書いた内容を即座にスライドとして表示できます。
これが非常に便利。
タブレットでささっと書き上げて即プレゼン、なんてことができます。
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md3.png" alt="md3" width="590" height="332" class="alignnone size-full wp-image-2923" />


<strong>・gistへのアップロード機能</strong>
作成したファイルをgistへアップロードして保存できます。

&nbsp;
シンプルなMarkdown Editorを探しているなら、ぜひ一度使ってみてください。


デスクトップと画面を分割して使ったりもできるよ！
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/md4.png" alt="md4" width="590" height="332" class="alignnone size-full wp-image-2924" />

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2920</wp:post_id>
		<wp:post_date>2013-07-05 09:50:12</wp:post_date>
		<wp:post_date_gmt>2013-07-05 00:50:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>window8%e3%81%aemarkdown-editor%e3%80%8cmd%e3%80%8d%e3%81%8c%e3%82%b7%e3%83%b3%e3%83%97%e3%83%ab%e4%be%bf%e5%88%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="editor"><![CDATA[エディタ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2922]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ブラウザにデータを保存したいときに便利な「store.js」</title>
		<link>http://shimz.me/blog/javascript/2928</link>
		<pubDate>Tue, 09 Jul 2013 04:28:25 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2928</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/marcuswestin/store.js/">store.js</a>

「最新閲覧履歴」機能などを作成するのに便利なライブラリです。
ブラウザ側にデータを保存するには、Cookieを使ったりlocalStorageを使用するなど様々な方法がありますがどれも一長一短で、ブラウザによっては実装されていなかったりといろいろ面倒です。
store.jsはその辺をよきに計らってくれて、また対応ブラウザが多いので手軽に使用することができます。

使い方は非常にシンプルです。
store.jsを読み込んで、あとはset,get,removeメソッドを使ってデータを操作します。

[javascript]
store.set('username', 'hogehoge'); //データ登録
store.get('username'); //データ取得
store.remove('username'); //データ削除
[/javascript]

オブジェクトや配列も保存することができます。
[javascript]
store.set('user', { name: 'marcus', likes: 'javascript' }); //オブジェクトの保存
store.set('tags', ['javascript', 'localStorage', 'store.js']); //配列の保存
[/javascript]

<a href="http://shimz.me/libs/store.js/example/test1.html">example</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2928</wp:post_id>
		<wp:post_date>2013-07-09 13:28:25</wp:post_date>
		<wp:post_date_gmt>2013-07-09 04:28:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e3%81%ab%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e4%bf%9d%e5%ad%98%e3%81%97%e3%81%9f%e3%81%84%e3%81%a8%e3%81%8d%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%aa%e3%80%8cstore-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】タイムゾーンマップを作成しました。</title>
		<link>http://shimz.me/blog/d3-js/2930</link>
		<pubDate>Thu, 11 Jul 2013 00:24:12 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2930</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/geo_example2/timezones/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/timezonemap.jpg" alt="timezonemap" width="590" height="357" class="aligncenter size-full wp-image-2931" /></a>

<a href="http://shimz.me/example/d3js/geo_example2/timezones/">example</a>

タイムゾーン情報を含んだKMLデータを公開してくれている方がいたので、そちらを利用させてもらってタイムゾーンマップを作成してみました。
標準時に対する時差がプラスになるかマイナスになるかで色分けしてみましたが、グラデーションで表現するより、もっとはっきり色分けした方が分かり易かったかもしれません。あと、表示されるまでちょっと時間がかかります。

<a href="https://groups.google.com/forum/#!msg/kml-support-getting-started/9kTmmb8MZE8/WAmB11LMutIJ">タイムゾーンデータ</a>

データセット作成の手順は以下となります。
<ol>
	<li>上記KMLをQuantum GISに読み込み。</li>
	<li>データサイズが大きかったのでジオメトリツールを使って簡素化しました。</li>
	<li>GeoJSONに変換してエクスポート。</li>
	<li>さらにGeoJSONをTopoJSONに変換。</li>
</ol>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
[javascript]
d3.json(&quot;timezones.topojson&quot;, function(json) {
	d3main(json);
});


function d3main(json){
	var width = 960;
	var height = 600;
	
	var svg = d3.select(&quot;svg&quot;)
		.attr(&quot;width&quot;, width)
		.attr(&quot;height&quot;, height);
	
	var mapGroup = svg.append('g')
		.attr(&quot;transform&quot;, &quot;translate (&quot; + [0, 100] + &quot;)&quot; );

	//投影法設定
	var projection = d3.geo.equirectangular()
		.scale(153)
		.rotate([0,0,0])
		.precision(.1);

	//パスジェネレーター
	var path = d3.geo.path().projection(projection);

	//カラースケール
	var landColor = d3.scale.linear().domain([-10,   0,  11]).range([&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;]);

	//地図追加  
	var map =  mapGroup.append(&quot;svg:g&quot;)
		.selectAll(&quot;path&quot;)
		.data(topojson.object(json, json.objects.timezones).geometries)
		.enter()
		.append(&quot;svg:path&quot;)
		.attr({
			&quot;d&quot;: function(d){ return path(d) },
			&quot;fill&quot;: function(d){
				return landColor(parseFloat(d.properties.Name.match(/.\d{1,2}|0/)[0]) ); //Nameプロパティから数値だけ抜き出して適用
				},
			&quot;fill-opacity&quot;: 1,
			&quot;stroke&quot;: &quot;black&quot;
		})
		.append('title')
		.text(function(d){ return d.properties.Name});
		
	//ラベル用マージン
	var lableMargin = {
		left:50,
		top:50
	}

	//ラベル作成    
	var rectSize = 10;
	var rect = svg.selectAll('rect')
	.data(d3.range(-10, 10))
	.enter()
	.append('rect')
	.attr({
		x:function(d, i){ return i * rectSize + lableMargin.left},
		y:lableMargin.top,
		width:rectSize,
		height:rectSize,
		fill:function(d){ return landColor(d) }
	});
		
	var xAxis = d3.svg.axis().scale( d3.scale.linear().domain([-10, 10]).range([0, 20*rectSize])).tickValues([-10, 0, 10]);

	var AxisGroup = svg.append('g')
	.attr({
		class:&quot;axis&quot;,
		transform:&quot;translate (&quot; + [lableMargin.left, lableMargin.top+rectSize+2] + &quot;)&quot;
	})
	.call(xAxis);
}
[/javascript]


【余談】
ロシアって同じ国のなかでも、東と西で５時間も時差があるんですね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2930</wp:post_id>
		<wp:post_date>2013-07-11 09:24:12</wp:post_date>
		<wp:post_date_gmt>2013-07-11 00:24:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%bf%e3%82%a4%e3%83%a0%e3%82%be%e3%83%bc%e3%83%b3%e3%83%9e%e3%83%83%e3%83%97%e3%82%92%e4%bd%9c%e6%88%90%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="map"><![CDATA[Map/GIS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2931]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>agatsuma.survive 03(git会)に参加しました。</title>
		<link>http://shimz.me/blog/other/2933</link>
		<pubDate>Sun, 14 Jul 2013 11:02:49 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2933</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://atnd.org/events/40434">agatsuma.survive#03(git会)</a>

git会参加してきました。

一人で作業をしているとどうしてもバージョン管理などがいい加減になり、「とりあえずDropBoxに突っ込んどけばいいかなー。差分とれるし、簡易webサーバーにもなるし」みたいな感じで済ませてしまうことが多く、たまにgithubなどを使ってもバックアップを上げるぐらいにしかつかっておらず、おまけに殆どGUI(GitHub for Windows)を使うぐらいだったので、そろそろちゃんとコマンド覚えたいと思っていた所なので助かりました。

全体としては、普段からCUIを使い慣れているエンジニアの方と、あまりCUIに慣れていないデザーナーの方が混在していたのでセミナーの進め方や時間配分が難しそうでしたね。最後の方はどうしても駆け足になってしまいました。

私個人としては、実際に手を動かして作業すると解りやすく、また色々な方のgitやgithubの活用の方法を聞けたのがとても勉強になりました。
個人で勉強していても"活用のしかた"というのはなかなか理解するのが大変で、こういったイベントで話が聞けるのは大変助かります。

まぁ、とはいってもこういうのは最終的には慣れなので、今後は「githubに上げるほどのものでもないよなー」なんて思わず、とりあえず書いたコードはなるべく練習もかねてgithubにアップしてこうかと思います。
とりあえず、忘れないうちに一つ上げてみました。

<a href="https://github.com/shimizu/SimpleWebServer">shimizu/SimpleWebServer</a>

あとは、ひたすら継続あるのみですかね。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2933</wp:post_id>
		<wp:post_date>2013-07-14 20:02:49</wp:post_date>
		<wp:post_date_gmt>2013-07-14 11:02:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>agatsuma-survive03git%e4%bc%9a%e3%81%ab%e8%a1%8c%e3%81%a3%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>182</wp:comment_id>
			<wp:comment_author><![CDATA[【D3.js】今まで作成したexampleをGitHubに公開しました。 | GUNMA GIS GEEK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shimz.me/blog/d3-js/2958</wp:comment_author_url>
			<wp:comment_author_IP>133.242.49.153</wp:comment_author_IP>
			<wp:comment_date>2013-07-22 13:00:06</wp:comment_date>
			<wp:comment_date_gmt>2013-07-22 04:00:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 「せっかく、勉強会にもいったことだし積極的にgitを使っていこう！」第二弾。 とりあえず、いままで作成したD3のサンプルコードをgithubに上げてみました。 アップロードするにあたっ [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374465606.295291900634765625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:40:{s:15:"comment_post_ID";i:2933;s:14:"comment_author";s:89:"【D3.js】今まで作成したexampleをGitHubに公開しました。 | GUNMA GIS GEEK";s:18:"comment_author_url";s:31:"http://shimz.me/blog/d3-js/2958";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:634:"[...] 「せっかく、勉強会にもいったことだし積極的にgitを使っていこう！」第二弾。 とりあえず、いままで作成したD3のサンプルコードをgithubに上げてみました。 アップロードするにあたって、多少コードを整理したりしてみたのですが、初めの頃に書いたコードとか割と乱雑なものが混じってます。 なお、d3.csvやd3.jsonで外部ファイルを読み込んでるコードはローカルではブラウザのセキュリティ機能によって実行できません。 webサーバー上で実行してください。 [...]";s:12:"comment_type";s:8:"pingback";s:7:"user_ip";s:14:"133.242.49.153";s:10:"user_agent";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:8:"referrer";N;s:4:"blog";s:20:"http://shimz.me/blog";s:9:"blog_lang";s:2:"ja";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://shimz.me/blog/other/2933";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"SERVER_SOFTWARE";s:22:"Apache/2.2.15 (CentOS)";s:11:"REQUEST_URI";s:16:"/blog/xmlrpc.php";s:15:"HTTP_USER_AGENT";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:9:"HTTP_HOST";s:8:"shimz.me";s:11:"HTTP_ACCEPT";s:3:"*/*";s:12:"CONTENT_TYPE";s:8:"text/xml";s:20:"HTTP_ACCEPT_ENCODING";s:29:"deflate;q=1.0, compress;q=0.5";s:14:"CONTENT_LENGTH";s:3:"263";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:69:"<address>Apache/2.2.15 (CentOS) Server at shimz.me Port 80</address>
";s:11:"SERVER_NAME";s:8:"shimz.me";s:11:"SERVER_ADDR";s:14:"133.242.49.153";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"133.242.49.153";s:13:"DOCUMENT_ROOT";s:13:"/var/www/html";s:12:"SERVER_ADMIN";s:14:"root@localhost";s:15:"SCRIPT_FILENAME";s:29:"/var/www/html/blog/xmlrpc.php";s:11:"REMOTE_PORT";s:5:"50324";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:16:"/blog/xmlrpc.php";s:8:"PHP_SELF";s:16:"/blog/xmlrpc.php";s:12:"REQUEST_TIME";s:10:"1374465603";s:25:"comment_post_modified_gmt";s:19:"2013-07-14 23:13:53";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374465651.835525989532470703125;s:7:"message";s:53:"blogadmin がコメントの状態を trash に変更";s:5:"event";s:12:"status-trash";s:4:"user";s:9:"blogadmin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1374465651]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>難しすぎて理解できなかった参考書を無駄にしないためのライフハック</title>
		<link>http://shimz.me/blog/other/2935</link>
		<pubDate>Mon, 15 Jul 2013 10:18:19 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2935</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/07/1137814689-10936a.jpg" alt="1137814689-10936a" width="480" height="356" class="aligncenter size-full wp-image-2937" />

<a href="http://bugrammer.hateblo.jp/entry/2013/07/14/222458">本を読むコツとしての「わからないところは飛ばす」</a>

本の読み方って人それぞれ違って面白いですね。

私もよく背伸びをして難しい参考書を買ってみたものの、内容の８割も理解できずに「何のために買ったのか……」と思うことが多々あります。

そんな時、買った本を無駄にしないために行うことがあります。それは……

<blockquote>本のタイトルと目次をメモってEvernoteに入れる</blockquote>

これだけです。
とにかく、目次だけ頭に入れておく。
その後に、わからない部分は読み飛ばしたり、ざっと眺めて読書を終わります。

こうしておくと内容は理解できずとも、頭の中にポインタだけ記録され他の学習をしているときに「あれっ？　これってあの本に書いてあったことと関係あるんじゃないかな？」とか引っかてくることがあるんです。

そういう引っかかりを何度か体験しているうちに、パズルがガチッと組み合うように結びついて「なんか今分かった気がする！　今読めば理解できるかも！」という時期が来たりすることが結構あります。

この感覚うまく説明できなくてあんまり共感してもらえなかったりするんですが、もし、興味があったら試してみてください。

(でも技術書とか以外ではこの方法あんまり役に立たないかもしれません)

【余談】
メモの保存先はEvernoteでなくてもいいのですが、Chromeの<a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=ja">Evernoteエクステンション</a>を入れておくとGoogleで検索したときにメモが引っかかってきたりして便利です。
暇な時間に、ため込んだ目次メモを読み返すとさらに効果が高いような気がします。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2935</wp:post_id>
		<wp:post_date>2013-07-15 19:18:19</wp:post_date>
		<wp:post_date_gmt>2013-07-15 10:18:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9b%a3%e3%81%97%e3%81%99%e3%81%8e%e3%81%a6%e7%90%86%e8%a7%a3%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e5%8f%82%e8%80%83%e6%9b%b8%e3%82%92%e7%84%a1%e9%a7%84%e3%81%ab%e3%81%97%e3%81%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2937]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>D3.jsの最新情報と解説記事を配信「Daily D3」</title>
		<link>http://shimz.me/blog/web/2938</link>
		<pubDate>Tue, 16 Jul 2013 00:22:47 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2938</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://daily.d3js.info/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/dailyd3.jpg" alt="dailyd3" width="590" height="307" class="aligncenter size-full wp-image-2939" /></a>

<a href="http://daily.d3js.info/">Daily D3</a>


D3公式サイトや多数の海外ドキュメントなどの翻訳を手掛けていらっしゃる<a href="https://twitter.com/FoD5">@FoD5</a>さんが、D3の最新情報と解説記事を配信するニュースサイトを開始されました。

日本語ドキュメントが少ない中、FoD5さんが翻訳された<a href="http://ja.d3js.info/">D3 wiki日本語版</a>や、<a href="http://ja.d3js.info/alignedleft/tutorials/d3/">スコット・マレイ氏のチュートリアル日本語版</a>は、D3を勉強する際に私も読ませていただき大変参考にさせていただきました。

D3は海外では注目度の高いプロダクトなのですが、日本ではまだまだ知名度が高いとは言えず、D3に関する最新の話題も海外サイトが中心で日本語で情報収集できるサイトはなかなかありません。
それでも最近ではD3に興味を持ってくださるユーザーもちょっとづつ増えてきてはいるみたいなので、是非「Daily D3」でD3の最新情報をチェック！してください。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2938</wp:post_id>
		<wp:post_date>2013-07-16 09:22:47</wp:post_date>
		<wp:post_date_gmt>2013-07-16 00:22:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%81%ae%e6%9c%80%e6%96%b0%e6%83%85%e5%a0%b1%e3%81%a8%e8%a7%a3%e8%aa%ac%e8%a8%98%e4%ba%8b%e3%82%92%e9%85%8d%e4%bf%a1%e3%80%8cdaily-d3%e3%80%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2939]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】サイズの大きなファイルを可視化する（ツリーマップ）</title>
		<link>http://shimz.me/blog/d3-js/2942</link>
		<pubDate>Wed, 17 Jul 2013 02:10:38 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2942</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/treemap/02/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/filelisttreemap.jpg" alt="filelisttreemap" width="582" height="300" class="aligncenter border size-full wp-image-2946" /></a>

<a href="http://shimz.me/example/d3js/treemap/02/">example</a>

以前、<a href="http://shimz.me/blog/d3-js/2755">アクセス流入元をツリーマップで表示してみた</a>ことがあるのですが、今回はファイルリストを可視化してみました。ファイルサイズに比例してブロックが表示されます。ツールチップで実際のファイル名が表示されます。
サイズの大きいファイルは、殆どが地理情報ファイル(geojson)でした。
&nbsp;
&nbsp;
<h2>データセットの作成</h2>
<hr></hr>
ぶっちゃけデータを作成するのが一番メンドウです。
D3のtreemapレイアウトを使用するには、データセットを以下の形式のオブジェクトにする必要があります。
[javascript]
{
	name:'root',
	children:[
		name:'child-dir1'
		'hoge1.txt',
		'hoge2.txt',
		children:[
			name:'child-dir2',
			'hello1.txt',
			'hello2.txt'
		]
	},
	'file1.txt',
	'file2.txt'
}
[/javascript]

手動で作成するのは大変なのでファイル一覧を出力するスクリプトをnode.jsで書きました。

<a href="http://shimz.me/blog/node-js/2944">ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する</a>

上記スクリプトをサーバーの普段サンプルコードを置いているディレクトリで実行して出力したものが下記のデータセットとなります。

<a href="http://shimz.me/example/d3js/treemap/02/files.json">files.json</a>

このデータ形式(オブジェクト)は、D3の様々なレイアウトで使用されるので変換スクリプトを作っておくとデータセットの作成が楽になります。


&nbsp;
&nbsp;
<h2>ツリーマップの表示</h2>
<hr></hr>
<a href="http://shimz.me/blog/d3-js/2755">前回行った内容</a>と特に変わりがないのでポイントだけ。

表示するサイズ(width,height)を指定してtreemapジェネレーターオブジェクトを作成します。
[javascript]
var treemap = d3.layout.treemap().size([w, h]);
[/javascript]

作成したデータセット(json)を読み込み、treemapジェネレーターに渡します。valueメソッドでブロックのサイズを決定するデータ要素を指定し、nodesメソッドでデータセットを読み込みます。
[javascript]
d3.json('files.json', function(data){
	var treemapData = treemap.value(function(d){  return d.size}　).nodes(data);
	console.log(treemapData);
});
[/javascript]

treemapジェネレーターの戻り値は、元のデータセットにx(x座標)、y(y座標)、dx(幅)、dy(高さ)プロパティが付加されたものが返ります。
後はこのデータを使用してrect要素を描画するとツリーマップが表示されます。


&nbsp;
&nbsp;
 【余談】
データ数が多いとラベルが重なって見難くなります。今回は2MB以下のファイルはラベルを表示しないことで回避しました。
もっと、上手い見せ方ができると良いのですが。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2942</wp:post_id>
		<wp:post_date>2013-07-17 11:10:38</wp:post_date>
		<wp:post_date_gmt>2013-07-17 02:10:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e3%82%b5%e3%82%a4%e3%82%ba%e3%81%ae%e5%a4%a7%e3%81%8d%e3%81%aa%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e5%8f%af%e8%a6%96%e5%8c%96%e3%81%99%e3%82%8b%ef%bc%88%e3%83%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2946]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する</title>
		<link>http://shimz.me/blog/node-js/2944</link>
		<pubDate>Tue, 16 Jul 2013 12:27:13 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2944</guid>
		<description></description>
		<content:encoded><![CDATA[node.jsを使ってカレントディレクトリ以下を再帰的にたどりファイル一覧を出力します。（引数で対象となるディレクトリを指定できます）
ファイル名と共にファイルサイズも出力しています。
<a href="https://gist.github.com/shimizu/7bd8c02c3d49492d1350">shimizu / filelist2json.js</a>

[javascript title="filelist2json.js"]
var fs = require(&quot;fs&quot;)
	, path = require(&quot;path&quot;)
	, dir = process.argv[2] || '.'; //引数が無いときはカレントディレクトリを対象とする


var walk = function(p, callback){
	var results = [];
		
	fs.readdir(p, function (err, files) {
		if (err) throw err;

		var pending = files.length;	
		if (!pending) return callback(null, results); //全てのファイル取得が終わったらコールバックを呼び出す
		
		files.map(function (file) { //リスト取得
			return path.join(p, file);
		}).filter(function (file) {
			if(fs.statSync(file).isDirectory()) walk(file, function(err, res) { //ディレクトリだったら再帰
				results.push({name:path.basename(file), children:res}); //子ディレクトリをchildrenインデックス配下に保存
				if (!--pending) callback(null, results);
			 });
			return fs.statSync(file).isFile();
		}).forEach(function (file) { //ファイル名を保存
			var stat = fs.statSync(file);
			results.push({file:path.basename(file), size:stat.size});
			if (!--pending) callback(null, results);
		});
		
	});
}

walk(dir, function(err, results) {
	if (err) throw err;
	var data = {name:'root', children:results};
	console.log(JSON.stringify(data)); //一覧出力
});
[/javascript]

実行

[shell]
$ node filelist2json &gt; data.json
[/shell]

出力内容は以下のようになります。
[javascript]
{
	name:'root',
	children:[
		name:'child_dir1'
		{file:'hoge1.txt', size:1111},
		{file:'hoge2.txt', size:2222},
		children:[
			name:'child_dir2',
			{file:'hello1.txt', size:3333},
			{file:'hello2.txt', size:4444}
		]
	},
	{file:'file1.txt', size:88888},
	{file:'file2.txt', size:33333}
}
[/javascript]

D3.jsに渡して使うために書いたスクリプトなのでちょっと特殊な形で出力しています。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2944</wp:post_id>
		<wp:post_date>2013-07-16 21:27:13</wp:post_date>
		<wp:post_date_gmt>2013-07-16 12:27:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js%e3%83%87%e3%82%a3%e3%83%ac%e3%82%af%e3%83%88%e3%83%aa%e3%82%92%e5%86%8d%e5%b8%b0%e7%9a%84%e3%81%ab%e3%81%9f%e3%81%a9%e3%81%a3%e3%81%a6%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e4%b8%80%e8%a6%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>178</wp:comment_id>
			<wp:comment_author><![CDATA[【D3.js】サイズの大きなファイルを可視化する（ツリーマップ） | GUNMA GIS GEEK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shimz.me/blog/d3-js/2942</wp:comment_author_url>
			<wp:comment_author_IP>133.242.49.153</wp:comment_author_IP>
			<wp:comment_date>2013-07-17 11:13:44</wp:comment_date>
			<wp:comment_date_gmt>2013-07-17 02:13:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Older : [node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する  [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374027224.4456501007080078125;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:40:{s:15:"comment_post_ID";i:2944;s:14:"comment_author";s:103:"【D3.js】サイズの大きなファイルを可視化する（ツリーマップ） | GUNMA GIS GEEK";s:18:"comment_author_url";s:31:"http://shimz.me/blog/d3-js/2942";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:120:"[...] Older : [node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する [...]";s:12:"comment_type";s:8:"pingback";s:7:"user_ip";s:14:"133.242.49.153";s:10:"user_agent";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:8:"referrer";N;s:4:"blog";s:20:"http://shimz.me/blog";s:9:"blog_lang";s:2:"ja";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:33:"http://shimz.me/blog/node-js/2944";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"SERVER_SOFTWARE";s:22:"Apache/2.2.15 (CentOS)";s:11:"REQUEST_URI";s:16:"/blog/xmlrpc.php";s:15:"HTTP_USER_AGENT";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:9:"HTTP_HOST";s:8:"shimz.me";s:11:"HTTP_ACCEPT";s:3:"*/*";s:12:"CONTENT_TYPE";s:8:"text/xml";s:20:"HTTP_ACCEPT_ENCODING";s:29:"deflate;q=1.0, compress;q=0.5";s:14:"CONTENT_LENGTH";s:3:"265";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:69:"<address>Apache/2.2.15 (CentOS) Server at shimz.me Port 80</address>
";s:11:"SERVER_NAME";s:8:"shimz.me";s:11:"SERVER_ADDR";s:14:"133.242.49.153";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"133.242.49.153";s:13:"DOCUMENT_ROOT";s:13:"/var/www/html";s:12:"SERVER_ADMIN";s:14:"root@localhost";s:15:"SCRIPT_FILENAME";s:29:"/var/www/html/blog/xmlrpc.php";s:11:"REMOTE_PORT";s:5:"49162";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:16:"/blog/xmlrpc.php";s:8:"PHP_SELF";s:16:"/blog/xmlrpc.php";s:12:"REQUEST_TIME";s:10:"1374027221";s:25:"comment_post_modified_gmt";s:19:"2013-07-16 12:46:03";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1374027303]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【node.js+D3.js】サーバーサイドD3</title>
		<link>http://shimz.me/blog/node-js/2949</link>
		<pubDate>Thu, 18 Jul 2013 01:09:41 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2949</guid>
		<description></description>
		<content:encoded><![CDATA[D3にはnode.js用のモジュールがあるのでサーバーサイドで使用するのも簡単です。npmからインストールできます。

[shell]
$ npm install d3
[/shell]

残念なことにwindowsではjake(JavaScript build tool)がうまくインストールされないらしくビルドの途中でエラーを吐いてとまります。

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
内部ではjsdomを使ってDOM操作を行っています。基本的にはフロントエンドでD3を使用するのと変わりません。
[javascript title="testd3.js"]
var d3 = require(&quot;d3&quot;);
var svg = d3.select(&quot;body&quot;)
	.append(&quot;svg&quot;)
	.attr({
		&quot;xmlns&quot;: &quot;http://www.w3.org/2000/svg&quot;,
		&quot;width&quot;: 750,
		&quot;height&quot;: 750
	});
  
  svg.append('circle')
	.attr({
		cx:100,
		cy:100,
		r:80,
		fill:'red'
	})
  

console.log(d3.select('body').node().innerHTML); //JSDOMから出力
[/javascript]

使い方

[shell]
$ node testd3.js &gt; test.svg
[/shell]

下記SVGファイルが作成されます

[html]
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;750&quot; height=&quot;750&quot;&gt;
&lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;80&quot; fill=&quot;red&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
[/html]

D3の強力なGeo Projections機能などを使ってサーバーサイドで地図やグラフを生成し出力することができます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2949</wp:post_id>
		<wp:post_date>2013-07-18 10:09:41</wp:post_date>
		<wp:post_date_gmt>2013-07-18 01:09:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90node-jsd3-js%e3%80%91%e3%82%b5%e3%83%bc%e3%83%90%e3%83%bc%e3%82%b5%e3%82%a4%e3%83%89d3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>モダンなWeb開発環境としてのCodePen</title>
		<link>http://shimz.me/blog/web/2952</link>
		<pubDate>Sun, 21 Jul 2013 12:49:33 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2952</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codepen.io/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/Made-For-Codepen.png" alt="Made-For-Codepen" width="358" height="179" class="aligncenter size-full wp-image-2953" /></a>

<a href="http://codepen.io/">CodePen</a>

普段は愚直にHTMLやCSS、Javascriptを書いているわけですが、できることならもっとモダンな開発環境に慣れたいと思ってます。
しかし、習得コストというものはあるわけで……もっと、気軽に手を出せたらいいなーと思っていたところ、Web上でHTML+CSS+Javascriptで作品を作成できるCodePenでCoffeeScriptなどが使えること知りました（遅い）
Githubのアカウントで利用できるので、興味あるかたは学習用に使ってみてはいかがでしょう。

<strong>CodePenエディタ画面</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepen1.png" alt="codepen1" width="590" height="279" class="aligncenter size-full wp-image-2954" />


<strong>HTML編集タブ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepenHTML.png" alt="codepenHTML" width="455" height="299" class="size-full wp-image-2955" />
HTML以外の、<a href="https://github.com/uniba/hamldoc_ja">Haml</a>,<a href="http://blog.2310.net/archives/6">Markdown</a>,<a href="https://github.com/yterajima/slim/blob/README_ja/README.md">Slim</a>などのテンプレート言語使ってコードを記述できます。

<strong>CSS編集タブ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepenCSS.png" alt="codepenCSS" width="455" height="299" class="size-full wp-image-2956" />
<a href="http://less-ja.studiomohawk.com/">LESS</a>,<a href="http://hail2u.net/documents/sass-tutorial.html">SCSS</a>,<a href="http://hail2u.net/documents/sass-tutorial.html">Sass</a>などのCSSメタ言語を利用できます。

<strong>Javascript編集タブ</strong>
<img src="http://shimz.me/blog/wp-content/uploads/2013/07/codepenJS.png" alt="codepenJS" width="455" height="299" class="size-full wp-image-2957" />
CoffeeScriptが使えます。他、著名なライブラリや外部<a href="https://sites.google.com/site/sappariwiki/coffeescript">Javascript</a>ファイルを読み込むことができます。

作成したコードはgist.githubに保存できます。

【関連】
<a href="http://shimz.me/blog/web/2860">プログラミング学習の新しいかたち？！チャットをしながらライブコーディングや共同プログラミングができるCodePen Pro</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2952</wp:post_id>
		<wp:post_date>2013-07-21 21:49:33</wp:post_date>
		<wp:post_date_gmt>2013-07-21 12:49:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%a2%e3%83%80%e3%83%b3%e3%81%aaweb%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%e3%81%a8%e3%81%97%e3%81%a6%e3%81%aecodepen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2953]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】今まで作成したexampleをGitHubに公開しました。</title>
		<link>http://shimz.me/blog/d3-js/2958</link>
		<pubDate>Mon, 22 Jul 2013 04:00:02 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2958</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://shimz.me/blog/wp-content/uploads/2013/07/Octocat.jpg" alt="Octocat" width="300" height="249" class="aligncenter size-full wp-image-2959" />

<a href="https://github.com/shimizu/d3example">shimizu/d3example</a>

「せっかく、<a href="http://shimz.me/blog/other/2933">勉強会</a>にも行ったことだし積極的にgitを使っていこう！」第二弾。とりあえず、いままで作成したD3のサンプルコードをgithubに上げてみました。
アップロードするにあたって、多少コードを整理したりしてみたのですが、初めの頃に書いたコードとか割と乱雑なものが混じってます。
なお、d3.csvやd3.jsonで外部ファイルを読み込んでるコードはローカルではブラウザのセキュリティ機能によって実行できません。
webサーバー上で実行してください。

無いときは↓をどうぞ。
<a href="https://github.com/shimizu/SimpleWebServer">SimpleWebServer</a>

【余談】
さくらクラウドからだとSSH使わんとアップロードできないみたいだったので、下記記事を参考にさせていただきました。

<a href="http://design1.chu.jp/setucocms-pjt/?p=580">初心者Git日記その五～GitHubにSSH公開鍵登録～
</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2958</wp:post_id>
		<wp:post_date>2013-07-22 13:00:02</wp:post_date>
		<wp:post_date_gmt>2013-07-22 04:00:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91%e4%bb%8a%e3%81%be%e3%81%a7%e4%bd%9c%e6%88%90%e3%81%97%e3%81%9fexample%e3%82%92github%e3%81%ab%e5%85%ac%e9%96%8b%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2959]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【D3.js】NHKの参議院選挙サイトで使用されていた謎グラフ(Chord graph)的なものを作ってみる。</title>
		<link>http://shimz.me/blog/d3-js/2960</link>
		<pubDate>Tue, 23 Jul 2013 01:55:32 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2960</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://shimz.me/example/d3js/Chord/"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/chordgraph.jpg" alt="chordgraph" width="500" height="492" class="aligncenter size-full wp-image-2961" /></a>

<a href="http://shimz.me/example/d3js/Chord/">example</a>

上記のような図を「Chord graph(コードグラフ)」というらしいです。日本語に直すと弦グラフですかね？D3.jsにはChordレイアウトが用意されているので作成するのは比較的簡単です。頑張れば<a href="http://www3.nhk.or.jp/senkyo/#">NHKの参議院選挙サイト</a>で使われていたカッコイイ！グラフも作れるかもしれません。

<a href="http://shimz.me/blog/wp-content/uploads/2013/07/test000002.jpg"><img src="http://shimz.me/blog/wp-content/uploads/2013/07/test000002-150x150.jpg" alt="test000002" width="150" height="150" class="aligncenter size-thumbnail wp-image-2962" /></a>

&nbsp;
&nbsp;
<h2>サンプルコード</h2>
<hr></hr>
[javascript]
var svg = d3.select(&quot;svg&quot;)

//データセットの作成
dataLength = 12; 
var data = d3.range(dataLength).map(function() {
	return d3.range(dataLength).map(function(){ return Math.floor(Math.random() *dataLength) })
});
//console.log(data);

//カラースケール
var color = d3.scale.category20();

//chordジェネレータ生成
var chord = d3.layout.chord()
	.padding(0.1)//データ束間の隙間
	.matrix(data);

//chord全体
var chordGroup = svg.append('g')
	.attr(&quot;transform&quot;, &quot;translate(&quot;+[400, 400]+&quot;)&quot; );

//外円
chordGroup.selectAll(&quot;path.groups&quot;)
	.data(chord.groups)
	.enter()
	.append(&quot;path&quot;)
	.attr({
		&quot;fill&quot;: function(d) { return color(d.index); },
		&quot;stroke&quot;: function(d) { return color(d.index); },
		&quot;d&quot;: d3.svg.arc().innerRadius(350).outerRadius(400),
	});


//データ間のリンク
chordGroup.selectAll(&quot;path.chord&quot;)
	.data(chord.chords)
	.enter()
	.append(&quot;path&quot;)
	.attr({
		&quot;fill&quot;: function(d) { return color(d.source.index); },
		&quot;d&quot;: d3.svg.chord().radius(400),
		&quot;opacity&quot;: 0.5
	})
	.on('mouseover', function(){
		d3.select(this).attr({
			'fill': &quot;red&quot;,
			&quot;opacity&quot;: 1
		});
	})
	.on('mouseout', function(){
		d3.select(this).attr({
			'fill':  function(d) { return color(d.source.index); },
			&quot;opacity&quot;: 0.5
		});
	});

[/javascript]

「データの関連性や相関関係を表すのに適した図」らしいのですが……ぶっちゃけこのレイアウトってそんなに見やすくはないと思うんですよねー。

<blockquote>目的を頭に置き続けましょう。それが試金石となり、導きの光となります。<strong>円形のレイアウトという誘惑</strong>の言葉や、追加データの誘惑に、「できるのだから」とささやく偽預言者に惑わされそうになったら、目的を思い出しましょう。これらは旅の障害です。
<br>
<a href="http://www.oreilly.co.jp/books/9784873115429/">デザイニング・データビジュアライゼーション</a>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2960</wp:post_id>
		<wp:post_date>2013-07-23 10:55:32</wp:post_date>
		<wp:post_date_gmt>2013-07-23 01:55:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%90d3-js%e3%80%91nhk%e3%81%ae%e5%8f%82%e8%ad%b0%e9%99%a2%e9%81%b8%e6%8c%99%e3%82%b5%e3%82%a4%e3%83%88%e3%81%a7%e4%bd%bf%e7%94%a8%e3%81%95%e3%82%8c%e3%81%a6%e3%81%84%e3%81%9f%e8%ac%8e%e3%82%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2961]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>184</wp:comment_id>
			<wp:comment_author><![CDATA[【D3.js】NHKの参議院選挙サイトで使用されていた謎グラフ(Chord graph)的なものを作ってみる。 | GUNMA GIS GEEK | test]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.t-alab.com/test2/2013/07/24/bookmarks-of-20130751-3/</wp:comment_author_url>
			<wp:comment_author_IP>210.172.144.128</wp:comment_author_IP>
			<wp:comment_date>2013-07-24 00:35:58</wp:comment_date>
			<wp:comment_date_gmt>2013-07-23 15:35:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (続きを見る&#8230;) [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1374621681]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374593758.916593074798583984375;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:40:{s:15:"comment_post_ID";i:2960;s:14:"comment_author";s:147:"【D3.js】NHKの参議院選挙サイトで使用されていた謎グラフ(Chord graph)的なものを作ってみる。 | GUNMA GIS GEEK | test";s:18:"comment_author_url";s:64:"http://blog.t-alab.com/test2/2013/07/24/bookmarks-of-20130751-3/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:36:"[...] (続きを見る&#8230;) [...]";s:12:"comment_type";s:8:"pingback";s:7:"user_ip";s:15:"210.172.144.128";s:10:"user_agent";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:8:"referrer";N;s:4:"blog";s:20:"http://shimz.me/blog";s:9:"blog_lang";s:2:"ja";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://shimz.me/blog/d3-js/2960";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"SERVER_SOFTWARE";s:22:"Apache/2.2.15 (CentOS)";s:11:"REQUEST_URI";s:16:"/blog/xmlrpc.php";s:15:"HTTP_USER_AGENT";s:50:"The Incutio XML-RPC PHP Library -- WordPress/3.5.2";s:9:"HTTP_HOST";s:8:"shimz.me";s:11:"HTTP_ACCEPT";s:3:"*/*";s:12:"CONTENT_TYPE";s:8:"text/xml";s:20:"HTTP_ACCEPT_ENCODING";s:29:"deflate;q=1.0, compress;q=0.5";s:14:"CONTENT_LENGTH";s:3:"296";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:69:"<address>Apache/2.2.15 (CentOS) Server at shimz.me Port 80</address>
";s:11:"SERVER_NAME";s:8:"shimz.me";s:11:"SERVER_ADDR";s:14:"133.242.49.153";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:15:"210.172.144.128";s:13:"DOCUMENT_ROOT";s:13:"/var/www/html";s:12:"SERVER_ADMIN";s:14:"root@localhost";s:15:"SCRIPT_FILENAME";s:29:"/var/www/html/blog/xmlrpc.php";s:11:"REMOTE_PORT";s:5:"35740";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:16:"/blog/xmlrpc.php";s:8:"PHP_SELF";s:16:"/blog/xmlrpc.php";s:12:"REQUEST_TIME";s:10:"1374593756";s:25:"comment_post_modified_gmt";s:19:"2013-07-23 13:51:07";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>D3.jsとjQueryのセレクションメソッドの違い</title>
		<link>http://shimz.me/blog/d3-js/2963</link>
		<pubDate>Wed, 24 Jul 2013 02:36:38 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2963</guid>
		<description></description>
		<content:encoded><![CDATA[本日は小ネタ。
D3.jsのセレクションは、ほぼjQueryのセレクションと似た動作をしますが一部違う部分もあります。
jQueryのセレクションメソッドは基本this(選択した要素のjQueryオブジェクト)を戻り値として返しますが、D3ではappendメソッドを使用した場合、追加された要素のD3セレクションオブジェクトが戻り値となります。

[javascript title="D3例"]
d3.select('body').append('div').append('h1')
[/javascript]
上記スクリプトの実行結果は以下となります。
[html title="D3実行結果"]
&lt;body&gt;
	&lt;div&gt;
		&lt;h1&gt;&lt;/h1&gt;
	&lt;/div&gt;
&lt;/body&gt;
[/html]

jQueryで無理やり似た構文を書いた場合の実行結果は以下となります。
[javascript title="jQuery例１"]
$(&quot;body&quot;).append(&quot;&lt;div&gt;&lt;/div&gt;&quot;).append('&lt;h1&gt;&lt;/h1&gt;')
[/javascript]

[html title="jQuery実行結果１"]
&lt;body&gt;
	&lt;div&gt;&lt;/div&gt;
	&lt;h1&gt;&lt;/h1&gt;
&lt;/body&gt;
[/html]
jQueryではセレクション後のメソッドチェーンは、基本メソッドの戻り値が変わることなくセレクタで選択した要素に対して適用される(ここではbody要素)のでD3とは動作が異なります。
D3と同じ結果を求めるには、jQueryでは以下のように入れ子にする必要があります。
[javascript title="jQuery例２"]
$(&quot;body&quot;).append( $('&lt;div&gt;').append( $('&lt;h1&gt;') ) )
[/javascript]

[html title="jQuery実行結果２"]
&lt;body&gt;
	&lt;div&gt;
		&lt;h1&gt;&lt;/h1&gt;
	&lt;/div&gt;
&lt;/body&gt;
[/html]

&nbsp;
&nbsp;
<h2>詳細</h2>
<hr></hr>
d3セレクションのstyleメソッドやattrメソッドで要素を操作する場合、メソッドチェーンの途中で要素が追加(append)されるとその後に実行されるstyleメソッド等の適用先が変わるので注意が必要です。
[javascript]
d3.select('body') //body要素を選択
	.style('background-color', 'black') //body要素にスタイルを適用
	.append('div') //div要素を追加、divセレクションを返す。
	.style('background-color', 'blue') //div要素にスタイルを適用
	.append('h1') //h1要素を追加、h1セレクションを返す
	.style('background-color', 'red') //h1要素にスタイルを適用
[/javascript]

また、最終的な戻り値も最後にappendされた要素のセレクションオブジェクトになるので注意してください。

[javascript]
var elm = d3.select('body')
	.append('div')
	.append('h1');

elm.style('color', 'white'); // h1要素にstyleが適用される
[/javascript]

<strong>D3ではメソッドチェーンで実行されるメソッドの順番がかなり重要です</strong>。(jQueryではあまり気にしなくてもよい)
ちゃんと説明できた気がしませんが、D3のこの仕様は非常に重要なので覚えておくとD3への理解が進むと思います。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2963</wp:post_id>
		<wp:post_date>2013-07-24 11:36:38</wp:post_date>
		<wp:post_date_gmt>2013-07-24 02:36:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>d3-js%e3%81%a8jquery%e3%81%ae%e3%82%bb%e3%83%ac%e3%82%af%e3%82%b7%e3%83%a7%e3%83%b3%e3%83%a1%e3%82%bd%e3%83%83%e3%83%89%e3%81%ae%e9%81%95%e3%81%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3087582</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_3181903</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>フレームワークの中身に興味がわいたら、この本がお勧め(しかも、今なら無料)</title>
		<link>http://shimz.me/blog/book/2964</link>
		<pubDate>Wed, 24 Jul 2013 04:12:59 +0000</pubDate>
		<dc:creator>blogadmin</dc:creator>
		<guid isPermaLink="false">http://shimz.me/blog/?p=2964</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.sumyapp.com/2013/07/no-recommend-rails/">今すぐ辞めて欲しい、「Ruby on Rails勉強してます」「CakePHP勉強してます」 | つい全力ツッコミしてしまうエンジニアCEOのブログ | sumyapp</a>

「上から学ぶべきか。下から学ぶべきか。」見解の分かれるところなんでしょうけどね。
個人的には、上から学ぶ方がモチベーションは維持しやすい気はします。必要になったら下のレイヤーの事を学ぶというのも、まっとうな学習法で「今すぐ辞めろ」と糾弾するほどの事ではないかなーと。
ただ、初学者が特定のフレームワークにあまりに依存してしまって、そっから一歩も出ていかないということだとそれはそれで問題であることは確かなんですけどね。


もし、フレームワークの内側を知りたくなったら下記の本がおすすめです。

<a href="http://www.amazon.co.jp/gp/product/4797341815/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797341815&linkCode=as2&tag=toriaezu04b-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4797341815&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=toriaezu04b-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toriaezu04b-22&l=as2&o=9&a=4797341815" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

タイトルからは分かりませんが、「フレームワークを使ってWebアプリを作ろう！」という本ではなくて「Webアプリケーションフレームワークを自作しよう！」という内容の参考書です。
本書の中ではテンプレートエンジン、アプリケーションサーバやO/RマッパーなどをPythonを使って自作します。
それぞれ、シンプルな作りなので実用的か？といわれれば疑問ですが、いわゆるWebアプリケーションフレームワークというものの内側を勉強するとっかかりとしては非常に為になる参考書だと思うのでお勧めです。

作者さんが無料で公開されているので下記で読むことができます。

<a href="https://lindoc.jp/docs/1163">みんなのPython Webアプリ編</a>
(2007年に出版された本なので、使用しているpythonのバージョンがちょっと古いので注意が必要です)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2964</wp:post_id>
		<wp:post_date>2013-07-24 13:12:59</wp:post_date>
		<wp:post_date_gmt>2013-07-24 04:12:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%83%af%e3%83%bc%e3%82%af%e3%81%ae%e4%b8%ad%e8%ba%ab%e3%81%ab%e8%88%88%e5%91%b3%e3%81%8c%e3%82%8f%e3%81%84%e3%81%9f%e3%82%89%e3%80%81%e3%81%93%e3%81%ae%e6%9c%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book"><![CDATA[書籍]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_to_facebook_timeline</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2965]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
